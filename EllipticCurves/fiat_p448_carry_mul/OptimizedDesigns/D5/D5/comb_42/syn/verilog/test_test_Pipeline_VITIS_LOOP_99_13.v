// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_99_13 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add159_1117_1361_reload,
        add159_1117360_reload,
        add159_4359_reload,
        add159_3358_reload,
        add159_2167357_reload,
        add159_1153356_reload,
        add159355_reload,
        arg1_r_7_reload,
        arg1_r_8_reload,
        arg1_r_9_reload,
        arg1_r_10_reload,
        arg1_r_11_reload,
        arg1_r_12_reload,
        arg1_r_13_reload,
        arg1_r_14_reload,
        arg1_r_15_reload,
        arg2_r_7_reload,
        arg2_r_8_reload,
        arg2_r_9_reload,
        arg2_r_10_reload,
        arg2_r_11_reload,
        arg2_r_12_reload,
        arg2_r_13_reload,
        arg2_r_14_reload,
        arg2_r_15_reload,
        arg2_r_6_reload,
        arg2_r_5_reload,
        arg2_r_4_reload,
        arg2_r_3_reload,
        arg2_r_2_reload,
        arg2_r_1_reload,
        add212_6354_out,
        add212_6354_out_ap_vld,
        add212_5353_out,
        add212_5353_out_ap_vld,
        add212_4352_out,
        add212_4352_out_ap_vld,
        add212_3351_out,
        add212_3351_out_ap_vld,
        add212_2350_out,
        add212_2350_out_ap_vld,
        add212_1349_out,
        add212_1349_out_ap_vld,
        add212348_out,
        add212348_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] add159_1117_1361_reload;
input  [63:0] add159_1117360_reload;
input  [63:0] add159_4359_reload;
input  [63:0] add159_3358_reload;
input  [63:0] add159_2167357_reload;
input  [63:0] add159_1153356_reload;
input  [63:0] add159355_reload;
input  [31:0] arg1_r_7_reload;
input  [31:0] arg1_r_8_reload;
input  [31:0] arg1_r_9_reload;
input  [31:0] arg1_r_10_reload;
input  [31:0] arg1_r_11_reload;
input  [31:0] arg1_r_12_reload;
input  [31:0] arg1_r_13_reload;
input  [31:0] arg1_r_14_reload;
input  [31:0] arg1_r_15_reload;
input  [31:0] arg2_r_7_reload;
input  [31:0] arg2_r_8_reload;
input  [31:0] arg2_r_9_reload;
input  [31:0] arg2_r_10_reload;
input  [31:0] arg2_r_11_reload;
input  [31:0] arg2_r_12_reload;
input  [31:0] arg2_r_13_reload;
input  [31:0] arg2_r_14_reload;
input  [31:0] arg2_r_15_reload;
input  [31:0] arg2_r_6_reload;
input  [31:0] arg2_r_5_reload;
input  [31:0] arg2_r_4_reload;
input  [31:0] arg2_r_3_reload;
input  [31:0] arg2_r_2_reload;
input  [31:0] arg2_r_1_reload;
output  [63:0] add212_6354_out;
output   add212_6354_out_ap_vld;
output  [63:0] add212_5353_out;
output   add212_5353_out_ap_vld;
output  [63:0] add212_4352_out;
output   add212_4352_out_ap_vld;
output  [63:0] add212_3351_out;
output   add212_3351_out_ap_vld;
output  [63:0] add212_2350_out;
output   add212_2350_out_ap_vld;
output  [63:0] add212_1349_out;
output   add212_1349_out_ap_vld;
output  [63:0] add212348_out;
output   add212348_out_ap_vld;

reg ap_idle;
reg add212_6354_out_ap_vld;
reg add212_5353_out_ap_vld;
reg add212_4352_out_ap_vld;
reg add212_3351_out_ap_vld;
reg add212_2350_out_ap_vld;
reg add212_1349_out_ap_vld;
reg add212348_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln99_fu_459_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [63:0] arr_fu_112;
wire   [63:0] arr_7_fu_555_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [63:0] arr_1_fu_116;
wire   [63:0] arr_8_fu_581_p2;
reg   [63:0] arr_2_fu_120;
wire   [63:0] arr_9_fu_607_p2;
reg   [63:0] arr_3_fu_124;
wire   [63:0] arr_10_fu_633_p2;
reg   [63:0] arr_4_fu_128;
wire   [63:0] arr_11_fu_659_p2;
reg   [63:0] arr_5_fu_132;
wire   [63:0] arr_12_fu_685_p2;
reg   [63:0] arr_6_fu_136;
wire   [63:0] arr_13_fu_711_p2;
reg   [3:0] k_fu_140;
wire   [3:0] add_ln106_fu_465_p2;
reg   [3:0] i_fu_144;
wire   [3:0] add_ln99_fu_717_p2;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] mul_ln113_fu_383_p0;
wire   [31:0] mul_ln113_fu_383_p1;
wire   [63:0] zext_ln113_fu_524_p1;
wire   [31:0] mul_ln113_1_fu_387_p0;
wire   [31:0] mul_ln113_1_fu_387_p1;
wire   [31:0] mul_ln113_2_fu_391_p0;
wire   [31:0] mul_ln113_2_fu_391_p1;
wire   [31:0] mul_ln113_3_fu_395_p0;
wire   [31:0] mul_ln113_3_fu_395_p1;
wire   [31:0] mul_ln113_4_fu_399_p0;
wire   [31:0] mul_ln113_4_fu_399_p1;
wire   [31:0] mul_ln113_5_fu_403_p0;
wire   [31:0] mul_ln113_5_fu_403_p1;
wire   [31:0] mul_ln113_6_fu_407_p0;
wire   [31:0] mul_ln113_6_fu_407_p1;
wire   [31:0] tmp_s_fu_495_p18;
wire   [31:0] tmp_1_fu_535_p11;
wire   [63:0] mul_ln113_fu_383_p2;
wire   [31:0] tmp_2_fu_561_p11;
wire   [63:0] mul_ln113_1_fu_387_p2;
wire   [31:0] tmp_3_fu_587_p11;
wire   [63:0] mul_ln113_2_fu_391_p2;
wire   [31:0] tmp_4_fu_613_p11;
wire   [63:0] mul_ln113_3_fu_395_p2;
wire   [31:0] tmp_5_fu_639_p11;
wire   [63:0] mul_ln113_4_fu_399_p2;
wire   [31:0] tmp_6_fu_665_p11;
wire   [63:0] mul_ln113_5_fu_403_p2;
wire   [31:0] tmp_7_fu_691_p11;
wire   [63:0] mul_ln113_6_fu_407_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [63:0] mul_ln113_1_fu_387_p00;
wire   [63:0] mul_ln113_2_fu_391_p00;
wire   [63:0] mul_ln113_3_fu_395_p00;
wire   [63:0] mul_ln113_4_fu_399_p00;
wire   [63:0] mul_ln113_5_fu_403_p00;
wire   [63:0] mul_ln113_6_fu_407_p00;
wire   [63:0] mul_ln113_fu_383_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U174(
    .din0(mul_ln113_fu_383_p0),
    .din1(mul_ln113_fu_383_p1),
    .dout(mul_ln113_fu_383_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U175(
    .din0(mul_ln113_1_fu_387_p0),
    .din1(mul_ln113_1_fu_387_p1),
    .dout(mul_ln113_1_fu_387_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U176(
    .din0(mul_ln113_2_fu_391_p0),
    .din1(mul_ln113_2_fu_391_p1),
    .dout(mul_ln113_2_fu_391_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U177(
    .din0(mul_ln113_3_fu_395_p0),
    .din1(mul_ln113_3_fu_395_p1),
    .dout(mul_ln113_3_fu_395_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U178(
    .din0(mul_ln113_4_fu_399_p0),
    .din1(mul_ln113_4_fu_399_p1),
    .dout(mul_ln113_4_fu_399_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U179(
    .din0(mul_ln113_5_fu_403_p0),
    .din1(mul_ln113_5_fu_403_p1),
    .dout(mul_ln113_5_fu_403_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U180(
    .din0(mul_ln113_6_fu_407_p0),
    .din1(mul_ln113_6_fu_407_p1),
    .dout(mul_ln113_6_fu_407_p2)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U181(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(arg1_r_7_reload),
    .din8(arg1_r_8_reload),
    .din9(arg1_r_9_reload),
    .din10(arg1_r_10_reload),
    .din11(arg1_r_11_reload),
    .din12(arg1_r_12_reload),
    .din13(arg1_r_13_reload),
    .din14(arg1_r_14_reload),
    .din15(arg1_r_15_reload),
    .din16(i_fu_144),
    .dout(tmp_s_fu_495_p18)
);

test_mux_9_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_9_4_32_1_1_U182(
    .din0(arg2_r_7_reload),
    .din1(arg2_r_8_reload),
    .din2(arg2_r_9_reload),
    .din3(arg2_r_10_reload),
    .din4(arg2_r_11_reload),
    .din5(arg2_r_12_reload),
    .din6(arg2_r_13_reload),
    .din7(arg2_r_14_reload),
    .din8(arg2_r_15_reload),
    .din9(k_fu_140),
    .dout(tmp_1_fu_535_p11)
);

test_mux_9_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_9_4_32_1_1_U183(
    .din0(arg2_r_6_reload),
    .din1(arg2_r_7_reload),
    .din2(arg2_r_8_reload),
    .din3(arg2_r_9_reload),
    .din4(arg2_r_10_reload),
    .din5(arg2_r_11_reload),
    .din6(arg2_r_12_reload),
    .din7(arg2_r_13_reload),
    .din8(arg2_r_14_reload),
    .din9(k_fu_140),
    .dout(tmp_2_fu_561_p11)
);

test_mux_9_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_9_4_32_1_1_U184(
    .din0(arg2_r_5_reload),
    .din1(arg2_r_6_reload),
    .din2(arg2_r_7_reload),
    .din3(arg2_r_8_reload),
    .din4(arg2_r_9_reload),
    .din5(arg2_r_10_reload),
    .din6(arg2_r_11_reload),
    .din7(arg2_r_12_reload),
    .din8(arg2_r_13_reload),
    .din9(k_fu_140),
    .dout(tmp_3_fu_587_p11)
);

test_mux_9_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_9_4_32_1_1_U185(
    .din0(arg2_r_4_reload),
    .din1(arg2_r_5_reload),
    .din2(arg2_r_6_reload),
    .din3(arg2_r_7_reload),
    .din4(arg2_r_8_reload),
    .din5(arg2_r_9_reload),
    .din6(arg2_r_10_reload),
    .din7(arg2_r_11_reload),
    .din8(arg2_r_12_reload),
    .din9(k_fu_140),
    .dout(tmp_4_fu_613_p11)
);

test_mux_9_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_9_4_32_1_1_U186(
    .din0(arg2_r_3_reload),
    .din1(arg2_r_4_reload),
    .din2(arg2_r_5_reload),
    .din3(arg2_r_6_reload),
    .din4(arg2_r_7_reload),
    .din5(arg2_r_8_reload),
    .din6(arg2_r_9_reload),
    .din7(arg2_r_10_reload),
    .din8(arg2_r_11_reload),
    .din9(k_fu_140),
    .dout(tmp_5_fu_639_p11)
);

test_mux_9_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_9_4_32_1_1_U187(
    .din0(arg2_r_2_reload),
    .din1(arg2_r_3_reload),
    .din2(arg2_r_4_reload),
    .din3(arg2_r_5_reload),
    .din4(arg2_r_6_reload),
    .din5(arg2_r_7_reload),
    .din6(arg2_r_8_reload),
    .din7(arg2_r_9_reload),
    .din8(arg2_r_10_reload),
    .din9(k_fu_140),
    .dout(tmp_6_fu_665_p11)
);

test_mux_9_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_9_4_32_1_1_U188(
    .din0(arg2_r_1_reload),
    .din1(arg2_r_2_reload),
    .din2(arg2_r_3_reload),
    .din3(arg2_r_4_reload),
    .din4(arg2_r_5_reload),
    .din5(arg2_r_6_reload),
    .din6(arg2_r_7_reload),
    .din7(arg2_r_8_reload),
    .din8(arg2_r_9_reload),
    .din9(k_fu_140),
    .dout(tmp_7_fu_691_p11)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_1_fu_116 <= add159_1153356_reload;
        end else if (((icmp_ln99_fu_459_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            arr_1_fu_116 <= arr_8_fu_581_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_2_fu_120 <= add159_2167357_reload;
        end else if (((icmp_ln99_fu_459_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            arr_2_fu_120 <= arr_9_fu_607_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_3_fu_124 <= add159_3358_reload;
        end else if (((icmp_ln99_fu_459_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            arr_3_fu_124 <= arr_10_fu_633_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_4_fu_128 <= add159_4359_reload;
        end else if (((icmp_ln99_fu_459_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            arr_4_fu_128 <= arr_11_fu_659_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_5_fu_132 <= add159_1117360_reload;
        end else if (((icmp_ln99_fu_459_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            arr_5_fu_132 <= arr_12_fu_685_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_6_fu_136 <= add159_1117_1361_reload;
        end else if (((icmp_ln99_fu_459_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            arr_6_fu_136 <= arr_13_fu_711_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_fu_112 <= add159355_reload;
        end else if (((icmp_ln99_fu_459_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            arr_fu_112 <= arr_7_fu_555_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_144 <= 4'd15;
        end else if (((icmp_ln99_fu_459_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_144 <= add_ln99_fu_717_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_fu_140 <= 4'd0;
        end else if (((icmp_ln99_fu_459_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            k_fu_140 <= add_ln106_fu_465_p2;
        end
    end
end

always @ (*) begin
    if (((icmp_ln99_fu_459_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add212348_out_ap_vld = 1'b1;
    end else begin
        add212348_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln99_fu_459_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add212_1349_out_ap_vld = 1'b1;
    end else begin
        add212_1349_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln99_fu_459_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add212_2350_out_ap_vld = 1'b1;
    end else begin
        add212_2350_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln99_fu_459_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add212_3351_out_ap_vld = 1'b1;
    end else begin
        add212_3351_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln99_fu_459_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add212_4352_out_ap_vld = 1'b1;
    end else begin
        add212_4352_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln99_fu_459_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add212_5353_out_ap_vld = 1'b1;
    end else begin
        add212_5353_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln99_fu_459_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add212_6354_out_ap_vld = 1'b1;
    end else begin
        add212_6354_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln99_fu_459_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add212348_out = arr_fu_112;

assign add212_1349_out = arr_1_fu_116;

assign add212_2350_out = arr_2_fu_120;

assign add212_3351_out = arr_3_fu_124;

assign add212_4352_out = arr_4_fu_128;

assign add212_5353_out = arr_5_fu_132;

assign add212_6354_out = arr_6_fu_136;

assign add_ln106_fu_465_p2 = (k_fu_140 + 4'd1);

assign add_ln99_fu_717_p2 = ($signed(i_fu_144) + $signed(4'd15));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign arr_10_fu_633_p2 = (mul_ln113_3_fu_395_p2 + arr_3_fu_124);

assign arr_11_fu_659_p2 = (mul_ln113_4_fu_399_p2 + arr_4_fu_128);

assign arr_12_fu_685_p2 = (mul_ln113_5_fu_403_p2 + arr_5_fu_132);

assign arr_13_fu_711_p2 = (mul_ln113_6_fu_407_p2 + arr_6_fu_136);

assign arr_7_fu_555_p2 = (mul_ln113_fu_383_p2 + arr_fu_112);

assign arr_8_fu_581_p2 = (mul_ln113_1_fu_387_p2 + arr_1_fu_116);

assign arr_9_fu_607_p2 = (mul_ln113_2_fu_391_p2 + arr_2_fu_120);

assign icmp_ln99_fu_459_p2 = ((k_fu_140 == 4'd9) ? 1'b1 : 1'b0);

assign mul_ln113_1_fu_387_p0 = mul_ln113_1_fu_387_p00;

assign mul_ln113_1_fu_387_p00 = tmp_2_fu_561_p11;

assign mul_ln113_1_fu_387_p1 = zext_ln113_fu_524_p1;

assign mul_ln113_2_fu_391_p0 = mul_ln113_2_fu_391_p00;

assign mul_ln113_2_fu_391_p00 = tmp_3_fu_587_p11;

assign mul_ln113_2_fu_391_p1 = zext_ln113_fu_524_p1;

assign mul_ln113_3_fu_395_p0 = mul_ln113_3_fu_395_p00;

assign mul_ln113_3_fu_395_p00 = tmp_4_fu_613_p11;

assign mul_ln113_3_fu_395_p1 = zext_ln113_fu_524_p1;

assign mul_ln113_4_fu_399_p0 = mul_ln113_4_fu_399_p00;

assign mul_ln113_4_fu_399_p00 = tmp_5_fu_639_p11;

assign mul_ln113_4_fu_399_p1 = zext_ln113_fu_524_p1;

assign mul_ln113_5_fu_403_p0 = mul_ln113_5_fu_403_p00;

assign mul_ln113_5_fu_403_p00 = tmp_6_fu_665_p11;

assign mul_ln113_5_fu_403_p1 = zext_ln113_fu_524_p1;

assign mul_ln113_6_fu_407_p0 = mul_ln113_6_fu_407_p00;

assign mul_ln113_6_fu_407_p00 = tmp_7_fu_691_p11;

assign mul_ln113_6_fu_407_p1 = zext_ln113_fu_524_p1;

assign mul_ln113_fu_383_p0 = mul_ln113_fu_383_p00;

assign mul_ln113_fu_383_p00 = tmp_1_fu_535_p11;

assign mul_ln113_fu_383_p1 = zext_ln113_fu_524_p1;

assign zext_ln113_fu_524_p1 = tmp_s_fu_495_p18;

endmodule //test_test_Pipeline_VITIS_LOOP_99_13
