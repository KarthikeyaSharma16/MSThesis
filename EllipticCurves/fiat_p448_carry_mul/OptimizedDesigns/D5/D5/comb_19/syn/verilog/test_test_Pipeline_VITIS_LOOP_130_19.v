// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_130_19 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add212_6205_reload,
        add212_5204_reload,
        add212_4203_reload,
        add212_3202_reload,
        add212_2183201_reload,
        add212_1174200_reload,
        arg1_r_2_reload,
        arg1_r_4_reload,
        arg1_r_6_reload,
        conv36,
        arg2_r_14_reload,
        arg2_r_15_reload,
        arg2_r_13_reload,
        arg2_r_12_reload,
        arg2_r_11_reload,
        arg2_r_10_reload,
        arg1_r_1_reload,
        arg1_r_3_reload,
        arg1_r_5_reload,
        add289_1146_2197_out,
        add289_1146_2197_out_ap_vld,
        add289_1146_1196_out,
        add289_1146_1196_out_ap_vld,
        add289_1146195_out,
        add289_1146195_out_ap_vld,
        add289_2194_out,
        add289_2194_out_ap_vld,
        add289_1162193_out,
        add289_1162193_out_ap_vld,
        add289192_out,
        add289192_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] add212_6205_reload;
input  [63:0] add212_5204_reload;
input  [63:0] add212_4203_reload;
input  [63:0] add212_3202_reload;
input  [63:0] add212_2183201_reload;
input  [63:0] add212_1174200_reload;
input  [31:0] arg1_r_2_reload;
input  [31:0] arg1_r_4_reload;
input  [31:0] arg1_r_6_reload;
input  [31:0] conv36;
input  [31:0] arg2_r_14_reload;
input  [31:0] arg2_r_15_reload;
input  [31:0] arg2_r_13_reload;
input  [31:0] arg2_r_12_reload;
input  [31:0] arg2_r_11_reload;
input  [31:0] arg2_r_10_reload;
input  [31:0] arg1_r_1_reload;
input  [31:0] arg1_r_3_reload;
input  [31:0] arg1_r_5_reload;
output  [63:0] add289_1146_2197_out;
output   add289_1146_2197_out_ap_vld;
output  [63:0] add289_1146_1196_out;
output   add289_1146_1196_out_ap_vld;
output  [63:0] add289_1146195_out;
output   add289_1146195_out_ap_vld;
output  [63:0] add289_2194_out;
output   add289_2194_out_ap_vld;
output  [63:0] add289_1162193_out;
output   add289_1162193_out_ap_vld;
output  [63:0] add289192_out;
output   add289192_out_ap_vld;

reg ap_idle;
reg add289_1146_2197_out_ap_vld;
reg add289_1146_1196_out_ap_vld;
reg add289_1146195_out_ap_vld;
reg add289_2194_out_ap_vld;
reg add289_1162193_out_ap_vld;
reg add289192_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln130_fu_376_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] conv36_cast_fu_334_p1;
reg   [63:0] conv36_cast_reg_1250;
wire   [31:0] tmp_37_fu_396_p9;
reg   [31:0] tmp_37_reg_1259;
wire   [0:0] icmp_ln143_fu_416_p2;
reg   [0:0] icmp_ln143_reg_1264;
wire   [0:0] icmp_ln143_1_fu_422_p2;
reg   [0:0] icmp_ln143_1_reg_1271;
wire   [0:0] icmp_ln143_2_fu_428_p2;
reg   [0:0] icmp_ln143_2_reg_1277;
wire   [0:0] icmp_ln143_3_fu_434_p2;
reg   [0:0] icmp_ln143_3_reg_1283;
wire   [31:0] tmp_42_fu_448_p9;
reg   [31:0] tmp_42_reg_1289;
wire   [0:0] icmp_ln143_4_fu_468_p2;
reg   [0:0] icmp_ln143_4_reg_1294;
wire   [0:0] icmp_ln143_5_fu_474_p2;
reg   [0:0] icmp_ln143_5_reg_1301;
wire   [0:0] icmp_ln143_6_fu_480_p2;
reg   [0:0] icmp_ln143_6_reg_1307;
wire   [0:0] icmp_ln143_7_fu_486_p2;
reg   [0:0] icmp_ln143_7_reg_1313;
reg   [63:0] add289192_fu_106;
wire   [63:0] add_ln143_fu_543_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [63:0] add289_1162193_fu_110;
wire   [63:0] add_ln143_2_fu_796_p2;
reg   [63:0] add289_2194_fu_114;
wire   [63:0] add_ln143_4_fu_851_p2;
reg   [63:0] add289_1146195_fu_118;
wire   [63:0] add_ln143_6_fu_942_p2;
reg   [63:0] add289_1146_1196_fu_122;
wire   [63:0] add_ln143_8_fu_1019_p2;
reg   [63:0] add289_1146_2197_fu_126;
wire   [63:0] add_ln143_10_fu_1078_p2;
reg   [2:0] i_fu_130;
wire   [2:0] add_ln130_fu_492_p2;
reg   [2:0] ap_sig_allocacmp_i_6;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] mul_ln143_fu_290_p0;
wire   [63:0] zext_ln143_fu_521_p1;
wire   [31:0] mul_ln143_fu_290_p1;
wire   [31:0] mul_ln143_1_fu_294_p0;
wire   [31:0] mul_ln143_1_fu_294_p1;
wire   [31:0] mul_ln143_2_fu_298_p0;
wire   [63:0] zext_ln143_6_fu_756_p1;
wire   [31:0] mul_ln143_2_fu_298_p1;
wire   [31:0] mul_ln143_3_fu_302_p0;
wire   [31:0] mul_ln143_3_fu_302_p1;
wire   [31:0] mul_ln143_4_fu_306_p0;
wire   [31:0] mul_ln143_4_fu_306_p1;
wire   [31:0] mul_ln143_5_fu_310_p0;
wire   [31:0] mul_ln143_5_fu_310_p1;
wire   [31:0] mul_ln143_6_fu_314_p0;
wire   [31:0] mul_ln143_6_fu_314_p1;
wire   [31:0] mul_ln143_7_fu_318_p0;
wire   [31:0] mul_ln143_7_fu_318_p1;
wire   [31:0] mul_ln143_8_fu_322_p0;
wire   [31:0] mul_ln143_8_fu_322_p1;
wire   [31:0] mul_ln143_9_fu_326_p0;
wire   [31:0] mul_ln143_9_fu_326_p1;
wire   [31:0] mul_ln143_10_fu_330_p0;
wire   [31:0] mul_ln143_10_fu_330_p1;
wire   [2:0] empty_fu_382_p2;
wire   [3:0] tmp_s_fu_388_p3;
wire   [3:0] tmp_46_fu_440_p3;
wire   [63:0] mul_ln143_fu_290_p2;
wire   [63:0] select_ln143_2_fu_530_p3;
wire   [63:0] and_ln143_fu_537_p2;
wire   [31:0] select_ln143_fu_556_p3;
wire   [2:0] select_ln143_3_fu_549_p3;
wire   [2:0] zext_ln35_5_fu_566_p1;
wire  signed [2:0] sub_ln35_9_fu_569_p2;
wire  signed [3:0] tmp_38_fu_579_p17;
wire   [31:0] tmp_38_fu_579_p18;
wire   [2:0] zext_ln35_6_fu_619_p1;
wire   [2:0] sub_ln35_10_fu_622_p2;
wire  signed [3:0] sext_ln143_8_fu_628_p1;
wire   [31:0] tmp_39_fu_632_p18;
wire   [3:0] zext_ln144_fu_671_p1;
wire   [3:0] sub_ln35_11_fu_674_p2;
wire   [31:0] tmp_40_fu_680_p18;
wire   [31:0] tmp_41_fu_718_p18;
wire   [63:0] mul_ln143_1_fu_294_p2;
wire   [63:0] select_ln143_4_fu_764_p3;
wire   [63:0] mul_ln143_2_fu_298_p2;
wire   [63:0] select_ln143_5_fu_777_p3;
wire   [63:0] and_ln143_2_fu_784_p2;
wire   [63:0] and_ln143_1_fu_771_p2;
wire   [63:0] add_ln143_1_fu_790_p2;
wire   [31:0] select_ln143_1_fu_809_p3;
wire   [63:0] mul_ln143_3_fu_302_p2;
wire   [63:0] select_ln143_7_fu_819_p3;
wire   [63:0] mul_ln143_4_fu_306_p2;
wire   [63:0] select_ln143_8_fu_832_p3;
wire   [63:0] and_ln143_4_fu_839_p2;
wire   [63:0] and_ln143_3_fu_826_p2;
wire   [63:0] add_ln143_3_fu_845_p2;
wire   [2:0] select_ln143_6_fu_802_p3;
wire   [2:0] zext_ln35_fu_857_p1;
wire  signed [2:0] sub_ln35_12_fu_860_p2;
wire  signed [3:0] tmp_43_fu_870_p17;
wire   [31:0] tmp_43_fu_870_p18;
wire   [63:0] mul_ln143_5_fu_310_p2;
wire   [63:0] select_ln143_9_fu_910_p3;
wire   [63:0] mul_ln143_6_fu_314_p2;
wire   [63:0] select_ln143_10_fu_923_p3;
wire   [63:0] and_ln143_6_fu_930_p2;
wire   [63:0] and_ln143_5_fu_917_p2;
wire   [63:0] add_ln143_5_fu_936_p2;
wire   [2:0] zext_ln35_7_fu_948_p1;
wire   [2:0] sub_ln35_13_fu_951_p2;
wire  signed [3:0] sext_ln143_10_fu_957_p1;
wire   [31:0] tmp_44_fu_961_p18;
wire   [63:0] mul_ln143_8_fu_322_p2;
wire   [63:0] select_ln143_11_fu_1000_p3;
wire   [63:0] and_ln143_7_fu_1007_p2;
wire   [63:0] mul_ln143_7_fu_318_p2;
wire   [63:0] add_ln143_7_fu_1013_p2;
wire   [3:0] zext_ln144_1_fu_1025_p1;
wire   [3:0] tmp_45_fu_1034_p17;
wire   [31:0] tmp_45_fu_1034_p18;
wire   [63:0] mul_ln143_10_fu_330_p2;
wire   [63:0] mul_ln143_9_fu_326_p2;
wire   [63:0] add_ln143_9_fu_1072_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [63:0] mul_ln143_10_fu_330_p00;
wire   [63:0] mul_ln143_1_fu_294_p00;
wire   [63:0] mul_ln143_3_fu_302_p00;
wire   [63:0] mul_ln143_4_fu_306_p00;
wire   [63:0] mul_ln143_5_fu_310_p00;
wire   [63:0] mul_ln143_6_fu_314_p00;
wire   [63:0] mul_ln143_7_fu_318_p00;
wire   [63:0] mul_ln143_8_fu_322_p00;
wire   [63:0] mul_ln143_9_fu_326_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U271(
    .din0(mul_ln143_fu_290_p0),
    .din1(mul_ln143_fu_290_p1),
    .dout(mul_ln143_fu_290_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U272(
    .din0(mul_ln143_1_fu_294_p0),
    .din1(mul_ln143_1_fu_294_p1),
    .dout(mul_ln143_1_fu_294_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U273(
    .din0(mul_ln143_2_fu_298_p0),
    .din1(mul_ln143_2_fu_298_p1),
    .dout(mul_ln143_2_fu_298_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U274(
    .din0(mul_ln143_3_fu_302_p0),
    .din1(mul_ln143_3_fu_302_p1),
    .dout(mul_ln143_3_fu_302_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U275(
    .din0(mul_ln143_4_fu_306_p0),
    .din1(mul_ln143_4_fu_306_p1),
    .dout(mul_ln143_4_fu_306_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U276(
    .din0(mul_ln143_5_fu_310_p0),
    .din1(mul_ln143_5_fu_310_p1),
    .dout(mul_ln143_5_fu_310_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U277(
    .din0(mul_ln143_6_fu_314_p0),
    .din1(mul_ln143_6_fu_314_p1),
    .dout(mul_ln143_6_fu_314_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U278(
    .din0(mul_ln143_7_fu_318_p0),
    .din1(mul_ln143_7_fu_318_p1),
    .dout(mul_ln143_7_fu_318_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U279(
    .din0(mul_ln143_8_fu_322_p0),
    .din1(mul_ln143_8_fu_322_p1),
    .dout(mul_ln143_8_fu_322_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U280(
    .din0(mul_ln143_9_fu_326_p0),
    .din1(mul_ln143_9_fu_326_p1),
    .dout(mul_ln143_9_fu_326_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U281(
    .din0(mul_ln143_10_fu_330_p0),
    .din1(mul_ln143_10_fu_330_p1),
    .dout(mul_ln143_10_fu_330_p2)
);

test_mux_7_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_7_3_32_1_1_U282(
    .din0(32'd0),
    .din1(32'd0),
    .din2(arg1_r_2_reload),
    .din3(32'd0),
    .din4(arg1_r_4_reload),
    .din5(32'd0),
    .din6(arg1_r_6_reload),
    .din7(ap_sig_allocacmp_i_6),
    .dout(tmp_37_fu_396_p9)
);

test_mux_7_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_7_3_32_1_1_U283(
    .din0(32'd0),
    .din1(32'd0),
    .din2(arg1_r_1_reload),
    .din3(32'd0),
    .din4(arg1_r_3_reload),
    .din5(32'd0),
    .din6(arg1_r_5_reload),
    .din7(ap_sig_allocacmp_i_6),
    .dout(tmp_42_fu_448_p9)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U284(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(32'd0),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_38_fu_579_p17),
    .dout(tmp_38_fu_579_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U285(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(sext_ln143_8_fu_628_p1),
    .dout(tmp_39_fu_632_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U286(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(sub_ln35_11_fu_674_p2),
    .dout(tmp_40_fu_680_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U287(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(arg2_r_10_reload),
    .din12(arg2_r_11_reload),
    .din13(arg2_r_12_reload),
    .din14(arg2_r_13_reload),
    .din15(arg2_r_14_reload),
    .din16(sub_ln35_11_fu_674_p2),
    .dout(tmp_41_fu_718_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U288(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(32'd0),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_43_fu_870_p17),
    .dout(tmp_43_fu_870_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U289(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(sext_ln143_10_fu_957_p1),
    .dout(tmp_44_fu_961_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U290(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_45_fu_1034_p17),
    .dout(tmp_45_fu_1034_p18)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add289192_fu_106 <= add212_1174200_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add289192_fu_106 <= add_ln143_fu_543_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add289_1146195_fu_118 <= add212_4203_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add289_1146195_fu_118 <= add_ln143_6_fu_942_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add289_1146_1196_fu_122 <= add212_5204_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add289_1146_1196_fu_122 <= add_ln143_8_fu_1019_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add289_1146_2197_fu_126 <= add212_6205_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add289_1146_2197_fu_126 <= add_ln143_10_fu_1078_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add289_1162193_fu_110 <= add212_2183201_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add289_1162193_fu_110 <= add_ln143_2_fu_796_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add289_2194_fu_114 <= add212_3202_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add289_2194_fu_114 <= add_ln143_4_fu_851_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln130_fu_376_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_130 <= add_ln130_fu_492_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_130 <= 3'd6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv36_cast_reg_1250[31 : 0] <= conv36_cast_fu_334_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln130_fu_376_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln143_1_reg_1271 <= icmp_ln143_1_fu_422_p2;
        icmp_ln143_2_reg_1277 <= icmp_ln143_2_fu_428_p2;
        icmp_ln143_3_reg_1283 <= icmp_ln143_3_fu_434_p2;
        icmp_ln143_4_reg_1294 <= icmp_ln143_4_fu_468_p2;
        icmp_ln143_5_reg_1301 <= icmp_ln143_5_fu_474_p2;
        icmp_ln143_6_reg_1307 <= icmp_ln143_6_fu_480_p2;
        icmp_ln143_7_reg_1313 <= icmp_ln143_7_fu_486_p2;
        icmp_ln143_reg_1264 <= icmp_ln143_fu_416_p2;
        tmp_37_reg_1259 <= tmp_37_fu_396_p9;
        tmp_42_reg_1289 <= tmp_42_fu_448_p9;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_376_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add289192_out_ap_vld = 1'b1;
    end else begin
        add289192_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_376_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add289_1146195_out_ap_vld = 1'b1;
    end else begin
        add289_1146195_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_376_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add289_1146_1196_out_ap_vld = 1'b1;
    end else begin
        add289_1146_1196_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_376_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add289_1146_2197_out_ap_vld = 1'b1;
    end else begin
        add289_1146_2197_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_376_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add289_1162193_out_ap_vld = 1'b1;
    end else begin
        add289_1162193_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_376_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add289_2194_out_ap_vld = 1'b1;
    end else begin
        add289_2194_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_376_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_6 = 3'd6;
    end else begin
        ap_sig_allocacmp_i_6 = i_fu_130;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add289192_out = add289192_fu_106;

assign add289_1146195_out = add289_1146195_fu_118;

assign add289_1146_1196_out = add289_1146_1196_fu_122;

assign add289_1146_2197_out = add289_1146_2197_fu_126;

assign add289_1162193_out = add289_1162193_fu_110;

assign add289_2194_out = add289_2194_fu_114;

assign add_ln130_fu_492_p2 = ($signed(ap_sig_allocacmp_i_6) + $signed(3'd6));

assign add_ln143_10_fu_1078_p2 = (add289_1146_2197_fu_126 + add_ln143_9_fu_1072_p2);

assign add_ln143_1_fu_790_p2 = (and_ln143_2_fu_784_p2 + and_ln143_1_fu_771_p2);

assign add_ln143_2_fu_796_p2 = (add289_1162193_fu_110 + add_ln143_1_fu_790_p2);

assign add_ln143_3_fu_845_p2 = (and_ln143_4_fu_839_p2 + and_ln143_3_fu_826_p2);

assign add_ln143_4_fu_851_p2 = (add289_2194_fu_114 + add_ln143_3_fu_845_p2);

assign add_ln143_5_fu_936_p2 = (and_ln143_6_fu_930_p2 + and_ln143_5_fu_917_p2);

assign add_ln143_6_fu_942_p2 = (add289_1146195_fu_118 + add_ln143_5_fu_936_p2);

assign add_ln143_7_fu_1013_p2 = (and_ln143_7_fu_1007_p2 + mul_ln143_7_fu_318_p2);

assign add_ln143_8_fu_1019_p2 = (add289_1146_1196_fu_122 + add_ln143_7_fu_1013_p2);

assign add_ln143_9_fu_1072_p2 = (mul_ln143_10_fu_330_p2 + mul_ln143_9_fu_326_p2);

assign add_ln143_fu_543_p2 = (and_ln143_fu_537_p2 + add289192_fu_106);

assign and_ln143_1_fu_771_p2 = (select_ln143_4_fu_764_p3 & mul_ln143_1_fu_294_p2);

assign and_ln143_2_fu_784_p2 = (select_ln143_5_fu_777_p3 & mul_ln143_2_fu_298_p2);

assign and_ln143_3_fu_826_p2 = (select_ln143_7_fu_819_p3 & mul_ln143_3_fu_302_p2);

assign and_ln143_4_fu_839_p2 = (select_ln143_8_fu_832_p3 & mul_ln143_4_fu_306_p2);

assign and_ln143_5_fu_917_p2 = (select_ln143_9_fu_910_p3 & mul_ln143_5_fu_310_p2);

assign and_ln143_6_fu_930_p2 = (select_ln143_10_fu_923_p3 & mul_ln143_6_fu_314_p2);

assign and_ln143_7_fu_1007_p2 = (select_ln143_11_fu_1000_p3 & mul_ln143_8_fu_322_p2);

assign and_ln143_fu_537_p2 = (select_ln143_2_fu_530_p3 & mul_ln143_fu_290_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv36_cast_fu_334_p1 = conv36;

assign empty_fu_382_p2 = (ap_sig_allocacmp_i_6 | 3'd1);

assign icmp_ln130_fu_376_p2 = ((ap_sig_allocacmp_i_6 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln143_1_fu_422_p2 = ((tmp_s_fu_388_p3 > 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln143_2_fu_428_p2 = ((tmp_s_fu_388_p3 > 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln143_3_fu_434_p2 = ((tmp_s_fu_388_p3 > 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln143_4_fu_468_p2 = ((tmp_46_fu_440_p3 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln143_5_fu_474_p2 = ((tmp_46_fu_440_p3 > 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln143_6_fu_480_p2 = ((tmp_46_fu_440_p3 > 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln143_7_fu_486_p2 = ((tmp_46_fu_440_p3 > 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln143_fu_416_p2 = ((tmp_s_fu_388_p3 == 4'd15) ? 1'b1 : 1'b0);

assign mul_ln143_10_fu_330_p0 = mul_ln143_10_fu_330_p00;

assign mul_ln143_10_fu_330_p00 = tmp_45_fu_1034_p18;

assign mul_ln143_10_fu_330_p1 = zext_ln143_6_fu_756_p1;

assign mul_ln143_1_fu_294_p0 = mul_ln143_1_fu_294_p00;

assign mul_ln143_1_fu_294_p00 = select_ln143_fu_556_p3;

assign mul_ln143_1_fu_294_p1 = zext_ln143_fu_521_p1;

assign mul_ln143_2_fu_298_p0 = zext_ln143_6_fu_756_p1;

assign mul_ln143_2_fu_298_p1 = conv36_cast_reg_1250;

assign mul_ln143_3_fu_302_p0 = mul_ln143_3_fu_302_p00;

assign mul_ln143_3_fu_302_p00 = tmp_38_fu_579_p18;

assign mul_ln143_3_fu_302_p1 = zext_ln143_fu_521_p1;

assign mul_ln143_4_fu_306_p0 = mul_ln143_4_fu_306_p00;

assign mul_ln143_4_fu_306_p00 = select_ln143_1_fu_809_p3;

assign mul_ln143_4_fu_306_p1 = zext_ln143_6_fu_756_p1;

assign mul_ln143_5_fu_310_p0 = mul_ln143_5_fu_310_p00;

assign mul_ln143_5_fu_310_p00 = tmp_39_fu_632_p18;

assign mul_ln143_5_fu_310_p1 = zext_ln143_fu_521_p1;

assign mul_ln143_6_fu_314_p0 = mul_ln143_6_fu_314_p00;

assign mul_ln143_6_fu_314_p00 = tmp_43_fu_870_p18;

assign mul_ln143_6_fu_314_p1 = zext_ln143_6_fu_756_p1;

assign mul_ln143_7_fu_318_p0 = mul_ln143_7_fu_318_p00;

assign mul_ln143_7_fu_318_p00 = tmp_40_fu_680_p18;

assign mul_ln143_7_fu_318_p1 = zext_ln143_fu_521_p1;

assign mul_ln143_8_fu_322_p0 = mul_ln143_8_fu_322_p00;

assign mul_ln143_8_fu_322_p00 = tmp_44_fu_961_p18;

assign mul_ln143_8_fu_322_p1 = zext_ln143_6_fu_756_p1;

assign mul_ln143_9_fu_326_p0 = mul_ln143_9_fu_326_p00;

assign mul_ln143_9_fu_326_p00 = tmp_41_fu_718_p18;

assign mul_ln143_9_fu_326_p1 = zext_ln143_fu_521_p1;

assign mul_ln143_fu_290_p0 = zext_ln143_fu_521_p1;

assign mul_ln143_fu_290_p1 = conv36_cast_reg_1250;

assign select_ln143_10_fu_923_p3 = ((icmp_ln143_6_reg_1307[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_11_fu_1000_p3 = ((icmp_ln143_7_reg_1313[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_1_fu_809_p3 = ((icmp_ln143_4_reg_1294[0:0] == 1'b1) ? arg2_r_14_reload : arg2_r_15_reload);

assign select_ln143_2_fu_530_p3 = ((icmp_ln143_reg_1264[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_3_fu_549_p3 = ((icmp_ln143_reg_1264[0:0] == 1'b1) ? 3'd6 : 3'd7);

assign select_ln143_4_fu_764_p3 = ((icmp_ln143_1_reg_1271[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_5_fu_777_p3 = ((icmp_ln143_4_reg_1294[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_6_fu_802_p3 = ((icmp_ln143_4_reg_1294[0:0] == 1'b1) ? 3'd6 : 3'd7);

assign select_ln143_7_fu_819_p3 = ((icmp_ln143_2_reg_1277[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_8_fu_832_p3 = ((icmp_ln143_5_reg_1301[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_9_fu_910_p3 = ((icmp_ln143_3_reg_1283[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_fu_556_p3 = ((icmp_ln143_reg_1264[0:0] == 1'b1) ? arg2_r_14_reload : arg2_r_15_reload);

assign sext_ln143_10_fu_957_p1 = $signed(sub_ln35_13_fu_951_p2);

assign sext_ln143_8_fu_628_p1 = $signed(sub_ln35_10_fu_622_p2);

assign sub_ln35_10_fu_622_p2 = ($signed(sub_ln35_9_fu_569_p2) - $signed(zext_ln35_6_fu_619_p1));

assign sub_ln35_11_fu_674_p2 = ($signed(sext_ln143_8_fu_628_p1) - $signed(zext_ln144_fu_671_p1));

assign sub_ln35_12_fu_860_p2 = (select_ln143_6_fu_802_p3 - zext_ln35_fu_857_p1);

assign sub_ln35_13_fu_951_p2 = ($signed(sub_ln35_12_fu_860_p2) - $signed(zext_ln35_7_fu_948_p1));

assign sub_ln35_9_fu_569_p2 = (select_ln143_3_fu_549_p3 - zext_ln35_5_fu_566_p1);

assign tmp_38_fu_579_p17 = sub_ln35_9_fu_569_p2;

assign tmp_43_fu_870_p17 = sub_ln35_12_fu_860_p2;

assign tmp_45_fu_1034_p17 = ($signed(sext_ln143_10_fu_957_p1) - $signed(zext_ln144_1_fu_1025_p1));

assign tmp_46_fu_440_p3 = {{1'd1}, {ap_sig_allocacmp_i_6}};

assign tmp_s_fu_388_p3 = {{1'd1}, {empty_fu_382_p2}};

assign zext_ln143_6_fu_756_p1 = tmp_42_reg_1289;

assign zext_ln143_fu_521_p1 = tmp_37_reg_1259;

assign zext_ln144_1_fu_1025_p1 = icmp_ln143_7_reg_1313;

assign zext_ln144_fu_671_p1 = icmp_ln143_3_reg_1283;

assign zext_ln35_5_fu_566_p1 = icmp_ln143_1_reg_1271;

assign zext_ln35_6_fu_619_p1 = icmp_ln143_2_reg_1277;

assign zext_ln35_7_fu_948_p1 = icmp_ln143_6_reg_1307;

assign zext_ln35_fu_857_p1 = icmp_ln143_5_reg_1301;

always @ (posedge ap_clk) begin
    conv36_cast_reg_1250[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //test_test_Pipeline_VITIS_LOOP_130_19
