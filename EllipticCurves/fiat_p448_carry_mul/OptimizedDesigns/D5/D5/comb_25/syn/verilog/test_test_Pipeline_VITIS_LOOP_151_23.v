// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_151_23 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add289_2117279_reload,
        add289_1103_1278_reload,
        add289_1103277_reload,
        add289_1133276_reload,
        add289275_reload,
        add212282_reload,
        arg1_r_9_reload,
        arg1_r_10_reload,
        arg1_r_11_reload,
        arg1_r_12_reload,
        arg1_r_13_reload,
        arg1_r_14_reload,
        arg2_r_reload,
        arg2_r_1_reload,
        arg2_r_2_reload,
        arg2_r_3_reload,
        arg2_r_4_reload,
        arg2_r_5_reload,
        arg2_r_15_reload,
        arg2_r_6_reload,
        arg2_r_7_reload,
        arg2_r_8_reload,
        arg2_r_9_reload,
        arg2_r_10_reload,
        arg2_r_11_reload,
        arg2_r_12_reload,
        arg2_r_13_reload,
        arg2_r_14_reload,
        add346_2_1274_out,
        add346_2_1274_out_ap_vld,
        add346_2273_out,
        add346_2273_out_ap_vld,
        add346_1_1272_out,
        add346_1_1272_out_ap_vld,
        add346_1271_out,
        add346_1271_out_ap_vld,
        add346_161270_out,
        add346_161270_out_ap_vld,
        add346269_out,
        add346269_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] add289_2117279_reload;
input  [63:0] add289_1103_1278_reload;
input  [63:0] add289_1103277_reload;
input  [63:0] add289_1133276_reload;
input  [63:0] add289275_reload;
input  [63:0] add212282_reload;
input  [31:0] arg1_r_9_reload;
input  [31:0] arg1_r_10_reload;
input  [31:0] arg1_r_11_reload;
input  [31:0] arg1_r_12_reload;
input  [31:0] arg1_r_13_reload;
input  [31:0] arg1_r_14_reload;
input  [31:0] arg2_r_reload;
input  [31:0] arg2_r_1_reload;
input  [31:0] arg2_r_2_reload;
input  [31:0] arg2_r_3_reload;
input  [31:0] arg2_r_4_reload;
input  [31:0] arg2_r_5_reload;
input  [31:0] arg2_r_15_reload;
input  [31:0] arg2_r_6_reload;
input  [31:0] arg2_r_7_reload;
input  [31:0] arg2_r_8_reload;
input  [31:0] arg2_r_9_reload;
input  [31:0] arg2_r_10_reload;
input  [31:0] arg2_r_11_reload;
input  [31:0] arg2_r_12_reload;
input  [31:0] arg2_r_13_reload;
input  [31:0] arg2_r_14_reload;
output  [63:0] add346_2_1274_out;
output   add346_2_1274_out_ap_vld;
output  [63:0] add346_2273_out;
output   add346_2273_out_ap_vld;
output  [63:0] add346_1_1272_out;
output   add346_1_1272_out_ap_vld;
output  [63:0] add346_1271_out;
output   add346_1271_out_ap_vld;
output  [63:0] add346_161270_out;
output   add346_161270_out_ap_vld;
output  [63:0] add346269_out;
output   add346269_out_ap_vld;

reg ap_idle;
reg add346_2_1274_out_ap_vld;
reg add346_2273_out_ap_vld;
reg add346_1_1272_out_ap_vld;
reg add346_1271_out_ap_vld;
reg add346_161270_out_ap_vld;
reg add346269_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln151_fu_429_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln165_fu_487_p1;
reg   [63:0] zext_ln165_reg_1124;
wire   [31:0] tmp_23_fu_637_p18;
reg   [31:0] tmp_23_reg_1131;
wire   [0:0] icmp_ln165_2_fu_659_p2;
reg   [0:0] icmp_ln165_2_reg_1136;
wire   [31:0] tmp_24_fu_675_p18;
reg   [31:0] tmp_24_reg_1141;
wire   [0:0] icmp_ln165_3_fu_697_p2;
reg   [0:0] icmp_ln165_3_reg_1146;
wire   [31:0] tmp_25_fu_713_p18;
reg   [31:0] tmp_25_reg_1151;
wire   [0:0] icmp_ln165_4_fu_735_p2;
reg   [0:0] icmp_ln165_4_reg_1156;
reg   [63:0] arr_fu_120;
wire   [63:0] arr_63_fu_511_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [63:0] arr_58_fu_124;
wire   [63:0] arr_64_fu_554_p2;
reg   [63:0] arr_59_fu_128;
wire   [63:0] arr_65_fu_621_p2;
reg   [63:0] arr_60_fu_132;
wire   [63:0] arr_66_fu_798_p2;
reg   [63:0] arr_61_fu_136;
wire   [63:0] arr_67_fu_821_p2;
reg   [63:0] arr_62_fu_140;
wire   [63:0] arr_68_fu_844_p2;
reg   [2:0] k_fu_144;
wire   [2:0] add_ln158_fu_435_p2;
reg   [3:0] i_fu_148;
wire   [3:0] add_ln151_fu_741_p2;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] mul_ln165_fu_362_p0;
wire   [31:0] mul_ln165_fu_362_p1;
wire   [31:0] mul_ln165_1_fu_366_p0;
wire   [31:0] mul_ln165_1_fu_366_p1;
wire   [31:0] mul_ln165_2_fu_370_p0;
wire   [31:0] mul_ln165_2_fu_370_p1;
wire   [31:0] mul_ln165_3_fu_374_p0;
wire   [31:0] mul_ln165_3_fu_374_p1;
wire   [31:0] mul_ln165_4_fu_378_p0;
wire   [31:0] mul_ln165_4_fu_378_p1;
wire   [31:0] mul_ln165_5_fu_382_p0;
wire   [31:0] mul_ln165_5_fu_382_p1;
wire   [31:0] tmp_s_fu_457_p17;
wire   [31:0] tmp_20_fu_494_p8;
wire   [63:0] mul_ln165_fu_362_p2;
wire   [31:0] tmp_21_fu_517_p8;
wire   [0:0] icmp_ln165_fu_534_p2;
wire   [63:0] mul_ln165_1_fu_366_p2;
wire   [63:0] select_ln165_fu_540_p3;
wire   [63:0] and_ln165_fu_548_p2;
wire   [3:0] select_ln35_fu_560_p3;
wire   [3:0] zext_ln151_fu_453_p1;
wire   [3:0] add_ln35_fu_568_p2;
wire   [31:0] tmp_22_fu_574_p18;
wire   [0:0] icmp_ln165_1_fu_601_p2;
wire   [63:0] mul_ln165_2_fu_370_p2;
wire   [63:0] select_ln165_1_fu_607_p3;
wire   [63:0] and_ln165_1_fu_615_p2;
wire   [3:0] zext_ln166_fu_627_p1;
wire   [3:0] sub_ln35_12_fu_631_p2;
wire   [3:0] zext_ln166_1_fu_665_p1;
wire   [3:0] sub_ln35_fu_669_p2;
wire   [3:0] zext_ln166_2_fu_703_p1;
wire   [3:0] tmp_25_fu_713_p17;
wire   [63:0] mul_ln165_3_fu_374_p2;
wire   [63:0] select_ln165_2_fu_785_p3;
wire   [63:0] and_ln165_2_fu_792_p2;
wire   [63:0] mul_ln165_4_fu_378_p2;
wire   [63:0] select_ln165_3_fu_808_p3;
wire   [63:0] and_ln165_3_fu_815_p2;
wire   [63:0] mul_ln165_5_fu_382_p2;
wire   [63:0] select_ln165_4_fu_831_p3;
wire   [63:0] and_ln165_4_fu_838_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [63:0] mul_ln165_1_fu_366_p00;
wire   [63:0] mul_ln165_2_fu_370_p00;
wire   [63:0] mul_ln165_3_fu_374_p00;
wire   [63:0] mul_ln165_4_fu_378_p00;
wire   [63:0] mul_ln165_5_fu_382_p00;
wire   [63:0] mul_ln165_fu_362_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U313(
    .din0(mul_ln165_fu_362_p0),
    .din1(mul_ln165_fu_362_p1),
    .dout(mul_ln165_fu_362_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U314(
    .din0(mul_ln165_1_fu_366_p0),
    .din1(mul_ln165_1_fu_366_p1),
    .dout(mul_ln165_1_fu_366_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U315(
    .din0(mul_ln165_2_fu_370_p0),
    .din1(mul_ln165_2_fu_370_p1),
    .dout(mul_ln165_2_fu_370_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U316(
    .din0(mul_ln165_3_fu_374_p0),
    .din1(mul_ln165_3_fu_374_p1),
    .dout(mul_ln165_3_fu_374_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U317(
    .din0(mul_ln165_4_fu_378_p0),
    .din1(mul_ln165_4_fu_378_p1),
    .dout(mul_ln165_4_fu_378_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U318(
    .din0(mul_ln165_5_fu_382_p0),
    .din1(mul_ln165_5_fu_382_p1),
    .dout(mul_ln165_5_fu_382_p2)
);

test_mux_15_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_15_4_32_1_1_U319(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(arg1_r_9_reload),
    .din10(arg1_r_10_reload),
    .din11(arg1_r_11_reload),
    .din12(arg1_r_12_reload),
    .din13(arg1_r_13_reload),
    .din14(arg1_r_14_reload),
    .din15(i_fu_148),
    .dout(tmp_s_fu_457_p17)
);

test_mux_6_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_6_3_32_1_1_U320(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(k_fu_144),
    .dout(tmp_20_fu_494_p8)
);

test_mux_6_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_6_3_32_1_1_U321(
    .din0(arg2_r_15_reload),
    .din1(arg2_r_reload),
    .din2(arg2_r_1_reload),
    .din3(arg2_r_2_reload),
    .din4(arg2_r_3_reload),
    .din5(arg2_r_4_reload),
    .din6(k_fu_144),
    .dout(tmp_21_fu_517_p8)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U322(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(arg2_r_9_reload),
    .din10(arg2_r_10_reload),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(add_ln35_fu_568_p2),
    .dout(tmp_22_fu_574_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U323(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(arg2_r_9_reload),
    .din10(arg2_r_10_reload),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(sub_ln35_12_fu_631_p2),
    .dout(tmp_23_fu_637_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U324(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(arg2_r_9_reload),
    .din10(arg2_r_10_reload),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(sub_ln35_fu_669_p2),
    .dout(tmp_24_fu_675_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U325(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(arg2_r_9_reload),
    .din10(arg2_r_10_reload),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_25_fu_713_p17),
    .dout(tmp_25_fu_713_p18)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_58_fu_124 <= add289275_reload;
        end else if (((icmp_ln151_fu_429_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            arr_58_fu_124 <= arr_64_fu_554_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_59_fu_128 <= add289_1133276_reload;
        end else if (((icmp_ln151_fu_429_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            arr_59_fu_128 <= arr_65_fu_621_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            arr_60_fu_132 <= add289_1103277_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            arr_60_fu_132 <= arr_66_fu_798_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            arr_61_fu_136 <= add289_1103_1278_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            arr_61_fu_136 <= arr_67_fu_821_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            arr_62_fu_140 <= add289_2117279_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            arr_62_fu_140 <= arr_68_fu_844_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_fu_120 <= add212282_reload;
        end else if (((icmp_ln151_fu_429_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            arr_fu_120 <= arr_63_fu_511_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_148 <= 4'd14;
        end else if (((icmp_ln151_fu_429_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_148 <= add_ln151_fu_741_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_fu_144 <= 3'd0;
        end else if (((icmp_ln151_fu_429_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            k_fu_144 <= add_ln158_fu_435_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln151_fu_429_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln165_2_reg_1136 <= icmp_ln165_2_fu_659_p2;
        icmp_ln165_3_reg_1146 <= icmp_ln165_3_fu_697_p2;
        icmp_ln165_4_reg_1156 <= icmp_ln165_4_fu_735_p2;
        tmp_23_reg_1131 <= tmp_23_fu_637_p18;
        tmp_24_reg_1141 <= tmp_24_fu_675_p18;
        tmp_25_reg_1151 <= tmp_25_fu_713_p18;
        zext_ln165_reg_1124[31 : 0] <= zext_ln165_fu_487_p1[31 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_429_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add346269_out_ap_vld = 1'b1;
    end else begin
        add346269_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_429_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add346_1271_out_ap_vld = 1'b1;
    end else begin
        add346_1271_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_429_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add346_161270_out_ap_vld = 1'b1;
    end else begin
        add346_161270_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_429_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add346_1_1272_out_ap_vld = 1'b1;
    end else begin
        add346_1_1272_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_429_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add346_2273_out_ap_vld = 1'b1;
    end else begin
        add346_2273_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_429_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add346_2_1274_out_ap_vld = 1'b1;
    end else begin
        add346_2_1274_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_429_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add346269_out = arr_fu_120;

assign add346_1271_out = arr_59_fu_128;

assign add346_161270_out = arr_58_fu_124;

assign add346_1_1272_out = arr_60_fu_132;

assign add346_2273_out = arr_61_fu_136;

assign add346_2_1274_out = arr_62_fu_140;

assign add_ln151_fu_741_p2 = ($signed(i_fu_148) + $signed(4'd15));

assign add_ln158_fu_435_p2 = (k_fu_144 + 3'd1);

assign add_ln35_fu_568_p2 = (select_ln35_fu_560_p3 + zext_ln151_fu_453_p1);

assign and_ln165_1_fu_615_p2 = (select_ln165_1_fu_607_p3 & mul_ln165_2_fu_370_p2);

assign and_ln165_2_fu_792_p2 = (select_ln165_2_fu_785_p3 & mul_ln165_3_fu_374_p2);

assign and_ln165_3_fu_815_p2 = (select_ln165_3_fu_808_p3 & mul_ln165_4_fu_378_p2);

assign and_ln165_4_fu_838_p2 = (select_ln165_4_fu_831_p3 & mul_ln165_5_fu_382_p2);

assign and_ln165_fu_548_p2 = (select_ln165_fu_540_p3 & mul_ln165_1_fu_366_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign arr_63_fu_511_p2 = (mul_ln165_fu_362_p2 + arr_fu_120);

assign arr_64_fu_554_p2 = (and_ln165_fu_548_p2 + arr_58_fu_124);

assign arr_65_fu_621_p2 = (and_ln165_1_fu_615_p2 + arr_59_fu_128);

assign arr_66_fu_798_p2 = (and_ln165_2_fu_792_p2 + arr_60_fu_132);

assign arr_67_fu_821_p2 = (and_ln165_3_fu_815_p2 + arr_61_fu_136);

assign arr_68_fu_844_p2 = (and_ln165_4_fu_838_p2 + arr_62_fu_140);

assign icmp_ln151_fu_429_p2 = ((k_fu_144 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln165_1_fu_601_p2 = ((i_fu_148 < 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln165_2_fu_659_p2 = ((i_fu_148 < 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln165_3_fu_697_p2 = ((i_fu_148 < 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln165_4_fu_735_p2 = ((i_fu_148 < 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln165_fu_534_p2 = ((i_fu_148 < 4'd14) ? 1'b1 : 1'b0);

assign mul_ln165_1_fu_366_p0 = mul_ln165_1_fu_366_p00;

assign mul_ln165_1_fu_366_p00 = tmp_21_fu_517_p8;

assign mul_ln165_1_fu_366_p1 = zext_ln165_fu_487_p1;

assign mul_ln165_2_fu_370_p0 = mul_ln165_2_fu_370_p00;

assign mul_ln165_2_fu_370_p00 = tmp_22_fu_574_p18;

assign mul_ln165_2_fu_370_p1 = zext_ln165_fu_487_p1;

assign mul_ln165_3_fu_374_p0 = mul_ln165_3_fu_374_p00;

assign mul_ln165_3_fu_374_p00 = tmp_23_reg_1131;

assign mul_ln165_3_fu_374_p1 = zext_ln165_reg_1124;

assign mul_ln165_4_fu_378_p0 = mul_ln165_4_fu_378_p00;

assign mul_ln165_4_fu_378_p00 = tmp_24_reg_1141;

assign mul_ln165_4_fu_378_p1 = zext_ln165_reg_1124;

assign mul_ln165_5_fu_382_p0 = mul_ln165_5_fu_382_p00;

assign mul_ln165_5_fu_382_p00 = tmp_25_reg_1151;

assign mul_ln165_5_fu_382_p1 = zext_ln165_reg_1124;

assign mul_ln165_fu_362_p0 = mul_ln165_fu_362_p00;

assign mul_ln165_fu_362_p00 = tmp_20_fu_494_p8;

assign mul_ln165_fu_362_p1 = zext_ln165_fu_487_p1;

assign select_ln165_1_fu_607_p3 = ((icmp_ln165_1_fu_601_p2[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln165_2_fu_785_p3 = ((icmp_ln165_2_reg_1136[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln165_3_fu_808_p3 = ((icmp_ln165_3_reg_1146[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln165_4_fu_831_p3 = ((icmp_ln165_4_reg_1156[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln165_fu_540_p3 = ((icmp_ln165_fu_534_p2[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln35_fu_560_p3 = ((icmp_ln165_fu_534_p2[0:0] == 1'b1) ? 4'd14 : 4'd15);

assign sub_ln35_12_fu_631_p2 = (add_ln35_fu_568_p2 - zext_ln166_fu_627_p1);

assign sub_ln35_fu_669_p2 = (sub_ln35_12_fu_631_p2 - zext_ln166_1_fu_665_p1);

assign tmp_25_fu_713_p17 = (sub_ln35_fu_669_p2 - zext_ln166_2_fu_703_p1);

assign zext_ln151_fu_453_p1 = k_fu_144;

assign zext_ln165_fu_487_p1 = tmp_s_fu_457_p17;

assign zext_ln166_1_fu_665_p1 = icmp_ln165_2_fu_659_p2;

assign zext_ln166_2_fu_703_p1 = icmp_ln165_3_fu_697_p2;

assign zext_ln166_fu_627_p1 = icmp_ln165_1_fu_601_p2;

always @ (posedge ap_clk) begin
    zext_ln165_reg_1124[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //test_test_Pipeline_VITIS_LOOP_151_23
