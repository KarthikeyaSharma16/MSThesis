

================================================================
== Vitis HLS Report for 'test_Pipeline_VITIS_LOOP_37_1'
================================================================
* Date:           Fri May 10 16:10:20 2024

* Version:        2023.1.1 (Build 3869133 on Jun 15 2023)
* Project:        D5
* Solution:       comb_11 (Vivado IP Flow Target)
* Product family: zynquplus
* Target device:  xczu9eg-ffvb1156-2-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  7.015 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+-----------+-----------+-----+-----+---------+
    |  Latency (cycles) |   Latency (absolute)  |  Interval | Pipeline|
    |   min   |   max   |    min    |    max    | min | max |   Type  |
    +---------+---------+-----------+-----------+-----+-----+---------+
    |        9|        9|  90.000 ns|  90.000 ns|    9|    9|       no|
    +---------+---------+-----------+-----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- VITIS_LOOP_37_1  |        7|        7|         2|          1|          1|     7|       yes|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 3
* Pipeline : 1
  Pipeline-0 : II = 1, D = 3, States = { 1 2 3 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 0.42>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%arr_7 = alloca i32 1"   --->   Operation 5 'alloca' 'arr_7' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%arr_8 = alloca i32 1"   --->   Operation 6 'alloca' 'arr_8' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%arr_9 = alloca i32 1"   --->   Operation 7 'alloca' 'arr_9' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%arr_10 = alloca i32 1"   --->   Operation 8 'alloca' 'arr_10' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%arr_11 = alloca i32 1"   --->   Operation 9 'alloca' 'arr_11' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%arr_12 = alloca i32 1"   --->   Operation 10 'alloca' 'arr_12' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%arr_13 = alloca i32 1"   --->   Operation 11 'alloca' 'arr_13' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%i = alloca i32 1"   --->   Operation 12 'alloca' 'i' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%arg2_r_9_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_9_reload"   --->   Operation 13 'read' 'arg2_r_9_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%arg2_r_10_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_10_reload"   --->   Operation 14 'read' 'arg2_r_10_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%arg2_r_11_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_11_reload"   --->   Operation 15 'read' 'arg2_r_11_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%arg2_r_12_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_12_reload"   --->   Operation 16 'read' 'arg2_r_12_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%arg2_r_13_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_13_reload"   --->   Operation 17 'read' 'arg2_r_13_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%arg2_r_15_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_15_reload"   --->   Operation 18 'read' 'arg2_r_15_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%arg2_r_14_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_14_reload"   --->   Operation 19 'read' 'arg2_r_14_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%conv36_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %conv36"   --->   Operation 20 'read' 'conv36_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%arg1_r_15_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_15_reload"   --->   Operation 21 'read' 'arg1_r_15_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%arg1_r_14_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_14_reload"   --->   Operation 22 'read' 'arg1_r_14_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%arg1_r_13_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_13_reload"   --->   Operation 23 'read' 'arg1_r_13_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%arg1_r_12_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_12_reload"   --->   Operation 24 'read' 'arg1_r_12_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%arg1_r_11_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_11_reload"   --->   Operation 25 'read' 'arg1_r_11_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%arg1_r_10_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_10_reload"   --->   Operation 26 'read' 'arg1_r_10_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%arg1_r_9_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_9_reload"   --->   Operation 27 'read' 'arg1_r_9_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%conv36_cast = zext i32 %conv36_read"   --->   Operation 28 'zext' 'conv36_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.42ns)   --->   "%store_ln0 = store i4 15, i4 %i"   --->   Operation 29 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 30 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_13"   --->   Operation 30 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 31 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_12"   --->   Operation 31 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 32 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_11"   --->   Operation 32 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 33 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_10"   --->   Operation 33 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 34 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_9"   --->   Operation 34 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 35 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_8"   --->   Operation 35 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 36 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_7"   --->   Operation 36 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.inc53"   --->   Operation 37 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 6.17>
ST_2 : Operation 38 [1/1] (0.00ns)   --->   "%i_2 = load i4 %i"   --->   Operation 38 'load' 'i_2' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 39 [1/1] (0.79ns)   --->   "%icmp_ln37 = icmp_ugt  i4 %i_2, i4 8" [d5.cpp:37]   --->   Operation 39 'icmp' 'icmp_ln37' <Predicate = true> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 40 [1/1] (0.00ns)   --->   "%br_ln37 = br i1 %icmp_ln37, void %for.inc110.6.preheader.exitStub, void %for.inc53.split" [d5.cpp:37]   --->   Operation 40 'br' 'br_ln37' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 41 [1/1] (0.00ns)   --->   "%arr_7_load = load i64 %arr_7" [d5.cpp:50]   --->   Operation 41 'load' 'arr_7_load' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 42 [1/1] (0.00ns)   --->   "%arr_8_load = load i64 %arr_8" [d5.cpp:50]   --->   Operation 42 'load' 'arr_8_load' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 43 [1/1] (0.79ns)   --->   "%empty = add i4 %i_2, i4 9"   --->   Operation 43 'add' 'empty' <Predicate = (icmp_ln37)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 44 [1/1] (0.48ns)   --->   "%tmp = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg1_r_9_reload_read, i32 %arg1_r_10_reload_read, i32 %arg1_r_11_reload_read, i32 %arg1_r_12_reload_read, i32 %arg1_r_13_reload_read, i32 %arg1_r_14_reload_read, i32 %arg1_r_15_reload_read, i4 %i_2" [d5.cpp:50]   --->   Operation 44 'mux' 'tmp' <Predicate = (icmp_ln37)> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 45 [1/1] (0.00ns)   --->   "%zext_ln50 = zext i32 %tmp" [d5.cpp:50]   --->   Operation 45 'zext' 'zext_ln50' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 46 [1/1] (0.00ns)   --->   "%tmp_7 = bitselect i1 @_ssdm_op_BitSelect.i1.i4.i32, i4 %empty, i32 3" [d5.cpp:50]   --->   Operation 46 'bitselect' 'tmp_7' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_2 : [1/1] (1.32ns)   --->   Input mux for Operation 47 '%mul_ln50 = mul i64 %zext_ln50, i64 %conv36_cast'
ST_2 : Operation 47 [1/1] (2.09ns)   --->   "%mul_ln50 = mul i64 %zext_ln50, i64 %conv36_cast" [d5.cpp:50]   --->   Operation 47 'mul' 'mul_ln50' <Predicate = (icmp_ln37)> <Delay = 2.09> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 48 [1/1] (0.00ns) (grouped into LUT with out node arr)   --->   "%tmp_8 = bitselect i1 @_ssdm_op_BitSelect.i1.i4.i32, i4 %empty, i32 3" [d5.cpp:50]   --->   Operation 48 'bitselect' 'tmp_8' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 49 [1/1] (0.00ns) (grouped into LUT with out node arr)   --->   "%select_ln50_1 = select i1 %tmp_8, i64 18446744073709551615, i64 0" [d5.cpp:50]   --->   Operation 49 'select' 'select_ln50_1' <Predicate = (icmp_ln37)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 50 [1/1] (0.00ns) (grouped into LUT with out node arr)   --->   "%and_ln50 = and i64 %mul_ln50, i64 %select_ln50_1" [d5.cpp:50]   --->   Operation 50 'and' 'and_ln50' <Predicate = (icmp_ln37)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 51 [1/1] (1.08ns) (out node of the LUT)   --->   "%arr = add i64 %and_ln50, i64 %arr_7_load" [d5.cpp:50]   --->   Operation 51 'add' 'arr' <Predicate = (icmp_ln37)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 52 [1/1] (0.00ns) (grouped into LUT with out node sub_ln35_5)   --->   "%select_ln50_2 = select i1 %tmp_7, i3 6, i3 7" [d5.cpp:50]   --->   Operation 52 'select' 'select_ln50_2' <Predicate = (icmp_ln37)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 53 [1/1] (0.44ns)   --->   "%select_ln50 = select i1 %tmp_7, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read" [d5.cpp:50]   --->   Operation 53 'select' 'select_ln50' <Predicate = (icmp_ln37)> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 54 [1/1] (0.00ns)   --->   "%zext_ln50_1 = zext i32 %select_ln50" [d5.cpp:50]   --->   Operation 54 'zext' 'zext_ln50_1' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 55 [1/1] (0.79ns)   --->   "%icmp_ln50 = icmp_ugt  i4 %empty, i4 6" [d5.cpp:50]   --->   Operation 55 'icmp' 'icmp_ln50' <Predicate = (icmp_ln37)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.32ns)   --->   Input mux for Operation 56 '%mul_ln50_1 = mul i64 %zext_ln50_1, i64 %zext_ln50'
ST_2 : Operation 56 [1/1] (2.09ns)   --->   "%mul_ln50_1 = mul i64 %zext_ln50_1, i64 %zext_ln50" [d5.cpp:50]   --->   Operation 56 'mul' 'mul_ln50_1' <Predicate = (icmp_ln37)> <Delay = 2.09> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 57 [1/1] (0.00ns) (grouped into LUT with out node arr_14)   --->   "%select_ln50_3 = select i1 %icmp_ln50, i64 18446744073709551615, i64 0" [d5.cpp:50]   --->   Operation 57 'select' 'select_ln50_3' <Predicate = (icmp_ln37)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 58 [1/1] (0.00ns) (grouped into LUT with out node arr_14)   --->   "%and_ln50_1 = and i64 %mul_ln50_1, i64 %select_ln50_3" [d5.cpp:50]   --->   Operation 58 'and' 'and_ln50_1' <Predicate = (icmp_ln37)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 59 [1/1] (1.08ns) (out node of the LUT)   --->   "%arr_14 = add i64 %and_ln50_1, i64 %arr_8_load" [d5.cpp:50]   --->   Operation 59 'add' 'arr_14' <Predicate = (icmp_ln37)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 60 [1/1] (0.00ns) (grouped into LUT with out node sub_ln35_5)   --->   "%zext_ln35 = zext i1 %icmp_ln50" [d5.cpp:35]   --->   Operation 60 'zext' 'zext_ln35' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 61 [1/1] (0.54ns) (out node of the LUT)   --->   "%sub_ln35_5 = sub i3 %select_ln50_2, i3 %zext_ln35" [d5.cpp:35]   --->   Operation 61 'sub' 'sub_ln35_5' <Predicate = (icmp_ln37)> <Delay = 0.54> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 62 [1/1] (0.79ns)   --->   "%icmp_ln50_1 = icmp_ugt  i4 %empty, i4 5" [d5.cpp:50]   --->   Operation 62 'icmp' 'icmp_ln50_1' <Predicate = (icmp_ln37)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 63 [1/1] (0.00ns)   --->   "%zext_ln35_1 = zext i1 %icmp_ln50_1" [d5.cpp:35]   --->   Operation 63 'zext' 'zext_ln35_1' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 64 [1/1] (0.67ns)   --->   "%sub_ln35_6 = sub i3 %sub_ln35_5, i3 %zext_ln35_1" [d5.cpp:35]   --->   Operation 64 'sub' 'sub_ln35_6' <Predicate = (icmp_ln37)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 65 [1/1] (0.00ns)   --->   "%sext_ln50_1 = sext i3 %sub_ln35_6" [d5.cpp:50]   --->   Operation 65 'sext' 'sext_ln50_1' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 66 [1/1] (0.79ns)   --->   "%icmp_ln50_2 = icmp_ugt  i4 %empty, i4 4" [d5.cpp:50]   --->   Operation 66 'icmp' 'icmp_ln50_2' <Predicate = (icmp_ln37)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 67 [1/1] (0.00ns)   --->   "%zext_ln51 = zext i1 %icmp_ln50_2" [d5.cpp:51]   --->   Operation 67 'zext' 'zext_ln51' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 68 [1/1] (0.67ns)   --->   "%sub_ln35 = sub i4 %sext_ln50_1, i4 %zext_ln51" [d5.cpp:35]   --->   Operation 68 'sub' 'sub_ln35' <Predicate = (icmp_ln37)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 69 [1/1] (0.00ns)   --->   "%tmp_9 = partselect i2 @_ssdm_op_PartSelect.i2.i4.i32.i32, i4 %empty, i32 2, i32 3" [d5.cpp:50]   --->   Operation 69 'partselect' 'tmp_9' <Predicate = (icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 70 [1/1] (0.54ns)   --->   "%icmp_ln50_3 = icmp_ne  i2 %tmp_9, i2 0" [d5.cpp:50]   --->   Operation 70 'icmp' 'icmp_ln50_3' <Predicate = (icmp_ln37)> <Delay = 0.54> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 71 [1/1] (0.79ns)   --->   "%icmp_ln50_4 = icmp_ugt  i4 %empty, i4 2" [d5.cpp:50]   --->   Operation 71 'icmp' 'icmp_ln50_4' <Predicate = (icmp_ln37)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 72 [1/1] (0.79ns)   --->   "%add_ln37 = add i4 %i_2, i4 15" [d5.cpp:37]   --->   Operation 72 'add' 'add_ln37' <Predicate = (icmp_ln37)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 73 [1/1] (0.42ns)   --->   "%store_ln37 = store i4 %add_ln37, i4 %i" [d5.cpp:37]   --->   Operation 73 'store' 'store_ln37' <Predicate = (icmp_ln37)> <Delay = 0.42>
ST_2 : Operation 74 [1/1] (0.42ns)   --->   "%store_ln37 = store i64 %arr_14, i64 %arr_8" [d5.cpp:37]   --->   Operation 74 'store' 'store_ln37' <Predicate = (icmp_ln37)> <Delay = 0.42>
ST_2 : Operation 75 [1/1] (0.42ns)   --->   "%store_ln37 = store i64 %arr, i64 %arr_7" [d5.cpp:37]   --->   Operation 75 'store' 'store_ln37' <Predicate = (icmp_ln37)> <Delay = 0.42>
ST_2 : Operation 123 [1/1] (0.00ns)   --->   "%arr_7_load_1 = load i64 %arr_7"   --->   Operation 123 'load' 'arr_7_load_1' <Predicate = (!icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 124 [1/1] (0.00ns)   --->   "%arr_8_load_1 = load i64 %arr_8"   --->   Operation 124 'load' 'arr_8_load_1' <Predicate = (!icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 125 [1/1] (0.00ns)   --->   "%arr_9_load_1 = load i64 %arr_9"   --->   Operation 125 'load' 'arr_9_load_1' <Predicate = (!icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 126 [1/1] (0.00ns)   --->   "%arr_10_load_1 = load i64 %arr_10"   --->   Operation 126 'load' 'arr_10_load_1' <Predicate = (!icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 127 [1/1] (0.00ns)   --->   "%arr_11_load_1 = load i64 %arr_11"   --->   Operation 127 'load' 'arr_11_load_1' <Predicate = (!icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 128 [1/1] (0.00ns)   --->   "%arr_12_load_1 = load i64 %arr_12"   --->   Operation 128 'load' 'arr_12_load_1' <Predicate = (!icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 129 [1/1] (0.00ns)   --->   "%arr_13_load_1 = load i64 %arr_13"   --->   Operation 129 'load' 'arr_13_load_1' <Predicate = (!icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 130 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add_6693_out, i64 %arr_13_load_1"   --->   Operation 130 'write' 'write_ln0' <Predicate = (!icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 131 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add_5692_out, i64 %arr_12_load_1"   --->   Operation 131 'write' 'write_ln0' <Predicate = (!icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 132 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add_4691_out, i64 %arr_11_load_1"   --->   Operation 132 'write' 'write_ln0' <Predicate = (!icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 133 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add_3690_out, i64 %arr_10_load_1"   --->   Operation 133 'write' 'write_ln0' <Predicate = (!icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 134 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add_2689_out, i64 %arr_9_load_1"   --->   Operation 134 'write' 'write_ln0' <Predicate = (!icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 135 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add_1688_out, i64 %arr_8_load_1"   --->   Operation 135 'write' 'write_ln0' <Predicate = (!icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 136 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add687_out, i64 %arr_7_load_1"   --->   Operation 136 'write' 'write_ln0' <Predicate = (!icmp_ln37)> <Delay = 0.00>
ST_2 : Operation 137 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 137 'ret' 'ret_ln0' <Predicate = (!icmp_ln37)> <Delay = 0.00>

State 3 <SV = 2> <Delay = 7.01>
ST_3 : Operation 76 [1/1] (0.00ns)   --->   "%arr_9_load = load i64 %arr_9" [d5.cpp:50]   --->   Operation 76 'load' 'arr_9_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 77 [1/1] (0.00ns)   --->   "%arr_10_load = load i64 %arr_10" [d5.cpp:50]   --->   Operation 77 'load' 'arr_10_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 78 [1/1] (0.00ns)   --->   "%arr_11_load = load i64 %arr_11" [d5.cpp:50]   --->   Operation 78 'load' 'arr_11_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 79 [1/1] (0.00ns)   --->   "%arr_12_load = load i64 %arr_12" [d5.cpp:50]   --->   Operation 79 'load' 'arr_12_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 80 [1/1] (0.00ns)   --->   "%arr_13_load = load i64 %arr_13" [d5.cpp:50]   --->   Operation 80 'load' 'arr_13_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 81 [1/1] (0.00ns)   --->   "%specpipeline_ln39 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty_4" [d5.cpp:39]   --->   Operation 81 'specpipeline' 'specpipeline_ln39' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 82 [1/1] (0.00ns)   --->   "%speclooptripcount_ln37 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 7, i64 7, i64 7" [d5.cpp:37]   --->   Operation 82 'speclooptripcount' 'speclooptripcount_ln37' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 83 [1/1] (0.00ns)   --->   "%specloopname_ln37 = specloopname void @_ssdm_op_SpecLoopName, void @empty_13" [d5.cpp:37]   --->   Operation 83 'specloopname' 'specloopname_ln37' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 84 [1/1] (0.00ns)   --->   "%sext_ln50 = sext i3 %sub_ln35_5" [d5.cpp:50]   --->   Operation 84 'sext' 'sext_ln50' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 85 [1/1] (0.48ns)   --->   "%tmp_2 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sext_ln50" [d5.cpp:50]   --->   Operation 85 'mux' 'tmp_2' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 86 [1/1] (0.00ns)   --->   "%zext_ln50_2 = zext i32 %tmp_2" [d5.cpp:50]   --->   Operation 86 'zext' 'zext_ln50_2' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.32ns)   --->   Input mux for Operation 87 '%mul_ln50_2 = mul i64 %zext_ln50_2, i64 %zext_ln50'
ST_3 : Operation 87 [1/1] (2.09ns)   --->   "%mul_ln50_2 = mul i64 %zext_ln50_2, i64 %zext_ln50" [d5.cpp:50]   --->   Operation 87 'mul' 'mul_ln50_2' <Predicate = true> <Delay = 2.09> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 88 [1/1] (0.00ns) (grouped into LUT with out node arr_15)   --->   "%select_ln50_4 = select i1 %icmp_ln50_1, i64 18446744073709551615, i64 0" [d5.cpp:50]   --->   Operation 88 'select' 'select_ln50_4' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 89 [1/1] (0.00ns) (grouped into LUT with out node arr_15)   --->   "%and_ln50_2 = and i64 %mul_ln50_2, i64 %select_ln50_4" [d5.cpp:50]   --->   Operation 89 'and' 'and_ln50_2' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 90 [1/1] (1.08ns) (out node of the LUT)   --->   "%arr_15 = add i64 %and_ln50_2, i64 %arr_9_load" [d5.cpp:50]   --->   Operation 90 'add' 'arr_15' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 91 [1/1] (0.48ns)   --->   "%tmp_3 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sext_ln50_1" [d5.cpp:50]   --->   Operation 91 'mux' 'tmp_3' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 92 [1/1] (0.00ns)   --->   "%zext_ln50_3 = zext i32 %tmp_3" [d5.cpp:50]   --->   Operation 92 'zext' 'zext_ln50_3' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.32ns)   --->   Input mux for Operation 93 '%mul_ln50_3 = mul i64 %zext_ln50_3, i64 %zext_ln50'
ST_3 : Operation 93 [1/1] (2.09ns)   --->   "%mul_ln50_3 = mul i64 %zext_ln50_3, i64 %zext_ln50" [d5.cpp:50]   --->   Operation 93 'mul' 'mul_ln50_3' <Predicate = true> <Delay = 2.09> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 94 [1/1] (0.00ns) (grouped into LUT with out node arr_16)   --->   "%select_ln50_5 = select i1 %icmp_ln50_2, i64 18446744073709551615, i64 0" [d5.cpp:50]   --->   Operation 94 'select' 'select_ln50_5' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 95 [1/1] (0.00ns) (grouped into LUT with out node arr_16)   --->   "%and_ln50_3 = and i64 %mul_ln50_3, i64 %select_ln50_5" [d5.cpp:50]   --->   Operation 95 'and' 'and_ln50_3' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 96 [1/1] (1.08ns) (out node of the LUT)   --->   "%arr_16 = add i64 %and_ln50_3, i64 %arr_10_load" [d5.cpp:50]   --->   Operation 96 'add' 'arr_16' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 97 [1/1] (0.48ns)   --->   "%tmp_4 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln35" [d5.cpp:50]   --->   Operation 97 'mux' 'tmp_4' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 98 [1/1] (0.00ns)   --->   "%zext_ln50_4 = zext i32 %tmp_4" [d5.cpp:50]   --->   Operation 98 'zext' 'zext_ln50_4' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.32ns)   --->   Input mux for Operation 99 '%mul_ln50_4 = mul i64 %zext_ln50_4, i64 %zext_ln50'
ST_3 : Operation 99 [1/1] (2.09ns)   --->   "%mul_ln50_4 = mul i64 %zext_ln50_4, i64 %zext_ln50" [d5.cpp:50]   --->   Operation 99 'mul' 'mul_ln50_4' <Predicate = true> <Delay = 2.09> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 100 [1/1] (0.00ns) (grouped into LUT with out node arr_17)   --->   "%select_ln50_6 = select i1 %icmp_ln50_3, i64 18446744073709551615, i64 0" [d5.cpp:50]   --->   Operation 100 'select' 'select_ln50_6' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 101 [1/1] (0.00ns) (grouped into LUT with out node arr_17)   --->   "%and_ln50_4 = and i64 %mul_ln50_4, i64 %select_ln50_6" [d5.cpp:50]   --->   Operation 101 'and' 'and_ln50_4' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 102 [1/1] (1.08ns) (out node of the LUT)   --->   "%arr_17 = add i64 %and_ln50_4, i64 %arr_11_load" [d5.cpp:50]   --->   Operation 102 'add' 'arr_17' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 103 [1/1] (0.00ns)   --->   "%zext_ln51_1 = zext i1 %icmp_ln50_3" [d5.cpp:51]   --->   Operation 103 'zext' 'zext_ln51_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 104 [1/1] (0.79ns)   --->   "%sub_ln35_1 = sub i4 %sub_ln35, i4 %zext_ln51_1" [d5.cpp:35]   --->   Operation 104 'sub' 'sub_ln35_1' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 105 [1/1] (0.48ns)   --->   "%tmp_5 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln35_1" [d5.cpp:50]   --->   Operation 105 'mux' 'tmp_5' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 106 [1/1] (0.00ns)   --->   "%zext_ln50_5 = zext i32 %tmp_5" [d5.cpp:50]   --->   Operation 106 'zext' 'zext_ln50_5' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.32ns)   --->   Input mux for Operation 107 '%mul_ln50_5 = mul i64 %zext_ln50_5, i64 %zext_ln50'
ST_3 : Operation 107 [1/1] (2.09ns)   --->   "%mul_ln50_5 = mul i64 %zext_ln50_5, i64 %zext_ln50" [d5.cpp:50]   --->   Operation 107 'mul' 'mul_ln50_5' <Predicate = true> <Delay = 2.09> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 108 [1/1] (0.00ns) (grouped into LUT with out node arr_18)   --->   "%select_ln50_7 = select i1 %icmp_ln50_4, i64 18446744073709551615, i64 0" [d5.cpp:50]   --->   Operation 108 'select' 'select_ln50_7' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 109 [1/1] (0.00ns) (grouped into LUT with out node arr_18)   --->   "%and_ln50_5 = and i64 %mul_ln50_5, i64 %select_ln50_7" [d5.cpp:50]   --->   Operation 109 'and' 'and_ln50_5' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 110 [1/1] (1.08ns) (out node of the LUT)   --->   "%arr_18 = add i64 %and_ln50_5, i64 %arr_12_load" [d5.cpp:50]   --->   Operation 110 'add' 'arr_18' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 111 [1/1] (0.00ns)   --->   "%zext_ln51_2 = zext i1 %icmp_ln50_4" [d5.cpp:51]   --->   Operation 111 'zext' 'zext_ln51_2' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 112 [1/1] (0.79ns)   --->   "%sub_ln35_2 = sub i4 %sub_ln35_1, i4 %zext_ln51_2" [d5.cpp:35]   --->   Operation 112 'sub' 'sub_ln35_2' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 113 [1/1] (0.48ns)   --->   "%tmp_6 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln35_2" [d5.cpp:50]   --->   Operation 113 'mux' 'tmp_6' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 114 [1/1] (0.00ns)   --->   "%zext_ln50_6 = zext i32 %tmp_6" [d5.cpp:50]   --->   Operation 114 'zext' 'zext_ln50_6' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.32ns)   --->   Input mux for Operation 115 '%mul_ln50_6 = mul i64 %zext_ln50_6, i64 %zext_ln50'
ST_3 : Operation 115 [1/1] (2.09ns)   --->   "%mul_ln50_6 = mul i64 %zext_ln50_6, i64 %zext_ln50" [d5.cpp:50]   --->   Operation 115 'mul' 'mul_ln50_6' <Predicate = true> <Delay = 2.09> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 116 [1/1] (1.08ns)   --->   "%arr_19 = add i64 %mul_ln50_6, i64 %arr_13_load" [d5.cpp:50]   --->   Operation 116 'add' 'arr_19' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 117 [1/1] (0.42ns)   --->   "%store_ln37 = store i64 %arr_19, i64 %arr_13" [d5.cpp:37]   --->   Operation 117 'store' 'store_ln37' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 118 [1/1] (0.42ns)   --->   "%store_ln37 = store i64 %arr_18, i64 %arr_12" [d5.cpp:37]   --->   Operation 118 'store' 'store_ln37' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 119 [1/1] (0.42ns)   --->   "%store_ln37 = store i64 %arr_17, i64 %arr_11" [d5.cpp:37]   --->   Operation 119 'store' 'store_ln37' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 120 [1/1] (0.42ns)   --->   "%store_ln37 = store i64 %arr_16, i64 %arr_10" [d5.cpp:37]   --->   Operation 120 'store' 'store_ln37' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 121 [1/1] (0.42ns)   --->   "%store_ln37 = store i64 %arr_15, i64 %arr_9" [d5.cpp:37]   --->   Operation 121 'store' 'store_ln37' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 122 [1/1] (0.00ns)   --->   "%br_ln37 = br void %for.inc53" [d5.cpp:37]   --->   Operation 122 'br' 'br_ln37' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 0.427ns
The critical path consists of the following:
	'alloca' operation ('i') [30]  (0.000 ns)
	'store' operation ('store_ln0') of constant 15 on local variable 'i' [47]  (0.427 ns)

 <State 2>: 6.178ns
The critical path consists of the following:
	'load' operation ('i') on local variable 'i' [57]  (0.000 ns)
	'add' operation ('empty') [71]  (0.797 ns)
	'select' operation ('select_ln50', d5.cpp:50) [81]  (0.449 ns)
	multiplexor before operation 'mul' with delay (1.325 ns)
'mul' operation ('mul_ln50_1', d5.cpp:50) [84]  (2.095 ns)
	'and' operation ('and_ln50_1', d5.cpp:50) [86]  (0.000 ns)
	'add' operation ('arr', d5.cpp:50) [87]  (1.085 ns)
	'store' operation ('store_ln37', d5.cpp:37) of variable 'arr', d5.cpp:50 on local variable 'arr' [140]  (0.427 ns)

 <State 3>: 7.015ns
The critical path consists of the following:
	'sub' operation ('sub_ln35_1', d5.cpp:35) [119]  (0.797 ns)
	'sub' operation ('sub_ln35_2', d5.cpp:35) [128]  (0.797 ns)
	'mux' operation ('tmp_6', d5.cpp:50) [129]  (0.489 ns)
	multiplexor before operation 'mul' with delay (1.325 ns)
'mul' operation ('mul_ln50_6', d5.cpp:50) [131]  (2.095 ns)
	'add' operation ('arr', d5.cpp:50) [132]  (1.085 ns)
	'store' operation ('store_ln37', d5.cpp:37) of variable 'arr', d5.cpp:50 on local variable 'arr' [135]  (0.427 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
