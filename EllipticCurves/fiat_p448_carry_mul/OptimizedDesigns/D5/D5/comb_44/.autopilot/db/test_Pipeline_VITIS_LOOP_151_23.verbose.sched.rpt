

================================================================
== Vitis HLS Report for 'test_Pipeline_VITIS_LOOP_151_23'
================================================================
* Date:           Fri May 10 16:44:07 2024

* Version:        2023.1.1 (Build 3869133 on Jun 15 2023)
* Project:        D5
* Solution:       comb_44 (Vivado IP Flow Target)
* Product family: zynquplus
* Target device:  xczu9eg-ffvb1156-2-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  6.890 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+-----------+-----------+-----+-----+---------+
    |  Latency (cycles) |   Latency (absolute)  |  Interval | Pipeline|
    |   min   |   max   |    min    |    max    | min | max |   Type  |
    +---------+---------+-----------+-----------+-----+-----+---------+
    |        8|        8|  80.000 ns|  80.000 ns|    8|    8|       no|
    +---------+---------+-----------+-----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +---------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                     |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |      Loop Name      |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +---------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- VITIS_LOOP_151_23  |        6|        6|         2|          1|          1|     6|       yes|
        +---------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 3
* Pipeline : 1
  Pipeline-0 : II = 1, D = 3, States = { 1 2 3 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 0.42>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%add346385 = alloca i32 1"   --->   Operation 5 'alloca' 'add346385' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%add346_161386 = alloca i32 1"   --->   Operation 6 'alloca' 'add346_161386' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%add346_2387 = alloca i32 1"   --->   Operation 7 'alloca' 'add346_2387' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%add346_1388 = alloca i32 1"   --->   Operation 8 'alloca' 'add346_1388' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%add346_1_1389 = alloca i32 1"   --->   Operation 9 'alloca' 'add346_1_1389' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%add346_1_2390 = alloca i32 1"   --->   Operation 10 'alloca' 'add346_1_2390' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%k = alloca i32 1"   --->   Operation 11 'alloca' 'k' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%i = alloca i32 1"   --->   Operation 12 'alloca' 'i' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%arg2_r_14_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_14_reload"   --->   Operation 13 'read' 'arg2_r_14_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%arg2_r_13_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_13_reload"   --->   Operation 14 'read' 'arg2_r_13_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%arg2_r_12_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_12_reload"   --->   Operation 15 'read' 'arg2_r_12_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%arg2_r_11_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_11_reload"   --->   Operation 16 'read' 'arg2_r_11_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%arg2_r_10_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_10_reload"   --->   Operation 17 'read' 'arg2_r_10_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%arg2_r_9_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_9_reload"   --->   Operation 18 'read' 'arg2_r_9_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%arg2_r_8_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_8_reload"   --->   Operation 19 'read' 'arg2_r_8_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%arg2_r_7_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_7_reload"   --->   Operation 20 'read' 'arg2_r_7_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%arg2_r_6_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_6_reload"   --->   Operation 21 'read' 'arg2_r_6_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%arg2_r_15_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_15_reload"   --->   Operation 22 'read' 'arg2_r_15_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%arg2_r_5_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_5_reload"   --->   Operation 23 'read' 'arg2_r_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%arg2_r_4_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_4_reload"   --->   Operation 24 'read' 'arg2_r_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%arg2_r_3_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_3_reload"   --->   Operation 25 'read' 'arg2_r_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%arg2_r_2_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_2_reload"   --->   Operation 26 'read' 'arg2_r_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%arg2_r_1_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_1_reload"   --->   Operation 27 'read' 'arg2_r_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%arg2_r_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_reload"   --->   Operation 28 'read' 'arg2_r_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%arg1_r_14_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_14_reload"   --->   Operation 29 'read' 'arg1_r_14_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%arg1_r_13_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_13_reload"   --->   Operation 30 'read' 'arg1_r_13_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%arg1_r_12_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_12_reload"   --->   Operation 31 'read' 'arg1_r_12_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%arg1_r_11_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_11_reload"   --->   Operation 32 'read' 'arg1_r_11_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%arg1_r_10_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_10_reload"   --->   Operation 33 'read' 'arg1_r_10_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%arg1_r_9_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_9_reload"   --->   Operation 34 'read' 'arg1_r_9_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%add212398_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add212398_reload"   --->   Operation 35 'read' 'add212398_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%add289391_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add289391_reload"   --->   Operation 36 'read' 'add289391_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%add289_174392_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add289_174392_reload"   --->   Operation 37 'read' 'add289_174392_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%add289_287393_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add289_287393_reload"   --->   Operation 38 'read' 'add289_287393_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "%add289_3394_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add289_3394_reload"   --->   Operation 39 'read' 'add289_3394_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "%add289_4395_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add289_4395_reload"   --->   Operation 40 'read' 'add289_4395_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.42ns)   --->   "%store_ln0 = store i4 14, i4 %i"   --->   Operation 41 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 42 [1/1] (0.42ns)   --->   "%store_ln0 = store i3 0, i3 %k"   --->   Operation 42 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 43 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add289_4395_reload_read, i64 %add346_1_2390"   --->   Operation 43 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 44 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add289_3394_reload_read, i64 %add346_1_1389"   --->   Operation 44 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 45 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add289_287393_reload_read, i64 %add346_1388"   --->   Operation 45 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 46 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add289_174392_reload_read, i64 %add346_2387"   --->   Operation 46 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 47 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add289391_reload_read, i64 %add346_161386"   --->   Operation 47 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 48 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add212398_reload_read, i64 %add346385"   --->   Operation 48 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 49 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.inc353.1"   --->   Operation 49 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 6.89>
ST_2 : Operation 50 [1/1] (0.00ns)   --->   "%k2 = load i3 %k" [d5.cpp:158]   --->   Operation 50 'load' 'k2' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 51 [1/1] (0.67ns)   --->   "%icmp_ln151 = icmp_eq  i3 %k2, i3 6" [d5.cpp:151]   --->   Operation 51 'icmp' 'icmp_ln151' <Predicate = true> <Delay = 0.67> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 52 [1/1] (0.67ns)   --->   "%add_ln158 = add i3 %k2, i3 1" [d5.cpp:158]   --->   Operation 52 'add' 'add_ln158' <Predicate = true> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 53 [1/1] (0.00ns)   --->   "%br_ln151 = br i1 %icmp_ln151, void %for.inc353.1.split, void %VITIS_LOOP_173_27.exitStub" [d5.cpp:151]   --->   Operation 53 'br' 'br_ln151' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 54 [1/1] (0.00ns)   --->   "%add346385_load = load i64 %add346385" [d5.cpp:165]   --->   Operation 54 'load' 'add346385_load' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 55 [1/1] (0.00ns)   --->   "%add346_161386_load = load i64 %add346_161386" [d5.cpp:165]   --->   Operation 55 'load' 'add346_161386_load' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 56 [1/1] (0.00ns)   --->   "%add346_2387_load = load i64 %add346_2387" [d5.cpp:165]   --->   Operation 56 'load' 'add346_2387_load' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 57 [1/1] (0.00ns)   --->   "%i_load = load i4 %i" [d5.cpp:151]   --->   Operation 57 'load' 'i_load' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 58 [1/1] (0.00ns) (grouped into LUT with out node add_ln35)   --->   "%zext_ln151 = zext i3 %k2" [d5.cpp:151]   --->   Operation 58 'zext' 'zext_ln151' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 59 [1/1] (0.54ns)   --->   "%tmp_s = mux i32 @_ssdm_op_Mux.ap_auto.15i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg1_r_9_reload_read, i32 %arg1_r_10_reload_read, i32 %arg1_r_11_reload_read, i32 %arg1_r_12_reload_read, i32 %arg1_r_13_reload_read, i32 %arg1_r_14_reload_read, i4 %i_load" [d5.cpp:165]   --->   Operation 59 'mux' 'tmp_s' <Predicate = (!icmp_ln151)> <Delay = 0.54> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 60 [1/1] (0.00ns)   --->   "%zext_ln165 = zext i32 %tmp_s" [d5.cpp:165]   --->   Operation 60 'zext' 'zext_ln165' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 61 [1/1] (0.62ns)   --->   "%tmp_15 = mux i32 @_ssdm_op_Mux.ap_auto.6i32.i3, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i3 %k2" [d5.cpp:165]   --->   Operation 61 'mux' 'tmp_15' <Predicate = (!icmp_ln151)> <Delay = 0.62> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.62> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 62 [1/1] (0.00ns)   --->   "%zext_ln165_1 = zext i32 %tmp_15" [d5.cpp:165]   --->   Operation 62 'zext' 'zext_ln165_1' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_2 : [1/1] (1.31ns)   --->   Input mux for Operation 63 '%mul_ln165 = mul i64 %zext_ln165_1, i64 %zext_ln165'
ST_2 : Operation 63 [1/1] (2.10ns)   --->   "%mul_ln165 = mul i64 %zext_ln165_1, i64 %zext_ln165" [d5.cpp:165]   --->   Operation 63 'mul' 'mul_ln165' <Predicate = (!icmp_ln151)> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 64 [1/1] (1.08ns)   --->   "%add_ln165 = add i64 %mul_ln165, i64 %add346385_load" [d5.cpp:165]   --->   Operation 64 'add' 'add_ln165' <Predicate = (!icmp_ln151)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 65 [1/1] (0.62ns)   --->   "%tmp_16 = mux i32 @_ssdm_op_Mux.ap_auto.6i32.i3, i32 %arg2_r_15_reload_read, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i3 %k2" [d5.cpp:165]   --->   Operation 65 'mux' 'tmp_16' <Predicate = (!icmp_ln151)> <Delay = 0.62> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.62> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 66 [1/1] (0.00ns)   --->   "%zext_ln165_2 = zext i32 %tmp_16" [d5.cpp:165]   --->   Operation 66 'zext' 'zext_ln165_2' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 67 [1/1] (0.79ns)   --->   "%icmp_ln165 = icmp_ult  i4 %i_load, i4 14" [d5.cpp:165]   --->   Operation 67 'icmp' 'icmp_ln165' <Predicate = (!icmp_ln151)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.31ns)   --->   Input mux for Operation 68 '%mul_ln165_1 = mul i64 %zext_ln165_2, i64 %zext_ln165'
ST_2 : Operation 68 [1/1] (2.10ns)   --->   "%mul_ln165_1 = mul i64 %zext_ln165_2, i64 %zext_ln165" [d5.cpp:165]   --->   Operation 68 'mul' 'mul_ln165_1' <Predicate = (!icmp_ln151)> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 69 [1/1] (0.00ns) (grouped into LUT with out node add_ln165_1)   --->   "%select_ln165 = select i1 %icmp_ln165, i64 18446744073709551615, i64 0" [d5.cpp:165]   --->   Operation 69 'select' 'select_ln165' <Predicate = (!icmp_ln151)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 70 [1/1] (0.00ns) (grouped into LUT with out node add_ln165_1)   --->   "%and_ln165 = and i64 %mul_ln165_1, i64 %select_ln165" [d5.cpp:165]   --->   Operation 70 'and' 'and_ln165' <Predicate = (!icmp_ln151)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 71 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln165_1 = add i64 %and_ln165, i64 %add346_161386_load" [d5.cpp:165]   --->   Operation 71 'add' 'add_ln165_1' <Predicate = (!icmp_ln151)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 72 [1/1] (0.00ns) (grouped into LUT with out node add_ln35)   --->   "%select_ln35 = select i1 %icmp_ln165, i4 14, i4 15" [d5.cpp:35]   --->   Operation 72 'select' 'select_ln35' <Predicate = (!icmp_ln151)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 73 [1/1] (0.67ns) (out node of the LUT)   --->   "%add_ln35 = add i4 %select_ln35, i4 %zext_ln151" [d5.cpp:35]   --->   Operation 73 'add' 'add_ln35' <Predicate = (!icmp_ln151)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 74 [1/1] (0.48ns)   --->   "%tmp_17 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %add_ln35" [d5.cpp:165]   --->   Operation 74 'mux' 'tmp_17' <Predicate = (!icmp_ln151)> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 75 [1/1] (0.00ns)   --->   "%zext_ln165_3 = zext i32 %tmp_17" [d5.cpp:165]   --->   Operation 75 'zext' 'zext_ln165_3' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 76 [1/1] (0.79ns)   --->   "%icmp_ln165_1 = icmp_ult  i4 %i_load, i4 13" [d5.cpp:165]   --->   Operation 76 'icmp' 'icmp_ln165_1' <Predicate = (!icmp_ln151)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.31ns)   --->   Input mux for Operation 77 '%mul_ln165_2 = mul i64 %zext_ln165_3, i64 %zext_ln165'
ST_2 : Operation 77 [1/1] (2.10ns)   --->   "%mul_ln165_2 = mul i64 %zext_ln165_3, i64 %zext_ln165" [d5.cpp:165]   --->   Operation 77 'mul' 'mul_ln165_2' <Predicate = (!icmp_ln151)> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 78 [1/1] (0.00ns) (grouped into LUT with out node add_ln165_2)   --->   "%select_ln165_1 = select i1 %icmp_ln165_1, i64 18446744073709551615, i64 0" [d5.cpp:165]   --->   Operation 78 'select' 'select_ln165_1' <Predicate = (!icmp_ln151)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 79 [1/1] (0.00ns) (grouped into LUT with out node add_ln165_2)   --->   "%and_ln165_1 = and i64 %mul_ln165_2, i64 %select_ln165_1" [d5.cpp:165]   --->   Operation 79 'and' 'and_ln165_1' <Predicate = (!icmp_ln151)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 80 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln165_2 = add i64 %and_ln165_1, i64 %add346_2387_load" [d5.cpp:165]   --->   Operation 80 'add' 'add_ln165_2' <Predicate = (!icmp_ln151)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 81 [1/1] (0.00ns)   --->   "%zext_ln166 = zext i1 %icmp_ln165_1" [d5.cpp:166]   --->   Operation 81 'zext' 'zext_ln166' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 82 [1/1] (0.79ns)   --->   "%sub_ln35 = sub i4 %add_ln35, i4 %zext_ln166" [d5.cpp:35]   --->   Operation 82 'sub' 'sub_ln35' <Predicate = (!icmp_ln151)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 83 [1/1] (0.48ns)   --->   "%tmp_18 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln35" [d5.cpp:165]   --->   Operation 83 'mux' 'tmp_18' <Predicate = (!icmp_ln151)> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 84 [1/1] (0.79ns)   --->   "%icmp_ln165_2 = icmp_ult  i4 %i_load, i4 12" [d5.cpp:165]   --->   Operation 84 'icmp' 'icmp_ln165_2' <Predicate = (!icmp_ln151)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 85 [1/1] (0.00ns)   --->   "%zext_ln166_1 = zext i1 %icmp_ln165_2" [d5.cpp:166]   --->   Operation 85 'zext' 'zext_ln166_1' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 86 [1/1] (0.79ns)   --->   "%sub_ln35_5 = sub i4 %sub_ln35, i4 %zext_ln166_1" [d5.cpp:35]   --->   Operation 86 'sub' 'sub_ln35_5' <Predicate = (!icmp_ln151)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 87 [1/1] (0.48ns)   --->   "%tmp_19 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln35_5" [d5.cpp:165]   --->   Operation 87 'mux' 'tmp_19' <Predicate = (!icmp_ln151)> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 88 [1/1] (0.79ns)   --->   "%icmp_ln165_3 = icmp_ult  i4 %i_load, i4 11" [d5.cpp:165]   --->   Operation 88 'icmp' 'icmp_ln165_3' <Predicate = (!icmp_ln151)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 89 [1/1] (0.00ns)   --->   "%zext_ln166_2 = zext i1 %icmp_ln165_3" [d5.cpp:166]   --->   Operation 89 'zext' 'zext_ln166_2' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 90 [1/1] (0.79ns)   --->   "%sub_ln35_6 = sub i4 %sub_ln35_5, i4 %zext_ln166_2" [d5.cpp:35]   --->   Operation 90 'sub' 'sub_ln35_6' <Predicate = (!icmp_ln151)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 91 [1/1] (0.48ns)   --->   "%tmp_20 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln35_6" [d5.cpp:165]   --->   Operation 91 'mux' 'tmp_20' <Predicate = (!icmp_ln151)> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 92 [1/1] (0.79ns)   --->   "%icmp_ln165_4 = icmp_ult  i4 %i_load, i4 10" [d5.cpp:165]   --->   Operation 92 'icmp' 'icmp_ln165_4' <Predicate = (!icmp_ln151)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 93 [1/1] (0.79ns)   --->   "%add_ln151 = add i4 %i_load, i4 15" [d5.cpp:151]   --->   Operation 93 'add' 'add_ln151' <Predicate = (!icmp_ln151)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 94 [1/1] (0.42ns)   --->   "%store_ln151 = store i4 %add_ln151, i4 %i" [d5.cpp:151]   --->   Operation 94 'store' 'store_ln151' <Predicate = (!icmp_ln151)> <Delay = 0.42>
ST_2 : Operation 95 [1/1] (0.42ns)   --->   "%store_ln151 = store i3 %add_ln158, i3 %k" [d5.cpp:151]   --->   Operation 95 'store' 'store_ln151' <Predicate = (!icmp_ln151)> <Delay = 0.42>
ST_2 : Operation 96 [1/1] (0.42ns)   --->   "%store_ln151 = store i64 %add_ln165_2, i64 %add346_2387" [d5.cpp:151]   --->   Operation 96 'store' 'store_ln151' <Predicate = (!icmp_ln151)> <Delay = 0.42>
ST_2 : Operation 97 [1/1] (0.42ns)   --->   "%store_ln151 = store i64 %add_ln165_1, i64 %add346_161386" [d5.cpp:151]   --->   Operation 97 'store' 'store_ln151' <Predicate = (!icmp_ln151)> <Delay = 0.42>
ST_2 : Operation 98 [1/1] (0.42ns)   --->   "%store_ln151 = store i64 %add_ln165, i64 %add346385" [d5.cpp:151]   --->   Operation 98 'store' 'store_ln151' <Predicate = (!icmp_ln151)> <Delay = 0.42>
ST_2 : Operation 124 [1/1] (0.00ns)   --->   "%add346385_load_1 = load i64 %add346385"   --->   Operation 124 'load' 'add346385_load_1' <Predicate = (icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 125 [1/1] (0.00ns)   --->   "%add346_161386_load_1 = load i64 %add346_161386"   --->   Operation 125 'load' 'add346_161386_load_1' <Predicate = (icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 126 [1/1] (0.00ns)   --->   "%add346_2387_load_1 = load i64 %add346_2387"   --->   Operation 126 'load' 'add346_2387_load_1' <Predicate = (icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 127 [1/1] (0.00ns)   --->   "%add346_1388_load_1 = load i64 %add346_1388"   --->   Operation 127 'load' 'add346_1388_load_1' <Predicate = (icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 128 [1/1] (0.00ns)   --->   "%add346_1_1389_load_1 = load i64 %add346_1_1389"   --->   Operation 128 'load' 'add346_1_1389_load_1' <Predicate = (icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 129 [1/1] (0.00ns)   --->   "%add346_1_2390_load_1 = load i64 %add346_1_2390"   --->   Operation 129 'load' 'add346_1_2390_load_1' <Predicate = (icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 130 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add346_1_2390_out, i64 %add346_1_2390_load_1"   --->   Operation 130 'write' 'write_ln0' <Predicate = (icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 131 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add346_1_1389_out, i64 %add346_1_1389_load_1"   --->   Operation 131 'write' 'write_ln0' <Predicate = (icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 132 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add346_1388_out, i64 %add346_1388_load_1"   --->   Operation 132 'write' 'write_ln0' <Predicate = (icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 133 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add346_2387_out, i64 %add346_2387_load_1"   --->   Operation 133 'write' 'write_ln0' <Predicate = (icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 134 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add346_161386_out, i64 %add346_161386_load_1"   --->   Operation 134 'write' 'write_ln0' <Predicate = (icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 135 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add346385_out, i64 %add346385_load_1"   --->   Operation 135 'write' 'write_ln0' <Predicate = (icmp_ln151)> <Delay = 0.00>
ST_2 : Operation 136 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 136 'ret' 'ret_ln0' <Predicate = (icmp_ln151)> <Delay = 0.00>

State 3 <SV = 2> <Delay = 4.93>
ST_3 : Operation 99 [1/1] (0.00ns)   --->   "%add346_1388_load = load i64 %add346_1388" [d5.cpp:165]   --->   Operation 99 'load' 'add346_1388_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 100 [1/1] (0.00ns)   --->   "%add346_1_1389_load = load i64 %add346_1_1389" [d5.cpp:165]   --->   Operation 100 'load' 'add346_1_1389_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 101 [1/1] (0.00ns)   --->   "%add346_1_2390_load = load i64 %add346_1_2390" [d5.cpp:165]   --->   Operation 101 'load' 'add346_1_2390_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 102 [1/1] (0.00ns)   --->   "%specpipeline_ln153 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty_4" [d5.cpp:153]   --->   Operation 102 'specpipeline' 'specpipeline_ln153' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 103 [1/1] (0.00ns)   --->   "%speclooptripcount_ln151 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 6, i64 6, i64 6" [d5.cpp:151]   --->   Operation 103 'speclooptripcount' 'speclooptripcount_ln151' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 104 [1/1] (0.00ns)   --->   "%specloopname_ln151 = specloopname void @_ssdm_op_SpecLoopName, void @empty_7" [d5.cpp:151]   --->   Operation 104 'specloopname' 'specloopname_ln151' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 105 [1/1] (0.00ns)   --->   "%zext_ln165_4 = zext i32 %tmp_18" [d5.cpp:165]   --->   Operation 105 'zext' 'zext_ln165_4' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 106 '%mul_ln165_3 = mul i64 %zext_ln165_4, i64 %zext_ln165'
ST_3 : Operation 106 [1/1] (2.10ns)   --->   "%mul_ln165_3 = mul i64 %zext_ln165_4, i64 %zext_ln165" [d5.cpp:165]   --->   Operation 106 'mul' 'mul_ln165_3' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 107 [1/1] (0.00ns) (grouped into LUT with out node add_ln165_3)   --->   "%select_ln165_2 = select i1 %icmp_ln165_2, i64 18446744073709551615, i64 0" [d5.cpp:165]   --->   Operation 107 'select' 'select_ln165_2' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 108 [1/1] (0.00ns) (grouped into LUT with out node add_ln165_3)   --->   "%and_ln165_2 = and i64 %mul_ln165_3, i64 %select_ln165_2" [d5.cpp:165]   --->   Operation 108 'and' 'and_ln165_2' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 109 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln165_3 = add i64 %and_ln165_2, i64 %add346_1388_load" [d5.cpp:165]   --->   Operation 109 'add' 'add_ln165_3' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 110 [1/1] (0.00ns)   --->   "%zext_ln165_5 = zext i32 %tmp_19" [d5.cpp:165]   --->   Operation 110 'zext' 'zext_ln165_5' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 111 '%mul_ln165_4 = mul i64 %zext_ln165_5, i64 %zext_ln165'
ST_3 : Operation 111 [1/1] (2.10ns)   --->   "%mul_ln165_4 = mul i64 %zext_ln165_5, i64 %zext_ln165" [d5.cpp:165]   --->   Operation 111 'mul' 'mul_ln165_4' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 112 [1/1] (0.00ns) (grouped into LUT with out node add_ln165_4)   --->   "%select_ln165_3 = select i1 %icmp_ln165_3, i64 18446744073709551615, i64 0" [d5.cpp:165]   --->   Operation 112 'select' 'select_ln165_3' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 113 [1/1] (0.00ns) (grouped into LUT with out node add_ln165_4)   --->   "%and_ln165_3 = and i64 %mul_ln165_4, i64 %select_ln165_3" [d5.cpp:165]   --->   Operation 113 'and' 'and_ln165_3' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 114 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln165_4 = add i64 %and_ln165_3, i64 %add346_1_1389_load" [d5.cpp:165]   --->   Operation 114 'add' 'add_ln165_4' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 115 [1/1] (0.00ns)   --->   "%zext_ln165_6 = zext i32 %tmp_20" [d5.cpp:165]   --->   Operation 115 'zext' 'zext_ln165_6' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 116 '%mul_ln165_5 = mul i64 %zext_ln165_6, i64 %zext_ln165'
ST_3 : Operation 116 [1/1] (2.10ns)   --->   "%mul_ln165_5 = mul i64 %zext_ln165_6, i64 %zext_ln165" [d5.cpp:165]   --->   Operation 116 'mul' 'mul_ln165_5' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 117 [1/1] (0.00ns) (grouped into LUT with out node add_ln165_5)   --->   "%select_ln165_4 = select i1 %icmp_ln165_4, i64 18446744073709551615, i64 0" [d5.cpp:165]   --->   Operation 117 'select' 'select_ln165_4' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 118 [1/1] (0.00ns) (grouped into LUT with out node add_ln165_5)   --->   "%and_ln165_4 = and i64 %mul_ln165_5, i64 %select_ln165_4" [d5.cpp:165]   --->   Operation 118 'and' 'and_ln165_4' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 119 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln165_5 = add i64 %and_ln165_4, i64 %add346_1_2390_load" [d5.cpp:165]   --->   Operation 119 'add' 'add_ln165_5' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 120 [1/1] (0.42ns)   --->   "%store_ln151 = store i64 %add_ln165_5, i64 %add346_1_2390" [d5.cpp:151]   --->   Operation 120 'store' 'store_ln151' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 121 [1/1] (0.42ns)   --->   "%store_ln151 = store i64 %add_ln165_4, i64 %add346_1_1389" [d5.cpp:151]   --->   Operation 121 'store' 'store_ln151' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 122 [1/1] (0.42ns)   --->   "%store_ln151 = store i64 %add_ln165_3, i64 %add346_1388" [d5.cpp:151]   --->   Operation 122 'store' 'store_ln151' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 123 [1/1] (0.00ns)   --->   "%br_ln151 = br void %for.inc353.1" [d5.cpp:151]   --->   Operation 123 'br' 'br_ln151' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 0.427ns
The critical path consists of the following:
	'alloca' operation ('i') [42]  (0.000 ns)
	'store' operation ('store_ln0') of constant 14 on local variable 'i' [71]  (0.427 ns)

 <State 2>: 6.890ns
The critical path consists of the following:
	'load' operation ('i_load', d5.cpp:151) on local variable 'i' [92]  (0.000 ns)
	'icmp' operation ('icmp_ln165', d5.cpp:165) [105]  (0.797 ns)
	'select' operation ('select_ln35', d5.cpp:35) [110]  (0.000 ns)
	'add' operation ('add_ln35', d5.cpp:35) [111]  (0.673 ns)
	'mux' operation ('tmp_17', d5.cpp:165) [112]  (0.489 ns)
	multiplexor before operation 'mul' with delay (1.318 ns)
'mul' operation ('mul_ln165_2', d5.cpp:165) [115]  (2.102 ns)
	'and' operation ('and_ln165_1', d5.cpp:165) [117]  (0.000 ns)
	'add' operation ('add_ln165_2', d5.cpp:165) [118]  (1.085 ns)
	'store' operation ('store_ln151', d5.cpp:151) of variable 'add_ln165_2', d5.cpp:165 on local variable 'add346_2387' [152]  (0.427 ns)

 <State 3>: 4.932ns
The critical path consists of the following:
	multiplexor before operation 'mul' with delay (1.318 ns)
'mul' operation ('mul_ln165_5', d5.cpp:165) [142]  (2.102 ns)
	'and' operation ('and_ln165_4', d5.cpp:165) [144]  (0.000 ns)
	'add' operation ('add_ln165_5', d5.cpp:165) [145]  (1.085 ns)
	'store' operation ('store_ln151', d5.cpp:151) of variable 'add_ln165_5', d5.cpp:165 on local variable 'add346_1_2390' [149]  (0.427 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
