

================================================================
== Vitis HLS Report for 'test_Pipeline_VITIS_LOOP_151_23'
================================================================
* Date:           Fri May 10 16:37:38 2024

* Version:        2023.1.1 (Build 3869133 on Jun 15 2023)
* Project:        D5
* Solution:       comb_38 (Vivado IP Flow Target)
* Product family: zynquplus
* Target device:  xczu9eg-ffvb1156-2-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  7.003 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+-----------+-----------+-----+-----+---------+
    |  Latency (cycles) |   Latency (absolute)  |  Interval | Pipeline|
    |   min   |   max   |    min    |    max    | min | max |   Type  |
    +---------+---------+-----------+-----------+-----+-----+---------+
    |        4|        4|  40.000 ns|  40.000 ns|    4|    4|       no|
    +---------+---------+-----------+-----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +---------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                     |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |      Loop Name      |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +---------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- VITIS_LOOP_151_23  |        2|        2|         2|          1|          1|     2|       yes|
        +---------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 2


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 2
* Pipeline : 1
  Pipeline-0 : II = 1, D = 2, States = { 1 2 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.59>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%arr = alloca i32 1"   --->   Operation 5 'alloca' 'arr' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%arr_1 = alloca i32 1"   --->   Operation 6 'alloca' 'arr_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%arr_2 = alloca i32 1"   --->   Operation 7 'alloca' 'arr_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%arr_3 = alloca i32 1"   --->   Operation 8 'alloca' 'arr_3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%arr_4 = alloca i32 1"   --->   Operation 9 'alloca' 'arr_4' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%arr_5 = alloca i32 1"   --->   Operation 10 'alloca' 'arr_5' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%k = alloca i32 1"   --->   Operation 11 'alloca' 'k' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%i = alloca i32 1"   --->   Operation 12 'alloca' 'i' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%arg1_r_9_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_9_reload"   --->   Operation 13 'read' 'arg1_r_9_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%arg1_r_10_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_10_reload"   --->   Operation 14 'read' 'arg1_r_10_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%arg2_r_14_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_14_reload"   --->   Operation 15 'read' 'arg2_r_14_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%arg2_r_13_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_13_reload"   --->   Operation 16 'read' 'arg2_r_13_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%arg2_r_12_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_12_reload"   --->   Operation 17 'read' 'arg2_r_12_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%arg2_r_11_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_11_reload"   --->   Operation 18 'read' 'arg2_r_11_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%arg2_r_10_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_10_reload"   --->   Operation 19 'read' 'arg2_r_10_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%arg2_r_9_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_9_reload"   --->   Operation 20 'read' 'arg2_r_9_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%arg2_r_8_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_8_reload"   --->   Operation 21 'read' 'arg2_r_8_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%arg2_r_7_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_7_reload"   --->   Operation 22 'read' 'arg2_r_7_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%arg2_r_6_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_6_reload"   --->   Operation 23 'read' 'arg2_r_6_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%arg2_r_5_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_5_reload"   --->   Operation 24 'read' 'arg2_r_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%arg2_r_4_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_4_reload"   --->   Operation 25 'read' 'arg2_r_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%arg2_r_15_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_15_reload"   --->   Operation 26 'read' 'arg2_r_15_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%arg2_r_3_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_3_reload"   --->   Operation 27 'read' 'arg2_r_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%arg2_r_2_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_2_reload"   --->   Operation 28 'read' 'arg2_r_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%arg2_r_1_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_1_reload"   --->   Operation 29 'read' 'arg2_r_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%arg2_r_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_reload"   --->   Operation 30 'read' 'arg2_r_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%arg1_r_14_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_14_reload"   --->   Operation 31 'read' 'arg1_r_14_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%arg1_r_13_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_13_reload"   --->   Operation 32 'read' 'arg1_r_13_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%arg1_r_12_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_12_reload"   --->   Operation 33 'read' 'arg1_r_12_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%arg1_r_11_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_11_reload"   --->   Operation 34 'read' 'arg1_r_11_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%arr_50_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arr_50"   --->   Operation 35 'read' 'arr_50_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%add289435_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add289435_reload"   --->   Operation 36 'read' 'add289435_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%add289_191436_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add289_191436_reload"   --->   Operation 37 'read' 'add289_191436_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%add289_2437_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add289_2437_reload"   --->   Operation 38 'read' 'add289_2437_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "%add289_1438_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add289_1438_reload"   --->   Operation 39 'read' 'add289_1438_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "%add289_1_1439_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add289_1_1439_reload"   --->   Operation 40 'read' 'add289_1_1439_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.42ns)   --->   "%store_ln0 = store i4 14, i4 %i"   --->   Operation 41 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 42 [1/1] (0.42ns)   --->   "%store_ln0 = store i3 0, i3 %k"   --->   Operation 42 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 43 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add289_1_1439_reload_read, i64 %arr_5"   --->   Operation 43 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 44 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add289_1438_reload_read, i64 %arr_4"   --->   Operation 44 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 45 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add289_2437_reload_read, i64 %arr_3"   --->   Operation 45 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 46 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add289_191436_reload_read, i64 %arr_2"   --->   Operation 46 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 47 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add289435_reload_read, i64 %arr_1"   --->   Operation 47 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 48 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %arr_50_read, i64 %arr"   --->   Operation 48 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 49 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.inc353.2.5"   --->   Operation 49 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 50 [1/1] (0.00ns)   --->   "%i_3 = load i4 %i"   --->   Operation 50 'load' 'i_3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 51 [1/1] (0.79ns)   --->   "%icmp_ln151 = icmp_ugt  i4 %i_3, i4 8" [d5.cpp:151]   --->   Operation 51 'icmp' 'icmp_ln151' <Predicate = true> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 52 [1/1] (0.00ns)   --->   "%br_ln151 = br i1 %icmp_ln151, void %for.inc386.preheader.exitStub, void %for.inc353.2.5.split" [d5.cpp:151]   --->   Operation 52 'br' 'br_ln151' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 53 [1/1] (0.00ns)   --->   "%k_load = load i3 %k" [d5.cpp:151]   --->   Operation 53 'load' 'k_load' <Predicate = (icmp_ln151)> <Delay = 0.00>
ST_1 : Operation 54 [1/1] (0.00ns)   --->   "%trunc_ln151 = trunc i3 %k_load" [d5.cpp:151]   --->   Operation 54 'trunc' 'trunc_ln151' <Predicate = (icmp_ln151)> <Delay = 0.00>
ST_1 : Operation 55 [1/1] (0.00ns)   --->   "%zext_ln151 = zext i2 %trunc_ln151" [d5.cpp:151]   --->   Operation 55 'zext' 'zext_ln151' <Predicate = (icmp_ln151)> <Delay = 0.00>
ST_1 : Operation 56 [1/1] (0.79ns)   --->   "%icmp_ln165 = icmp_ult  i4 %i_3, i4 14" [d5.cpp:165]   --->   Operation 56 'icmp' 'icmp_ln165' <Predicate = (icmp_ln151)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 57 [1/1] (0.54ns)   --->   "%add_ln166 = add i3 %zext_ln151, i3 7" [d5.cpp:166]   --->   Operation 57 'add' 'add_ln166' <Predicate = (icmp_ln151)> <Delay = 0.54> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 58 [1/1] (0.79ns)   --->   "%empty = add i4 %i_3, i4 15"   --->   Operation 58 'add' 'empty' <Predicate = (icmp_ln151)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 59 [1/1] (0.79ns)   --->   "%icmp_ln165_3 = icmp_ult  i4 %empty, i4 13" [d5.cpp:165]   --->   Operation 59 'icmp' 'icmp_ln165_3' <Predicate = (icmp_ln151)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 60 [1/1] (0.79ns)   --->   "%icmp_ln165_4 = icmp_ult  i4 %empty, i4 12" [d5.cpp:165]   --->   Operation 60 'icmp' 'icmp_ln165_4' <Predicate = (icmp_ln151)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 61 [1/1] (0.79ns)   --->   "%icmp_ln165_5 = icmp_ult  i4 %empty, i4 11" [d5.cpp:165]   --->   Operation 61 'icmp' 'icmp_ln165_5' <Predicate = (icmp_ln151)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 62 [1/1] (0.67ns)   --->   "%add_ln158 = add i3 %k_load, i3 3" [d5.cpp:158]   --->   Operation 62 'add' 'add_ln158' <Predicate = (icmp_ln151)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 63 [1/1] (0.79ns)   --->   "%empty_39 = add i4 %i_3, i4 14"   --->   Operation 63 'add' 'empty_39' <Predicate = (icmp_ln151)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 64 [1/1] (0.79ns)   --->   "%icmp_ln165_6 = icmp_ult  i4 %empty_39, i4 12" [d5.cpp:165]   --->   Operation 64 'icmp' 'icmp_ln165_6' <Predicate = (icmp_ln151)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 65 [1/1] (0.79ns)   --->   "%icmp_ln165_7 = icmp_ult  i4 %empty_39, i4 11" [d5.cpp:165]   --->   Operation 65 'icmp' 'icmp_ln165_7' <Predicate = (icmp_ln151)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 66 [1/1] (0.79ns)   --->   "%icmp_ln165_8 = icmp_ult  i4 %empty_39, i4 10" [d5.cpp:165]   --->   Operation 66 'icmp' 'icmp_ln165_8' <Predicate = (icmp_ln151)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 67 [1/1] (0.79ns)   --->   "%add_ln151 = add i4 %i_3, i4 13" [d5.cpp:151]   --->   Operation 67 'add' 'add_ln151' <Predicate = (icmp_ln151)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 68 [1/1] (0.42ns)   --->   "%store_ln151 = store i4 %add_ln151, i4 %i" [d5.cpp:151]   --->   Operation 68 'store' 'store_ln151' <Predicate = (icmp_ln151)> <Delay = 0.42>
ST_1 : Operation 69 [1/1] (0.42ns)   --->   "%store_ln151 = store i3 %add_ln158, i3 %k" [d5.cpp:151]   --->   Operation 69 'store' 'store_ln151' <Predicate = (icmp_ln151)> <Delay = 0.42>
ST_1 : Operation 180 [1/1] (0.00ns)   --->   "%arr_load_1 = load i64 %arr"   --->   Operation 180 'load' 'arr_load_1' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_1 : Operation 181 [1/1] (0.00ns)   --->   "%arr_1_load_1 = load i64 %arr_1"   --->   Operation 181 'load' 'arr_1_load_1' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_1 : Operation 182 [1/1] (0.00ns)   --->   "%arr_2_load_1 = load i64 %arr_2"   --->   Operation 182 'load' 'arr_2_load_1' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_1 : Operation 183 [1/1] (0.00ns)   --->   "%arr_3_load_1 = load i64 %arr_3"   --->   Operation 183 'load' 'arr_3_load_1' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_1 : Operation 184 [1/1] (0.00ns)   --->   "%arr_4_load_1 = load i64 %arr_4"   --->   Operation 184 'load' 'arr_4_load_1' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_1 : Operation 185 [1/1] (0.00ns)   --->   "%arr_5_load_1 = load i64 %arr_5"   --->   Operation 185 'load' 'arr_5_load_1' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_1 : Operation 186 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add346_5434_out, i64 %arr_5_load_1"   --->   Operation 186 'write' 'write_ln0' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_1 : Operation 187 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add346_4433_out, i64 %arr_4_load_1"   --->   Operation 187 'write' 'write_ln0' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_1 : Operation 188 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add346_3432_out, i64 %arr_3_load_1"   --->   Operation 188 'write' 'write_ln0' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_1 : Operation 189 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add346_277431_out, i64 %arr_2_load_1"   --->   Operation 189 'write' 'write_ln0' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_1 : Operation 190 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add346_162430_out, i64 %arr_1_load_1"   --->   Operation 190 'write' 'write_ln0' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_1 : Operation 191 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add346429_out, i64 %arr_load_1"   --->   Operation 191 'write' 'write_ln0' <Predicate = (!icmp_ln151)> <Delay = 0.00>
ST_1 : Operation 192 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 192 'ret' 'ret_ln0' <Predicate = (!icmp_ln151)> <Delay = 0.00>

State 2 <SV = 1> <Delay = 7.00>
ST_2 : Operation 70 [1/1] (0.00ns)   --->   "%arr_load = load i64 %arr" [d5.cpp:165]   --->   Operation 70 'load' 'arr_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 71 [1/1] (0.00ns)   --->   "%arr_1_load = load i64 %arr_1" [d5.cpp:165]   --->   Operation 71 'load' 'arr_1_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 72 [1/1] (0.00ns)   --->   "%arr_2_load = load i64 %arr_2" [d5.cpp:165]   --->   Operation 72 'load' 'arr_2_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 73 [1/1] (0.00ns)   --->   "%arr_3_load = load i64 %arr_3" [d5.cpp:165]   --->   Operation 73 'load' 'arr_3_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 74 [1/1] (0.00ns)   --->   "%arr_4_load = load i64 %arr_4" [d5.cpp:165]   --->   Operation 74 'load' 'arr_4_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 75 [1/1] (0.00ns)   --->   "%arr_5_load = load i64 %arr_5" [d5.cpp:165]   --->   Operation 75 'load' 'arr_5_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 76 [1/1] (0.00ns)   --->   "%specpipeline_ln153 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty_4" [d5.cpp:153]   --->   Operation 76 'specpipeline' 'specpipeline_ln153' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 77 [1/1] (0.00ns)   --->   "%speclooptripcount_ln151 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 2, i64 2, i64 2" [d5.cpp:151]   --->   Operation 77 'speclooptripcount' 'speclooptripcount_ln151' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 78 [1/1] (0.00ns)   --->   "%specloopname_ln151 = specloopname void @_ssdm_op_SpecLoopName, void @empty_10" [d5.cpp:151]   --->   Operation 78 'specloopname' 'specloopname_ln151' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 79 [1/1] (0.54ns)   --->   "%tmp_s = mux i32 @_ssdm_op_Mux.ap_auto.15i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg1_r_11_reload_read, i32 %arg1_r_12_reload_read, i32 %arg1_r_13_reload_read, i32 %arg1_r_14_reload_read, i4 %i_3" [d5.cpp:165]   --->   Operation 79 'mux' 'tmp_s' <Predicate = true> <Delay = 0.54> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 80 [1/1] (0.00ns)   --->   "%zext_ln165 = zext i32 %tmp_s" [d5.cpp:165]   --->   Operation 80 'zext' 'zext_ln165' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 81 [1/1] (0.52ns)   --->   "%tmp_41 = mux i32 @_ssdm_op_Mux.ap_auto.4i32.i2, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i2 %trunc_ln151" [d5.cpp:165]   --->   Operation 81 'mux' 'tmp_41' <Predicate = true> <Delay = 0.52> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.52> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 82 [1/1] (0.00ns)   --->   "%zext_ln165_1 = zext i32 %tmp_41" [d5.cpp:165]   --->   Operation 82 'zext' 'zext_ln165_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 83 [1/1] (0.52ns)   --->   "%tmp_42 = mux i32 @_ssdm_op_Mux.ap_auto.4i32.i2, i32 %arg2_r_15_reload_read, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i2 %trunc_ln151" [d5.cpp:165]   --->   Operation 83 'mux' 'tmp_42' <Predicate = true> <Delay = 0.52> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.52> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 84 [1/1] (0.00ns)   --->   "%zext_ln165_2 = zext i32 %tmp_42" [d5.cpp:165]   --->   Operation 84 'zext' 'zext_ln165_2' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 85 [1/1] (0.00ns)   --->   "%zext_ln35 = zext i1 %icmp_ln165" [d5.cpp:35]   --->   Operation 85 'zext' 'zext_ln35' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 86 [1/1] (0.67ns)   --->   "%sub_ln35_12 = sub i3 %add_ln166, i3 %zext_ln35" [d5.cpp:35]   --->   Operation 86 'sub' 'sub_ln35_12' <Predicate = true> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 87 [1/1] (0.00ns)   --->   "%sext_ln165_9 = sext i3 %sub_ln35_12" [d5.cpp:165]   --->   Operation 87 'sext' 'sext_ln165_9' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 88 [1/1] (0.48ns)   --->   "%tmp_43 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sext_ln165_9" [d5.cpp:165]   --->   Operation 88 'mux' 'tmp_43' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 89 [1/1] (0.00ns)   --->   "%zext_ln165_3 = zext i32 %tmp_43" [d5.cpp:165]   --->   Operation 89 'zext' 'zext_ln165_3' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 90 [1/1] (0.79ns)   --->   "%icmp_ln165_1 = icmp_ult  i4 %i_3, i4 13" [d5.cpp:165]   --->   Operation 90 'icmp' 'icmp_ln165_1' <Predicate = true> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 91 [1/1] (0.00ns)   --->   "%zext_ln35_6 = zext i1 %icmp_ln165_1" [d5.cpp:35]   --->   Operation 91 'zext' 'zext_ln35_6' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 92 [1/1] (0.67ns)   --->   "%sub_ln35_13 = sub i3 %sub_ln35_12, i3 %zext_ln35_6" [d5.cpp:35]   --->   Operation 92 'sub' 'sub_ln35_13' <Predicate = true> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 93 [1/1] (0.00ns)   --->   "%sext_ln165_10 = sext i3 %sub_ln35_13" [d5.cpp:165]   --->   Operation 93 'sext' 'sext_ln165_10' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 94 [1/1] (0.48ns)   --->   "%tmp_44 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sext_ln165_10" [d5.cpp:165]   --->   Operation 94 'mux' 'tmp_44' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 95 [1/1] (0.00ns)   --->   "%zext_ln165_4 = zext i32 %tmp_44" [d5.cpp:165]   --->   Operation 95 'zext' 'zext_ln165_4' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 96 [1/1] (0.79ns)   --->   "%icmp_ln165_2 = icmp_ult  i4 %i_3, i4 12" [d5.cpp:165]   --->   Operation 96 'icmp' 'icmp_ln165_2' <Predicate = true> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 97 [1/1] (0.54ns)   --->   "%tmp_45 = mux i32 @_ssdm_op_Mux.ap_auto.15i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg1_r_10_reload_read, i32 %arg1_r_11_reload_read, i32 %arg1_r_12_reload_read, i32 %arg1_r_13_reload_read, i4 %i_3" [d5.cpp:165]   --->   Operation 97 'mux' 'tmp_45' <Predicate = true> <Delay = 0.54> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 98 [1/1] (0.00ns)   --->   "%zext_ln165_5 = zext i32 %tmp_45" [d5.cpp:165]   --->   Operation 98 'zext' 'zext_ln165_5' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 99 [1/1] (0.52ns)   --->   "%tmp_46 = mux i32 @_ssdm_op_Mux.ap_auto.4i32.i2, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i2 %trunc_ln151" [d5.cpp:165]   --->   Operation 99 'mux' 'tmp_46' <Predicate = true> <Delay = 0.52> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.52> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 100 [1/1] (0.00ns)   --->   "%zext_ln165_6 = zext i32 %tmp_46" [d5.cpp:165]   --->   Operation 100 'zext' 'zext_ln165_6' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 101 [1/1] (0.00ns)   --->   "%zext_ln35_7 = zext i1 %icmp_ln165_3" [d5.cpp:35]   --->   Operation 101 'zext' 'zext_ln35_7' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 102 [1/1] (0.67ns)   --->   "%sub_ln35_14 = sub i3 %add_ln166, i3 %zext_ln35_7" [d5.cpp:35]   --->   Operation 102 'sub' 'sub_ln35_14' <Predicate = true> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 103 [1/1] (0.00ns)   --->   "%sext_ln165_11 = sext i3 %sub_ln35_14" [d5.cpp:165]   --->   Operation 103 'sext' 'sext_ln165_11' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 104 [1/1] (0.48ns)   --->   "%tmp_47 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sext_ln165_11" [d5.cpp:165]   --->   Operation 104 'mux' 'tmp_47' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 105 [1/1] (0.00ns)   --->   "%zext_ln165_7 = zext i32 %tmp_47" [d5.cpp:165]   --->   Operation 105 'zext' 'zext_ln165_7' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 106 [1/1] (0.00ns)   --->   "%zext_ln35_8 = zext i1 %icmp_ln165_4" [d5.cpp:35]   --->   Operation 106 'zext' 'zext_ln35_8' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 107 [1/1] (0.67ns)   --->   "%sub_ln35_15 = sub i3 %sub_ln35_14, i3 %zext_ln35_8" [d5.cpp:35]   --->   Operation 107 'sub' 'sub_ln35_15' <Predicate = true> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 108 [1/1] (0.00ns)   --->   "%sext_ln165_12 = sext i3 %sub_ln35_15" [d5.cpp:165]   --->   Operation 108 'sext' 'sext_ln165_12' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 109 [1/1] (0.48ns)   --->   "%tmp_48 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sext_ln165_12" [d5.cpp:165]   --->   Operation 109 'mux' 'tmp_48' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 110 [1/1] (0.00ns)   --->   "%zext_ln165_8 = zext i32 %tmp_48" [d5.cpp:165]   --->   Operation 110 'zext' 'zext_ln165_8' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 111 [1/1] (0.54ns)   --->   "%tmp_49 = mux i32 @_ssdm_op_Mux.ap_auto.15i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg1_r_9_reload_read, i32 %arg1_r_10_reload_read, i32 %arg1_r_11_reload_read, i32 %arg1_r_12_reload_read, i4 %i_3" [d5.cpp:165]   --->   Operation 111 'mux' 'tmp_49' <Predicate = true> <Delay = 0.54> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 112 [1/1] (0.00ns)   --->   "%zext_ln165_9 = zext i32 %tmp_49" [d5.cpp:165]   --->   Operation 112 'zext' 'zext_ln165_9' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 113 [1/1] (0.52ns)   --->   "%tmp_50 = mux i32 @_ssdm_op_Mux.ap_auto.4i32.i2, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i2 %trunc_ln151" [d5.cpp:165]   --->   Operation 113 'mux' 'tmp_50' <Predicate = true> <Delay = 0.52> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.52> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 114 [1/1] (0.00ns)   --->   "%zext_ln165_10 = zext i32 %tmp_50" [d5.cpp:165]   --->   Operation 114 'zext' 'zext_ln165_10' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (1.33ns)   --->   Input mux for Operation 115 '%mul_ln165 = mul i64 %zext_ln165_10, i64 %zext_ln165_9'
ST_2 : Operation 115 [1/1] (2.08ns)   --->   "%mul_ln165 = mul i64 %zext_ln165_10, i64 %zext_ln165_9" [d5.cpp:165]   --->   Operation 115 'mul' 'mul_ln165' <Predicate = true> <Delay = 2.08> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.33ns)   --->   Input mux for Operation 116 '%mul_ln165_1 = mul i64 %zext_ln165_1, i64 %zext_ln165'
ST_2 : Operation 116 [1/1] (2.08ns)   --->   "%mul_ln165_1 = mul i64 %zext_ln165_1, i64 %zext_ln165" [d5.cpp:165]   --->   Operation 116 'mul' 'mul_ln165_1' <Predicate = true> <Delay = 2.08> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.33ns)   --->   Input mux for Operation 117 '%mul_ln165_2 = mul i64 %zext_ln165_6, i64 %zext_ln165_5'
ST_2 : Operation 117 [1/1] (2.08ns)   --->   "%mul_ln165_2 = mul i64 %zext_ln165_6, i64 %zext_ln165_5" [d5.cpp:165]   --->   Operation 117 'mul' 'mul_ln165_2' <Predicate = true> <Delay = 2.08> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 118 [1/1] (1.08ns)   --->   "%add_ln165 = add i64 %mul_ln165_2, i64 %mul_ln165" [d5.cpp:165]   --->   Operation 118 'add' 'add_ln165' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 119 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln165_1 = add i64 %add_ln165, i64 %mul_ln165_1" [d5.cpp:165]   --->   Operation 119 'add' 'add_ln165_1' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 120 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%arr_6 = add i64 %arr_load, i64 %add_ln165_1" [d5.cpp:165]   --->   Operation 120 'add' 'arr_6' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : [1/1] (1.33ns)   --->   Input mux for Operation 121 '%mul_ln165_3 = mul i64 %zext_ln165_2, i64 %zext_ln165'
ST_2 : Operation 121 [1/1] (2.08ns)   --->   "%mul_ln165_3 = mul i64 %zext_ln165_2, i64 %zext_ln165" [d5.cpp:165]   --->   Operation 121 'mul' 'mul_ln165_3' <Predicate = true> <Delay = 2.08> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 122 [1/1] (0.00ns) (grouped into LUT with out node and_ln165)   --->   "%select_ln165 = select i1 %icmp_ln165, i64 18446744073709551615, i64 0" [d5.cpp:165]   --->   Operation 122 'select' 'select_ln165' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 123 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln165 = and i64 %mul_ln165_3, i64 %select_ln165" [d5.cpp:165]   --->   Operation 123 'and' 'and_ln165' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.33ns)   --->   Input mux for Operation 124 '%mul_ln165_4 = mul i64 %zext_ln165_9, i64 %zext_ln165_6'
ST_2 : Operation 124 [1/1] (2.08ns)   --->   "%mul_ln165_4 = mul i64 %zext_ln165_9, i64 %zext_ln165_6" [d5.cpp:165]   --->   Operation 124 'mul' 'mul_ln165_4' <Predicate = true> <Delay = 2.08> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.33ns)   --->   Input mux for Operation 125 '%mul_ln165_5 = mul i64 %zext_ln165_5, i64 %zext_ln165_1'
ST_2 : Operation 125 [1/1] (2.08ns)   --->   "%mul_ln165_5 = mul i64 %zext_ln165_5, i64 %zext_ln165_1" [d5.cpp:165]   --->   Operation 125 'mul' 'mul_ln165_5' <Predicate = true> <Delay = 2.08> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 126 [1/1] (1.08ns)   --->   "%add_ln165_3 = add i64 %mul_ln165_5, i64 %mul_ln165_4" [d5.cpp:165]   --->   Operation 126 'add' 'add_ln165_3' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 127 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln165_4 = add i64 %add_ln165_3, i64 %and_ln165" [d5.cpp:165]   --->   Operation 127 'add' 'add_ln165_4' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 128 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%arr_7 = add i64 %arr_1_load, i64 %add_ln165_4" [d5.cpp:165]   --->   Operation 128 'add' 'arr_7' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : [1/1] (1.33ns)   --->   Input mux for Operation 129 '%mul_ln165_6 = mul i64 %zext_ln165_3, i64 %zext_ln165'
ST_2 : Operation 129 [1/1] (2.08ns)   --->   "%mul_ln165_6 = mul i64 %zext_ln165_3, i64 %zext_ln165" [d5.cpp:165]   --->   Operation 129 'mul' 'mul_ln165_6' <Predicate = true> <Delay = 2.08> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.33ns)   --->   Input mux for Operation 130 '%mul_ln165_7 = mul i64 %zext_ln165_5, i64 %zext_ln165_2'
ST_2 : Operation 130 [1/1] (2.08ns)   --->   "%mul_ln165_7 = mul i64 %zext_ln165_5, i64 %zext_ln165_2" [d5.cpp:165]   --->   Operation 130 'mul' 'mul_ln165_7' <Predicate = true> <Delay = 2.08> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 131 [1/1] (0.00ns) (grouped into LUT with out node and_ln165_1)   --->   "%select_ln165_1 = select i1 %icmp_ln165_1, i64 18446744073709551615, i64 0" [d5.cpp:165]   --->   Operation 131 'select' 'select_ln165_1' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 132 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln165_1 = and i64 %mul_ln165_6, i64 %select_ln165_1" [d5.cpp:165]   --->   Operation 132 'and' 'and_ln165_1' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 133 [1/1] (0.00ns) (grouped into LUT with out node add_ln165_6)   --->   "%select_ln165_2 = select i1 %icmp_ln165_3, i64 18446744073709551615, i64 0" [d5.cpp:165]   --->   Operation 133 'select' 'select_ln165_2' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 134 [1/1] (0.00ns) (grouped into LUT with out node add_ln165_6)   --->   "%and_ln165_2 = and i64 %mul_ln165_7, i64 %select_ln165_2" [d5.cpp:165]   --->   Operation 134 'and' 'and_ln165_2' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.33ns)   --->   Input mux for Operation 135 '%mul_ln165_8 = mul i64 %zext_ln165_9, i64 %zext_ln165_1'
ST_2 : Operation 135 [1/1] (2.08ns)   --->   "%mul_ln165_8 = mul i64 %zext_ln165_9, i64 %zext_ln165_1" [d5.cpp:165]   --->   Operation 135 'mul' 'mul_ln165_8' <Predicate = true> <Delay = 2.08> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 136 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln165_6 = add i64 %and_ln165_2, i64 %mul_ln165_8" [d5.cpp:165]   --->   Operation 136 'add' 'add_ln165_6' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 137 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln165_7 = add i64 %add_ln165_6, i64 %and_ln165_1" [d5.cpp:165]   --->   Operation 137 'add' 'add_ln165_7' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 138 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%arr_8 = add i64 %arr_2_load, i64 %add_ln165_7" [d5.cpp:165]   --->   Operation 138 'add' 'arr_8' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : [1/1] (1.33ns)   --->   Input mux for Operation 139 '%mul_ln165_9 = mul i64 %zext_ln165_9, i64 %zext_ln165_2'
ST_2 : Operation 139 [1/1] (2.08ns)   --->   "%mul_ln165_9 = mul i64 %zext_ln165_9, i64 %zext_ln165_2" [d5.cpp:165]   --->   Operation 139 'mul' 'mul_ln165_9' <Predicate = true> <Delay = 2.08> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.33ns)   --->   Input mux for Operation 140 '%mul_ln165_10 = mul i64 %zext_ln165_4, i64 %zext_ln165'
ST_2 : Operation 140 [1/1] (2.08ns)   --->   "%mul_ln165_10 = mul i64 %zext_ln165_4, i64 %zext_ln165" [d5.cpp:165]   --->   Operation 140 'mul' 'mul_ln165_10' <Predicate = true> <Delay = 2.08> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.33ns)   --->   Input mux for Operation 141 '%mul_ln165_11 = mul i64 %zext_ln165_7, i64 %zext_ln165_5'
ST_2 : Operation 141 [1/1] (2.08ns)   --->   "%mul_ln165_11 = mul i64 %zext_ln165_7, i64 %zext_ln165_5" [d5.cpp:165]   --->   Operation 141 'mul' 'mul_ln165_11' <Predicate = true> <Delay = 2.08> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 142 [1/1] (0.00ns) (grouped into LUT with out node add_ln165_9)   --->   "%select_ln165_3 = select i1 %icmp_ln165_6, i64 18446744073709551615, i64 0" [d5.cpp:165]   --->   Operation 142 'select' 'select_ln165_3' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 143 [1/1] (0.00ns) (grouped into LUT with out node add_ln165_9)   --->   "%and_ln165_3 = and i64 %mul_ln165_9, i64 %select_ln165_3" [d5.cpp:165]   --->   Operation 143 'and' 'and_ln165_3' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 144 [1/1] (0.00ns) (grouped into LUT with out node and_ln165_4)   --->   "%select_ln165_4 = select i1 %icmp_ln165_2, i64 18446744073709551615, i64 0" [d5.cpp:165]   --->   Operation 144 'select' 'select_ln165_4' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 145 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln165_4 = and i64 %mul_ln165_10, i64 %select_ln165_4" [d5.cpp:165]   --->   Operation 145 'and' 'and_ln165_4' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 146 [1/1] (0.00ns) (grouped into LUT with out node add_ln165_9)   --->   "%select_ln165_5 = select i1 %icmp_ln165_4, i64 18446744073709551615, i64 0" [d5.cpp:165]   --->   Operation 146 'select' 'select_ln165_5' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 147 [1/1] (0.00ns) (grouped into LUT with out node add_ln165_9)   --->   "%and_ln165_5 = and i64 %mul_ln165_11, i64 %select_ln165_5" [d5.cpp:165]   --->   Operation 147 'and' 'and_ln165_5' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 148 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln165_9 = add i64 %and_ln165_5, i64 %and_ln165_3" [d5.cpp:165]   --->   Operation 148 'add' 'add_ln165_9' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 149 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln165_10 = add i64 %add_ln165_9, i64 %and_ln165_4" [d5.cpp:165]   --->   Operation 149 'add' 'add_ln165_10' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 150 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%arr_9 = add i64 %arr_3_load, i64 %add_ln165_10" [d5.cpp:165]   --->   Operation 150 'add' 'arr_9' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 151 [1/1] (0.00ns)   --->   "%zext_ln35_9 = zext i1 %icmp_ln165_6" [d5.cpp:35]   --->   Operation 151 'zext' 'zext_ln35_9' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 152 [1/1] (0.67ns)   --->   "%sub_ln35_16 = sub i3 %add_ln166, i3 %zext_ln35_9" [d5.cpp:35]   --->   Operation 152 'sub' 'sub_ln35_16' <Predicate = true> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 153 [1/1] (0.00ns)   --->   "%sext_ln165 = sext i3 %sub_ln35_16" [d5.cpp:165]   --->   Operation 153 'sext' 'sext_ln165' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 154 [1/1] (0.48ns)   --->   "%tmp_51 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sext_ln165" [d5.cpp:165]   --->   Operation 154 'mux' 'tmp_51' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 155 [1/1] (0.00ns)   --->   "%zext_ln165_11 = zext i32 %tmp_51" [d5.cpp:165]   --->   Operation 155 'zext' 'zext_ln165_11' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (1.33ns)   --->   Input mux for Operation 156 '%mul_ln165_12 = mul i64 %zext_ln165_8, i64 %zext_ln165_5'
ST_2 : Operation 156 [1/1] (2.08ns)   --->   "%mul_ln165_12 = mul i64 %zext_ln165_8, i64 %zext_ln165_5" [d5.cpp:165]   --->   Operation 156 'mul' 'mul_ln165_12' <Predicate = true> <Delay = 2.08> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 157 [1/1] (0.00ns) (grouped into LUT with out node and_ln165_6)   --->   "%select_ln165_6 = select i1 %icmp_ln165_5, i64 18446744073709551615, i64 0" [d5.cpp:165]   --->   Operation 157 'select' 'select_ln165_6' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 158 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln165_6 = and i64 %mul_ln165_12, i64 %select_ln165_6" [d5.cpp:165]   --->   Operation 158 'and' 'and_ln165_6' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.33ns)   --->   Input mux for Operation 159 '%mul_ln165_13 = mul i64 %zext_ln165_11, i64 %zext_ln165_9'
ST_2 : Operation 159 [1/1] (2.08ns)   --->   "%mul_ln165_13 = mul i64 %zext_ln165_11, i64 %zext_ln165_9" [d5.cpp:165]   --->   Operation 159 'mul' 'mul_ln165_13' <Predicate = true> <Delay = 2.08> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 160 [1/1] (0.00ns) (grouped into LUT with out node and_ln165_7)   --->   "%select_ln165_7 = select i1 %icmp_ln165_7, i64 18446744073709551615, i64 0" [d5.cpp:165]   --->   Operation 160 'select' 'select_ln165_7' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 161 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln165_7 = and i64 %mul_ln165_13, i64 %select_ln165_7" [d5.cpp:165]   --->   Operation 161 'and' 'and_ln165_7' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 162 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln165_12 = add i64 %and_ln165_7, i64 %and_ln165_6" [d5.cpp:165]   --->   Operation 162 'add' 'add_ln165_12' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 163 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%arr_10 = add i64 %arr_4_load, i64 %add_ln165_12" [d5.cpp:165]   --->   Operation 163 'add' 'arr_10' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 164 [1/1] (0.00ns)   --->   "%zext_ln35_10 = zext i1 %icmp_ln165_7" [d5.cpp:35]   --->   Operation 164 'zext' 'zext_ln35_10' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 165 [1/1] (0.67ns)   --->   "%sub_ln35_17 = sub i3 %sub_ln35_16, i3 %zext_ln35_10" [d5.cpp:35]   --->   Operation 165 'sub' 'sub_ln35_17' <Predicate = true> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 166 [1/1] (0.00ns)   --->   "%sext_ln165_13 = sext i3 %sub_ln35_17" [d5.cpp:165]   --->   Operation 166 'sext' 'sext_ln165_13' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 167 [1/1] (0.48ns)   --->   "%tmp_52 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sext_ln165_13" [d5.cpp:165]   --->   Operation 167 'mux' 'tmp_52' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 168 [1/1] (0.00ns)   --->   "%zext_ln165_12 = zext i32 %tmp_52" [d5.cpp:165]   --->   Operation 168 'zext' 'zext_ln165_12' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (1.33ns)   --->   Input mux for Operation 169 '%mul_ln165_14 = mul i64 %zext_ln165_12, i64 %zext_ln165_9'
ST_2 : Operation 169 [1/1] (2.08ns)   --->   "%mul_ln165_14 = mul i64 %zext_ln165_12, i64 %zext_ln165_9" [d5.cpp:165]   --->   Operation 169 'mul' 'mul_ln165_14' <Predicate = true> <Delay = 2.08> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 170 [1/1] (0.00ns) (grouped into LUT with out node arr_11)   --->   "%select_ln165_8 = select i1 %icmp_ln165_8, i64 18446744073709551615, i64 0" [d5.cpp:165]   --->   Operation 170 'select' 'select_ln165_8' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 171 [1/1] (0.00ns) (grouped into LUT with out node arr_11)   --->   "%and_ln165_8 = and i64 %mul_ln165_14, i64 %select_ln165_8" [d5.cpp:165]   --->   Operation 171 'and' 'and_ln165_8' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 172 [1/1] (1.08ns) (out node of the LUT)   --->   "%arr_11 = add i64 %and_ln165_8, i64 %arr_5_load" [d5.cpp:165]   --->   Operation 172 'add' 'arr_11' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 173 [1/1] (0.42ns)   --->   "%store_ln151 = store i64 %arr_11, i64 %arr_5" [d5.cpp:151]   --->   Operation 173 'store' 'store_ln151' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 174 [1/1] (0.42ns)   --->   "%store_ln151 = store i64 %arr_10, i64 %arr_4" [d5.cpp:151]   --->   Operation 174 'store' 'store_ln151' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 175 [1/1] (0.42ns)   --->   "%store_ln151 = store i64 %arr_9, i64 %arr_3" [d5.cpp:151]   --->   Operation 175 'store' 'store_ln151' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 176 [1/1] (0.42ns)   --->   "%store_ln151 = store i64 %arr_8, i64 %arr_2" [d5.cpp:151]   --->   Operation 176 'store' 'store_ln151' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 177 [1/1] (0.42ns)   --->   "%store_ln151 = store i64 %arr_7, i64 %arr_1" [d5.cpp:151]   --->   Operation 177 'store' 'store_ln151' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 178 [1/1] (0.42ns)   --->   "%store_ln151 = store i64 %arr_6, i64 %arr" [d5.cpp:151]   --->   Operation 178 'store' 'store_ln151' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 179 [1/1] (0.00ns)   --->   "%br_ln151 = br void %for.inc353.2.5" [d5.cpp:151]   --->   Operation 179 'br' 'br_ln151' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 1.594ns
The critical path consists of the following:
	'alloca' operation ('i') [42]  (0.000 ns)
	'load' operation ('i') on local variable 'i' [81]  (0.000 ns)
	'add' operation ('empty') [117]  (0.797 ns)
	'icmp' operation ('icmp_ln165_3', d5.cpp:165) [122]  (0.797 ns)

 <State 2>: 7.003ns
The critical path consists of the following:
	'icmp' operation ('icmp_ln165_1', d5.cpp:165) [110]  (0.797 ns)
	'sub' operation ('sub_ln35_13', d5.cpp:35) [112]  (0.673 ns)
	'mux' operation ('tmp_44', d5.cpp:165) [114]  (0.489 ns)
	multiplexor before operation 'mul' with delay (1.335 ns)
'mul' operation ('mul_ln165_10', d5.cpp:165) [167]  (2.085 ns)
	'and' operation ('and_ln165_4', d5.cpp:165) [172]  (0.379 ns)
	'add' operation ('add_ln165_10', d5.cpp:165) [176]  (0.000 ns)
	'add' operation ('arr', d5.cpp:165) [177]  (0.819 ns)
	'store' operation ('store_ln151', d5.cpp:151) of variable 'arr', d5.cpp:165 on local variable 'arr' [207]  (0.427 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
