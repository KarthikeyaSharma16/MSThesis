// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_151_23 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add289_4353_reload,
        add289_3352_reload,
        add289_2147351_reload,
        add289_1133350_reload,
        add289349_reload,
        arr_57,
        arg1_r_11_reload,
        arg1_r_12_reload,
        arg1_r_13_reload,
        arg1_r_14_reload,
        arg2_r_reload,
        arg2_r_1_reload,
        arg2_r_2_reload,
        arg2_r_3_reload,
        arg2_r_15_reload,
        arg2_r_4_reload,
        arg2_r_5_reload,
        arg2_r_6_reload,
        arg2_r_7_reload,
        arg2_r_8_reload,
        arg2_r_9_reload,
        arg2_r_10_reload,
        arg2_r_11_reload,
        arg2_r_12_reload,
        arg2_r_13_reload,
        arg2_r_14_reload,
        arg1_r_10_reload,
        arg1_r_9_reload,
        add346_2105_1348_out,
        add346_2105_1348_out_ap_vld,
        add346_2105347_out,
        add346_2105347_out_ap_vld,
        add346_190_1346_out,
        add346_190_1346_out_ap_vld,
        add346_190345_out,
        add346_190345_out_ap_vld,
        add346_1119344_out,
        add346_1119344_out_ap_vld,
        add346343_out,
        add346343_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] add289_4353_reload;
input  [63:0] add289_3352_reload;
input  [63:0] add289_2147351_reload;
input  [63:0] add289_1133350_reload;
input  [63:0] add289349_reload;
input  [63:0] arr_57;
input  [31:0] arg1_r_11_reload;
input  [31:0] arg1_r_12_reload;
input  [31:0] arg1_r_13_reload;
input  [31:0] arg1_r_14_reload;
input  [31:0] arg2_r_reload;
input  [31:0] arg2_r_1_reload;
input  [31:0] arg2_r_2_reload;
input  [31:0] arg2_r_3_reload;
input  [31:0] arg2_r_15_reload;
input  [31:0] arg2_r_4_reload;
input  [31:0] arg2_r_5_reload;
input  [31:0] arg2_r_6_reload;
input  [31:0] arg2_r_7_reload;
input  [31:0] arg2_r_8_reload;
input  [31:0] arg2_r_9_reload;
input  [31:0] arg2_r_10_reload;
input  [31:0] arg2_r_11_reload;
input  [31:0] arg2_r_12_reload;
input  [31:0] arg2_r_13_reload;
input  [31:0] arg2_r_14_reload;
input  [31:0] arg1_r_10_reload;
input  [31:0] arg1_r_9_reload;
output  [63:0] add346_2105_1348_out;
output   add346_2105_1348_out_ap_vld;
output  [63:0] add346_2105347_out;
output   add346_2105347_out_ap_vld;
output  [63:0] add346_190_1346_out;
output   add346_190_1346_out_ap_vld;
output  [63:0] add346_190345_out;
output   add346_190345_out_ap_vld;
output  [63:0] add346_1119344_out;
output   add346_1119344_out_ap_vld;
output  [63:0] add346343_out;
output   add346343_out_ap_vld;

reg ap_idle;
reg add346_2105_1348_out_ap_vld;
reg add346_2105347_out_ap_vld;
reg add346_190_1346_out_ap_vld;
reg add346_190345_out_ap_vld;
reg add346_1119344_out_ap_vld;
reg add346343_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln151_fu_467_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_4_reg_1550;
wire   [1:0] trunc_ln151_fu_476_p1;
reg   [1:0] trunc_ln151_reg_1562;
wire   [0:0] icmp_ln165_fu_484_p2;
reg   [0:0] icmp_ln165_reg_1570;
wire   [2:0] add_ln166_fu_490_p2;
reg   [2:0] add_ln166_reg_1576;
wire   [0:0] icmp_ln165_3_fu_502_p2;
reg   [0:0] icmp_ln165_3_reg_1583;
wire   [0:0] icmp_ln165_4_fu_508_p2;
reg   [0:0] icmp_ln165_4_reg_1589;
wire   [0:0] icmp_ln165_5_fu_514_p2;
reg   [0:0] icmp_ln165_5_reg_1595;
wire   [0:0] icmp_ln165_6_fu_532_p2;
reg   [0:0] icmp_ln165_6_reg_1600;
wire   [0:0] icmp_ln165_7_fu_538_p2;
reg   [0:0] icmp_ln165_7_reg_1606;
wire   [0:0] icmp_ln165_8_fu_544_p2;
reg   [0:0] icmp_ln165_8_reg_1612;
reg   [63:0] arr_fu_122;
wire   [63:0] arr_6_fu_946_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [63:0] arr_1_fu_126;
wire   [63:0] arr_7_fu_977_p2;
reg   [63:0] arr_2_fu_130;
wire   [63:0] arr_8_fu_1022_p2;
reg   [63:0] arr_3_fu_134;
wire   [63:0] arr_9_fu_1080_p2;
reg   [63:0] arr_4_fu_138;
wire   [63:0] arr_10_fu_1157_p2;
reg   [63:0] arr_5_fu_142;
wire   [63:0] arr_11_fu_1216_p2;
reg   [2:0] k_fu_146;
wire   [2:0] add_ln158_fu_520_p2;
reg   [2:0] ap_sig_allocacmp_k_load;
reg   [3:0] i_fu_150;
wire   [3:0] add_ln151_fu_550_p2;
reg   [3:0] ap_sig_allocacmp_i_4;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] mul_ln165_fu_364_p0;
wire   [31:0] mul_ln165_fu_364_p1;
wire   [63:0] zext_ln165_9_fu_910_p1;
wire   [31:0] mul_ln165_1_fu_368_p0;
wire   [63:0] zext_ln165_1_fu_632_p1;
wire   [31:0] mul_ln165_1_fu_368_p1;
wire   [63:0] zext_ln165_fu_615_p1;
wire   [31:0] mul_ln165_2_fu_372_p0;
wire   [63:0] zext_ln165_6_fu_794_p1;
wire   [31:0] mul_ln165_2_fu_372_p1;
wire   [63:0] zext_ln165_5_fu_776_p1;
wire   [31:0] mul_ln165_3_fu_376_p0;
wire   [63:0] zext_ln165_2_fu_648_p1;
wire   [31:0] mul_ln165_3_fu_376_p1;
wire   [31:0] mul_ln165_4_fu_380_p0;
wire   [31:0] mul_ln165_4_fu_380_p1;
wire   [31:0] mul_ln165_5_fu_384_p0;
wire   [31:0] mul_ln165_5_fu_384_p1;
wire   [31:0] mul_ln165_6_fu_388_p0;
wire   [31:0] mul_ln165_6_fu_388_p1;
wire   [31:0] mul_ln165_7_fu_392_p0;
wire   [31:0] mul_ln165_7_fu_392_p1;
wire   [31:0] mul_ln165_8_fu_396_p0;
wire   [31:0] mul_ln165_8_fu_396_p1;
wire   [31:0] mul_ln165_9_fu_400_p0;
wire   [31:0] mul_ln165_9_fu_400_p1;
wire   [31:0] mul_ln165_10_fu_404_p0;
wire   [31:0] mul_ln165_10_fu_404_p1;
wire   [31:0] mul_ln165_11_fu_408_p0;
wire   [31:0] mul_ln165_11_fu_408_p1;
wire   [31:0] mul_ln165_12_fu_412_p0;
wire   [31:0] mul_ln165_12_fu_412_p1;
wire   [31:0] mul_ln165_13_fu_416_p0;
wire   [31:0] mul_ln165_13_fu_416_p1;
wire   [31:0] mul_ln165_14_fu_420_p0;
wire   [31:0] mul_ln165_14_fu_420_p1;
wire   [2:0] zext_ln151_fu_480_p1;
wire   [3:0] empty_fu_496_p2;
wire   [3:0] empty_42_fu_526_p2;
wire   [31:0] tmp_s_fu_584_p17;
wire   [31:0] tmp_70_fu_623_p6;
wire   [31:0] tmp_71_fu_639_p6;
wire   [2:0] zext_ln35_fu_655_p1;
wire  signed [2:0] sub_ln35_24_fu_658_p2;
wire  signed [3:0] tmp_72_fu_667_p17;
wire   [31:0] tmp_72_fu_667_p18;
wire   [0:0] icmp_ln165_1_fu_694_p2;
wire   [2:0] zext_ln35_10_fu_699_p1;
wire   [2:0] sub_ln35_25_fu_703_p2;
wire  signed [3:0] tmp_73_fu_713_p17;
wire   [31:0] tmp_73_fu_713_p18;
wire   [31:0] tmp_74_fu_745_p17;
wire   [31:0] tmp_75_fu_785_p6;
wire   [2:0] zext_ln35_11_fu_800_p1;
wire  signed [2:0] sub_ln35_26_fu_803_p2;
wire  signed [3:0] tmp_76_fu_812_p17;
wire   [31:0] tmp_76_fu_812_p18;
wire   [2:0] zext_ln35_12_fu_839_p1;
wire   [2:0] sub_ln35_27_fu_842_p2;
wire  signed [3:0] tmp_77_fu_852_p17;
wire   [31:0] tmp_77_fu_852_p18;
wire   [31:0] tmp_78_fu_879_p17;
wire   [31:0] tmp_79_fu_920_p6;
wire   [63:0] mul_ln165_2_fu_372_p2;
wire   [63:0] mul_ln165_fu_364_p2;
wire   [63:0] add_ln165_fu_934_p2;
wire   [63:0] mul_ln165_1_fu_368_p2;
wire   [63:0] add_ln165_1_fu_940_p2;
wire   [63:0] mul_ln165_3_fu_376_p2;
wire   [63:0] select_ln165_fu_952_p3;
wire   [63:0] mul_ln165_5_fu_384_p2;
wire   [63:0] mul_ln165_4_fu_380_p2;
wire   [63:0] add_ln165_3_fu_965_p2;
wire   [63:0] and_ln165_fu_959_p2;
wire   [63:0] add_ln165_4_fu_971_p2;
wire   [63:0] mul_ln165_6_fu_388_p2;
wire   [63:0] select_ln165_1_fu_983_p3;
wire   [63:0] mul_ln165_7_fu_392_p2;
wire   [63:0] select_ln165_2_fu_997_p3;
wire   [63:0] and_ln165_2_fu_1004_p2;
wire   [63:0] mul_ln165_8_fu_396_p2;
wire   [63:0] add_ln165_6_fu_1010_p2;
wire   [63:0] and_ln165_1_fu_991_p2;
wire   [63:0] add_ln165_7_fu_1016_p2;
wire   [63:0] mul_ln165_9_fu_400_p2;
wire   [63:0] select_ln165_3_fu_1028_p3;
wire   [0:0] icmp_ln165_2_fu_740_p2;
wire   [63:0] mul_ln165_10_fu_404_p2;
wire   [63:0] select_ln165_4_fu_1041_p3;
wire   [63:0] mul_ln165_11_fu_408_p2;
wire   [63:0] select_ln165_5_fu_1055_p3;
wire   [63:0] and_ln165_5_fu_1062_p2;
wire   [63:0] and_ln165_3_fu_1035_p2;
wire   [63:0] add_ln165_9_fu_1068_p2;
wire   [63:0] and_ln165_4_fu_1049_p2;
wire   [63:0] add_ln165_10_fu_1074_p2;
wire   [2:0] zext_ln35_13_fu_1086_p1;
wire  signed [2:0] sub_ln35_28_fu_1089_p2;
wire  signed [3:0] tmp_80_fu_1098_p17;
wire   [31:0] tmp_80_fu_1098_p18;
wire   [63:0] mul_ln165_12_fu_412_p2;
wire   [63:0] select_ln165_6_fu_1125_p3;
wire   [63:0] mul_ln165_13_fu_416_p2;
wire   [63:0] select_ln165_7_fu_1138_p3;
wire   [63:0] and_ln165_7_fu_1145_p2;
wire   [63:0] and_ln165_6_fu_1132_p2;
wire   [63:0] add_ln165_12_fu_1151_p2;
wire   [2:0] zext_ln35_14_fu_1163_p1;
wire   [2:0] sub_ln35_29_fu_1166_p2;
wire  signed [3:0] tmp_81_fu_1176_p17;
wire   [31:0] tmp_81_fu_1176_p18;
wire   [63:0] mul_ln165_14_fu_420_p2;
wire   [63:0] select_ln165_8_fu_1203_p3;
wire   [63:0] and_ln165_8_fu_1210_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [63:0] mul_ln165_10_fu_404_p00;
wire   [63:0] mul_ln165_11_fu_408_p00;
wire   [63:0] mul_ln165_12_fu_412_p00;
wire   [63:0] mul_ln165_13_fu_416_p00;
wire   [63:0] mul_ln165_14_fu_420_p00;
wire   [63:0] mul_ln165_6_fu_388_p00;
wire   [63:0] mul_ln165_fu_364_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U333(
    .din0(mul_ln165_fu_364_p0),
    .din1(mul_ln165_fu_364_p1),
    .dout(mul_ln165_fu_364_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U334(
    .din0(mul_ln165_1_fu_368_p0),
    .din1(mul_ln165_1_fu_368_p1),
    .dout(mul_ln165_1_fu_368_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U335(
    .din0(mul_ln165_2_fu_372_p0),
    .din1(mul_ln165_2_fu_372_p1),
    .dout(mul_ln165_2_fu_372_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U336(
    .din0(mul_ln165_3_fu_376_p0),
    .din1(mul_ln165_3_fu_376_p1),
    .dout(mul_ln165_3_fu_376_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U337(
    .din0(mul_ln165_4_fu_380_p0),
    .din1(mul_ln165_4_fu_380_p1),
    .dout(mul_ln165_4_fu_380_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U338(
    .din0(mul_ln165_5_fu_384_p0),
    .din1(mul_ln165_5_fu_384_p1),
    .dout(mul_ln165_5_fu_384_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U339(
    .din0(mul_ln165_6_fu_388_p0),
    .din1(mul_ln165_6_fu_388_p1),
    .dout(mul_ln165_6_fu_388_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U340(
    .din0(mul_ln165_7_fu_392_p0),
    .din1(mul_ln165_7_fu_392_p1),
    .dout(mul_ln165_7_fu_392_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U341(
    .din0(mul_ln165_8_fu_396_p0),
    .din1(mul_ln165_8_fu_396_p1),
    .dout(mul_ln165_8_fu_396_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U342(
    .din0(mul_ln165_9_fu_400_p0),
    .din1(mul_ln165_9_fu_400_p1),
    .dout(mul_ln165_9_fu_400_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U343(
    .din0(mul_ln165_10_fu_404_p0),
    .din1(mul_ln165_10_fu_404_p1),
    .dout(mul_ln165_10_fu_404_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U344(
    .din0(mul_ln165_11_fu_408_p0),
    .din1(mul_ln165_11_fu_408_p1),
    .dout(mul_ln165_11_fu_408_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U345(
    .din0(mul_ln165_12_fu_412_p0),
    .din1(mul_ln165_12_fu_412_p1),
    .dout(mul_ln165_12_fu_412_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U346(
    .din0(mul_ln165_13_fu_416_p0),
    .din1(mul_ln165_13_fu_416_p1),
    .dout(mul_ln165_13_fu_416_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U347(
    .din0(mul_ln165_14_fu_420_p0),
    .din1(mul_ln165_14_fu_420_p1),
    .dout(mul_ln165_14_fu_420_p2)
);

test_mux_15_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_15_4_32_1_1_U348(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(arg1_r_11_reload),
    .din12(arg1_r_12_reload),
    .din13(arg1_r_13_reload),
    .din14(arg1_r_14_reload),
    .din15(i_4_reg_1550),
    .dout(tmp_s_fu_584_p17)
);

test_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U349(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(trunc_ln151_reg_1562),
    .dout(tmp_70_fu_623_p6)
);

test_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U350(
    .din0(arg2_r_15_reload),
    .din1(arg2_r_reload),
    .din2(arg2_r_1_reload),
    .din3(arg2_r_2_reload),
    .din4(trunc_ln151_reg_1562),
    .dout(tmp_71_fu_639_p6)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U351(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(arg2_r_9_reload),
    .din10(arg2_r_10_reload),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_72_fu_667_p17),
    .dout(tmp_72_fu_667_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U352(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(arg2_r_9_reload),
    .din10(arg2_r_10_reload),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_73_fu_713_p17),
    .dout(tmp_73_fu_713_p18)
);

test_mux_15_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_15_4_32_1_1_U353(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(arg1_r_10_reload),
    .din12(arg1_r_11_reload),
    .din13(arg1_r_12_reload),
    .din14(arg1_r_13_reload),
    .din15(i_4_reg_1550),
    .dout(tmp_74_fu_745_p17)
);

test_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U354(
    .din0(arg2_r_1_reload),
    .din1(arg2_r_2_reload),
    .din2(arg2_r_3_reload),
    .din3(arg2_r_4_reload),
    .din4(trunc_ln151_reg_1562),
    .dout(tmp_75_fu_785_p6)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U355(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(arg2_r_9_reload),
    .din10(arg2_r_10_reload),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_76_fu_812_p17),
    .dout(tmp_76_fu_812_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U356(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(arg2_r_9_reload),
    .din10(arg2_r_10_reload),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_77_fu_852_p17),
    .dout(tmp_77_fu_852_p18)
);

test_mux_15_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_15_4_32_1_1_U357(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(arg1_r_9_reload),
    .din12(arg1_r_10_reload),
    .din13(arg1_r_11_reload),
    .din14(arg1_r_12_reload),
    .din15(i_4_reg_1550),
    .dout(tmp_78_fu_879_p17)
);

test_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U358(
    .din0(arg2_r_2_reload),
    .din1(arg2_r_3_reload),
    .din2(arg2_r_4_reload),
    .din3(arg2_r_5_reload),
    .din4(trunc_ln151_reg_1562),
    .dout(tmp_79_fu_920_p6)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U359(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(arg2_r_9_reload),
    .din10(arg2_r_10_reload),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_80_fu_1098_p17),
    .dout(tmp_80_fu_1098_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U360(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(arg2_r_9_reload),
    .din10(arg2_r_10_reload),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_81_fu_1176_p17),
    .dout(tmp_81_fu_1176_p18)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_1_fu_126 <= add289349_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_1_fu_126 <= arr_7_fu_977_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_2_fu_130 <= add289_1133350_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_2_fu_130 <= arr_8_fu_1022_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_3_fu_134 <= add289_2147351_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_3_fu_134 <= arr_9_fu_1080_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_4_fu_138 <= add289_3352_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_4_fu_138 <= arr_10_fu_1157_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_5_fu_142 <= add289_4353_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_5_fu_142 <= arr_11_fu_1216_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_fu_122 <= arr_57;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_fu_122 <= arr_6_fu_946_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln151_fu_467_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_150 <= add_ln151_fu_550_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_150 <= 4'd14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln151_fu_467_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_fu_146 <= add_ln158_fu_520_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_146 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln151_fu_467_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln166_reg_1576 <= add_ln166_fu_490_p2;
        icmp_ln165_3_reg_1583 <= icmp_ln165_3_fu_502_p2;
        icmp_ln165_4_reg_1589 <= icmp_ln165_4_fu_508_p2;
        icmp_ln165_5_reg_1595 <= icmp_ln165_5_fu_514_p2;
        icmp_ln165_6_reg_1600 <= icmp_ln165_6_fu_532_p2;
        icmp_ln165_7_reg_1606 <= icmp_ln165_7_fu_538_p2;
        icmp_ln165_8_reg_1612 <= icmp_ln165_8_fu_544_p2;
        icmp_ln165_reg_1570 <= icmp_ln165_fu_484_p2;
        trunc_ln151_reg_1562 <= trunc_ln151_fu_476_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_4_reg_1550 <= ap_sig_allocacmp_i_4;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_467_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add346343_out_ap_vld = 1'b1;
    end else begin
        add346343_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_467_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add346_1119344_out_ap_vld = 1'b1;
    end else begin
        add346_1119344_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_467_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add346_190345_out_ap_vld = 1'b1;
    end else begin
        add346_190345_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_467_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add346_190_1346_out_ap_vld = 1'b1;
    end else begin
        add346_190_1346_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_467_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add346_2105347_out_ap_vld = 1'b1;
    end else begin
        add346_2105347_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_467_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add346_2105_1348_out_ap_vld = 1'b1;
    end else begin
        add346_2105_1348_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_467_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_4 = 4'd14;
    end else begin
        ap_sig_allocacmp_i_4 = i_fu_150;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_k_load = 3'd0;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_146;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add346343_out = arr_fu_122;

assign add346_1119344_out = arr_1_fu_126;

assign add346_190345_out = arr_2_fu_130;

assign add346_190_1346_out = arr_3_fu_134;

assign add346_2105347_out = arr_4_fu_138;

assign add346_2105_1348_out = arr_5_fu_142;

assign add_ln151_fu_550_p2 = ($signed(ap_sig_allocacmp_i_4) + $signed(4'd13));

assign add_ln158_fu_520_p2 = (ap_sig_allocacmp_k_load + 3'd3);

assign add_ln165_10_fu_1074_p2 = (add_ln165_9_fu_1068_p2 + and_ln165_4_fu_1049_p2);

assign add_ln165_12_fu_1151_p2 = (and_ln165_7_fu_1145_p2 + and_ln165_6_fu_1132_p2);

assign add_ln165_1_fu_940_p2 = (add_ln165_fu_934_p2 + mul_ln165_1_fu_368_p2);

assign add_ln165_3_fu_965_p2 = (mul_ln165_5_fu_384_p2 + mul_ln165_4_fu_380_p2);

assign add_ln165_4_fu_971_p2 = (add_ln165_3_fu_965_p2 + and_ln165_fu_959_p2);

assign add_ln165_6_fu_1010_p2 = (and_ln165_2_fu_1004_p2 + mul_ln165_8_fu_396_p2);

assign add_ln165_7_fu_1016_p2 = (add_ln165_6_fu_1010_p2 + and_ln165_1_fu_991_p2);

assign add_ln165_9_fu_1068_p2 = (and_ln165_5_fu_1062_p2 + and_ln165_3_fu_1035_p2);

assign add_ln165_fu_934_p2 = (mul_ln165_2_fu_372_p2 + mul_ln165_fu_364_p2);

assign add_ln166_fu_490_p2 = ($signed(zext_ln151_fu_480_p1) + $signed(3'd7));

assign and_ln165_1_fu_991_p2 = (select_ln165_1_fu_983_p3 & mul_ln165_6_fu_388_p2);

assign and_ln165_2_fu_1004_p2 = (select_ln165_2_fu_997_p3 & mul_ln165_7_fu_392_p2);

assign and_ln165_3_fu_1035_p2 = (select_ln165_3_fu_1028_p3 & mul_ln165_9_fu_400_p2);

assign and_ln165_4_fu_1049_p2 = (select_ln165_4_fu_1041_p3 & mul_ln165_10_fu_404_p2);

assign and_ln165_5_fu_1062_p2 = (select_ln165_5_fu_1055_p3 & mul_ln165_11_fu_408_p2);

assign and_ln165_6_fu_1132_p2 = (select_ln165_6_fu_1125_p3 & mul_ln165_12_fu_412_p2);

assign and_ln165_7_fu_1145_p2 = (select_ln165_7_fu_1138_p3 & mul_ln165_13_fu_416_p2);

assign and_ln165_8_fu_1210_p2 = (select_ln165_8_fu_1203_p3 & mul_ln165_14_fu_420_p2);

assign and_ln165_fu_959_p2 = (select_ln165_fu_952_p3 & mul_ln165_3_fu_376_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign arr_10_fu_1157_p2 = (arr_4_fu_138 + add_ln165_12_fu_1151_p2);

assign arr_11_fu_1216_p2 = (and_ln165_8_fu_1210_p2 + arr_5_fu_142);

assign arr_6_fu_946_p2 = (arr_fu_122 + add_ln165_1_fu_940_p2);

assign arr_7_fu_977_p2 = (arr_1_fu_126 + add_ln165_4_fu_971_p2);

assign arr_8_fu_1022_p2 = (arr_2_fu_130 + add_ln165_7_fu_1016_p2);

assign arr_9_fu_1080_p2 = (arr_3_fu_134 + add_ln165_10_fu_1074_p2);

assign empty_42_fu_526_p2 = ($signed(ap_sig_allocacmp_i_4) + $signed(4'd14));

assign empty_fu_496_p2 = ($signed(ap_sig_allocacmp_i_4) + $signed(4'd15));

assign icmp_ln151_fu_467_p2 = ((ap_sig_allocacmp_i_4 > 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln165_1_fu_694_p2 = ((i_4_reg_1550 < 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln165_2_fu_740_p2 = ((i_4_reg_1550 < 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln165_3_fu_502_p2 = ((empty_fu_496_p2 < 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln165_4_fu_508_p2 = ((empty_fu_496_p2 < 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln165_5_fu_514_p2 = ((empty_fu_496_p2 < 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln165_6_fu_532_p2 = ((empty_42_fu_526_p2 < 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln165_7_fu_538_p2 = ((empty_42_fu_526_p2 < 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln165_8_fu_544_p2 = ((empty_42_fu_526_p2 < 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln165_fu_484_p2 = ((ap_sig_allocacmp_i_4 < 4'd14) ? 1'b1 : 1'b0);

assign mul_ln165_10_fu_404_p0 = mul_ln165_10_fu_404_p00;

assign mul_ln165_10_fu_404_p00 = tmp_73_fu_713_p18;

assign mul_ln165_10_fu_404_p1 = zext_ln165_fu_615_p1;

assign mul_ln165_11_fu_408_p0 = mul_ln165_11_fu_408_p00;

assign mul_ln165_11_fu_408_p00 = tmp_76_fu_812_p18;

assign mul_ln165_11_fu_408_p1 = zext_ln165_5_fu_776_p1;

assign mul_ln165_12_fu_412_p0 = mul_ln165_12_fu_412_p00;

assign mul_ln165_12_fu_412_p00 = tmp_77_fu_852_p18;

assign mul_ln165_12_fu_412_p1 = zext_ln165_5_fu_776_p1;

assign mul_ln165_13_fu_416_p0 = mul_ln165_13_fu_416_p00;

assign mul_ln165_13_fu_416_p00 = tmp_80_fu_1098_p18;

assign mul_ln165_13_fu_416_p1 = zext_ln165_9_fu_910_p1;

assign mul_ln165_14_fu_420_p0 = mul_ln165_14_fu_420_p00;

assign mul_ln165_14_fu_420_p00 = tmp_81_fu_1176_p18;

assign mul_ln165_14_fu_420_p1 = zext_ln165_9_fu_910_p1;

assign mul_ln165_1_fu_368_p0 = zext_ln165_1_fu_632_p1;

assign mul_ln165_1_fu_368_p1 = zext_ln165_fu_615_p1;

assign mul_ln165_2_fu_372_p0 = zext_ln165_6_fu_794_p1;

assign mul_ln165_2_fu_372_p1 = zext_ln165_5_fu_776_p1;

assign mul_ln165_3_fu_376_p0 = zext_ln165_2_fu_648_p1;

assign mul_ln165_3_fu_376_p1 = zext_ln165_fu_615_p1;

assign mul_ln165_4_fu_380_p0 = zext_ln165_9_fu_910_p1;

assign mul_ln165_4_fu_380_p1 = zext_ln165_6_fu_794_p1;

assign mul_ln165_5_fu_384_p0 = zext_ln165_5_fu_776_p1;

assign mul_ln165_5_fu_384_p1 = zext_ln165_1_fu_632_p1;

assign mul_ln165_6_fu_388_p0 = mul_ln165_6_fu_388_p00;

assign mul_ln165_6_fu_388_p00 = tmp_72_fu_667_p18;

assign mul_ln165_6_fu_388_p1 = zext_ln165_fu_615_p1;

assign mul_ln165_7_fu_392_p0 = zext_ln165_5_fu_776_p1;

assign mul_ln165_7_fu_392_p1 = zext_ln165_2_fu_648_p1;

assign mul_ln165_8_fu_396_p0 = zext_ln165_9_fu_910_p1;

assign mul_ln165_8_fu_396_p1 = zext_ln165_1_fu_632_p1;

assign mul_ln165_9_fu_400_p0 = zext_ln165_9_fu_910_p1;

assign mul_ln165_9_fu_400_p1 = zext_ln165_2_fu_648_p1;

assign mul_ln165_fu_364_p0 = mul_ln165_fu_364_p00;

assign mul_ln165_fu_364_p00 = tmp_79_fu_920_p6;

assign mul_ln165_fu_364_p1 = zext_ln165_9_fu_910_p1;

assign select_ln165_1_fu_983_p3 = ((icmp_ln165_1_fu_694_p2[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln165_2_fu_997_p3 = ((icmp_ln165_3_reg_1583[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln165_3_fu_1028_p3 = ((icmp_ln165_6_reg_1600[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln165_4_fu_1041_p3 = ((icmp_ln165_2_fu_740_p2[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln165_5_fu_1055_p3 = ((icmp_ln165_4_reg_1589[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln165_6_fu_1125_p3 = ((icmp_ln165_5_reg_1595[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln165_7_fu_1138_p3 = ((icmp_ln165_7_reg_1606[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln165_8_fu_1203_p3 = ((icmp_ln165_8_reg_1612[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln165_fu_952_p3 = ((icmp_ln165_reg_1570[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign sub_ln35_24_fu_658_p2 = (add_ln166_reg_1576 - zext_ln35_fu_655_p1);

assign sub_ln35_25_fu_703_p2 = ($signed(sub_ln35_24_fu_658_p2) - $signed(zext_ln35_10_fu_699_p1));

assign sub_ln35_26_fu_803_p2 = (add_ln166_reg_1576 - zext_ln35_11_fu_800_p1);

assign sub_ln35_27_fu_842_p2 = ($signed(sub_ln35_26_fu_803_p2) - $signed(zext_ln35_12_fu_839_p1));

assign sub_ln35_28_fu_1089_p2 = (add_ln166_reg_1576 - zext_ln35_13_fu_1086_p1);

assign sub_ln35_29_fu_1166_p2 = ($signed(sub_ln35_28_fu_1089_p2) - $signed(zext_ln35_14_fu_1163_p1));

assign tmp_72_fu_667_p17 = sub_ln35_24_fu_658_p2;

assign tmp_73_fu_713_p17 = $signed(sub_ln35_25_fu_703_p2);

assign tmp_76_fu_812_p17 = sub_ln35_26_fu_803_p2;

assign tmp_77_fu_852_p17 = $signed(sub_ln35_27_fu_842_p2);

assign tmp_80_fu_1098_p17 = sub_ln35_28_fu_1089_p2;

assign tmp_81_fu_1176_p17 = $signed(sub_ln35_29_fu_1166_p2);

assign trunc_ln151_fu_476_p1 = ap_sig_allocacmp_k_load[1:0];

assign zext_ln151_fu_480_p1 = trunc_ln151_fu_476_p1;

assign zext_ln165_1_fu_632_p1 = tmp_70_fu_623_p6;

assign zext_ln165_2_fu_648_p1 = tmp_71_fu_639_p6;

assign zext_ln165_5_fu_776_p1 = tmp_74_fu_745_p17;

assign zext_ln165_6_fu_794_p1 = tmp_75_fu_785_p6;

assign zext_ln165_9_fu_910_p1 = tmp_78_fu_879_p17;

assign zext_ln165_fu_615_p1 = tmp_s_fu_584_p17;

assign zext_ln35_10_fu_699_p1 = icmp_ln165_1_fu_694_p2;

assign zext_ln35_11_fu_800_p1 = icmp_ln165_3_reg_1583;

assign zext_ln35_12_fu_839_p1 = icmp_ln165_4_reg_1589;

assign zext_ln35_13_fu_1086_p1 = icmp_ln165_6_reg_1600;

assign zext_ln35_14_fu_1163_p1 = icmp_ln165_7_reg_1606;

assign zext_ln35_fu_655_p1 = icmp_ln165_reg_1570;

endmodule //test_test_Pipeline_VITIS_LOOP_151_23
