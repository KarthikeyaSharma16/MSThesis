// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_130_19 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add212_6190_reload,
        add212_5189_reload,
        add212_4188_reload,
        add212_3187_reload,
        add212_2112186_reload,
        add212_1102185_reload,
        arg1_r_3_reload,
        arg1_r_4_reload,
        arg1_r_5_reload,
        arg1_r_6_reload,
        conv36,
        arg2_r_14_reload,
        arg2_r_15_reload,
        arg2_r_13_reload,
        arg2_r_12_reload,
        arg2_r_11_reload,
        arg2_r_10_reload,
        arg1_r_2_reload,
        arg1_r_1_reload,
        add289_5182_out,
        add289_5182_out_ap_vld,
        add289_4181_out,
        add289_4181_out_ap_vld,
        add289_3180_out,
        add289_3180_out_ap_vld,
        add289_289179_out,
        add289_289179_out_ap_vld,
        add289_175178_out,
        add289_175178_out_ap_vld,
        add289177_out,
        add289177_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] add212_6190_reload;
input  [63:0] add212_5189_reload;
input  [63:0] add212_4188_reload;
input  [63:0] add212_3187_reload;
input  [63:0] add212_2112186_reload;
input  [63:0] add212_1102185_reload;
input  [31:0] arg1_r_3_reload;
input  [31:0] arg1_r_4_reload;
input  [31:0] arg1_r_5_reload;
input  [31:0] arg1_r_6_reload;
input  [31:0] conv36;
input  [31:0] arg2_r_14_reload;
input  [31:0] arg2_r_15_reload;
input  [31:0] arg2_r_13_reload;
input  [31:0] arg2_r_12_reload;
input  [31:0] arg2_r_11_reload;
input  [31:0] arg2_r_10_reload;
input  [31:0] arg1_r_2_reload;
input  [31:0] arg1_r_1_reload;
output  [63:0] add289_5182_out;
output   add289_5182_out_ap_vld;
output  [63:0] add289_4181_out;
output   add289_4181_out_ap_vld;
output  [63:0] add289_3180_out;
output   add289_3180_out_ap_vld;
output  [63:0] add289_289179_out;
output   add289_289179_out_ap_vld;
output  [63:0] add289_175178_out;
output   add289_175178_out_ap_vld;
output  [63:0] add289177_out;
output   add289177_out_ap_vld;

reg ap_idle;
reg add289_5182_out_ap_vld;
reg add289_4181_out_ap_vld;
reg add289_3180_out_ap_vld;
reg add289_289179_out_ap_vld;
reg add289_175178_out_ap_vld;
reg add289177_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln130_fu_394_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] conv36_cast_fu_352_p1;
reg   [63:0] conv36_cast_reg_1477;
reg   [2:0] i_5_reg_1484;
wire   [0:0] icmp_ln143_fu_410_p2;
reg   [0:0] icmp_ln143_reg_1494;
wire   [0:0] icmp_ln143_1_fu_416_p2;
reg   [0:0] icmp_ln143_1_reg_1501;
wire   [0:0] icmp_ln143_2_fu_422_p2;
reg   [0:0] icmp_ln143_2_reg_1507;
wire   [0:0] icmp_ln143_3_fu_436_p2;
reg   [0:0] icmp_ln143_3_reg_1513;
wire   [0:0] icmp_ln143_4_fu_450_p2;
reg   [0:0] icmp_ln143_4_reg_1519;
wire  signed [2:0] sub_ln35_23_fu_460_p2;
reg  signed [2:0] sub_ln35_23_reg_1524;
wire   [0:0] icmp_ln143_5_fu_466_p2;
reg   [0:0] icmp_ln143_5_reg_1530;
wire   [0:0] icmp_ln143_6_fu_478_p2;
reg   [0:0] icmp_ln143_6_reg_1536;
wire   [0:0] icmp_ln143_7_fu_492_p2;
reg   [0:0] icmp_ln143_7_reg_1542;
wire  signed [2:0] sub_ln35_25_fu_502_p2;
reg  signed [2:0] sub_ln35_25_reg_1547;
wire   [0:0] icmp_ln143_8_fu_508_p2;
reg   [0:0] icmp_ln143_8_reg_1553;
reg   [63:0] arr_fu_108;
wire   [63:0] arr_100_fu_581_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [63:0] arr_95_fu_112;
wire   [63:0] arr_101_fu_843_p2;
reg   [63:0] arr_96_fu_116;
wire   [63:0] arr_102_fu_1066_p2;
reg   [63:0] arr_97_fu_120;
wire   [63:0] arr_103_fu_1120_p2;
reg   [63:0] arr_98_fu_124;
wire   [63:0] arr_104_fu_1194_p2;
reg   [63:0] arr_99_fu_128;
wire   [63:0] arr_105_fu_1263_p2;
reg   [2:0] i_fu_132;
wire   [2:0] add_ln130_fu_514_p2;
reg   [2:0] ap_sig_allocacmp_i_5;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] mul_ln143_fu_292_p0;
wire   [63:0] zext_ln143_fu_558_p1;
wire   [31:0] mul_ln143_fu_292_p1;
wire   [31:0] mul_ln143_1_fu_296_p0;
wire   [31:0] mul_ln143_1_fu_296_p1;
wire   [31:0] mul_ln143_2_fu_300_p0;
wire   [63:0] zext_ln143_6_fu_802_p1;
wire   [31:0] mul_ln143_2_fu_300_p1;
wire   [31:0] mul_ln143_3_fu_304_p0;
wire   [63:0] zext_ln143_11_fu_1007_p1;
wire   [31:0] mul_ln143_3_fu_304_p1;
wire   [31:0] mul_ln143_4_fu_308_p0;
wire   [31:0] mul_ln143_4_fu_308_p1;
wire   [31:0] mul_ln143_5_fu_312_p0;
wire   [31:0] mul_ln143_5_fu_312_p1;
wire   [31:0] mul_ln143_6_fu_316_p0;
wire   [31:0] mul_ln143_6_fu_316_p1;
wire   [31:0] mul_ln143_7_fu_320_p0;
wire   [31:0] mul_ln143_7_fu_320_p1;
wire   [31:0] mul_ln143_8_fu_324_p0;
wire   [31:0] mul_ln143_8_fu_324_p1;
wire   [31:0] mul_ln143_9_fu_328_p0;
wire   [31:0] mul_ln143_9_fu_328_p1;
wire   [31:0] mul_ln143_10_fu_332_p0;
wire   [31:0] mul_ln143_10_fu_332_p1;
wire   [31:0] mul_ln143_11_fu_336_p0;
wire   [31:0] mul_ln143_11_fu_336_p1;
wire   [31:0] mul_ln143_12_fu_340_p0;
wire   [31:0] mul_ln143_12_fu_340_p1;
wire   [31:0] mul_ln143_13_fu_344_p0;
wire   [31:0] mul_ln143_13_fu_344_p1;
wire   [31:0] mul_ln143_14_fu_348_p0;
wire   [31:0] mul_ln143_14_fu_348_p1;
wire   [3:0] zext_ln130_fu_400_p1;
wire   [3:0] empty_fu_404_p2;
wire   [3:0] tmp_83_fu_428_p3;
wire   [2:0] select_ln143_7_fu_442_p3;
wire   [2:0] zext_ln35_11_fu_456_p1;
wire   [3:0] empty_44_fu_472_p2;
wire   [2:0] select_ln143_11_fu_484_p3;
wire   [2:0] zext_ln35_13_fu_498_p1;
wire   [31:0] tmp_s_fu_543_p9;
wire   [63:0] mul_ln143_fu_292_p2;
wire   [63:0] select_ln143_3_fu_568_p3;
wire   [63:0] and_ln143_fu_575_p2;
wire   [31:0] select_ln143_fu_594_p3;
wire   [2:0] select_ln143_4_fu_587_p3;
wire   [2:0] zext_ln35_fu_604_p1;
wire  signed [2:0] sub_ln35_21_fu_607_p2;
wire  signed [3:0] tmp_79_fu_617_p17;
wire   [31:0] tmp_79_fu_617_p18;
wire   [2:0] zext_ln35_10_fu_657_p1;
wire   [2:0] sub_ln35_22_fu_660_p2;
wire  signed [3:0] sext_ln143_9_fu_666_p1;
wire   [31:0] tmp_80_fu_670_p18;
wire   [31:0] tmp_81_fu_709_p18;
wire   [31:0] tmp_82_fu_748_p18;
wire   [31:0] tmp_84_fu_787_p9;
wire   [63:0] mul_ln143_1_fu_296_p2;
wire   [63:0] select_ln143_5_fu_811_p3;
wire   [63:0] mul_ln143_2_fu_300_p2;
wire   [63:0] select_ln143_6_fu_824_p3;
wire   [63:0] and_ln143_2_fu_831_p2;
wire   [63:0] and_ln143_1_fu_818_p2;
wire   [63:0] add_ln143_fu_837_p2;
wire   [31:0] select_ln143_1_fu_849_p3;
wire  signed [3:0] tmp_85_fu_862_p17;
wire   [31:0] tmp_85_fu_862_p18;
wire   [2:0] zext_ln35_12_fu_902_p1;
wire   [2:0] sub_ln35_24_fu_905_p2;
wire  signed [3:0] sext_ln143_11_fu_910_p1;
wire   [31:0] tmp_86_fu_914_p18;
wire   [31:0] tmp_87_fu_953_p18;
wire   [31:0] tmp_88_fu_992_p9;
wire   [63:0] mul_ln143_3_fu_304_p2;
wire   [63:0] select_ln143_8_fu_1015_p3;
wire   [63:0] mul_ln143_4_fu_308_p2;
wire   [63:0] select_ln143_9_fu_1028_p3;
wire   [63:0] mul_ln143_5_fu_312_p2;
wire   [63:0] select_ln143_10_fu_1041_p3;
wire   [63:0] and_ln143_5_fu_1048_p2;
wire   [63:0] and_ln143_3_fu_1022_p2;
wire   [63:0] add_ln143_2_fu_1054_p2;
wire   [63:0] and_ln143_4_fu_1035_p2;
wire   [63:0] add_ln143_3_fu_1060_p2;
wire   [31:0] select_ln143_2_fu_1072_p3;
wire   [63:0] mul_ln143_6_fu_316_p2;
wire   [63:0] select_ln143_12_fu_1082_p3;
wire   [63:0] mul_ln143_7_fu_320_p2;
wire   [63:0] select_ln143_13_fu_1095_p3;
wire   [63:0] and_ln143_7_fu_1102_p2;
wire   [63:0] and_ln143_6_fu_1089_p2;
wire   [63:0] add_ln143_5_fu_1108_p2;
wire   [63:0] mul_ln143_8_fu_324_p2;
wire   [63:0] add_ln143_6_fu_1114_p2;
wire  signed [3:0] tmp_89_fu_1129_p17;
wire   [31:0] tmp_89_fu_1129_p18;
wire   [63:0] mul_ln143_9_fu_328_p2;
wire   [63:0] select_ln143_14_fu_1169_p3;
wire   [63:0] mul_ln143_11_fu_336_p2;
wire   [63:0] and_ln143_8_fu_1176_p2;
wire   [63:0] add_ln143_8_fu_1182_p2;
wire   [63:0] mul_ln143_10_fu_332_p2;
wire   [63:0] add_ln143_9_fu_1188_p2;
wire   [2:0] zext_ln35_14_fu_1200_p1;
wire   [2:0] sub_ln35_26_fu_1203_p2;
wire  signed [3:0] tmp_90_fu_1212_p17;
wire   [31:0] tmp_90_fu_1212_p18;
wire   [63:0] mul_ln143_14_fu_348_p2;
wire   [63:0] mul_ln143_12_fu_340_p2;
wire   [63:0] add_ln143_11_fu_1251_p2;
wire   [63:0] mul_ln143_13_fu_344_p2;
wire   [63:0] add_ln143_12_fu_1257_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [63:0] mul_ln143_10_fu_332_p00;
wire   [63:0] mul_ln143_11_fu_336_p00;
wire   [63:0] mul_ln143_12_fu_340_p00;
wire   [63:0] mul_ln143_13_fu_344_p00;
wire   [63:0] mul_ln143_14_fu_348_p00;
wire   [63:0] mul_ln143_1_fu_296_p00;
wire   [63:0] mul_ln143_4_fu_308_p00;
wire   [63:0] mul_ln143_5_fu_312_p00;
wire   [63:0] mul_ln143_6_fu_316_p00;
wire   [63:0] mul_ln143_7_fu_320_p00;
wire   [63:0] mul_ln143_8_fu_324_p00;
wire   [63:0] mul_ln143_9_fu_328_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U387(
    .din0(mul_ln143_fu_292_p0),
    .din1(mul_ln143_fu_292_p1),
    .dout(mul_ln143_fu_292_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U388(
    .din0(mul_ln143_1_fu_296_p0),
    .din1(mul_ln143_1_fu_296_p1),
    .dout(mul_ln143_1_fu_296_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U389(
    .din0(mul_ln143_2_fu_300_p0),
    .din1(mul_ln143_2_fu_300_p1),
    .dout(mul_ln143_2_fu_300_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U390(
    .din0(mul_ln143_3_fu_304_p0),
    .din1(mul_ln143_3_fu_304_p1),
    .dout(mul_ln143_3_fu_304_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U391(
    .din0(mul_ln143_4_fu_308_p0),
    .din1(mul_ln143_4_fu_308_p1),
    .dout(mul_ln143_4_fu_308_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U392(
    .din0(mul_ln143_5_fu_312_p0),
    .din1(mul_ln143_5_fu_312_p1),
    .dout(mul_ln143_5_fu_312_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U393(
    .din0(mul_ln143_6_fu_316_p0),
    .din1(mul_ln143_6_fu_316_p1),
    .dout(mul_ln143_6_fu_316_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U394(
    .din0(mul_ln143_7_fu_320_p0),
    .din1(mul_ln143_7_fu_320_p1),
    .dout(mul_ln143_7_fu_320_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U395(
    .din0(mul_ln143_8_fu_324_p0),
    .din1(mul_ln143_8_fu_324_p1),
    .dout(mul_ln143_8_fu_324_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U396(
    .din0(mul_ln143_9_fu_328_p0),
    .din1(mul_ln143_9_fu_328_p1),
    .dout(mul_ln143_9_fu_328_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U397(
    .din0(mul_ln143_10_fu_332_p0),
    .din1(mul_ln143_10_fu_332_p1),
    .dout(mul_ln143_10_fu_332_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U398(
    .din0(mul_ln143_11_fu_336_p0),
    .din1(mul_ln143_11_fu_336_p1),
    .dout(mul_ln143_11_fu_336_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U399(
    .din0(mul_ln143_12_fu_340_p0),
    .din1(mul_ln143_12_fu_340_p1),
    .dout(mul_ln143_12_fu_340_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U400(
    .din0(mul_ln143_13_fu_344_p0),
    .din1(mul_ln143_13_fu_344_p1),
    .dout(mul_ln143_13_fu_344_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U401(
    .din0(mul_ln143_14_fu_348_p0),
    .din1(mul_ln143_14_fu_348_p1),
    .dout(mul_ln143_14_fu_348_p2)
);

test_mux_7_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_7_3_32_1_1_U402(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(arg1_r_3_reload),
    .din4(arg1_r_4_reload),
    .din5(arg1_r_5_reload),
    .din6(arg1_r_6_reload),
    .din7(i_5_reg_1484),
    .dout(tmp_s_fu_543_p9)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U403(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(32'd0),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_79_fu_617_p17),
    .dout(tmp_79_fu_617_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U404(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(sext_ln143_9_fu_666_p1),
    .dout(tmp_80_fu_670_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U405(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(arg2_r_11_reload),
    .din13(arg2_r_12_reload),
    .din14(arg2_r_13_reload),
    .din15(arg2_r_14_reload),
    .din16(sext_ln143_9_fu_666_p1),
    .dout(tmp_81_fu_709_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U406(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(arg2_r_10_reload),
    .din13(arg2_r_11_reload),
    .din14(arg2_r_12_reload),
    .din15(arg2_r_13_reload),
    .din16(sext_ln143_9_fu_666_p1),
    .dout(tmp_82_fu_748_p18)
);

test_mux_7_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_7_3_32_1_1_U407(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(arg1_r_2_reload),
    .din4(arg1_r_3_reload),
    .din5(arg1_r_4_reload),
    .din6(arg1_r_5_reload),
    .din7(i_5_reg_1484),
    .dout(tmp_84_fu_787_p9)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U408(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(32'd0),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_85_fu_862_p17),
    .dout(tmp_85_fu_862_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U409(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(sext_ln143_11_fu_910_p1),
    .dout(tmp_86_fu_914_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U410(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(arg2_r_11_reload),
    .din13(arg2_r_12_reload),
    .din14(arg2_r_13_reload),
    .din15(arg2_r_14_reload),
    .din16(sext_ln143_11_fu_910_p1),
    .dout(tmp_87_fu_953_p18)
);

test_mux_7_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_7_3_32_1_1_U411(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(arg1_r_1_reload),
    .din4(arg1_r_2_reload),
    .din5(arg1_r_3_reload),
    .din6(arg1_r_4_reload),
    .din7(i_5_reg_1484),
    .dout(tmp_88_fu_992_p9)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U412(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(32'd0),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_89_fu_1129_p17),
    .dout(tmp_89_fu_1129_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U413(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_90_fu_1212_p17),
    .dout(tmp_90_fu_1212_p18)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_95_fu_112 <= add212_2112186_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_95_fu_112 <= arr_101_fu_843_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_96_fu_116 <= add212_3187_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_96_fu_116 <= arr_102_fu_1066_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_97_fu_120 <= add212_4188_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_97_fu_120 <= arr_103_fu_1120_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_98_fu_124 <= add212_5189_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_98_fu_124 <= arr_104_fu_1194_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_99_fu_128 <= add212_6190_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_99_fu_128 <= arr_105_fu_1263_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_fu_108 <= add212_1102185_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_fu_108 <= arr_100_fu_581_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln130_fu_394_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_132 <= add_ln130_fu_514_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_132 <= 3'd6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv36_cast_reg_1477[31 : 0] <= conv36_cast_fu_352_p1[31 : 0];
        i_5_reg_1484 <= ap_sig_allocacmp_i_5;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln130_fu_394_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln143_1_reg_1501 <= icmp_ln143_1_fu_416_p2;
        icmp_ln143_2_reg_1507 <= icmp_ln143_2_fu_422_p2;
        icmp_ln143_3_reg_1513 <= icmp_ln143_3_fu_436_p2;
        icmp_ln143_4_reg_1519 <= icmp_ln143_4_fu_450_p2;
        icmp_ln143_5_reg_1530 <= icmp_ln143_5_fu_466_p2;
        icmp_ln143_6_reg_1536 <= icmp_ln143_6_fu_478_p2;
        icmp_ln143_7_reg_1542 <= icmp_ln143_7_fu_492_p2;
        icmp_ln143_8_reg_1553 <= icmp_ln143_8_fu_508_p2;
        icmp_ln143_reg_1494 <= icmp_ln143_fu_410_p2;
        sub_ln35_23_reg_1524 <= sub_ln35_23_fu_460_p2;
        sub_ln35_25_reg_1547 <= sub_ln35_25_fu_502_p2;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_394_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add289177_out_ap_vld = 1'b1;
    end else begin
        add289177_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_394_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add289_175178_out_ap_vld = 1'b1;
    end else begin
        add289_175178_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_394_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add289_289179_out_ap_vld = 1'b1;
    end else begin
        add289_289179_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_394_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add289_3180_out_ap_vld = 1'b1;
    end else begin
        add289_3180_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_394_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add289_4181_out_ap_vld = 1'b1;
    end else begin
        add289_4181_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_394_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add289_5182_out_ap_vld = 1'b1;
    end else begin
        add289_5182_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_394_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_5 = 3'd6;
    end else begin
        ap_sig_allocacmp_i_5 = i_fu_132;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add289177_out = arr_fu_108;

assign add289_175178_out = arr_95_fu_112;

assign add289_289179_out = arr_96_fu_116;

assign add289_3180_out = arr_97_fu_120;

assign add289_4181_out = arr_98_fu_124;

assign add289_5182_out = arr_99_fu_128;

assign add_ln130_fu_514_p2 = ($signed(ap_sig_allocacmp_i_5) + $signed(3'd5));

assign add_ln143_11_fu_1251_p2 = (mul_ln143_14_fu_348_p2 + mul_ln143_12_fu_340_p2);

assign add_ln143_12_fu_1257_p2 = (add_ln143_11_fu_1251_p2 + mul_ln143_13_fu_344_p2);

assign add_ln143_2_fu_1054_p2 = (and_ln143_5_fu_1048_p2 + and_ln143_3_fu_1022_p2);

assign add_ln143_3_fu_1060_p2 = (add_ln143_2_fu_1054_p2 + and_ln143_4_fu_1035_p2);

assign add_ln143_5_fu_1108_p2 = (and_ln143_7_fu_1102_p2 + and_ln143_6_fu_1089_p2);

assign add_ln143_6_fu_1114_p2 = (add_ln143_5_fu_1108_p2 + mul_ln143_8_fu_324_p2);

assign add_ln143_8_fu_1182_p2 = (mul_ln143_11_fu_336_p2 + and_ln143_8_fu_1176_p2);

assign add_ln143_9_fu_1188_p2 = (add_ln143_8_fu_1182_p2 + mul_ln143_10_fu_332_p2);

assign add_ln143_fu_837_p2 = (and_ln143_2_fu_831_p2 + and_ln143_1_fu_818_p2);

assign and_ln143_1_fu_818_p2 = (select_ln143_5_fu_811_p3 & mul_ln143_1_fu_296_p2);

assign and_ln143_2_fu_831_p2 = (select_ln143_6_fu_824_p3 & mul_ln143_2_fu_300_p2);

assign and_ln143_3_fu_1022_p2 = (select_ln143_8_fu_1015_p3 & mul_ln143_3_fu_304_p2);

assign and_ln143_4_fu_1035_p2 = (select_ln143_9_fu_1028_p3 & mul_ln143_4_fu_308_p2);

assign and_ln143_5_fu_1048_p2 = (select_ln143_10_fu_1041_p3 & mul_ln143_5_fu_312_p2);

assign and_ln143_6_fu_1089_p2 = (select_ln143_12_fu_1082_p3 & mul_ln143_6_fu_316_p2);

assign and_ln143_7_fu_1102_p2 = (select_ln143_13_fu_1095_p3 & mul_ln143_7_fu_320_p2);

assign and_ln143_8_fu_1176_p2 = (select_ln143_14_fu_1169_p3 & mul_ln143_9_fu_328_p2);

assign and_ln143_fu_575_p2 = (select_ln143_3_fu_568_p3 & mul_ln143_fu_292_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign arr_100_fu_581_p2 = (and_ln143_fu_575_p2 + arr_fu_108);

assign arr_101_fu_843_p2 = (arr_95_fu_112 + add_ln143_fu_837_p2);

assign arr_102_fu_1066_p2 = (arr_96_fu_116 + add_ln143_3_fu_1060_p2);

assign arr_103_fu_1120_p2 = (arr_97_fu_120 + add_ln143_6_fu_1114_p2);

assign arr_104_fu_1194_p2 = (arr_98_fu_124 + add_ln143_9_fu_1188_p2);

assign arr_105_fu_1263_p2 = (arr_99_fu_128 + add_ln143_12_fu_1257_p2);

assign conv36_cast_fu_352_p1 = conv36;

assign empty_44_fu_472_p2 = (zext_ln130_fu_400_p1 + 4'd7);

assign empty_fu_404_p2 = ($signed(zext_ln130_fu_400_p1) + $signed(4'd9));

assign icmp_ln130_fu_394_p2 = ((ap_sig_allocacmp_i_5 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln143_1_fu_416_p2 = ((empty_fu_404_p2 > 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln143_2_fu_422_p2 = ((empty_fu_404_p2 > 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln143_3_fu_436_p2 = ((tmp_83_fu_428_p3 > 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln143_4_fu_450_p2 = ((tmp_83_fu_428_p3 > 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln143_5_fu_466_p2 = ((tmp_83_fu_428_p3 > 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln143_6_fu_478_p2 = ((empty_44_fu_472_p2 > 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln143_7_fu_492_p2 = ((empty_44_fu_472_p2 > 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln143_8_fu_508_p2 = ((empty_44_fu_472_p2 > 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln143_fu_410_p2 = ((empty_fu_404_p2 == 4'd15) ? 1'b1 : 1'b0);

assign mul_ln143_10_fu_332_p0 = mul_ln143_10_fu_332_p00;

assign mul_ln143_10_fu_332_p00 = tmp_81_fu_709_p18;

assign mul_ln143_10_fu_332_p1 = zext_ln143_fu_558_p1;

assign mul_ln143_11_fu_336_p0 = mul_ln143_11_fu_336_p00;

assign mul_ln143_11_fu_336_p00 = tmp_86_fu_914_p18;

assign mul_ln143_11_fu_336_p1 = zext_ln143_6_fu_802_p1;

assign mul_ln143_12_fu_340_p0 = mul_ln143_12_fu_340_p00;

assign mul_ln143_12_fu_340_p00 = tmp_90_fu_1212_p18;

assign mul_ln143_12_fu_340_p1 = zext_ln143_11_fu_1007_p1;

assign mul_ln143_13_fu_344_p0 = mul_ln143_13_fu_344_p00;

assign mul_ln143_13_fu_344_p00 = tmp_82_fu_748_p18;

assign mul_ln143_13_fu_344_p1 = zext_ln143_fu_558_p1;

assign mul_ln143_14_fu_348_p0 = mul_ln143_14_fu_348_p00;

assign mul_ln143_14_fu_348_p00 = tmp_87_fu_953_p18;

assign mul_ln143_14_fu_348_p1 = zext_ln143_6_fu_802_p1;

assign mul_ln143_1_fu_296_p0 = mul_ln143_1_fu_296_p00;

assign mul_ln143_1_fu_296_p00 = select_ln143_fu_594_p3;

assign mul_ln143_1_fu_296_p1 = zext_ln143_fu_558_p1;

assign mul_ln143_2_fu_300_p0 = zext_ln143_6_fu_802_p1;

assign mul_ln143_2_fu_300_p1 = conv36_cast_reg_1477;

assign mul_ln143_3_fu_304_p0 = zext_ln143_11_fu_1007_p1;

assign mul_ln143_3_fu_304_p1 = conv36_cast_reg_1477;

assign mul_ln143_4_fu_308_p0 = mul_ln143_4_fu_308_p00;

assign mul_ln143_4_fu_308_p00 = tmp_79_fu_617_p18;

assign mul_ln143_4_fu_308_p1 = zext_ln143_fu_558_p1;

assign mul_ln143_5_fu_312_p0 = mul_ln143_5_fu_312_p00;

assign mul_ln143_5_fu_312_p00 = select_ln143_1_fu_849_p3;

assign mul_ln143_5_fu_312_p1 = zext_ln143_6_fu_802_p1;

assign mul_ln143_6_fu_316_p0 = mul_ln143_6_fu_316_p00;

assign mul_ln143_6_fu_316_p00 = select_ln143_2_fu_1072_p3;

assign mul_ln143_6_fu_316_p1 = zext_ln143_11_fu_1007_p1;

assign mul_ln143_7_fu_320_p0 = mul_ln143_7_fu_320_p00;

assign mul_ln143_7_fu_320_p00 = tmp_85_fu_862_p18;

assign mul_ln143_7_fu_320_p1 = zext_ln143_6_fu_802_p1;

assign mul_ln143_8_fu_324_p0 = mul_ln143_8_fu_324_p00;

assign mul_ln143_8_fu_324_p00 = tmp_80_fu_670_p18;

assign mul_ln143_8_fu_324_p1 = zext_ln143_fu_558_p1;

assign mul_ln143_9_fu_328_p0 = mul_ln143_9_fu_328_p00;

assign mul_ln143_9_fu_328_p00 = tmp_89_fu_1129_p18;

assign mul_ln143_9_fu_328_p1 = zext_ln143_11_fu_1007_p1;

assign mul_ln143_fu_292_p0 = zext_ln143_fu_558_p1;

assign mul_ln143_fu_292_p1 = conv36_cast_reg_1477;

assign select_ln143_10_fu_1041_p3 = ((icmp_ln143_4_reg_1519[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_11_fu_484_p3 = ((icmp_ln143_6_fu_478_p2[0:0] == 1'b1) ? 3'd6 : 3'd7);

assign select_ln143_12_fu_1082_p3 = ((icmp_ln143_7_reg_1542[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_13_fu_1095_p3 = ((icmp_ln143_5_reg_1530[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_14_fu_1169_p3 = ((icmp_ln143_8_reg_1553[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_1_fu_849_p3 = ((icmp_ln143_3_reg_1513[0:0] == 1'b1) ? arg2_r_14_reload : arg2_r_15_reload);

assign select_ln143_2_fu_1072_p3 = ((icmp_ln143_6_reg_1536[0:0] == 1'b1) ? arg2_r_14_reload : arg2_r_15_reload);

assign select_ln143_3_fu_568_p3 = ((icmp_ln143_reg_1494[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_4_fu_587_p3 = ((icmp_ln143_reg_1494[0:0] == 1'b1) ? 3'd6 : 3'd7);

assign select_ln143_5_fu_811_p3 = ((icmp_ln143_1_reg_1501[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_6_fu_824_p3 = ((icmp_ln143_3_reg_1513[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_7_fu_442_p3 = ((icmp_ln143_3_fu_436_p2[0:0] == 1'b1) ? 3'd6 : 3'd7);

assign select_ln143_8_fu_1015_p3 = ((icmp_ln143_6_reg_1536[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_9_fu_1028_p3 = ((icmp_ln143_2_reg_1507[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_fu_594_p3 = ((icmp_ln143_reg_1494[0:0] == 1'b1) ? arg2_r_14_reload : arg2_r_15_reload);

assign sext_ln143_11_fu_910_p1 = $signed(sub_ln35_24_fu_905_p2);

assign sext_ln143_9_fu_666_p1 = $signed(sub_ln35_22_fu_660_p2);

assign sub_ln35_21_fu_607_p2 = (select_ln143_4_fu_587_p3 - zext_ln35_fu_604_p1);

assign sub_ln35_22_fu_660_p2 = ($signed(sub_ln35_21_fu_607_p2) - $signed(zext_ln35_10_fu_657_p1));

assign sub_ln35_23_fu_460_p2 = (select_ln143_7_fu_442_p3 - zext_ln35_11_fu_456_p1);

assign sub_ln35_24_fu_905_p2 = ($signed(sub_ln35_23_reg_1524) - $signed(zext_ln35_12_fu_902_p1));

assign sub_ln35_25_fu_502_p2 = (select_ln143_11_fu_484_p3 - zext_ln35_13_fu_498_p1);

assign sub_ln35_26_fu_1203_p2 = ($signed(sub_ln35_25_reg_1547) - $signed(zext_ln35_14_fu_1200_p1));

assign tmp_79_fu_617_p17 = sub_ln35_21_fu_607_p2;

assign tmp_83_fu_428_p3 = {{1'd1}, {ap_sig_allocacmp_i_5}};

assign tmp_85_fu_862_p17 = sub_ln35_23_reg_1524;

assign tmp_89_fu_1129_p17 = sub_ln35_25_reg_1547;

assign tmp_90_fu_1212_p17 = $signed(sub_ln35_26_fu_1203_p2);

assign zext_ln130_fu_400_p1 = ap_sig_allocacmp_i_5;

assign zext_ln143_11_fu_1007_p1 = tmp_88_fu_992_p9;

assign zext_ln143_6_fu_802_p1 = tmp_84_fu_787_p9;

assign zext_ln143_fu_558_p1 = tmp_s_fu_543_p9;

assign zext_ln35_10_fu_657_p1 = icmp_ln143_2_reg_1507;

assign zext_ln35_11_fu_456_p1 = icmp_ln143_4_fu_450_p2;

assign zext_ln35_12_fu_902_p1 = icmp_ln143_5_reg_1530;

assign zext_ln35_13_fu_498_p1 = icmp_ln143_7_fu_492_p2;

assign zext_ln35_14_fu_1200_p1 = icmp_ln143_8_reg_1553;

assign zext_ln35_fu_604_p1 = icmp_ln143_1_reg_1501;

always @ (posedge ap_clk) begin
    conv36_cast_reg_1477[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //test_test_Pipeline_VITIS_LOOP_130_19
