

================================================================
== Vitis HLS Report for 'test_Pipeline_VITIS_LOOP_57_5'
================================================================
* Date:           Fri May 10 16:20:20 2024

* Version:        2023.1.1 (Build 3869133 on Jun 15 2023)
* Project:        D5
* Solution:       comb_21 (Vivado IP Flow Target)
* Product family: zynquplus
* Target device:  xczu9eg-ffvb1156-2-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  7.015 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+-----------+-----------+-----+-----+---------+
    |  Latency (cycles) |   Latency (absolute)  |  Interval | Pipeline|
    |   min   |   max   |    min    |    max    | min | max |   Type  |
    +---------+---------+-----------+-----------+-----+-----+---------+
    |        9|        9|  90.000 ns|  90.000 ns|    9|    9|       no|
    +---------+---------+-----------+-----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- VITIS_LOOP_57_5  |        7|        7|         2|          1|          1|     7|       yes|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 3
* Pipeline : 1
  Pipeline-0 : II = 1, D = 3, States = { 1 2 3 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 0.42>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%arr = alloca i32 1"   --->   Operation 5 'alloca' 'arr' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%arr_58 = alloca i32 1"   --->   Operation 6 'alloca' 'arr_58' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%arr_59 = alloca i32 1"   --->   Operation 7 'alloca' 'arr_59' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%arr_60 = alloca i32 1"   --->   Operation 8 'alloca' 'arr_60' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%arr_61 = alloca i32 1"   --->   Operation 9 'alloca' 'arr_61' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%arr_62 = alloca i32 1"   --->   Operation 10 'alloca' 'arr_62' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%arr_63 = alloca i32 1"   --->   Operation 11 'alloca' 'arr_63' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%i = alloca i32 1"   --->   Operation 12 'alloca' 'i' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%arg2_r_9_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_9_reload"   --->   Operation 13 'read' 'arg2_r_9_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%arg2_r_10_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_10_reload"   --->   Operation 14 'read' 'arg2_r_10_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%arg2_r_11_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_11_reload"   --->   Operation 15 'read' 'arg2_r_11_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%arg2_r_12_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_12_reload"   --->   Operation 16 'read' 'arg2_r_12_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%arg2_r_13_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_13_reload"   --->   Operation 17 'read' 'arg2_r_13_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%arg2_r_15_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_15_reload"   --->   Operation 18 'read' 'arg2_r_15_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%arg2_r_14_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_14_reload"   --->   Operation 19 'read' 'arg2_r_14_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%conv36_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %conv36"   --->   Operation 20 'read' 'conv36_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%arg1_r_15_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_15_reload"   --->   Operation 21 'read' 'arg1_r_15_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%arg1_r_14_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_14_reload"   --->   Operation 22 'read' 'arg1_r_14_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%arg1_r_13_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_13_reload"   --->   Operation 23 'read' 'arg1_r_13_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%arg1_r_12_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_12_reload"   --->   Operation 24 'read' 'arg1_r_12_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%arg1_r_11_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_11_reload"   --->   Operation 25 'read' 'arg1_r_11_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%arg1_r_10_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_10_reload"   --->   Operation 26 'read' 'arg1_r_10_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%arg1_r_9_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_9_reload"   --->   Operation 27 'read' 'arg1_r_9_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%conv36_cast = zext i32 %conv36_read"   --->   Operation 28 'zext' 'conv36_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.42ns)   --->   "%store_ln0 = store i4 15, i4 %i"   --->   Operation 29 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 30 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_63"   --->   Operation 30 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 31 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_62"   --->   Operation 31 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 32 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_61"   --->   Operation 32 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 33 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_60"   --->   Operation 33 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 34 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_59"   --->   Operation 34 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 35 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_58"   --->   Operation 35 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 36 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr"   --->   Operation 36 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.inc110.6"   --->   Operation 37 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 6.17>
ST_2 : Operation 38 [1/1] (0.00ns)   --->   "%i_3 = load i4 %i" [d5.cpp:57]   --->   Operation 38 'load' 'i_3' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 39 [1/1] (0.79ns)   --->   "%icmp_ln57 = icmp_ugt  i4 %i_3, i4 8" [d5.cpp:57]   --->   Operation 39 'icmp' 'icmp_ln57' <Predicate = true> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 40 [1/1] (0.00ns)   --->   "%br_ln57 = br i1 %icmp_ln57, void %for.inc167.4.14.preheader.exitStub, void %for.inc110.6.split" [d5.cpp:57]   --->   Operation 40 'br' 'br_ln57' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 41 [1/1] (0.00ns)   --->   "%arr_load = load i64 %arr" [d5.cpp:70]   --->   Operation 41 'load' 'arr_load' <Predicate = (icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 42 [1/1] (0.00ns)   --->   "%arr_58_load = load i64 %arr_58" [d5.cpp:70]   --->   Operation 42 'load' 'arr_58_load' <Predicate = (icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 43 [1/1] (0.00ns)   --->   "%zext_ln57 = zext i4 %i_3" [d5.cpp:57]   --->   Operation 43 'zext' 'zext_ln57' <Predicate = (icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 44 [1/1] (0.79ns)   --->   "%empty = add i5 %zext_ln57, i5 1" [d5.cpp:57]   --->   Operation 44 'add' 'empty' <Predicate = (icmp_ln57)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 45 [1/1] (0.48ns)   --->   "%tmp_7 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg1_r_9_reload_read, i32 %arg1_r_10_reload_read, i32 %arg1_r_11_reload_read, i32 %arg1_r_12_reload_read, i32 %arg1_r_13_reload_read, i32 %arg1_r_14_reload_read, i32 %arg1_r_15_reload_read, i4 %i_3" [d5.cpp:70]   --->   Operation 45 'mux' 'tmp_7' <Predicate = (icmp_ln57)> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 46 [1/1] (0.00ns)   --->   "%zext_ln70 = zext i32 %tmp_7" [d5.cpp:70]   --->   Operation 46 'zext' 'zext_ln70' <Predicate = (icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 47 [1/1] (0.00ns)   --->   "%tmp = bitselect i1 @_ssdm_op_BitSelect.i1.i5.i32, i5 %empty, i32 4" [d5.cpp:70]   --->   Operation 47 'bitselect' 'tmp' <Predicate = (icmp_ln57)> <Delay = 0.00>
ST_2 : [1/1] (1.31ns)   --->   Input mux for Operation 48 '%mul_ln70 = mul i64 %zext_ln70, i64 %conv36_cast'
ST_2 : Operation 48 [1/1] (2.10ns)   --->   "%mul_ln70 = mul i64 %zext_ln70, i64 %conv36_cast" [d5.cpp:70]   --->   Operation 48 'mul' 'mul_ln70' <Predicate = (icmp_ln57)> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 49 [1/1] (0.00ns) (grouped into LUT with out node arr_64)   --->   "%tmp_11 = bitselect i1 @_ssdm_op_BitSelect.i1.i5.i32, i5 %empty, i32 4" [d5.cpp:70]   --->   Operation 49 'bitselect' 'tmp_11' <Predicate = (icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 50 [1/1] (0.00ns) (grouped into LUT with out node arr_64)   --->   "%select_ln70_1 = select i1 %tmp_11, i64 18446744073709551615, i64 0" [d5.cpp:70]   --->   Operation 50 'select' 'select_ln70_1' <Predicate = (icmp_ln57)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 51 [1/1] (0.00ns) (grouped into LUT with out node arr_64)   --->   "%and_ln70 = and i64 %mul_ln70, i64 %select_ln70_1" [d5.cpp:70]   --->   Operation 51 'and' 'and_ln70' <Predicate = (icmp_ln57)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 52 [1/1] (1.08ns) (out node of the LUT)   --->   "%arr_64 = add i64 %and_ln70, i64 %arr_load" [d5.cpp:70]   --->   Operation 52 'add' 'arr_64' <Predicate = (icmp_ln57)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 53 [1/1] (0.00ns) (grouped into LUT with out node sub_ln35_32)   --->   "%select_ln70_2 = select i1 %tmp, i3 6, i3 7" [d5.cpp:70]   --->   Operation 53 'select' 'select_ln70_2' <Predicate = (icmp_ln57)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 54 [1/1] (0.44ns)   --->   "%select_ln70 = select i1 %tmp, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read" [d5.cpp:70]   --->   Operation 54 'select' 'select_ln70' <Predicate = (icmp_ln57)> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 55 [1/1] (0.00ns)   --->   "%zext_ln70_1 = zext i32 %select_ln70" [d5.cpp:70]   --->   Operation 55 'zext' 'zext_ln70_1' <Predicate = (icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 56 [1/1] (0.78ns)   --->   "%icmp_ln70 = icmp_ugt  i5 %empty, i5 14" [d5.cpp:70]   --->   Operation 56 'icmp' 'icmp_ln70' <Predicate = (icmp_ln57)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.31ns)   --->   Input mux for Operation 57 '%mul_ln70_1 = mul i64 %zext_ln70_1, i64 %zext_ln70'
ST_2 : Operation 57 [1/1] (2.10ns)   --->   "%mul_ln70_1 = mul i64 %zext_ln70_1, i64 %zext_ln70" [d5.cpp:70]   --->   Operation 57 'mul' 'mul_ln70_1' <Predicate = (icmp_ln57)> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 58 [1/1] (0.00ns) (grouped into LUT with out node arr_65)   --->   "%select_ln70_3 = select i1 %icmp_ln70, i64 18446744073709551615, i64 0" [d5.cpp:70]   --->   Operation 58 'select' 'select_ln70_3' <Predicate = (icmp_ln57)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 59 [1/1] (0.00ns) (grouped into LUT with out node arr_65)   --->   "%and_ln70_1 = and i64 %mul_ln70_1, i64 %select_ln70_3" [d5.cpp:70]   --->   Operation 59 'and' 'and_ln70_1' <Predicate = (icmp_ln57)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 60 [1/1] (1.08ns) (out node of the LUT)   --->   "%arr_65 = add i64 %and_ln70_1, i64 %arr_58_load" [d5.cpp:70]   --->   Operation 60 'add' 'arr_65' <Predicate = (icmp_ln57)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 61 [1/1] (0.00ns) (grouped into LUT with out node sub_ln35_32)   --->   "%zext_ln35_2 = zext i1 %icmp_ln70" [d5.cpp:35]   --->   Operation 61 'zext' 'zext_ln35_2' <Predicate = (icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 62 [1/1] (0.54ns) (out node of the LUT)   --->   "%sub_ln35_32 = sub i3 %select_ln70_2, i3 %zext_ln35_2" [d5.cpp:35]   --->   Operation 62 'sub' 'sub_ln35_32' <Predicate = (icmp_ln57)> <Delay = 0.54> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 63 [1/1] (0.78ns)   --->   "%icmp_ln70_1 = icmp_ugt  i5 %empty, i5 13" [d5.cpp:70]   --->   Operation 63 'icmp' 'icmp_ln70_1' <Predicate = (icmp_ln57)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 64 [1/1] (0.00ns)   --->   "%zext_ln35_3 = zext i1 %icmp_ln70_1" [d5.cpp:35]   --->   Operation 64 'zext' 'zext_ln35_3' <Predicate = (icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 65 [1/1] (0.67ns)   --->   "%sub_ln35_33 = sub i3 %sub_ln35_32, i3 %zext_ln35_3" [d5.cpp:35]   --->   Operation 65 'sub' 'sub_ln35_33' <Predicate = (icmp_ln57)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 66 [1/1] (0.00ns)   --->   "%sext_ln70_1 = sext i3 %sub_ln35_33" [d5.cpp:70]   --->   Operation 66 'sext' 'sext_ln70_1' <Predicate = (icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 67 [1/1] (0.78ns)   --->   "%icmp_ln70_2 = icmp_ugt  i5 %empty, i5 12" [d5.cpp:70]   --->   Operation 67 'icmp' 'icmp_ln70_2' <Predicate = (icmp_ln57)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 68 [1/1] (0.00ns)   --->   "%zext_ln71 = zext i1 %icmp_ln70_2" [d5.cpp:71]   --->   Operation 68 'zext' 'zext_ln71' <Predicate = (icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 69 [1/1] (0.67ns)   --->   "%sub_ln35_3 = sub i4 %sext_ln70_1, i4 %zext_ln71" [d5.cpp:35]   --->   Operation 69 'sub' 'sub_ln35_3' <Predicate = (icmp_ln57)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 70 [1/1] (0.78ns)   --->   "%icmp_ln70_3 = icmp_ugt  i5 %empty, i5 11" [d5.cpp:70]   --->   Operation 70 'icmp' 'icmp_ln70_3' <Predicate = (icmp_ln57)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 71 [1/1] (0.78ns)   --->   "%icmp_ln70_4 = icmp_ugt  i5 %empty, i5 10" [d5.cpp:70]   --->   Operation 71 'icmp' 'icmp_ln70_4' <Predicate = (icmp_ln57)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 72 [1/1] (0.79ns)   --->   "%add_ln57 = add i4 %i_3, i4 15" [d5.cpp:57]   --->   Operation 72 'add' 'add_ln57' <Predicate = (icmp_ln57)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 73 [1/1] (0.42ns)   --->   "%store_ln57 = store i4 %add_ln57, i4 %i" [d5.cpp:57]   --->   Operation 73 'store' 'store_ln57' <Predicate = (icmp_ln57)> <Delay = 0.42>
ST_2 : Operation 74 [1/1] (0.42ns)   --->   "%store_ln57 = store i64 %arr_65, i64 %arr_58" [d5.cpp:57]   --->   Operation 74 'store' 'store_ln57' <Predicate = (icmp_ln57)> <Delay = 0.42>
ST_2 : Operation 75 [1/1] (0.42ns)   --->   "%store_ln57 = store i64 %arr_64, i64 %arr" [d5.cpp:57]   --->   Operation 75 'store' 'store_ln57' <Predicate = (icmp_ln57)> <Delay = 0.42>
ST_2 : Operation 123 [1/1] (0.00ns)   --->   "%arr_load_3 = load i64 %arr"   --->   Operation 123 'load' 'arr_load_3' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 124 [1/1] (0.00ns)   --->   "%arr_58_load_1 = load i64 %arr_58"   --->   Operation 124 'load' 'arr_58_load_1' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 125 [1/1] (0.00ns)   --->   "%arr_59_load_1 = load i64 %arr_59"   --->   Operation 125 'load' 'arr_59_load_1' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 126 [1/1] (0.00ns)   --->   "%arr_60_load_1 = load i64 %arr_60"   --->   Operation 126 'load' 'arr_60_load_1' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 127 [1/1] (0.00ns)   --->   "%arr_61_load_1 = load i64 %arr_61"   --->   Operation 127 'load' 'arr_61_load_1' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 128 [1/1] (0.00ns)   --->   "%arr_62_load_1 = load i64 %arr_62"   --->   Operation 128 'load' 'arr_62_load_1' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 129 [1/1] (0.00ns)   --->   "%arr_63_load_1 = load i64 %arr_63"   --->   Operation 129 'load' 'arr_63_load_1' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 130 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add102_6212_out, i64 %arr_63_load_1"   --->   Operation 130 'write' 'write_ln0' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 131 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add102_5211_out, i64 %arr_62_load_1"   --->   Operation 131 'write' 'write_ln0' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 132 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add102_4210_out, i64 %arr_61_load_1"   --->   Operation 132 'write' 'write_ln0' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 133 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add102_3209_out, i64 %arr_60_load_1"   --->   Operation 133 'write' 'write_ln0' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 134 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add102_2208_out, i64 %arr_59_load_1"   --->   Operation 134 'write' 'write_ln0' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 135 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add102_1207_out, i64 %arr_58_load_1"   --->   Operation 135 'write' 'write_ln0' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 136 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add102206_out, i64 %arr_load_3"   --->   Operation 136 'write' 'write_ln0' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_2 : Operation 137 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 137 'ret' 'ret_ln0' <Predicate = (!icmp_ln57)> <Delay = 0.00>

State 3 <SV = 2> <Delay = 7.01>
ST_3 : Operation 76 [1/1] (0.00ns)   --->   "%arr_59_load = load i64 %arr_59" [d5.cpp:70]   --->   Operation 76 'load' 'arr_59_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 77 [1/1] (0.00ns)   --->   "%arr_60_load = load i64 %arr_60" [d5.cpp:70]   --->   Operation 77 'load' 'arr_60_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 78 [1/1] (0.00ns)   --->   "%arr_61_load = load i64 %arr_61" [d5.cpp:70]   --->   Operation 78 'load' 'arr_61_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 79 [1/1] (0.00ns)   --->   "%arr_62_load = load i64 %arr_62" [d5.cpp:70]   --->   Operation 79 'load' 'arr_62_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 80 [1/1] (0.00ns)   --->   "%arr_63_load = load i64 %arr_63" [d5.cpp:70]   --->   Operation 80 'load' 'arr_63_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 81 [1/1] (0.00ns)   --->   "%specpipeline_ln59 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty_5" [d5.cpp:59]   --->   Operation 81 'specpipeline' 'specpipeline_ln59' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 82 [1/1] (0.00ns)   --->   "%speclooptripcount_ln57 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 7, i64 7, i64 7" [d5.cpp:57]   --->   Operation 82 'speclooptripcount' 'speclooptripcount_ln57' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 83 [1/1] (0.00ns)   --->   "%specloopname_ln57 = specloopname void @_ssdm_op_SpecLoopName, void @empty_16" [d5.cpp:57]   --->   Operation 83 'specloopname' 'specloopname_ln57' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 84 [1/1] (0.00ns)   --->   "%sext_ln70 = sext i3 %sub_ln35_32" [d5.cpp:70]   --->   Operation 84 'sext' 'sext_ln70' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 85 [1/1] (0.48ns)   --->   "%tmp_9 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sext_ln70" [d5.cpp:70]   --->   Operation 85 'mux' 'tmp_9' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 86 [1/1] (0.00ns)   --->   "%zext_ln70_2 = zext i32 %tmp_9" [d5.cpp:70]   --->   Operation 86 'zext' 'zext_ln70_2' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 87 '%mul_ln70_2 = mul i64 %zext_ln70_2, i64 %zext_ln70'
ST_3 : Operation 87 [1/1] (2.10ns)   --->   "%mul_ln70_2 = mul i64 %zext_ln70_2, i64 %zext_ln70" [d5.cpp:70]   --->   Operation 87 'mul' 'mul_ln70_2' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 88 [1/1] (0.00ns) (grouped into LUT with out node arr_66)   --->   "%select_ln70_4 = select i1 %icmp_ln70_1, i64 18446744073709551615, i64 0" [d5.cpp:70]   --->   Operation 88 'select' 'select_ln70_4' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 89 [1/1] (0.00ns) (grouped into LUT with out node arr_66)   --->   "%and_ln70_2 = and i64 %mul_ln70_2, i64 %select_ln70_4" [d5.cpp:70]   --->   Operation 89 'and' 'and_ln70_2' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 90 [1/1] (1.08ns) (out node of the LUT)   --->   "%arr_66 = add i64 %and_ln70_2, i64 %arr_59_load" [d5.cpp:70]   --->   Operation 90 'add' 'arr_66' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 91 [1/1] (0.48ns)   --->   "%tmp_s = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sext_ln70_1" [d5.cpp:70]   --->   Operation 91 'mux' 'tmp_s' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 92 [1/1] (0.00ns)   --->   "%zext_ln70_3 = zext i32 %tmp_s" [d5.cpp:70]   --->   Operation 92 'zext' 'zext_ln70_3' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 93 '%mul_ln70_3 = mul i64 %zext_ln70_3, i64 %zext_ln70'
ST_3 : Operation 93 [1/1] (2.10ns)   --->   "%mul_ln70_3 = mul i64 %zext_ln70_3, i64 %zext_ln70" [d5.cpp:70]   --->   Operation 93 'mul' 'mul_ln70_3' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 94 [1/1] (0.00ns) (grouped into LUT with out node arr_67)   --->   "%select_ln70_5 = select i1 %icmp_ln70_2, i64 18446744073709551615, i64 0" [d5.cpp:70]   --->   Operation 94 'select' 'select_ln70_5' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 95 [1/1] (0.00ns) (grouped into LUT with out node arr_67)   --->   "%and_ln70_3 = and i64 %mul_ln70_3, i64 %select_ln70_5" [d5.cpp:70]   --->   Operation 95 'and' 'and_ln70_3' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 96 [1/1] (1.08ns) (out node of the LUT)   --->   "%arr_67 = add i64 %and_ln70_3, i64 %arr_60_load" [d5.cpp:70]   --->   Operation 96 'add' 'arr_67' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 97 [1/1] (0.48ns)   --->   "%tmp_1 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln35_3" [d5.cpp:70]   --->   Operation 97 'mux' 'tmp_1' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 98 [1/1] (0.00ns)   --->   "%zext_ln70_4 = zext i32 %tmp_1" [d5.cpp:70]   --->   Operation 98 'zext' 'zext_ln70_4' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 99 '%mul_ln70_4 = mul i64 %zext_ln70_4, i64 %zext_ln70'
ST_3 : Operation 99 [1/1] (2.10ns)   --->   "%mul_ln70_4 = mul i64 %zext_ln70_4, i64 %zext_ln70" [d5.cpp:70]   --->   Operation 99 'mul' 'mul_ln70_4' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 100 [1/1] (0.00ns) (grouped into LUT with out node arr_68)   --->   "%select_ln70_6 = select i1 %icmp_ln70_3, i64 18446744073709551615, i64 0" [d5.cpp:70]   --->   Operation 100 'select' 'select_ln70_6' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 101 [1/1] (0.00ns) (grouped into LUT with out node arr_68)   --->   "%and_ln70_4 = and i64 %mul_ln70_4, i64 %select_ln70_6" [d5.cpp:70]   --->   Operation 101 'and' 'and_ln70_4' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 102 [1/1] (1.08ns) (out node of the LUT)   --->   "%arr_68 = add i64 %and_ln70_4, i64 %arr_61_load" [d5.cpp:70]   --->   Operation 102 'add' 'arr_68' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 103 [1/1] (0.00ns)   --->   "%zext_ln71_1 = zext i1 %icmp_ln70_3" [d5.cpp:71]   --->   Operation 103 'zext' 'zext_ln71_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 104 [1/1] (0.79ns)   --->   "%sub_ln35_4 = sub i4 %sub_ln35_3, i4 %zext_ln71_1" [d5.cpp:35]   --->   Operation 104 'sub' 'sub_ln35_4' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 105 [1/1] (0.48ns)   --->   "%tmp_8 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln35_4" [d5.cpp:70]   --->   Operation 105 'mux' 'tmp_8' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 106 [1/1] (0.00ns)   --->   "%zext_ln70_5 = zext i32 %tmp_8" [d5.cpp:70]   --->   Operation 106 'zext' 'zext_ln70_5' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 107 '%mul_ln70_5 = mul i64 %zext_ln70_5, i64 %zext_ln70'
ST_3 : Operation 107 [1/1] (2.10ns)   --->   "%mul_ln70_5 = mul i64 %zext_ln70_5, i64 %zext_ln70" [d5.cpp:70]   --->   Operation 107 'mul' 'mul_ln70_5' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 108 [1/1] (0.00ns) (grouped into LUT with out node arr_69)   --->   "%select_ln70_7 = select i1 %icmp_ln70_4, i64 18446744073709551615, i64 0" [d5.cpp:70]   --->   Operation 108 'select' 'select_ln70_7' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 109 [1/1] (0.00ns) (grouped into LUT with out node arr_69)   --->   "%and_ln70_5 = and i64 %mul_ln70_5, i64 %select_ln70_7" [d5.cpp:70]   --->   Operation 109 'and' 'and_ln70_5' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 110 [1/1] (1.08ns) (out node of the LUT)   --->   "%arr_69 = add i64 %and_ln70_5, i64 %arr_62_load" [d5.cpp:70]   --->   Operation 110 'add' 'arr_69' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 111 [1/1] (0.00ns)   --->   "%zext_ln71_2 = zext i1 %icmp_ln70_4" [d5.cpp:71]   --->   Operation 111 'zext' 'zext_ln71_2' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 112 [1/1] (0.79ns)   --->   "%sub_ln35_5 = sub i4 %sub_ln35_4, i4 %zext_ln71_2" [d5.cpp:35]   --->   Operation 112 'sub' 'sub_ln35_5' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 113 [1/1] (0.48ns)   --->   "%tmp_10 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln35_5" [d5.cpp:70]   --->   Operation 113 'mux' 'tmp_10' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 114 [1/1] (0.00ns)   --->   "%zext_ln70_6 = zext i32 %tmp_10" [d5.cpp:70]   --->   Operation 114 'zext' 'zext_ln70_6' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 115 '%mul_ln70_6 = mul i64 %zext_ln70_6, i64 %zext_ln70'
ST_3 : Operation 115 [1/1] (2.10ns)   --->   "%mul_ln70_6 = mul i64 %zext_ln70_6, i64 %zext_ln70" [d5.cpp:70]   --->   Operation 115 'mul' 'mul_ln70_6' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 116 [1/1] (1.08ns)   --->   "%arr_70 = add i64 %mul_ln70_6, i64 %arr_63_load" [d5.cpp:70]   --->   Operation 116 'add' 'arr_70' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 117 [1/1] (0.42ns)   --->   "%store_ln57 = store i64 %arr_70, i64 %arr_63" [d5.cpp:57]   --->   Operation 117 'store' 'store_ln57' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 118 [1/1] (0.42ns)   --->   "%store_ln57 = store i64 %arr_69, i64 %arr_62" [d5.cpp:57]   --->   Operation 118 'store' 'store_ln57' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 119 [1/1] (0.42ns)   --->   "%store_ln57 = store i64 %arr_68, i64 %arr_61" [d5.cpp:57]   --->   Operation 119 'store' 'store_ln57' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 120 [1/1] (0.42ns)   --->   "%store_ln57 = store i64 %arr_67, i64 %arr_60" [d5.cpp:57]   --->   Operation 120 'store' 'store_ln57' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 121 [1/1] (0.42ns)   --->   "%store_ln57 = store i64 %arr_66, i64 %arr_59" [d5.cpp:57]   --->   Operation 121 'store' 'store_ln57' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 122 [1/1] (0.00ns)   --->   "%br_ln57 = br void %for.inc110.6" [d5.cpp:57]   --->   Operation 122 'br' 'br_ln57' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 0.427ns
The critical path consists of the following:
	'alloca' operation ('i') [30]  (0.000 ns)
	'store' operation ('store_ln0') of constant 15 on local variable 'i' [47]  (0.427 ns)

 <State 2>: 6.178ns
The critical path consists of the following:
	'load' operation ('i', d5.cpp:57) on local variable 'i' [57]  (0.000 ns)
	'add' operation ('empty', d5.cpp:57) [72]  (0.797 ns)
	'select' operation ('select_ln70', d5.cpp:70) [82]  (0.449 ns)
	multiplexor before operation 'mul' with delay (1.317 ns)
'mul' operation ('mul_ln70_1', d5.cpp:70) [85]  (2.103 ns)
	'and' operation ('and_ln70_1', d5.cpp:70) [87]  (0.000 ns)
	'add' operation ('arr', d5.cpp:70) [88]  (1.085 ns)
	'store' operation ('store_ln57', d5.cpp:57) of variable 'arr', d5.cpp:70 on local variable 'arr' [140]  (0.427 ns)

 <State 3>: 7.015ns
The critical path consists of the following:
	'sub' operation ('sub_ln35_4', d5.cpp:35) [119]  (0.797 ns)
	'sub' operation ('sub_ln35_5', d5.cpp:35) [128]  (0.797 ns)
	'mux' operation ('tmp_10', d5.cpp:70) [129]  (0.489 ns)
	multiplexor before operation 'mul' with delay (1.317 ns)
'mul' operation ('mul_ln70_6', d5.cpp:70) [131]  (2.103 ns)
	'add' operation ('arr', d5.cpp:70) [132]  (1.085 ns)
	'store' operation ('store_ln57', d5.cpp:57) of variable 'arr', d5.cpp:70 on local variable 'arr' [135]  (0.427 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
