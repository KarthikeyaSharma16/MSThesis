// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_120_17 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arg1_r_11_reload,
        arg1_r_12_reload,
        arg1_r_13_reload,
        arg1_r_14_reload,
        arg1_r_15_reload,
        arg2_r_12_reload,
        arg2_r_8_reload,
        arg1_r_10_reload,
        arg2_r_13_reload,
        arg2_r_9_reload,
        arg1_r_9_reload,
        arg2_r_14_reload,
        arg2_r_10_reload,
        arg1_r_8_reload,
        arg2_r_15_reload,
        arg2_r_11_reload,
        add245_3482_out,
        add245_3482_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] arg1_r_11_reload;
input  [31:0] arg1_r_12_reload;
input  [31:0] arg1_r_13_reload;
input  [31:0] arg1_r_14_reload;
input  [31:0] arg1_r_15_reload;
input  [31:0] arg2_r_12_reload;
input  [31:0] arg2_r_8_reload;
input  [31:0] arg1_r_10_reload;
input  [31:0] arg2_r_13_reload;
input  [31:0] arg2_r_9_reload;
input  [31:0] arg1_r_9_reload;
input  [31:0] arg2_r_14_reload;
input  [31:0] arg2_r_10_reload;
input  [31:0] arg1_r_8_reload;
input  [31:0] arg2_r_15_reload;
input  [31:0] arg2_r_11_reload;
output  [63:0] add245_3482_out;
output   add245_3482_out_ap_vld;

reg ap_idle;
reg add245_3482_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_fu_221_p3;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [63:0] arr_fu_72;
wire   [63:0] arr_58_fu_465_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [4:0] k_fu_76;
wire   [4:0] add_ln126_fu_430_p2;
reg   [3:0] i_fu_80;
wire   [3:0] add_ln120_fu_471_p2;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] mul_ln126_fu_187_p0;
wire   [31:0] mul_ln126_fu_187_p1;
wire   [31:0] mul_ln126_1_fu_191_p0;
wire   [31:0] mul_ln126_1_fu_191_p1;
wire   [31:0] mul_ln126_2_fu_195_p0;
wire   [31:0] mul_ln126_2_fu_195_p1;
wire   [31:0] mul_ln126_3_fu_199_p0;
wire   [31:0] mul_ln126_3_fu_199_p1;
wire   [31:0] tmp_s_fu_239_p18;
wire   [3:0] trunc_ln120_fu_235_p1;
wire   [0:0] icmp_ln126_fu_277_p2;
wire   [31:0] select_ln126_fu_283_p3;
wire   [31:0] tmp_74_fu_294_p18;
wire   [31:0] select_ln126_1_fu_332_p3;
wire   [31:0] tmp_75_fu_343_p18;
wire   [31:0] select_ln126_2_fu_381_p3;
wire   [31:0] tmp_76_fu_392_p18;
wire   [31:0] select_ln126_3_fu_436_p3;
wire   [63:0] mul_ln126_3_fu_199_p2;
wire   [63:0] mul_ln126_1_fu_191_p2;
wire   [63:0] mul_ln126_2_fu_195_p2;
wire   [63:0] mul_ln126_fu_187_p2;
wire   [63:0] add_ln126_2_fu_453_p2;
wire   [63:0] add_ln126_1_fu_447_p2;
wire   [63:0] add_ln126_3_fu_459_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [63:0] mul_ln126_1_fu_191_p00;
wire   [63:0] mul_ln126_1_fu_191_p10;
wire   [63:0] mul_ln126_2_fu_195_p00;
wire   [63:0] mul_ln126_2_fu_195_p10;
wire   [63:0] mul_ln126_3_fu_199_p00;
wire   [63:0] mul_ln126_3_fu_199_p10;
wire   [63:0] mul_ln126_fu_187_p00;
wire   [63:0] mul_ln126_fu_187_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U332(
    .din0(mul_ln126_fu_187_p0),
    .din1(mul_ln126_fu_187_p1),
    .dout(mul_ln126_fu_187_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U333(
    .din0(mul_ln126_1_fu_191_p0),
    .din1(mul_ln126_1_fu_191_p1),
    .dout(mul_ln126_1_fu_191_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U334(
    .din0(mul_ln126_2_fu_195_p0),
    .din1(mul_ln126_2_fu_195_p1),
    .dout(mul_ln126_2_fu_195_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U335(
    .din0(mul_ln126_3_fu_199_p0),
    .din1(mul_ln126_3_fu_199_p1),
    .dout(mul_ln126_3_fu_199_p2)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U336(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(arg1_r_11_reload),
    .din12(arg1_r_12_reload),
    .din13(arg1_r_13_reload),
    .din14(arg1_r_14_reload),
    .din15(arg1_r_15_reload),
    .din16(i_fu_80),
    .dout(tmp_s_fu_239_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U337(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(arg1_r_10_reload),
    .din12(arg1_r_11_reload),
    .din13(arg1_r_12_reload),
    .din14(arg1_r_13_reload),
    .din15(arg1_r_14_reload),
    .din16(i_fu_80),
    .dout(tmp_74_fu_294_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U338(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(arg1_r_9_reload),
    .din12(arg1_r_10_reload),
    .din13(arg1_r_11_reload),
    .din14(arg1_r_12_reload),
    .din15(arg1_r_13_reload),
    .din16(i_fu_80),
    .dout(tmp_75_fu_343_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U339(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(arg1_r_8_reload),
    .din12(arg1_r_9_reload),
    .din13(arg1_r_10_reload),
    .din14(arg1_r_11_reload),
    .din15(arg1_r_12_reload),
    .din16(i_fu_80),
    .dout(tmp_76_fu_392_p18)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_fu_72 <= 64'd0;
        end else if (((tmp_fu_221_p3 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            arr_fu_72 <= arr_58_fu_465_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_80 <= 4'd15;
        end else if (((tmp_fu_221_p3 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_80 <= add_ln120_fu_471_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_fu_76 <= 5'd8;
        end else if (((tmp_fu_221_p3 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            k_fu_76 <= add_ln126_fu_430_p2;
        end
    end
end

always @ (*) begin
    if (((tmp_fu_221_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add245_3482_out_ap_vld = 1'b1;
    end else begin
        add245_3482_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_221_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add245_3482_out = arr_fu_72;

assign add_ln120_fu_471_p2 = ($signed(i_fu_80) + $signed(4'd12));

assign add_ln126_1_fu_447_p2 = (mul_ln126_3_fu_199_p2 + mul_ln126_1_fu_191_p2);

assign add_ln126_2_fu_453_p2 = (mul_ln126_2_fu_195_p2 + mul_ln126_fu_187_p2);

assign add_ln126_3_fu_459_p2 = (add_ln126_2_fu_453_p2 + add_ln126_1_fu_447_p2);

assign add_ln126_fu_430_p2 = (k_fu_76 + 5'd4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign arr_58_fu_465_p2 = (arr_fu_72 + add_ln126_3_fu_459_p2);

assign icmp_ln126_fu_277_p2 = ((trunc_ln120_fu_235_p1 == 4'd12) ? 1'b1 : 1'b0);

assign mul_ln126_1_fu_191_p0 = mul_ln126_1_fu_191_p00;

assign mul_ln126_1_fu_191_p00 = select_ln126_1_fu_332_p3;

assign mul_ln126_1_fu_191_p1 = mul_ln126_1_fu_191_p10;

assign mul_ln126_1_fu_191_p10 = tmp_74_fu_294_p18;

assign mul_ln126_2_fu_195_p0 = mul_ln126_2_fu_195_p00;

assign mul_ln126_2_fu_195_p00 = select_ln126_2_fu_381_p3;

assign mul_ln126_2_fu_195_p1 = mul_ln126_2_fu_195_p10;

assign mul_ln126_2_fu_195_p10 = tmp_75_fu_343_p18;

assign mul_ln126_3_fu_199_p0 = mul_ln126_3_fu_199_p00;

assign mul_ln126_3_fu_199_p00 = select_ln126_fu_283_p3;

assign mul_ln126_3_fu_199_p1 = mul_ln126_3_fu_199_p10;

assign mul_ln126_3_fu_199_p10 = tmp_s_fu_239_p18;

assign mul_ln126_fu_187_p0 = mul_ln126_fu_187_p00;

assign mul_ln126_fu_187_p00 = select_ln126_3_fu_436_p3;

assign mul_ln126_fu_187_p1 = mul_ln126_fu_187_p10;

assign mul_ln126_fu_187_p10 = tmp_76_fu_392_p18;

assign select_ln126_1_fu_332_p3 = ((icmp_ln126_fu_277_p2[0:0] == 1'b1) ? arg2_r_13_reload : arg2_r_9_reload);

assign select_ln126_2_fu_381_p3 = ((icmp_ln126_fu_277_p2[0:0] == 1'b1) ? arg2_r_14_reload : arg2_r_10_reload);

assign select_ln126_3_fu_436_p3 = ((icmp_ln126_fu_277_p2[0:0] == 1'b1) ? arg2_r_15_reload : arg2_r_11_reload);

assign select_ln126_fu_283_p3 = ((icmp_ln126_fu_277_p2[0:0] == 1'b1) ? arg2_r_12_reload : arg2_r_8_reload);

assign tmp_fu_221_p3 = i_fu_80[32'd3];

assign trunc_ln120_fu_235_p1 = k_fu_76[3:0];

endmodule //test_test_Pipeline_VITIS_LOOP_120_17
