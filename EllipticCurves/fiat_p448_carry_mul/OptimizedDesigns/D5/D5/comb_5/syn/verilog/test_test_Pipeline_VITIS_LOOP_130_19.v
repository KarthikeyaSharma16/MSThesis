// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_130_19 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add212_6256_reload,
        add212_5255_reload,
        add212_4254_reload,
        add212_3253_reload,
        add212_2252_reload,
        add212_1251_reload,
        arg1_r_1_reload,
        arg1_r_2_reload,
        arg1_r_3_reload,
        arg1_r_4_reload,
        arg1_r_5_reload,
        arg1_r_6_reload,
        conv36,
        arg2_r_14_reload,
        arg2_r_15_reload,
        arg2_r_13_reload,
        arg2_r_12_reload,
        arg2_r_11_reload,
        arg2_r_10_reload,
        add289_1_2248_out,
        add289_1_2248_out_ap_vld,
        add289_1_1247_out,
        add289_1_1247_out_ap_vld,
        add289_1246_out,
        add289_1246_out_ap_vld,
        add289_2245_out,
        add289_2245_out_ap_vld,
        add289_1175244_out,
        add289_1175244_out_ap_vld,
        add289243_out,
        add289243_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] add212_6256_reload;
input  [63:0] add212_5255_reload;
input  [63:0] add212_4254_reload;
input  [63:0] add212_3253_reload;
input  [63:0] add212_2252_reload;
input  [63:0] add212_1251_reload;
input  [31:0] arg1_r_1_reload;
input  [31:0] arg1_r_2_reload;
input  [31:0] arg1_r_3_reload;
input  [31:0] arg1_r_4_reload;
input  [31:0] arg1_r_5_reload;
input  [31:0] arg1_r_6_reload;
input  [31:0] conv36;
input  [31:0] arg2_r_14_reload;
input  [31:0] arg2_r_15_reload;
input  [31:0] arg2_r_13_reload;
input  [31:0] arg2_r_12_reload;
input  [31:0] arg2_r_11_reload;
input  [31:0] arg2_r_10_reload;
output  [63:0] add289_1_2248_out;
output   add289_1_2248_out_ap_vld;
output  [63:0] add289_1_1247_out;
output   add289_1_1247_out_ap_vld;
output  [63:0] add289_1246_out;
output   add289_1246_out_ap_vld;
output  [63:0] add289_2245_out;
output   add289_2245_out_ap_vld;
output  [63:0] add289_1175244_out;
output   add289_1175244_out_ap_vld;
output  [63:0] add289243_out;
output   add289243_out_ap_vld;

reg ap_idle;
reg add289_1_2248_out_ap_vld;
reg add289_1_1247_out_ap_vld;
reg add289_1246_out_ap_vld;
reg add289_2245_out_ap_vld;
reg add289_1175244_out_ap_vld;
reg add289243_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln130_fu_350_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] conv36_cast_fu_308_p1;
reg   [63:0] conv36_cast_reg_924;
wire   [31:0] tmp_s_fu_366_p9;
reg   [31:0] tmp_s_reg_932;
wire   [0:0] icmp_ln143_fu_386_p2;
reg   [0:0] icmp_ln143_reg_937;
wire   [0:0] icmp_ln143_1_fu_400_p2;
reg   [0:0] icmp_ln143_1_reg_943;
wire  signed [2:0] sub_ln35_fu_410_p2;
reg  signed [2:0] sub_ln35_reg_948;
wire   [0:0] icmp_ln143_2_fu_416_p2;
reg   [0:0] icmp_ln143_2_reg_953;
wire   [2:0] sub_ln35_21_fu_426_p2;
reg   [2:0] sub_ln35_21_reg_958;
wire   [0:0] icmp_ln143_3_fu_432_p2;
reg   [0:0] icmp_ln143_3_reg_963;
wire   [0:0] icmp_ln143_4_fu_438_p2;
reg   [0:0] icmp_ln143_4_reg_969;
reg   [63:0] add289243_fu_100;
wire   [63:0] add_ln143_fu_495_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [63:0] add289_1175244_fu_104;
wire   [63:0] add_ln143_1_fu_524_p2;
reg   [63:0] add289_2245_fu_108;
wire   [63:0] add_ln143_2_fu_586_p2;
reg   [63:0] add289_1246_fu_112;
wire   [63:0] add_ln143_3_fu_647_p2;
reg   [63:0] add289_1_1247_fu_116;
wire   [63:0] add_ln143_4_fu_713_p2;
reg   [63:0] add289_1_2248_fu_120;
wire   [63:0] add_ln143_5_fu_765_p2;
reg   [2:0] i_fu_124;
wire   [2:0] add_ln130_fu_444_p2;
reg   [2:0] ap_sig_allocacmp_i_4;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] mul_ln143_fu_284_p0;
wire   [63:0] zext_ln143_fu_473_p1;
wire   [31:0] mul_ln143_fu_284_p1;
wire   [31:0] mul_ln143_1_fu_288_p0;
wire   [31:0] mul_ln143_1_fu_288_p1;
wire   [31:0] mul_ln143_2_fu_292_p0;
wire   [31:0] mul_ln143_2_fu_292_p1;
wire   [31:0] mul_ln143_3_fu_296_p0;
wire   [31:0] mul_ln143_3_fu_296_p1;
wire   [31:0] mul_ln143_4_fu_300_p0;
wire   [31:0] mul_ln143_4_fu_300_p1;
wire   [31:0] mul_ln143_5_fu_304_p0;
wire   [31:0] mul_ln143_5_fu_304_p1;
wire   [3:0] zext_ln130_fu_356_p1;
wire   [3:0] empty_fu_360_p2;
wire   [2:0] select_ln143_2_fu_392_p3;
wire   [2:0] zext_ln35_fu_406_p1;
wire   [2:0] zext_ln35_10_fu_422_p1;
wire   [63:0] mul_ln143_fu_284_p2;
wire   [63:0] select_ln143_1_fu_482_p3;
wire   [63:0] and_ln143_fu_489_p2;
wire   [31:0] select_ln143_fu_501_p3;
wire   [63:0] mul_ln143_1_fu_288_p2;
wire   [63:0] select_ln143_3_fu_511_p3;
wire   [63:0] and_ln143_1_fu_518_p2;
wire  signed [3:0] tmp_71_fu_533_p17;
wire   [31:0] tmp_71_fu_533_p18;
wire   [63:0] mul_ln143_2_fu_292_p2;
wire   [63:0] select_ln143_4_fu_573_p3;
wire   [63:0] and_ln143_2_fu_580_p2;
wire  signed [3:0] sext_ln143_1_fu_592_p1;
wire   [31:0] tmp_72_fu_595_p18;
wire   [63:0] mul_ln143_3_fu_296_p2;
wire   [63:0] select_ln143_5_fu_634_p3;
wire   [63:0] and_ln143_3_fu_641_p2;
wire   [3:0] zext_ln144_fu_653_p1;
wire   [3:0] sub_ln35_22_fu_656_p2;
wire   [31:0] tmp_73_fu_662_p18;
wire   [63:0] mul_ln143_4_fu_300_p2;
wire   [63:0] select_ln143_6_fu_700_p3;
wire   [63:0] and_ln143_4_fu_707_p2;
wire   [3:0] zext_ln144_1_fu_719_p1;
wire   [3:0] tmp_74_fu_728_p17;
wire   [31:0] tmp_74_fu_728_p18;
wire   [63:0] mul_ln143_5_fu_304_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [63:0] mul_ln143_1_fu_288_p00;
wire   [63:0] mul_ln143_2_fu_292_p00;
wire   [63:0] mul_ln143_3_fu_296_p00;
wire   [63:0] mul_ln143_4_fu_300_p00;
wire   [63:0] mul_ln143_5_fu_304_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U369(
    .din0(mul_ln143_fu_284_p0),
    .din1(mul_ln143_fu_284_p1),
    .dout(mul_ln143_fu_284_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U370(
    .din0(mul_ln143_1_fu_288_p0),
    .din1(mul_ln143_1_fu_288_p1),
    .dout(mul_ln143_1_fu_288_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U371(
    .din0(mul_ln143_2_fu_292_p0),
    .din1(mul_ln143_2_fu_292_p1),
    .dout(mul_ln143_2_fu_292_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U372(
    .din0(mul_ln143_3_fu_296_p0),
    .din1(mul_ln143_3_fu_296_p1),
    .dout(mul_ln143_3_fu_296_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U373(
    .din0(mul_ln143_4_fu_300_p0),
    .din1(mul_ln143_4_fu_300_p1),
    .dout(mul_ln143_4_fu_300_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U374(
    .din0(mul_ln143_5_fu_304_p0),
    .din1(mul_ln143_5_fu_304_p1),
    .dout(mul_ln143_5_fu_304_p2)
);

test_mux_7_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_7_3_32_1_1_U375(
    .din0(32'd0),
    .din1(arg1_r_1_reload),
    .din2(arg1_r_2_reload),
    .din3(arg1_r_3_reload),
    .din4(arg1_r_4_reload),
    .din5(arg1_r_5_reload),
    .din6(arg1_r_6_reload),
    .din7(ap_sig_allocacmp_i_4),
    .dout(tmp_s_fu_366_p9)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U376(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(32'd0),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_71_fu_533_p17),
    .dout(tmp_71_fu_533_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U377(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(sext_ln143_1_fu_592_p1),
    .dout(tmp_72_fu_595_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U378(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(sub_ln35_22_fu_656_p2),
    .dout(tmp_73_fu_662_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U379(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(arg2_r_10_reload),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_74_fu_728_p17),
    .dout(tmp_74_fu_728_p18)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add289243_fu_100 <= add212_1251_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add289243_fu_100 <= add_ln143_fu_495_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add289_1175244_fu_104 <= add212_2252_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add289_1175244_fu_104 <= add_ln143_1_fu_524_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add289_1246_fu_112 <= add212_4254_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add289_1246_fu_112 <= add_ln143_3_fu_647_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add289_1_1247_fu_116 <= add212_5255_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add289_1_1247_fu_116 <= add_ln143_4_fu_713_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add289_1_2248_fu_120 <= add212_6256_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add289_1_2248_fu_120 <= add_ln143_5_fu_765_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add289_2245_fu_108 <= add212_3253_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add289_2245_fu_108 <= add_ln143_2_fu_586_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln130_fu_350_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_124 <= add_ln130_fu_444_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_124 <= 3'd6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv36_cast_reg_924[31 : 0] <= conv36_cast_fu_308_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln130_fu_350_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln143_1_reg_943 <= icmp_ln143_1_fu_400_p2;
        icmp_ln143_2_reg_953 <= icmp_ln143_2_fu_416_p2;
        icmp_ln143_3_reg_963 <= icmp_ln143_3_fu_432_p2;
        icmp_ln143_4_reg_969 <= icmp_ln143_4_fu_438_p2;
        icmp_ln143_reg_937 <= icmp_ln143_fu_386_p2;
        sub_ln35_21_reg_958 <= sub_ln35_21_fu_426_p2;
        sub_ln35_reg_948 <= sub_ln35_fu_410_p2;
        tmp_s_reg_932 <= tmp_s_fu_366_p9;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add289243_out_ap_vld = 1'b1;
    end else begin
        add289243_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add289_1175244_out_ap_vld = 1'b1;
    end else begin
        add289_1175244_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add289_1246_out_ap_vld = 1'b1;
    end else begin
        add289_1246_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add289_1_1247_out_ap_vld = 1'b1;
    end else begin
        add289_1_1247_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add289_1_2248_out_ap_vld = 1'b1;
    end else begin
        add289_1_2248_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add289_2245_out_ap_vld = 1'b1;
    end else begin
        add289_2245_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_350_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_4 = 3'd6;
    end else begin
        ap_sig_allocacmp_i_4 = i_fu_124;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add289243_out = add289243_fu_100;

assign add289_1175244_out = add289_1175244_fu_104;

assign add289_1246_out = add289_1246_fu_112;

assign add289_1_1247_out = add289_1_1247_fu_116;

assign add289_1_2248_out = add289_1_2248_fu_120;

assign add289_2245_out = add289_2245_fu_108;

assign add_ln130_fu_444_p2 = ($signed(ap_sig_allocacmp_i_4) + $signed(3'd7));

assign add_ln143_1_fu_524_p2 = (and_ln143_1_fu_518_p2 + add289_1175244_fu_104);

assign add_ln143_2_fu_586_p2 = (and_ln143_2_fu_580_p2 + add289_2245_fu_108);

assign add_ln143_3_fu_647_p2 = (and_ln143_3_fu_641_p2 + add289_1246_fu_112);

assign add_ln143_4_fu_713_p2 = (and_ln143_4_fu_707_p2 + add289_1_1247_fu_116);

assign add_ln143_5_fu_765_p2 = (mul_ln143_5_fu_304_p2 + add289_1_2248_fu_120);

assign add_ln143_fu_495_p2 = (and_ln143_fu_489_p2 + add289243_fu_100);

assign and_ln143_1_fu_518_p2 = (select_ln143_3_fu_511_p3 & mul_ln143_1_fu_288_p2);

assign and_ln143_2_fu_580_p2 = (select_ln143_4_fu_573_p3 & mul_ln143_2_fu_292_p2);

assign and_ln143_3_fu_641_p2 = (select_ln143_5_fu_634_p3 & mul_ln143_3_fu_296_p2);

assign and_ln143_4_fu_707_p2 = (select_ln143_6_fu_700_p3 & mul_ln143_4_fu_300_p2);

assign and_ln143_fu_489_p2 = (select_ln143_1_fu_482_p3 & mul_ln143_fu_284_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv36_cast_fu_308_p1 = conv36;

assign empty_fu_360_p2 = ($signed(zext_ln130_fu_356_p1) + $signed(4'd9));

assign icmp_ln130_fu_350_p2 = ((ap_sig_allocacmp_i_4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln143_1_fu_400_p2 = ((empty_fu_360_p2 > 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln143_2_fu_416_p2 = ((empty_fu_360_p2 > 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln143_3_fu_432_p2 = ((empty_fu_360_p2 > 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln143_4_fu_438_p2 = ((empty_fu_360_p2 > 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln143_fu_386_p2 = ((empty_fu_360_p2 == 4'd15) ? 1'b1 : 1'b0);

assign mul_ln143_1_fu_288_p0 = mul_ln143_1_fu_288_p00;

assign mul_ln143_1_fu_288_p00 = select_ln143_fu_501_p3;

assign mul_ln143_1_fu_288_p1 = zext_ln143_fu_473_p1;

assign mul_ln143_2_fu_292_p0 = mul_ln143_2_fu_292_p00;

assign mul_ln143_2_fu_292_p00 = tmp_71_fu_533_p18;

assign mul_ln143_2_fu_292_p1 = zext_ln143_fu_473_p1;

assign mul_ln143_3_fu_296_p0 = mul_ln143_3_fu_296_p00;

assign mul_ln143_3_fu_296_p00 = tmp_72_fu_595_p18;

assign mul_ln143_3_fu_296_p1 = zext_ln143_fu_473_p1;

assign mul_ln143_4_fu_300_p0 = mul_ln143_4_fu_300_p00;

assign mul_ln143_4_fu_300_p00 = tmp_73_fu_662_p18;

assign mul_ln143_4_fu_300_p1 = zext_ln143_fu_473_p1;

assign mul_ln143_5_fu_304_p0 = mul_ln143_5_fu_304_p00;

assign mul_ln143_5_fu_304_p00 = tmp_74_fu_728_p18;

assign mul_ln143_5_fu_304_p1 = zext_ln143_fu_473_p1;

assign mul_ln143_fu_284_p0 = zext_ln143_fu_473_p1;

assign mul_ln143_fu_284_p1 = conv36_cast_reg_924;

assign select_ln143_1_fu_482_p3 = ((icmp_ln143_reg_937[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_2_fu_392_p3 = ((icmp_ln143_fu_386_p2[0:0] == 1'b1) ? 3'd6 : 3'd7);

assign select_ln143_3_fu_511_p3 = ((icmp_ln143_1_reg_943[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_4_fu_573_p3 = ((icmp_ln143_2_reg_953[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_5_fu_634_p3 = ((icmp_ln143_3_reg_963[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_6_fu_700_p3 = ((icmp_ln143_4_reg_969[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln143_fu_501_p3 = ((icmp_ln143_reg_937[0:0] == 1'b1) ? arg2_r_14_reload : arg2_r_15_reload);

assign sext_ln143_1_fu_592_p1 = $signed(sub_ln35_21_reg_958);

assign sub_ln35_21_fu_426_p2 = ($signed(sub_ln35_fu_410_p2) - $signed(zext_ln35_10_fu_422_p1));

assign sub_ln35_22_fu_656_p2 = ($signed(sext_ln143_1_fu_592_p1) - $signed(zext_ln144_fu_653_p1));

assign sub_ln35_fu_410_p2 = (select_ln143_2_fu_392_p3 - zext_ln35_fu_406_p1);

assign tmp_71_fu_533_p17 = sub_ln35_reg_948;

assign tmp_74_fu_728_p17 = (sub_ln35_22_fu_656_p2 - zext_ln144_1_fu_719_p1);

assign zext_ln130_fu_356_p1 = ap_sig_allocacmp_i_4;

assign zext_ln143_fu_473_p1 = tmp_s_reg_932;

assign zext_ln144_1_fu_719_p1 = icmp_ln143_4_reg_969;

assign zext_ln144_fu_653_p1 = icmp_ln143_3_reg_963;

assign zext_ln35_10_fu_422_p1 = icmp_ln143_2_fu_416_p2;

assign zext_ln35_fu_406_p1 = icmp_ln143_1_fu_400_p2;

always @ (posedge ap_clk) begin
    conv36_cast_reg_924[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //test_test_Pipeline_VITIS_LOOP_130_19
