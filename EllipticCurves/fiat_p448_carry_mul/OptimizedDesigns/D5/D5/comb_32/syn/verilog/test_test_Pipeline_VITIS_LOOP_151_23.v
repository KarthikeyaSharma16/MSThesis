// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_151_23 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add289_4174_reload,
        add289_3173_reload,
        add289_2172_reload,
        add289_176171_reload,
        add289170_reload,
        arr_57,
        arg1_r_10_reload,
        arg1_r_12_reload,
        arg1_r_14_reload,
        arg2_r_reload,
        arg2_r_2_reload,
        arg2_r_4_reload,
        arg2_r_15_reload,
        arg2_r_1_reload,
        arg2_r_3_reload,
        arg2_r_5_reload,
        arg2_r_6_reload,
        arg2_r_7_reload,
        arg2_r_8_reload,
        arg2_r_9_reload,
        arg2_r_10_reload,
        arg2_r_11_reload,
        arg2_r_12_reload,
        arg2_r_13_reload,
        arg2_r_14_reload,
        arg1_r_9_reload,
        arg1_r_11_reload,
        arg1_r_13_reload,
        add346_5169_out,
        add346_5169_out_ap_vld,
        add346_4168_out,
        add346_4168_out_ap_vld,
        add346_3167_out,
        add346_3167_out_ap_vld,
        add346_2166_out,
        add346_2166_out_ap_vld,
        add346_162165_out,
        add346_162165_out_ap_vld,
        add346164_out,
        add346164_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] add289_4174_reload;
input  [63:0] add289_3173_reload;
input  [63:0] add289_2172_reload;
input  [63:0] add289_176171_reload;
input  [63:0] add289170_reload;
input  [63:0] arr_57;
input  [31:0] arg1_r_10_reload;
input  [31:0] arg1_r_12_reload;
input  [31:0] arg1_r_14_reload;
input  [31:0] arg2_r_reload;
input  [31:0] arg2_r_2_reload;
input  [31:0] arg2_r_4_reload;
input  [31:0] arg2_r_15_reload;
input  [31:0] arg2_r_1_reload;
input  [31:0] arg2_r_3_reload;
input  [31:0] arg2_r_5_reload;
input  [31:0] arg2_r_6_reload;
input  [31:0] arg2_r_7_reload;
input  [31:0] arg2_r_8_reload;
input  [31:0] arg2_r_9_reload;
input  [31:0] arg2_r_10_reload;
input  [31:0] arg2_r_11_reload;
input  [31:0] arg2_r_12_reload;
input  [31:0] arg2_r_13_reload;
input  [31:0] arg2_r_14_reload;
input  [31:0] arg1_r_9_reload;
input  [31:0] arg1_r_11_reload;
input  [31:0] arg1_r_13_reload;
output  [63:0] add346_5169_out;
output   add346_5169_out_ap_vld;
output  [63:0] add346_4168_out;
output   add346_4168_out_ap_vld;
output  [63:0] add346_3167_out;
output   add346_3167_out_ap_vld;
output  [63:0] add346_2166_out;
output   add346_2166_out_ap_vld;
output  [63:0] add346_162165_out;
output   add346_162165_out_ap_vld;
output  [63:0] add346164_out;
output   add346164_out_ap_vld;

reg ap_idle;
reg add346_5169_out_ap_vld;
reg add346_4168_out_ap_vld;
reg add346_3167_out_ap_vld;
reg add346_2166_out_ap_vld;
reg add346_162165_out_ap_vld;
reg add346164_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln151_fu_451_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [2:0] k_load_reg_1398;
wire   [31:0] tmp_s_fu_460_p17;
reg   [31:0] tmp_s_reg_1405;
wire   [0:0] icmp_ln165_fu_496_p2;
reg   [0:0] icmp_ln165_reg_1410;
wire  signed [2:0] sub_ln35_fu_512_p2;
reg  signed [2:0] sub_ln35_reg_1415;
wire   [0:0] icmp_ln165_1_fu_518_p2;
reg   [0:0] icmp_ln165_1_reg_1421;
wire   [0:0] icmp_ln165_2_fu_524_p2;
reg   [0:0] icmp_ln165_2_reg_1427;
wire   [0:0] icmp_ln165_3_fu_530_p2;
reg   [0:0] icmp_ln165_3_reg_1433;
wire   [31:0] tmp_25_fu_548_p17;
reg   [31:0] tmp_25_reg_1438;
wire   [0:0] icmp_ln165_4_fu_584_p2;
reg   [0:0] icmp_ln165_4_reg_1443;
wire  signed [2:0] sub_ln35_16_fu_594_p2;
reg  signed [2:0] sub_ln35_16_reg_1448;
wire   [0:0] icmp_ln165_5_fu_600_p2;
reg   [0:0] icmp_ln165_5_reg_1454;
wire   [0:0] icmp_ln165_6_fu_606_p2;
reg   [0:0] icmp_ln165_6_reg_1460;
wire   [0:0] icmp_ln165_7_fu_612_p2;
reg   [0:0] icmp_ln165_7_reg_1466;
reg   [63:0] arr_fu_122;
wire   [63:0] arr_32_fu_837_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [63:0] arr_27_fu_126;
wire   [63:0] arr_33_fu_862_p2;
reg   [63:0] arr_28_fu_130;
wire   [63:0] arr_34_fu_900_p2;
reg   [63:0] arr_29_fu_134;
wire   [63:0] arr_35_fu_968_p2;
reg   [63:0] arr_30_fu_138;
wire   [63:0] arr_36_fu_1045_p2;
reg   [63:0] arr_31_fu_142;
wire   [63:0] arr_37_fu_1104_p2;
reg   [2:0] k_fu_146;
wire   [2:0] add_ln158_fu_536_p2;
reg   [2:0] ap_sig_allocacmp_k_load;
reg   [3:0] i_fu_150;
wire   [3:0] add_ln151_fu_618_p2;
reg   [3:0] ap_sig_allocacmp_i_4;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] mul_ln165_fu_364_p0;
wire   [63:0] zext_ln165_1_fu_672_p1;
wire   [31:0] mul_ln165_fu_364_p1;
wire   [63:0] zext_ln165_fu_652_p1;
wire   [31:0] mul_ln165_1_fu_368_p0;
wire   [31:0] mul_ln165_1_fu_368_p1;
wire   [63:0] zext_ln165_6_fu_805_p1;
wire   [31:0] mul_ln165_2_fu_372_p0;
wire   [63:0] zext_ln165_2_fu_690_p1;
wire   [31:0] mul_ln165_2_fu_372_p1;
wire   [31:0] mul_ln165_3_fu_376_p0;
wire   [31:0] mul_ln165_3_fu_376_p1;
wire   [31:0] mul_ln165_4_fu_380_p0;
wire   [31:0] mul_ln165_4_fu_380_p1;
wire   [31:0] mul_ln165_5_fu_384_p0;
wire   [31:0] mul_ln165_5_fu_384_p1;
wire   [31:0] mul_ln165_6_fu_388_p0;
wire   [31:0] mul_ln165_6_fu_388_p1;
wire   [31:0] mul_ln165_7_fu_392_p0;
wire   [31:0] mul_ln165_7_fu_392_p1;
wire   [31:0] mul_ln165_8_fu_396_p0;
wire   [31:0] mul_ln165_8_fu_396_p1;
wire   [31:0] mul_ln165_9_fu_400_p0;
wire   [31:0] mul_ln165_9_fu_400_p1;
wire   [31:0] mul_ln165_10_fu_404_p0;
wire   [31:0] mul_ln165_10_fu_404_p1;
wire   [2:0] add_ln166_fu_502_p2;
wire   [2:0] zext_ln35_fu_508_p1;
wire   [3:0] empty_fu_542_p2;
wire   [2:0] zext_ln35_4_fu_590_p1;
wire   [31:0] tmp_20_fu_660_p7;
wire   [31:0] tmp_21_fu_678_p7;
wire  signed [3:0] tmp_22_fu_699_p17;
wire   [31:0] tmp_22_fu_699_p18;
wire   [2:0] zext_ln35_2_fu_726_p1;
wire  signed [2:0] sub_ln35_14_fu_729_p2;
wire  signed [3:0] tmp_23_fu_738_p17;
wire   [31:0] tmp_23_fu_738_p18;
wire   [2:0] zext_ln35_3_fu_765_p1;
wire   [2:0] sub_ln35_15_fu_768_p2;
wire  signed [3:0] tmp_24_fu_778_p17;
wire   [31:0] tmp_24_fu_778_p18;
wire   [31:0] tmp_26_fu_814_p7;
wire   [63:0] mul_ln165_1_fu_368_p2;
wire   [63:0] mul_ln165_fu_364_p2;
wire   [63:0] add_ln165_fu_831_p2;
wire   [63:0] mul_ln165_2_fu_372_p2;
wire   [63:0] select_ln165_fu_843_p3;
wire   [63:0] mul_ln165_3_fu_376_p2;
wire   [63:0] and_ln165_fu_850_p2;
wire   [63:0] add_ln165_2_fu_856_p2;
wire   [63:0] mul_ln165_4_fu_380_p2;
wire   [63:0] select_ln165_1_fu_868_p3;
wire   [63:0] mul_ln165_5_fu_384_p2;
wire   [63:0] select_ln165_2_fu_881_p3;
wire   [63:0] and_ln165_2_fu_888_p2;
wire   [63:0] and_ln165_1_fu_875_p2;
wire   [63:0] add_ln165_4_fu_894_p2;
wire  signed [3:0] tmp_27_fu_909_p17;
wire   [31:0] tmp_27_fu_909_p18;
wire   [63:0] mul_ln165_6_fu_388_p2;
wire   [63:0] select_ln165_3_fu_936_p3;
wire   [63:0] mul_ln165_7_fu_392_p2;
wire   [63:0] select_ln165_4_fu_949_p3;
wire   [63:0] and_ln165_4_fu_956_p2;
wire   [63:0] and_ln165_3_fu_943_p2;
wire   [63:0] add_ln165_6_fu_962_p2;
wire   [2:0] zext_ln35_5_fu_974_p1;
wire  signed [2:0] sub_ln35_17_fu_977_p2;
wire  signed [3:0] tmp_28_fu_986_p17;
wire   [31:0] tmp_28_fu_986_p18;
wire   [63:0] mul_ln165_8_fu_396_p2;
wire   [63:0] select_ln165_5_fu_1013_p3;
wire   [63:0] mul_ln165_9_fu_400_p2;
wire   [63:0] select_ln165_6_fu_1026_p3;
wire   [63:0] and_ln165_6_fu_1033_p2;
wire   [63:0] and_ln165_5_fu_1020_p2;
wire   [63:0] add_ln165_8_fu_1039_p2;
wire   [2:0] zext_ln35_6_fu_1051_p1;
wire   [2:0] sub_ln35_18_fu_1054_p2;
wire  signed [3:0] tmp_29_fu_1064_p17;
wire   [31:0] tmp_29_fu_1064_p18;
wire   [63:0] mul_ln165_10_fu_404_p2;
wire   [63:0] select_ln165_7_fu_1091_p3;
wire   [63:0] and_ln165_7_fu_1098_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [63:0] mul_ln165_10_fu_404_p00;
wire   [63:0] mul_ln165_1_fu_368_p00;
wire   [63:0] mul_ln165_4_fu_380_p00;
wire   [63:0] mul_ln165_6_fu_388_p00;
wire   [63:0] mul_ln165_7_fu_392_p00;
wire   [63:0] mul_ln165_8_fu_396_p00;
wire   [63:0] mul_ln165_9_fu_400_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U270(
    .din0(mul_ln165_fu_364_p0),
    .din1(mul_ln165_fu_364_p1),
    .dout(mul_ln165_fu_364_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U271(
    .din0(mul_ln165_1_fu_368_p0),
    .din1(mul_ln165_1_fu_368_p1),
    .dout(mul_ln165_1_fu_368_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U272(
    .din0(mul_ln165_2_fu_372_p0),
    .din1(mul_ln165_2_fu_372_p1),
    .dout(mul_ln165_2_fu_372_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U273(
    .din0(mul_ln165_3_fu_376_p0),
    .din1(mul_ln165_3_fu_376_p1),
    .dout(mul_ln165_3_fu_376_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U274(
    .din0(mul_ln165_4_fu_380_p0),
    .din1(mul_ln165_4_fu_380_p1),
    .dout(mul_ln165_4_fu_380_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U275(
    .din0(mul_ln165_5_fu_384_p0),
    .din1(mul_ln165_5_fu_384_p1),
    .dout(mul_ln165_5_fu_384_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U276(
    .din0(mul_ln165_6_fu_388_p0),
    .din1(mul_ln165_6_fu_388_p1),
    .dout(mul_ln165_6_fu_388_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U277(
    .din0(mul_ln165_7_fu_392_p0),
    .din1(mul_ln165_7_fu_392_p1),
    .dout(mul_ln165_7_fu_392_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U278(
    .din0(mul_ln165_8_fu_396_p0),
    .din1(mul_ln165_8_fu_396_p1),
    .dout(mul_ln165_8_fu_396_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U279(
    .din0(mul_ln165_9_fu_400_p0),
    .din1(mul_ln165_9_fu_400_p1),
    .dout(mul_ln165_9_fu_400_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U280(
    .din0(mul_ln165_10_fu_404_p0),
    .din1(mul_ln165_10_fu_404_p1),
    .dout(mul_ln165_10_fu_404_p2)
);

test_mux_15_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_15_4_32_1_1_U281(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(arg1_r_10_reload),
    .din11(32'd0),
    .din12(arg1_r_12_reload),
    .din13(32'd0),
    .din14(arg1_r_14_reload),
    .din15(ap_sig_allocacmp_i_4),
    .dout(tmp_s_fu_460_p17)
);

test_mux_15_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_15_4_32_1_1_U282(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(arg1_r_9_reload),
    .din11(32'd0),
    .din12(arg1_r_11_reload),
    .din13(32'd0),
    .din14(arg1_r_13_reload),
    .din15(ap_sig_allocacmp_i_4),
    .dout(tmp_25_fu_548_p17)
);

test_mux_5_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_5_3_32_1_1_U283(
    .din0(arg2_r_reload),
    .din1(32'd0),
    .din2(arg2_r_2_reload),
    .din3(32'd0),
    .din4(arg2_r_4_reload),
    .din5(k_load_reg_1398),
    .dout(tmp_20_fu_660_p7)
);

test_mux_5_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_5_3_32_1_1_U284(
    .din0(arg2_r_15_reload),
    .din1(32'd0),
    .din2(arg2_r_1_reload),
    .din3(32'd0),
    .din4(arg2_r_3_reload),
    .din5(k_load_reg_1398),
    .dout(tmp_21_fu_678_p7)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U285(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(arg2_r_9_reload),
    .din10(arg2_r_10_reload),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_22_fu_699_p17),
    .dout(tmp_22_fu_699_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U286(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(arg2_r_9_reload),
    .din10(arg2_r_10_reload),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_23_fu_738_p17),
    .dout(tmp_23_fu_738_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U287(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(arg2_r_9_reload),
    .din10(arg2_r_10_reload),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_24_fu_778_p17),
    .dout(tmp_24_fu_778_p18)
);

test_mux_5_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_5_3_32_1_1_U288(
    .din0(arg2_r_1_reload),
    .din1(32'd0),
    .din2(arg2_r_3_reload),
    .din3(32'd0),
    .din4(arg2_r_5_reload),
    .din5(k_load_reg_1398),
    .dout(tmp_26_fu_814_p7)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U289(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(arg2_r_9_reload),
    .din10(arg2_r_10_reload),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_27_fu_909_p17),
    .dout(tmp_27_fu_909_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U290(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(arg2_r_9_reload),
    .din10(arg2_r_10_reload),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_28_fu_986_p17),
    .dout(tmp_28_fu_986_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U291(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(arg2_r_9_reload),
    .din10(arg2_r_10_reload),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_29_fu_1064_p17),
    .dout(tmp_29_fu_1064_p18)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_27_fu_126 <= add289170_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_27_fu_126 <= arr_33_fu_862_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_28_fu_130 <= add289_176171_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_28_fu_130 <= arr_34_fu_900_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_29_fu_134 <= add289_2172_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_29_fu_134 <= arr_35_fu_968_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_30_fu_138 <= add289_3173_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_30_fu_138 <= arr_36_fu_1045_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_31_fu_142 <= add289_4174_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_31_fu_142 <= arr_37_fu_1104_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_fu_122 <= arr_57;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_fu_122 <= arr_32_fu_837_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln151_fu_451_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_150 <= add_ln151_fu_618_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_150 <= 4'd14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln151_fu_451_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_fu_146 <= add_ln158_fu_536_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_146 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln151_fu_451_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln165_1_reg_1421 <= icmp_ln165_1_fu_518_p2;
        icmp_ln165_2_reg_1427 <= icmp_ln165_2_fu_524_p2;
        icmp_ln165_3_reg_1433 <= icmp_ln165_3_fu_530_p2;
        icmp_ln165_4_reg_1443 <= icmp_ln165_4_fu_584_p2;
        icmp_ln165_5_reg_1454 <= icmp_ln165_5_fu_600_p2;
        icmp_ln165_6_reg_1460 <= icmp_ln165_6_fu_606_p2;
        icmp_ln165_7_reg_1466 <= icmp_ln165_7_fu_612_p2;
        icmp_ln165_reg_1410 <= icmp_ln165_fu_496_p2;
        k_load_reg_1398 <= ap_sig_allocacmp_k_load;
        sub_ln35_16_reg_1448 <= sub_ln35_16_fu_594_p2;
        sub_ln35_reg_1415 <= sub_ln35_fu_512_p2;
        tmp_25_reg_1438 <= tmp_25_fu_548_p17;
        tmp_s_reg_1405 <= tmp_s_fu_460_p17;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_451_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add346164_out_ap_vld = 1'b1;
    end else begin
        add346164_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_451_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add346_162165_out_ap_vld = 1'b1;
    end else begin
        add346_162165_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_451_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add346_2166_out_ap_vld = 1'b1;
    end else begin
        add346_2166_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_451_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add346_3167_out_ap_vld = 1'b1;
    end else begin
        add346_3167_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_451_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add346_4168_out_ap_vld = 1'b1;
    end else begin
        add346_4168_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_451_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add346_5169_out_ap_vld = 1'b1;
    end else begin
        add346_5169_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln151_fu_451_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_4 = 4'd14;
    end else begin
        ap_sig_allocacmp_i_4 = i_fu_150;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_k_load = 3'd0;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_146;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add346164_out = arr_fu_122;

assign add346_162165_out = arr_27_fu_126;

assign add346_2166_out = arr_28_fu_130;

assign add346_3167_out = arr_29_fu_134;

assign add346_4168_out = arr_30_fu_138;

assign add346_5169_out = arr_31_fu_142;

assign add_ln151_fu_618_p2 = ($signed(ap_sig_allocacmp_i_4) + $signed(4'd14));

assign add_ln158_fu_536_p2 = (ap_sig_allocacmp_k_load + 3'd2);

assign add_ln165_2_fu_856_p2 = (mul_ln165_3_fu_376_p2 + and_ln165_fu_850_p2);

assign add_ln165_4_fu_894_p2 = (and_ln165_2_fu_888_p2 + and_ln165_1_fu_875_p2);

assign add_ln165_6_fu_962_p2 = (and_ln165_4_fu_956_p2 + and_ln165_3_fu_943_p2);

assign add_ln165_8_fu_1039_p2 = (and_ln165_6_fu_1033_p2 + and_ln165_5_fu_1020_p2);

assign add_ln165_fu_831_p2 = (mul_ln165_1_fu_368_p2 + mul_ln165_fu_364_p2);

assign add_ln166_fu_502_p2 = ($signed(ap_sig_allocacmp_k_load) + $signed(3'd7));

assign and_ln165_1_fu_875_p2 = (select_ln165_1_fu_868_p3 & mul_ln165_4_fu_380_p2);

assign and_ln165_2_fu_888_p2 = (select_ln165_2_fu_881_p3 & mul_ln165_5_fu_384_p2);

assign and_ln165_3_fu_943_p2 = (select_ln165_3_fu_936_p3 & mul_ln165_6_fu_388_p2);

assign and_ln165_4_fu_956_p2 = (select_ln165_4_fu_949_p3 & mul_ln165_7_fu_392_p2);

assign and_ln165_5_fu_1020_p2 = (select_ln165_5_fu_1013_p3 & mul_ln165_8_fu_396_p2);

assign and_ln165_6_fu_1033_p2 = (select_ln165_6_fu_1026_p3 & mul_ln165_9_fu_400_p2);

assign and_ln165_7_fu_1098_p2 = (select_ln165_7_fu_1091_p3 & mul_ln165_10_fu_404_p2);

assign and_ln165_fu_850_p2 = (select_ln165_fu_843_p3 & mul_ln165_2_fu_372_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign arr_32_fu_837_p2 = (arr_fu_122 + add_ln165_fu_831_p2);

assign arr_33_fu_862_p2 = (arr_27_fu_126 + add_ln165_2_fu_856_p2);

assign arr_34_fu_900_p2 = (arr_28_fu_130 + add_ln165_4_fu_894_p2);

assign arr_35_fu_968_p2 = (arr_29_fu_134 + add_ln165_6_fu_962_p2);

assign arr_36_fu_1045_p2 = (arr_30_fu_138 + add_ln165_8_fu_1039_p2);

assign arr_37_fu_1104_p2 = (and_ln165_7_fu_1098_p2 + arr_31_fu_142);

assign empty_fu_542_p2 = ($signed(ap_sig_allocacmp_i_4) + $signed(4'd15));

assign icmp_ln151_fu_451_p2 = ((ap_sig_allocacmp_i_4 > 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln165_1_fu_518_p2 = ((ap_sig_allocacmp_i_4 < 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln165_2_fu_524_p2 = ((ap_sig_allocacmp_i_4 < 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln165_3_fu_530_p2 = ((ap_sig_allocacmp_i_4 < 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln165_4_fu_584_p2 = ((empty_fu_542_p2 < 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln165_5_fu_600_p2 = ((empty_fu_542_p2 < 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln165_6_fu_606_p2 = ((empty_fu_542_p2 < 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln165_7_fu_612_p2 = ((empty_fu_542_p2 < 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln165_fu_496_p2 = ((ap_sig_allocacmp_i_4 != 4'd14) ? 1'b1 : 1'b0);

assign mul_ln165_10_fu_404_p0 = mul_ln165_10_fu_404_p00;

assign mul_ln165_10_fu_404_p00 = tmp_29_fu_1064_p18;

assign mul_ln165_10_fu_404_p1 = zext_ln165_6_fu_805_p1;

assign mul_ln165_1_fu_368_p0 = mul_ln165_1_fu_368_p00;

assign mul_ln165_1_fu_368_p00 = tmp_26_fu_814_p7;

assign mul_ln165_1_fu_368_p1 = zext_ln165_6_fu_805_p1;

assign mul_ln165_2_fu_372_p0 = zext_ln165_2_fu_690_p1;

assign mul_ln165_2_fu_372_p1 = zext_ln165_fu_652_p1;

assign mul_ln165_3_fu_376_p0 = zext_ln165_6_fu_805_p1;

assign mul_ln165_3_fu_376_p1 = zext_ln165_1_fu_672_p1;

assign mul_ln165_4_fu_380_p0 = mul_ln165_4_fu_380_p00;

assign mul_ln165_4_fu_380_p00 = tmp_22_fu_699_p18;

assign mul_ln165_4_fu_380_p1 = zext_ln165_fu_652_p1;

assign mul_ln165_5_fu_384_p0 = zext_ln165_6_fu_805_p1;

assign mul_ln165_5_fu_384_p1 = zext_ln165_2_fu_690_p1;

assign mul_ln165_6_fu_388_p0 = mul_ln165_6_fu_388_p00;

assign mul_ln165_6_fu_388_p00 = tmp_23_fu_738_p18;

assign mul_ln165_6_fu_388_p1 = zext_ln165_fu_652_p1;

assign mul_ln165_7_fu_392_p0 = mul_ln165_7_fu_392_p00;

assign mul_ln165_7_fu_392_p00 = tmp_27_fu_909_p18;

assign mul_ln165_7_fu_392_p1 = zext_ln165_6_fu_805_p1;

assign mul_ln165_8_fu_396_p0 = mul_ln165_8_fu_396_p00;

assign mul_ln165_8_fu_396_p00 = tmp_24_fu_778_p18;

assign mul_ln165_8_fu_396_p1 = zext_ln165_fu_652_p1;

assign mul_ln165_9_fu_400_p0 = mul_ln165_9_fu_400_p00;

assign mul_ln165_9_fu_400_p00 = tmp_28_fu_986_p18;

assign mul_ln165_9_fu_400_p1 = zext_ln165_6_fu_805_p1;

assign mul_ln165_fu_364_p0 = zext_ln165_1_fu_672_p1;

assign mul_ln165_fu_364_p1 = zext_ln165_fu_652_p1;

assign select_ln165_1_fu_868_p3 = ((icmp_ln165_1_reg_1421[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln165_2_fu_881_p3 = ((icmp_ln165_4_reg_1443[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln165_3_fu_936_p3 = ((icmp_ln165_2_reg_1427[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln165_4_fu_949_p3 = ((icmp_ln165_5_reg_1454[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln165_5_fu_1013_p3 = ((icmp_ln165_3_reg_1433[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln165_6_fu_1026_p3 = ((icmp_ln165_6_reg_1460[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln165_7_fu_1091_p3 = ((icmp_ln165_7_reg_1466[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln165_fu_843_p3 = ((icmp_ln165_reg_1410[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign sub_ln35_14_fu_729_p2 = ($signed(sub_ln35_reg_1415) - $signed(zext_ln35_2_fu_726_p1));

assign sub_ln35_15_fu_768_p2 = ($signed(sub_ln35_14_fu_729_p2) - $signed(zext_ln35_3_fu_765_p1));

assign sub_ln35_16_fu_594_p2 = (add_ln166_fu_502_p2 - zext_ln35_4_fu_590_p1);

assign sub_ln35_17_fu_977_p2 = ($signed(sub_ln35_16_reg_1448) - $signed(zext_ln35_5_fu_974_p1));

assign sub_ln35_18_fu_1054_p2 = ($signed(sub_ln35_17_fu_977_p2) - $signed(zext_ln35_6_fu_1051_p1));

assign sub_ln35_fu_512_p2 = (add_ln166_fu_502_p2 - zext_ln35_fu_508_p1);

assign tmp_22_fu_699_p17 = sub_ln35_reg_1415;

assign tmp_23_fu_738_p17 = sub_ln35_14_fu_729_p2;

assign tmp_24_fu_778_p17 = $signed(sub_ln35_15_fu_768_p2);

assign tmp_27_fu_909_p17 = sub_ln35_16_reg_1448;

assign tmp_28_fu_986_p17 = sub_ln35_17_fu_977_p2;

assign tmp_29_fu_1064_p17 = $signed(sub_ln35_18_fu_1054_p2);

assign zext_ln165_1_fu_672_p1 = tmp_20_fu_660_p7;

assign zext_ln165_2_fu_690_p1 = tmp_21_fu_678_p7;

assign zext_ln165_6_fu_805_p1 = tmp_25_reg_1438;

assign zext_ln165_fu_652_p1 = tmp_s_reg_1405;

assign zext_ln35_2_fu_726_p1 = icmp_ln165_1_reg_1421;

assign zext_ln35_3_fu_765_p1 = icmp_ln165_2_reg_1427;

assign zext_ln35_4_fu_590_p1 = icmp_ln165_4_fu_584_p2;

assign zext_ln35_5_fu_974_p1 = icmp_ln165_5_reg_1454;

assign zext_ln35_6_fu_1051_p1 = icmp_ln165_6_reg_1460;

assign zext_ln35_fu_508_p1 = icmp_ln165_fu_496_p2;

endmodule //test_test_Pipeline_VITIS_LOOP_151_23
