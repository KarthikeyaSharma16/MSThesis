// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_57_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arg1_r_9_reload,
        arg1_r_10_reload,
        arg1_r_11_reload,
        arg1_r_12_reload,
        arg1_r_13_reload,
        arg1_r_14_reload,
        arg1_r_15_reload,
        conv36,
        arg2_r_14_reload,
        arg2_r_15_reload,
        arg2_r_13_reload,
        arg2_r_12_reload,
        arg2_r_11_reload,
        arg2_r_10_reload,
        arg2_r_9_reload,
        add102_6292_out,
        add102_6292_out_ap_vld,
        add102_5291_out,
        add102_5291_out_ap_vld,
        add102_4290_out,
        add102_4290_out_ap_vld,
        add102_3289_out,
        add102_3289_out_ap_vld,
        add102_2288_out,
        add102_2288_out_ap_vld,
        add102_1287_out,
        add102_1287_out_ap_vld,
        add102286_out,
        add102286_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] arg1_r_9_reload;
input  [31:0] arg1_r_10_reload;
input  [31:0] arg1_r_11_reload;
input  [31:0] arg1_r_12_reload;
input  [31:0] arg1_r_13_reload;
input  [31:0] arg1_r_14_reload;
input  [31:0] arg1_r_15_reload;
input  [31:0] conv36;
input  [31:0] arg2_r_14_reload;
input  [31:0] arg2_r_15_reload;
input  [31:0] arg2_r_13_reload;
input  [31:0] arg2_r_12_reload;
input  [31:0] arg2_r_11_reload;
input  [31:0] arg2_r_10_reload;
input  [31:0] arg2_r_9_reload;
output  [63:0] add102_6292_out;
output   add102_6292_out_ap_vld;
output  [63:0] add102_5291_out;
output   add102_5291_out_ap_vld;
output  [63:0] add102_4290_out;
output   add102_4290_out_ap_vld;
output  [63:0] add102_3289_out;
output   add102_3289_out_ap_vld;
output  [63:0] add102_2288_out;
output   add102_2288_out_ap_vld;
output  [63:0] add102_1287_out;
output   add102_1287_out_ap_vld;
output  [63:0] add102286_out;
output   add102286_out_ap_vld;

reg ap_idle;
reg add102_6292_out_ap_vld;
reg add102_5291_out_ap_vld;
reg add102_4290_out_ap_vld;
reg add102_3289_out_ap_vld;
reg add102_2288_out_ap_vld;
reg add102_1287_out_ap_vld;
reg add102286_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln57_fu_342_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] conv36_cast_fu_295_p1;
reg   [63:0] conv36_cast_reg_1072;
wire   [63:0] zext_ln70_fu_395_p1;
reg   [63:0] zext_ln70_reg_1080;
wire  signed [2:0] sub_ln35_27_fu_486_p2;
reg  signed [2:0] sub_ln35_27_reg_1089;
wire   [0:0] icmp_ln70_1_fu_492_p2;
reg   [0:0] icmp_ln70_1_reg_1094;
wire  signed [3:0] sext_ln70_1_fu_508_p1;
reg  signed [3:0] sext_ln70_1_reg_1099;
wire   [0:0] icmp_ln70_2_fu_512_p2;
reg   [0:0] icmp_ln70_2_reg_1104;
wire   [3:0] sub_ln35_fu_522_p2;
reg   [3:0] sub_ln35_reg_1109;
wire   [0:0] icmp_ln70_3_fu_528_p2;
reg   [0:0] icmp_ln70_3_reg_1115;
wire   [0:0] icmp_ln70_4_fu_534_p2;
reg   [0:0] icmp_ln70_4_reg_1121;
reg   [63:0] add102286_fu_96;
wire   [63:0] add_ln70_fu_431_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [63:0] add102_1287_fu_100;
wire   [63:0] add_ln70_1_fu_476_p2;
reg   [63:0] add102_2288_fu_104;
wire   [63:0] add_ln70_2_fu_632_p2;
reg   [63:0] add102_3289_fu_108;
wire   [63:0] add_ln70_3_fu_689_p2;
reg   [63:0] add102_4290_fu_112;
wire   [63:0] add_ln70_4_fu_745_p2;
reg   [63:0] add102_5291_fu_116;
wire   [63:0] add_ln70_5_fu_809_p2;
reg   [63:0] add102_6292_fu_120;
wire   [63:0] add_ln70_6_fu_860_p2;
reg   [3:0] i_2_fu_124;
wire   [3:0] add_ln57_fu_540_p2;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] mul_ln70_fu_267_p0;
wire   [31:0] mul_ln70_fu_267_p1;
wire   [31:0] mul_ln70_1_fu_271_p0;
wire   [31:0] mul_ln70_1_fu_271_p1;
wire   [31:0] mul_ln70_2_fu_275_p0;
wire   [31:0] mul_ln70_2_fu_275_p1;
wire   [31:0] mul_ln70_3_fu_279_p0;
wire   [31:0] mul_ln70_3_fu_279_p1;
wire   [31:0] mul_ln70_4_fu_283_p0;
wire   [31:0] mul_ln70_4_fu_283_p1;
wire   [31:0] mul_ln70_5_fu_287_p0;
wire   [31:0] mul_ln70_5_fu_287_p1;
wire   [31:0] mul_ln70_6_fu_291_p0;
wire   [31:0] mul_ln70_6_fu_291_p1;
wire   [4:0] zext_ln57_fu_354_p1;
wire   [31:0] tmp_fu_364_p18;
wire   [4:0] empty_fu_358_p2;
wire   [0:0] tmp_69_fu_409_p3;
wire   [63:0] mul_ln70_fu_267_p2;
wire   [63:0] select_ln70_1_fu_417_p3;
wire   [63:0] and_ln70_fu_425_p2;
wire   [0:0] tmp_68_fu_401_p3;
wire   [31:0] select_ln70_fu_445_p3;
wire   [0:0] icmp_ln70_fu_456_p2;
wire   [63:0] mul_ln70_1_fu_271_p2;
wire   [63:0] select_ln70_3_fu_462_p3;
wire   [63:0] and_ln70_1_fu_470_p2;
wire   [2:0] select_ln70_2_fu_437_p3;
wire   [2:0] zext_ln35_fu_482_p1;
wire   [2:0] zext_ln35_1_fu_498_p1;
wire   [2:0] sub_ln35_28_fu_502_p2;
wire   [3:0] zext_ln71_fu_518_p1;
wire  signed [3:0] tmp_2_fu_579_p17;
wire   [31:0] tmp_2_fu_579_p18;
wire   [63:0] mul_ln70_2_fu_275_p2;
wire   [63:0] select_ln70_4_fu_619_p3;
wire   [63:0] and_ln70_2_fu_626_p2;
wire   [31:0] tmp_3_fu_638_p18;
wire   [63:0] mul_ln70_3_fu_279_p2;
wire   [63:0] select_ln70_5_fu_676_p3;
wire   [63:0] and_ln70_3_fu_683_p2;
wire   [31:0] tmp_4_fu_695_p18;
wire   [63:0] mul_ln70_4_fu_283_p2;
wire   [63:0] select_ln70_6_fu_732_p3;
wire   [63:0] and_ln70_4_fu_739_p2;
wire   [3:0] zext_ln71_1_fu_751_p1;
wire   [3:0] sub_ln35_1_fu_754_p2;
wire   [31:0] tmp_5_fu_759_p18;
wire   [63:0] mul_ln70_5_fu_287_p2;
wire   [63:0] select_ln70_7_fu_796_p3;
wire   [63:0] and_ln70_5_fu_803_p2;
wire   [3:0] zext_ln71_2_fu_815_p1;
wire   [3:0] tmp_6_fu_824_p17;
wire   [31:0] tmp_6_fu_824_p18;
wire   [63:0] mul_ln70_6_fu_291_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [63:0] mul_ln70_1_fu_271_p00;
wire   [63:0] mul_ln70_2_fu_275_p00;
wire   [63:0] mul_ln70_3_fu_279_p00;
wire   [63:0] mul_ln70_4_fu_283_p00;
wire   [63:0] mul_ln70_5_fu_287_p00;
wire   [63:0] mul_ln70_6_fu_291_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U37(
    .din0(mul_ln70_fu_267_p0),
    .din1(mul_ln70_fu_267_p1),
    .dout(mul_ln70_fu_267_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U38(
    .din0(mul_ln70_1_fu_271_p0),
    .din1(mul_ln70_1_fu_271_p1),
    .dout(mul_ln70_1_fu_271_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U39(
    .din0(mul_ln70_2_fu_275_p0),
    .din1(mul_ln70_2_fu_275_p1),
    .dout(mul_ln70_2_fu_275_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U40(
    .din0(mul_ln70_3_fu_279_p0),
    .din1(mul_ln70_3_fu_279_p1),
    .dout(mul_ln70_3_fu_279_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U41(
    .din0(mul_ln70_4_fu_283_p0),
    .din1(mul_ln70_4_fu_283_p1),
    .dout(mul_ln70_4_fu_283_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U42(
    .din0(mul_ln70_5_fu_287_p0),
    .din1(mul_ln70_5_fu_287_p1),
    .dout(mul_ln70_5_fu_287_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U43(
    .din0(mul_ln70_6_fu_291_p0),
    .din1(mul_ln70_6_fu_291_p1),
    .dout(mul_ln70_6_fu_291_p2)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U44(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(arg1_r_9_reload),
    .din10(arg1_r_10_reload),
    .din11(arg1_r_11_reload),
    .din12(arg1_r_12_reload),
    .din13(arg1_r_13_reload),
    .din14(arg1_r_14_reload),
    .din15(arg1_r_15_reload),
    .din16(i_2_fu_124),
    .dout(tmp_fu_364_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U45(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(32'd0),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_2_fu_579_p17),
    .dout(tmp_2_fu_579_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U46(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(sext_ln70_1_reg_1099),
    .dout(tmp_3_fu_638_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U47(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(sub_ln35_reg_1109),
    .dout(tmp_4_fu_695_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U48(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(arg2_r_10_reload),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(sub_ln35_1_fu_754_p2),
    .dout(tmp_5_fu_759_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U49(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(arg2_r_9_reload),
    .din10(arg2_r_10_reload),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_6_fu_824_p17),
    .dout(tmp_6_fu_824_p18)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add102286_fu_96 <= 64'd0;
        end else if (((icmp_ln57_fu_342_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            add102286_fu_96 <= add_ln70_fu_431_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add102_1287_fu_100 <= 64'd0;
        end else if (((icmp_ln57_fu_342_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            add102_1287_fu_100 <= add_ln70_1_fu_476_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            add102_2288_fu_104 <= 64'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add102_2288_fu_104 <= add_ln70_2_fu_632_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            add102_3289_fu_108 <= 64'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add102_3289_fu_108 <= add_ln70_3_fu_689_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            add102_4290_fu_112 <= 64'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add102_4290_fu_112 <= add_ln70_4_fu_745_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            add102_5291_fu_116 <= 64'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add102_5291_fu_116 <= add_ln70_5_fu_809_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            add102_6292_fu_120 <= 64'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add102_6292_fu_120 <= add_ln70_6_fu_860_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_2_fu_124 <= 4'd15;
        end else if (((icmp_ln57_fu_342_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_2_fu_124 <= add_ln57_fu_540_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv36_cast_reg_1072[31 : 0] <= conv36_cast_fu_295_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln57_fu_342_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln70_1_reg_1094 <= icmp_ln70_1_fu_492_p2;
        icmp_ln70_2_reg_1104 <= icmp_ln70_2_fu_512_p2;
        icmp_ln70_3_reg_1115 <= icmp_ln70_3_fu_528_p2;
        icmp_ln70_4_reg_1121 <= icmp_ln70_4_fu_534_p2;
        sext_ln70_1_reg_1099 <= sext_ln70_1_fu_508_p1;
        sub_ln35_27_reg_1089 <= sub_ln35_27_fu_486_p2;
        sub_ln35_reg_1109 <= sub_ln35_fu_522_p2;
        zext_ln70_reg_1080[31 : 0] <= zext_ln70_fu_395_p1[31 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln57_fu_342_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add102286_out_ap_vld = 1'b1;
    end else begin
        add102286_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln57_fu_342_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add102_1287_out_ap_vld = 1'b1;
    end else begin
        add102_1287_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln57_fu_342_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add102_2288_out_ap_vld = 1'b1;
    end else begin
        add102_2288_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln57_fu_342_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add102_3289_out_ap_vld = 1'b1;
    end else begin
        add102_3289_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln57_fu_342_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add102_4290_out_ap_vld = 1'b1;
    end else begin
        add102_4290_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln57_fu_342_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add102_5291_out_ap_vld = 1'b1;
    end else begin
        add102_5291_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln57_fu_342_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add102_6292_out_ap_vld = 1'b1;
    end else begin
        add102_6292_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln57_fu_342_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add102286_out = add102286_fu_96;

assign add102_1287_out = add102_1287_fu_100;

assign add102_2288_out = add102_2288_fu_104;

assign add102_3289_out = add102_3289_fu_108;

assign add102_4290_out = add102_4290_fu_112;

assign add102_5291_out = add102_5291_fu_116;

assign add102_6292_out = add102_6292_fu_120;

assign add_ln57_fu_540_p2 = ($signed(i_2_fu_124) + $signed(4'd15));

assign add_ln70_1_fu_476_p2 = (and_ln70_1_fu_470_p2 + add102_1287_fu_100);

assign add_ln70_2_fu_632_p2 = (and_ln70_2_fu_626_p2 + add102_2288_fu_104);

assign add_ln70_3_fu_689_p2 = (and_ln70_3_fu_683_p2 + add102_3289_fu_108);

assign add_ln70_4_fu_745_p2 = (and_ln70_4_fu_739_p2 + add102_4290_fu_112);

assign add_ln70_5_fu_809_p2 = (and_ln70_5_fu_803_p2 + add102_5291_fu_116);

assign add_ln70_6_fu_860_p2 = (mul_ln70_6_fu_291_p2 + add102_6292_fu_120);

assign add_ln70_fu_431_p2 = (and_ln70_fu_425_p2 + add102286_fu_96);

assign and_ln70_1_fu_470_p2 = (select_ln70_3_fu_462_p3 & mul_ln70_1_fu_271_p2);

assign and_ln70_2_fu_626_p2 = (select_ln70_4_fu_619_p3 & mul_ln70_2_fu_275_p2);

assign and_ln70_3_fu_683_p2 = (select_ln70_5_fu_676_p3 & mul_ln70_3_fu_279_p2);

assign and_ln70_4_fu_739_p2 = (select_ln70_6_fu_732_p3 & mul_ln70_4_fu_283_p2);

assign and_ln70_5_fu_803_p2 = (select_ln70_7_fu_796_p3 & mul_ln70_5_fu_287_p2);

assign and_ln70_fu_425_p2 = (select_ln70_1_fu_417_p3 & mul_ln70_fu_267_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign conv36_cast_fu_295_p1 = conv36;

assign empty_fu_358_p2 = (zext_ln57_fu_354_p1 + 5'd1);

assign icmp_ln57_fu_342_p2 = ((i_2_fu_124 > 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln70_1_fu_492_p2 = ((empty_fu_358_p2 > 5'd13) ? 1'b1 : 1'b0);

assign icmp_ln70_2_fu_512_p2 = ((empty_fu_358_p2 > 5'd12) ? 1'b1 : 1'b0);

assign icmp_ln70_3_fu_528_p2 = ((empty_fu_358_p2 > 5'd11) ? 1'b1 : 1'b0);

assign icmp_ln70_4_fu_534_p2 = ((empty_fu_358_p2 > 5'd10) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_456_p2 = ((empty_fu_358_p2 > 5'd14) ? 1'b1 : 1'b0);

assign mul_ln70_1_fu_271_p0 = mul_ln70_1_fu_271_p00;

assign mul_ln70_1_fu_271_p00 = select_ln70_fu_445_p3;

assign mul_ln70_1_fu_271_p1 = zext_ln70_fu_395_p1;

assign mul_ln70_2_fu_275_p0 = mul_ln70_2_fu_275_p00;

assign mul_ln70_2_fu_275_p00 = tmp_2_fu_579_p18;

assign mul_ln70_2_fu_275_p1 = zext_ln70_reg_1080;

assign mul_ln70_3_fu_279_p0 = mul_ln70_3_fu_279_p00;

assign mul_ln70_3_fu_279_p00 = tmp_3_fu_638_p18;

assign mul_ln70_3_fu_279_p1 = zext_ln70_reg_1080;

assign mul_ln70_4_fu_283_p0 = mul_ln70_4_fu_283_p00;

assign mul_ln70_4_fu_283_p00 = tmp_4_fu_695_p18;

assign mul_ln70_4_fu_283_p1 = zext_ln70_reg_1080;

assign mul_ln70_5_fu_287_p0 = mul_ln70_5_fu_287_p00;

assign mul_ln70_5_fu_287_p00 = tmp_5_fu_759_p18;

assign mul_ln70_5_fu_287_p1 = zext_ln70_reg_1080;

assign mul_ln70_6_fu_291_p0 = mul_ln70_6_fu_291_p00;

assign mul_ln70_6_fu_291_p00 = tmp_6_fu_824_p18;

assign mul_ln70_6_fu_291_p1 = zext_ln70_reg_1080;

assign mul_ln70_fu_267_p0 = zext_ln70_fu_395_p1;

assign mul_ln70_fu_267_p1 = conv36_cast_reg_1072;

assign select_ln70_1_fu_417_p3 = ((tmp_69_fu_409_p3[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln70_2_fu_437_p3 = ((tmp_68_fu_401_p3[0:0] == 1'b1) ? 3'd6 : 3'd7);

assign select_ln70_3_fu_462_p3 = ((icmp_ln70_fu_456_p2[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln70_4_fu_619_p3 = ((icmp_ln70_1_reg_1094[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln70_5_fu_676_p3 = ((icmp_ln70_2_reg_1104[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln70_6_fu_732_p3 = ((icmp_ln70_3_reg_1115[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln70_7_fu_796_p3 = ((icmp_ln70_4_reg_1121[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln70_fu_445_p3 = ((tmp_68_fu_401_p3[0:0] == 1'b1) ? arg2_r_14_reload : arg2_r_15_reload);

assign sext_ln70_1_fu_508_p1 = $signed(sub_ln35_28_fu_502_p2);

assign sub_ln35_1_fu_754_p2 = (sub_ln35_reg_1109 - zext_ln71_1_fu_751_p1);

assign sub_ln35_27_fu_486_p2 = (select_ln70_2_fu_437_p3 - zext_ln35_fu_482_p1);

assign sub_ln35_28_fu_502_p2 = ($signed(sub_ln35_27_fu_486_p2) - $signed(zext_ln35_1_fu_498_p1));

assign sub_ln35_fu_522_p2 = ($signed(sext_ln70_1_fu_508_p1) - $signed(zext_ln71_fu_518_p1));

assign tmp_2_fu_579_p17 = sub_ln35_27_reg_1089;

assign tmp_68_fu_401_p3 = empty_fu_358_p2[32'd4];

assign tmp_69_fu_409_p3 = empty_fu_358_p2[32'd4];

assign tmp_6_fu_824_p17 = (sub_ln35_1_fu_754_p2 - zext_ln71_2_fu_815_p1);

assign zext_ln35_1_fu_498_p1 = icmp_ln70_1_fu_492_p2;

assign zext_ln35_fu_482_p1 = icmp_ln70_fu_456_p2;

assign zext_ln57_fu_354_p1 = i_2_fu_124;

assign zext_ln70_fu_395_p1 = tmp_fu_364_p18;

assign zext_ln71_1_fu_751_p1 = icmp_ln70_3_reg_1115;

assign zext_ln71_2_fu_815_p1 = icmp_ln70_4_reg_1121;

assign zext_ln71_fu_518_p1 = icmp_ln70_2_fu_512_p2;

always @ (posedge ap_clk) begin
    conv36_cast_reg_1072[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln70_reg_1080[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //test_test_Pipeline_VITIS_LOOP_57_5
