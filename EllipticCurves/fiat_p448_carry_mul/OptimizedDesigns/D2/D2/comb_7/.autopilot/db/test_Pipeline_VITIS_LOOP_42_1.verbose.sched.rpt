

================================================================
== Vitis HLS Report for 'test_Pipeline_VITIS_LOOP_42_1'
================================================================
* Date:           Fri May 10 15:04:21 2024

* Version:        2023.1.1 (Build 3869133 on Jun 15 2023)
* Project:        D2
* Solution:       comb_7 (Vivado IP Flow Target)
* Product family: zynquplus
* Target device:  xczu9eg-ffvb1156-2-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  7.128 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |       18|       18|  0.180 us|  0.180 us|   18|   18|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- VITIS_LOOP_42_1  |       16|       16|         3|          1|          1|    15|       yes|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 4


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 4
* Pipeline : 1
  Pipeline-0 : II = 1, D = 4, States = { 1 2 3 4 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 
4 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 0.42>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%k_s = alloca i32 1"   --->   Operation 6 'alloca' 'k_s' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%k1 = alloca i32 1"   --->   Operation 7 'alloca' 'k1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%arr_16 = alloca i32 1"   --->   Operation 8 'alloca' 'arr_16' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%arr_17 = alloca i32 1"   --->   Operation 9 'alloca' 'arr_17' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%arr_18 = alloca i32 1"   --->   Operation 10 'alloca' 'arr_18' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%arr_19 = alloca i32 1"   --->   Operation 11 'alloca' 'arr_19' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%arr_20 = alloca i32 1"   --->   Operation 12 'alloca' 'arr_20' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%arr_21 = alloca i32 1"   --->   Operation 13 'alloca' 'arr_21' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%arr_22 = alloca i32 1"   --->   Operation 14 'alloca' 'arr_22' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%arr_23 = alloca i32 1"   --->   Operation 15 'alloca' 'arr_23' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%arr_24 = alloca i32 1"   --->   Operation 16 'alloca' 'arr_24' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%arr_25 = alloca i32 1"   --->   Operation 17 'alloca' 'arr_25' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%arr_26 = alloca i32 1"   --->   Operation 18 'alloca' 'arr_26' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%arr_27 = alloca i32 1"   --->   Operation 19 'alloca' 'arr_27' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%arr_28 = alloca i32 1"   --->   Operation 20 'alloca' 'arr_28' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%arr_29 = alloca i32 1"   --->   Operation 21 'alloca' 'arr_29' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%arr_30 = alloca i32 1"   --->   Operation 22 'alloca' 'arr_30' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%arr_31 = alloca i32 1"   --->   Operation 23 'alloca' 'arr_31' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%k = alloca i32 1"   --->   Operation 24 'alloca' 'k' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%i = alloca i32 1"   --->   Operation 25 'alloca' 'i' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%conv60_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %conv60"   --->   Operation 26 'read' 'conv60_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%arg2_r_15_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_15_reload"   --->   Operation 27 'read' 'arg2_r_15_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%arg2_r_14_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_14_reload"   --->   Operation 28 'read' 'arg2_r_14_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%arg2_r_13_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_13_reload"   --->   Operation 29 'read' 'arg2_r_13_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%arg2_r_12_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_12_reload"   --->   Operation 30 'read' 'arg2_r_12_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%arg2_r_11_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_11_reload"   --->   Operation 31 'read' 'arg2_r_11_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%arg2_r_10_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_10_reload"   --->   Operation 32 'read' 'arg2_r_10_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%arg2_r_9_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_9_reload"   --->   Operation 33 'read' 'arg2_r_9_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%arg2_r_8_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_8_reload"   --->   Operation 34 'read' 'arg2_r_8_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%arg2_r_7_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_7_reload"   --->   Operation 35 'read' 'arg2_r_7_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%arg2_r_6_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_6_reload"   --->   Operation 36 'read' 'arg2_r_6_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%arg2_r_5_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_5_reload"   --->   Operation 37 'read' 'arg2_r_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%arg2_r_4_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_4_reload"   --->   Operation 38 'read' 'arg2_r_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "%arg2_r_3_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_3_reload"   --->   Operation 39 'read' 'arg2_r_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "%arg2_r_2_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_2_reload"   --->   Operation 40 'read' 'arg2_r_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.00ns)   --->   "%arg2_r_1_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_1_reload"   --->   Operation 41 'read' 'arg2_r_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 42 [1/1] (0.00ns)   --->   "%arg2_r_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_reload"   --->   Operation 42 'read' 'arg2_r_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (0.00ns)   --->   "%arg1_r_15_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_15_reload"   --->   Operation 43 'read' 'arg1_r_15_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 44 [1/1] (0.00ns)   --->   "%arg1_r_14_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_14_reload"   --->   Operation 44 'read' 'arg1_r_14_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 45 [1/1] (0.00ns)   --->   "%arg1_r_13_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_13_reload"   --->   Operation 45 'read' 'arg1_r_13_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 46 [1/1] (0.00ns)   --->   "%arg1_r_12_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_12_reload"   --->   Operation 46 'read' 'arg1_r_12_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 47 [1/1] (0.00ns)   --->   "%arg1_r_11_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_11_reload"   --->   Operation 47 'read' 'arg1_r_11_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 48 [1/1] (0.00ns)   --->   "%arg1_r_10_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_10_reload"   --->   Operation 48 'read' 'arg1_r_10_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 49 [1/1] (0.00ns)   --->   "%arg1_r_9_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_9_reload"   --->   Operation 49 'read' 'arg1_r_9_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 50 [1/1] (0.00ns)   --->   "%arg1_r_8_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_8_reload"   --->   Operation 50 'read' 'arg1_r_8_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 51 [1/1] (0.00ns)   --->   "%arg1_r_7_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_7_reload"   --->   Operation 51 'read' 'arg1_r_7_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 52 [1/1] (0.00ns)   --->   "%arg1_r_6_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_6_reload"   --->   Operation 52 'read' 'arg1_r_6_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 53 [1/1] (0.00ns)   --->   "%arg1_r_5_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_5_reload"   --->   Operation 53 'read' 'arg1_r_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 54 [1/1] (0.00ns)   --->   "%arg1_r_4_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_4_reload"   --->   Operation 54 'read' 'arg1_r_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 55 [1/1] (0.00ns)   --->   "%arg1_r_3_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_3_reload"   --->   Operation 55 'read' 'arg1_r_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 56 [1/1] (0.00ns)   --->   "%arg1_r_2_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_2_reload"   --->   Operation 56 'read' 'arg1_r_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 57 [1/1] (0.00ns)   --->   "%arg1_r_1_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_1_reload"   --->   Operation 57 'read' 'arg1_r_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 58 [1/1] (0.00ns)   --->   "%conv60_cast = zext i32 %conv60_read"   --->   Operation 58 'zext' 'conv60_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 59 [1/1] (0.42ns)   --->   "%store_ln0 = store i4 15, i4 %i"   --->   Operation 59 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 60 [1/1] (0.42ns)   --->   "%store_ln0 = store i4 0, i4 %k"   --->   Operation 60 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 61 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_31"   --->   Operation 61 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 62 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_30"   --->   Operation 62 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 63 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_29"   --->   Operation 63 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 64 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_28"   --->   Operation 64 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 65 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_27"   --->   Operation 65 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 66 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_26"   --->   Operation 66 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 67 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_25"   --->   Operation 67 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 68 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_24"   --->   Operation 68 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 69 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_23"   --->   Operation 69 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 70 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_22"   --->   Operation 70 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 71 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_21"   --->   Operation 71 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 72 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_20"   --->   Operation 72 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 73 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_19"   --->   Operation 73 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 74 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_18"   --->   Operation 74 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 75 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_17"   --->   Operation 75 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 76 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_16"   --->   Operation 76 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 77 [1/1] (0.42ns)   --->   "%store_ln0 = store i32 8, i32 %k1"   --->   Operation 77 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 78 [1/1] (0.42ns)   --->   "%store_ln0 = store i32 0, i32 %k_s"   --->   Operation 78 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 79 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.body23"   --->   Operation 79 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 6.66>
ST_2 : Operation 80 [1/1] (0.00ns)   --->   "%k_1 = load i4 %k" [d2.cpp:65]   --->   Operation 80 'load' 'k_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 81 [1/1] (0.79ns)   --->   "%icmp_ln42 = icmp_eq  i4 %k_1, i4 15" [d2.cpp:42]   --->   Operation 81 'icmp' 'icmp_ln42' <Predicate = true> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 82 [1/1] (0.79ns)   --->   "%add_ln48 = add i4 %k_1, i4 1" [d2.cpp:48]   --->   Operation 82 'add' 'add_ln48' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 83 [1/1] (0.00ns)   --->   "%br_ln42 = br i1 %icmp_ln42, void %for.body23.split_ifconv, void %for.body214.preheader.exitStub" [d2.cpp:42]   --->   Operation 83 'br' 'br_ln42' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 84 [1/1] (0.00ns)   --->   "%arr_16_load_1 = load i64 %arr_16" [d2.cpp:65]   --->   Operation 84 'load' 'arr_16_load_1' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 85 [1/1] (0.00ns)   --->   "%i_load = load i4 %i" [d2.cpp:51]   --->   Operation 85 'load' 'i_load' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 86 [1/1] (0.00ns)   --->   "%zext_ln42 = zext i4 %i_load" [d2.cpp:42]   --->   Operation 86 'zext' 'zext_ln42' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 87 [1/1] (0.00ns)   --->   "%tmp_33 = bitselect i1 @_ssdm_op_BitSelect.i1.i4.i32, i4 %i_load, i32 3" [d2.cpp:51]   --->   Operation 87 'bitselect' 'tmp_33' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 88 [1/1] (0.48ns)   --->   "%tmp_1 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 %arg1_r_1_reload_read, i32 %arg1_r_2_reload_read, i32 %arg1_r_3_reload_read, i32 %arg1_r_4_reload_read, i32 %arg1_r_5_reload_read, i32 %arg1_r_6_reload_read, i32 %arg1_r_7_reload_read, i32 %arg1_r_8_reload_read, i32 %arg1_r_9_reload_read, i32 %arg1_r_10_reload_read, i32 %arg1_r_11_reload_read, i32 %arg1_r_12_reload_read, i32 %arg1_r_13_reload_read, i32 %arg1_r_14_reload_read, i32 %arg1_r_15_reload_read, i4 %i_load" [d2.cpp:59]   --->   Operation 88 'mux' 'tmp_1' <Predicate = (!icmp_ln42)> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 89 [1/1] (0.00ns)   --->   "%zext_ln59 = zext i32 %tmp_1" [d2.cpp:59]   --->   Operation 89 'zext' 'zext_ln59' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 90 [1/1] (0.79ns)   --->   "%empty = add i5 %zext_ln42, i5 1" [d2.cpp:42]   --->   Operation 90 'add' 'empty' <Predicate = (!icmp_ln42)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 91 [1/1] (0.79ns)   --->   "%cmp69 = icmp_ugt  i4 %i_load, i4 8" [d2.cpp:51]   --->   Operation 91 'icmp' 'cmp69' <Predicate = (!icmp_ln42)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 92 [1/1] (0.79ns)   --->   "%empty_36 = add i5 %zext_ln42, i5 25" [d2.cpp:42]   --->   Operation 92 'add' 'empty_36' <Predicate = (!icmp_ln42)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 93 [1/1] (0.79ns)   --->   "%cmp138 = icmp_ugt  i4 %i_load, i4 6" [d2.cpp:51]   --->   Operation 93 'icmp' 'cmp138' <Predicate = (!icmp_ln42)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.31ns)   --->   Input mux for Operation 94 '%mul_ln59 = mul i64 %zext_ln59, i64 %conv60_cast'
ST_2 : Operation 94 [1/1] (2.10ns)   --->   "%mul_ln59 = mul i64 %zext_ln59, i64 %conv60_cast" [d2.cpp:59]   --->   Operation 94 'mul' 'mul_ln59' <Predicate = (!icmp_ln42)> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 95 [1/1] (0.00ns)   --->   "%tmp_34 = bitselect i1 @_ssdm_op_BitSelect.i1.i5.i32, i5 %empty, i32 4" [d2.cpp:59]   --->   Operation 95 'bitselect' 'tmp_34' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 96 [1/1] (0.28ns)   --->   "%and_ln59 = and i1 %tmp_34, i1 %cmp69" [d2.cpp:59]   --->   Operation 96 'and' 'and_ln59' <Predicate = (!icmp_ln42)> <Delay = 0.28> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 97 [1/1] (0.00ns) (grouped into LUT with out node sub_ln63_3)   --->   "%select_ln63 = select i1 %and_ln59, i3 6, i3 7" [d2.cpp:63]   --->   Operation 97 'select' 'select_ln63' <Predicate = (!icmp_ln42)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 98 [1/1] (0.54ns)   --->   "%tmp_4 = mux i32 @_ssdm_op_Mux.ap_auto.15i32.i4, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i4 %k_1" [d2.cpp:63]   --->   Operation 98 'mux' 'tmp_4' <Predicate = (!icmp_ln42)> <Delay = 0.54> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 99 [1/1] (0.00ns)   --->   "%zext_ln63 = zext i32 %tmp_4" [d2.cpp:63]   --->   Operation 99 'zext' 'zext_ln63' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 100 [1/1] (0.00ns) (grouped into LUT with out node add_ln65)   --->   "%select_ln65_1 = select i1 %cmp138, i4 6, i4 7" [d2.cpp:65]   --->   Operation 100 'select' 'select_ln65_1' <Predicate = (!icmp_ln42)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.39> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 101 [1/1] (0.79ns) (out node of the LUT)   --->   "%add_ln65 = add i4 %select_ln65_1, i4 %k_1" [d2.cpp:65]   --->   Operation 101 'add' 'add_ln65' <Predicate = (!icmp_ln42)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.31ns)   --->   Input mux for Operation 102 '%mul_ln65 = mul i64 %zext_ln63, i64 %zext_ln59'
ST_2 : Operation 102 [1/1] (2.10ns)   --->   "%mul_ln65 = mul i64 %zext_ln63, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 102 'mul' 'mul_ln65' <Predicate = (!icmp_ln42)> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 103 [1/1] (0.17ns)   --->   "%select_ln65_2 = select i1 %cmp138, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 103 'select' 'select_ln65_2' <Predicate = (!icmp_ln42)> <Delay = 0.17> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 104 [1/1] (0.00ns) (grouped into LUT with out node add_ln65_1)   --->   "%and_ln65 = and i64 %mul_ln65, i64 %select_ln65_2" [d2.cpp:65]   --->   Operation 104 'and' 'and_ln65' <Predicate = (!icmp_ln42)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 105 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_1)   --->   "%tmp_35 = bitselect i1 @_ssdm_op_BitSelect.i1.i5.i32, i5 %empty, i32 4" [d2.cpp:65]   --->   Operation 105 'bitselect' 'tmp_35' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 106 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_1)   --->   "%select_ln65_3 = select i1 %tmp_35, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 106 'select' 'select_ln65_3' <Predicate = (!icmp_ln42)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 107 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln65_1 = and i64 %mul_ln59, i64 %select_ln65_3" [d2.cpp:65]   --->   Operation 107 'and' 'and_ln65_1' <Predicate = (!icmp_ln42)> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 108 [1/1] (0.00ns) (grouped into LUT with out node add_ln65_1)   --->   "%select_ln65_4 = select i1 %and_ln59, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 108 'select' 'select_ln65_4' <Predicate = (!icmp_ln42)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 109 [1/1] (0.00ns) (grouped into LUT with out node add_ln65_1)   --->   "%and_ln65_2 = and i64 %mul_ln59, i64 %select_ln65_4" [d2.cpp:65]   --->   Operation 109 'and' 'and_ln65_2' <Predicate = (!icmp_ln42)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 110 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln65_1 = add i64 %and_ln65_2, i64 %and_ln65" [d2.cpp:65]   --->   Operation 110 'add' 'add_ln65_1' <Predicate = (!icmp_ln42)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 111 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln65_2 = add i64 %add_ln65_1, i64 %and_ln65_1" [d2.cpp:65]   --->   Operation 111 'add' 'add_ln65_2' <Predicate = (!icmp_ln42)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 112 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%arr_32 = add i64 %arr_16_load_1, i64 %add_ln65_2" [d2.cpp:65]   --->   Operation 112 'add' 'arr_32' <Predicate = (!icmp_ln42)> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 113 [1/1] (0.00ns) (grouped into LUT with out node k3)   --->   "%select_ln59_1 = select i1 %tmp_34, i3 6, i3 7" [d2.cpp:59]   --->   Operation 113 'select' 'select_ln59_1' <Predicate = (!icmp_ln42)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 114 [1/1] (0.78ns)   --->   "%icmp_ln59 = icmp_ugt  i5 %empty, i5 14" [d2.cpp:59]   --->   Operation 114 'icmp' 'icmp_ln59' <Predicate = (!icmp_ln42)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 115 [1/1] (0.28ns)   --->   "%and_ln59_1 = and i1 %icmp_ln59, i1 %cmp69" [d2.cpp:59]   --->   Operation 115 'and' 'and_ln59_1' <Predicate = (!icmp_ln42)> <Delay = 0.28> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 116 [1/1] (0.00ns) (grouped into LUT with out node sub_ln63_3)   --->   "%zext_ln63_7 = zext i1 %and_ln59_1" [d2.cpp:63]   --->   Operation 116 'zext' 'zext_ln63_7' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 117 [1/1] (0.54ns) (out node of the LUT)   --->   "%sub_ln63_3 = sub i3 %select_ln63, i3 %zext_ln63_7" [d2.cpp:63]   --->   Operation 117 'sub' 'sub_ln63_3' <Predicate = (!icmp_ln42)> <Delay = 0.54> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 118 [1/1] (0.00ns)   --->   "%zext_ln64 = zext i1 %cmp138" [d2.cpp:64]   --->   Operation 118 'zext' 'zext_ln64' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 119 [1/1] (0.79ns)   --->   "%sub_ln65_6 = sub i4 %add_ln65, i4 %zext_ln64" [d2.cpp:65]   --->   Operation 119 'sub' 'sub_ln65_6' <Predicate = (!icmp_ln42)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 120 [1/1] (0.00ns) (grouped into LUT with out node k3)   --->   "%zext_ln36 = zext i1 %icmp_ln59" [d2.cpp:36]   --->   Operation 120 'zext' 'zext_ln36' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 121 [1/1] (0.54ns) (out node of the LUT)   --->   "%k3 = sub i3 %select_ln59_1, i3 %zext_ln36" [d2.cpp:36]   --->   Operation 121 'sub' 'k3' <Predicate = (!icmp_ln42)> <Delay = 0.54> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 122 [1/1] (0.78ns)   --->   "%icmp_ln59_1 = icmp_ugt  i5 %empty, i5 13" [d2.cpp:59]   --->   Operation 122 'icmp' 'icmp_ln59_1' <Predicate = (!icmp_ln42)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 123 [1/1] (0.28ns)   --->   "%and_ln59_2 = and i1 %icmp_ln59_1, i1 %cmp69" [d2.cpp:59]   --->   Operation 123 'and' 'and_ln59_2' <Predicate = (!icmp_ln42)> <Delay = 0.28> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 124 [1/1] (0.00ns)   --->   "%zext_ln63_8 = zext i1 %and_ln59_2" [d2.cpp:63]   --->   Operation 124 'zext' 'zext_ln63_8' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 125 [1/1] (0.67ns)   --->   "%sub_ln63_4 = sub i3 %sub_ln63_3, i3 %zext_ln63_8" [d2.cpp:63]   --->   Operation 125 'sub' 'sub_ln63_4' <Predicate = (!icmp_ln42)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 126 [1/1] (0.00ns)   --->   "%sext_ln63_1 = sext i3 %sub_ln63_4" [d2.cpp:63]   --->   Operation 126 'sext' 'sext_ln63_1' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 127 [1/1] (0.79ns)   --->   "%sub_ln65_7 = sub i4 %sub_ln65_6, i4 %zext_ln64" [d2.cpp:65]   --->   Operation 127 'sub' 'sub_ln65_7' <Predicate = (!icmp_ln42)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 128 [1/1] (0.00ns)   --->   "%zext_ln66 = zext i1 %icmp_ln59_1" [d2.cpp:66]   --->   Operation 128 'zext' 'zext_ln66' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 129 [1/1] (0.67ns)   --->   "%k3_1 = sub i3 %k3, i3 %zext_ln66" [d2.cpp:66]   --->   Operation 129 'sub' 'k3_1' <Predicate = (!icmp_ln42)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 130 [1/1] (0.00ns)   --->   "%sext_ln36_1 = sext i3 %k3_1" [d2.cpp:36]   --->   Operation 130 'sext' 'sext_ln36_1' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 131 [1/1] (0.78ns)   --->   "%icmp_ln59_2 = icmp_ugt  i5 %empty, i5 12" [d2.cpp:59]   --->   Operation 131 'icmp' 'icmp_ln59_2' <Predicate = (!icmp_ln42)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 132 [1/1] (0.28ns)   --->   "%and_ln59_3 = and i1 %icmp_ln59_2, i1 %cmp69" [d2.cpp:59]   --->   Operation 132 'and' 'and_ln59_3' <Predicate = (!icmp_ln42)> <Delay = 0.28> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 133 [1/1] (0.00ns)   --->   "%zext_ln60 = zext i1 %and_ln59_3" [d2.cpp:60]   --->   Operation 133 'zext' 'zext_ln60' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 134 [1/1] (0.67ns)   --->   "%sub_ln63 = sub i4 %sext_ln63_1, i4 %zext_ln60" [d2.cpp:63]   --->   Operation 134 'sub' 'sub_ln63' <Predicate = (!icmp_ln42)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 135 [1/1] (0.79ns)   --->   "%sub_ln65 = sub i4 %sub_ln65_7, i4 %zext_ln64" [d2.cpp:65]   --->   Operation 135 'sub' 'sub_ln65' <Predicate = (!icmp_ln42)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 136 [1/1] (0.00ns)   --->   "%zext_ln66_1 = zext i1 %icmp_ln59_2" [d2.cpp:66]   --->   Operation 136 'zext' 'zext_ln66_1' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 137 [1/1] (0.67ns)   --->   "%sub_ln36_11 = sub i4 %sext_ln36_1, i4 %zext_ln66_1" [d2.cpp:36]   --->   Operation 137 'sub' 'sub_ln36_11' <Predicate = (!icmp_ln42)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 138 [1/1] (0.78ns)   --->   "%icmp_ln59_3 = icmp_ugt  i5 %empty, i5 11" [d2.cpp:59]   --->   Operation 138 'icmp' 'icmp_ln59_3' <Predicate = (!icmp_ln42)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 139 [1/1] (0.28ns)   --->   "%and_ln59_4 = and i1 %icmp_ln59_3, i1 %cmp69" [d2.cpp:59]   --->   Operation 139 'and' 'and_ln59_4' <Predicate = (!icmp_ln42)> <Delay = 0.28> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 140 [1/1] (0.79ns)   --->   "%sub_ln65_1 = sub i4 %sub_ln65, i4 %zext_ln64" [d2.cpp:65]   --->   Operation 140 'sub' 'sub_ln65_1' <Predicate = (!icmp_ln42)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 141 [1/1] (0.00ns)   --->   "%zext_ln66_2 = zext i1 %icmp_ln59_3" [d2.cpp:66]   --->   Operation 141 'zext' 'zext_ln66_2' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 142 [1/1] (0.79ns)   --->   "%sub_ln36_7 = sub i4 %sub_ln36_11, i4 %zext_ln66_2" [d2.cpp:36]   --->   Operation 142 'sub' 'sub_ln36_7' <Predicate = (!icmp_ln42)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 143 [1/1] (0.78ns)   --->   "%icmp_ln59_4 = icmp_ugt  i5 %empty, i5 10" [d2.cpp:59]   --->   Operation 143 'icmp' 'icmp_ln59_4' <Predicate = (!icmp_ln42)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 144 [1/1] (0.00ns)   --->   "%zext_ln66_3 = zext i1 %icmp_ln59_4" [d2.cpp:66]   --->   Operation 144 'zext' 'zext_ln66_3' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 145 [1/1] (0.79ns)   --->   "%sub_ln36_8 = sub i4 %sub_ln36_7, i4 %zext_ln66_3" [d2.cpp:36]   --->   Operation 145 'sub' 'sub_ln36_8' <Predicate = (!icmp_ln42)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 146 [1/1] (0.78ns)   --->   "%icmp_ln59_5 = icmp_ugt  i5 %empty, i5 9" [d2.cpp:59]   --->   Operation 146 'icmp' 'icmp_ln59_5' <Predicate = (!icmp_ln42)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 147 [1/1] (0.00ns)   --->   "%zext_ln66_4 = zext i1 %icmp_ln59_5" [d2.cpp:66]   --->   Operation 147 'zext' 'zext_ln66_4' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 148 [1/1] (0.79ns)   --->   "%sub_ln36_9 = sub i4 %sub_ln36_8, i4 %zext_ln66_4" [d2.cpp:36]   --->   Operation 148 'sub' 'sub_ln36_9' <Predicate = (!icmp_ln42)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 149 [1/1] (0.78ns)   --->   "%icmp_ln65 = icmp_ugt  i5 %empty, i5 8" [d2.cpp:65]   --->   Operation 149 'icmp' 'icmp_ln65' <Predicate = (!icmp_ln42)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 150 [1/1] (0.00ns)   --->   "%zext_ln66_5 = zext i1 %icmp_ln65" [d2.cpp:66]   --->   Operation 150 'zext' 'zext_ln66_5' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 151 [1/1] (0.79ns)   --->   "%sub_ln36_3 = sub i4 %sub_ln36_9, i4 %zext_ln66_5" [d2.cpp:36]   --->   Operation 151 'sub' 'sub_ln36_3' <Predicate = (!icmp_ln42)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 152 [1/1] (0.00ns)   --->   "%tmp_36 = partselect i2 @_ssdm_op_PartSelect.i2.i5.i32.i32, i5 %empty_36, i32 3, i32 4" [d2.cpp:61]   --->   Operation 152 'partselect' 'tmp_36' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 153 [1/1] (0.54ns)   --->   "%icmp_ln61 = icmp_eq  i2 %tmp_36, i2 1" [d2.cpp:61]   --->   Operation 153 'icmp' 'icmp_ln61' <Predicate = (!icmp_ln42)> <Delay = 0.54> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 154 [1/1] (0.28ns)   --->   "%and_ln61 = and i1 %icmp_ln61, i1 %cmp69" [d2.cpp:61]   --->   Operation 154 'and' 'and_ln61' <Predicate = (!icmp_ln42)> <Delay = 0.28> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 155 [1/1] (0.00ns)   --->   "%tmp_37 = partselect i2 @_ssdm_op_PartSelect.i2.i5.i32.i32, i5 %empty, i32 3, i32 4" [d2.cpp:65]   --->   Operation 155 'partselect' 'tmp_37' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 156 [1/1] (0.54ns)   --->   "%icmp_ln65_1 = icmp_ne  i2 %tmp_37, i2 0" [d2.cpp:65]   --->   Operation 156 'icmp' 'icmp_ln65_1' <Predicate = (!icmp_ln42)> <Delay = 0.54> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 157 [1/1] (0.78ns)   --->   "%icmp_ln61_1 = icmp_sgt  i5 %empty_36, i5 6" [d2.cpp:61]   --->   Operation 157 'icmp' 'icmp_ln61_1' <Predicate = (!icmp_ln42)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 158 [1/1] (0.78ns)   --->   "%icmp_ln65_2 = icmp_ugt  i5 %empty, i5 6" [d2.cpp:65]   --->   Operation 158 'icmp' 'icmp_ln65_2' <Predicate = (!icmp_ln42)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 159 [1/1] (0.78ns)   --->   "%icmp_ln61_2 = icmp_sgt  i5 %empty_36, i5 5" [d2.cpp:61]   --->   Operation 159 'icmp' 'icmp_ln61_2' <Predicate = (!icmp_ln42)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 160 [1/1] (0.78ns)   --->   "%icmp_ln65_3 = icmp_ugt  i5 %empty, i5 5" [d2.cpp:65]   --->   Operation 160 'icmp' 'icmp_ln65_3' <Predicate = (!icmp_ln42)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 161 [1/1] (0.78ns)   --->   "%icmp_ln61_3 = icmp_sgt  i5 %empty_36, i5 4" [d2.cpp:61]   --->   Operation 161 'icmp' 'icmp_ln61_3' <Predicate = (!icmp_ln42)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 162 [1/1] (0.28ns)   --->   "%and_ln61_3 = and i1 %icmp_ln61_3, i1 %cmp69" [d2.cpp:61]   --->   Operation 162 'and' 'and_ln61_3' <Predicate = (!icmp_ln42)> <Delay = 0.28> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 163 [1/1] (0.78ns)   --->   "%icmp_ln65_4 = icmp_ugt  i5 %empty, i5 4" [d2.cpp:65]   --->   Operation 163 'icmp' 'icmp_ln65_4' <Predicate = (!icmp_ln42)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 164 [1/1] (0.00ns)   --->   "%tmp_38 = partselect i3 @_ssdm_op_PartSelect.i3.i5.i32.i32, i5 %empty_36, i32 2, i32 4" [d2.cpp:61]   --->   Operation 164 'partselect' 'tmp_38' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 165 [1/1] (0.67ns)   --->   "%icmp_ln61_4 = icmp_sgt  i3 %tmp_38, i3 0" [d2.cpp:61]   --->   Operation 165 'icmp' 'icmp_ln61_4' <Predicate = (!icmp_ln42)> <Delay = 0.67> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 166 [1/1] (0.00ns)   --->   "%tmp_39 = partselect i3 @_ssdm_op_PartSelect.i3.i5.i32.i32, i5 %empty, i32 2, i32 4" [d2.cpp:65]   --->   Operation 166 'partselect' 'tmp_39' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 167 [1/1] (0.67ns)   --->   "%icmp_ln65_5 = icmp_ne  i3 %tmp_39, i3 0" [d2.cpp:65]   --->   Operation 167 'icmp' 'icmp_ln65_5' <Predicate = (!icmp_ln42)> <Delay = 0.67> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 168 [1/1] (0.78ns)   --->   "%icmp_ln61_5 = icmp_sgt  i5 %empty_36, i5 2" [d2.cpp:61]   --->   Operation 168 'icmp' 'icmp_ln61_5' <Predicate = (!icmp_ln42)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 169 [1/1] (0.78ns)   --->   "%icmp_ln65_6 = icmp_ugt  i5 %empty, i5 2" [d2.cpp:65]   --->   Operation 169 'icmp' 'icmp_ln65_6' <Predicate = (!icmp_ln42)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 170 [1/1] (0.00ns)   --->   "%tmp_40 = partselect i4 @_ssdm_op_PartSelect.i4.i5.i32.i32, i5 %empty_36, i32 1, i32 4" [d2.cpp:61]   --->   Operation 170 'partselect' 'tmp_40' <Predicate = (!icmp_ln42)> <Delay = 0.00>
ST_2 : Operation 171 [1/1] (0.79ns)   --->   "%icmp_ln61_6 = icmp_sgt  i4 %tmp_40, i4 0" [d2.cpp:61]   --->   Operation 171 'icmp' 'icmp_ln61_6' <Predicate = (!icmp_ln42)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 172 [1/1] (0.79ns)   --->   "%add_ln42 = add i4 %i_load, i4 15" [d2.cpp:42]   --->   Operation 172 'add' 'add_ln42' <Predicate = (!icmp_ln42)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 173 [1/1] (0.42ns)   --->   "%store_ln42 = store i4 %add_ln42, i4 %i" [d2.cpp:42]   --->   Operation 173 'store' 'store_ln42' <Predicate = (!icmp_ln42)> <Delay = 0.42>
ST_2 : Operation 174 [1/1] (0.42ns)   --->   "%store_ln42 = store i4 %add_ln48, i4 %k" [d2.cpp:42]   --->   Operation 174 'store' 'store_ln42' <Predicate = (!icmp_ln42)> <Delay = 0.42>
ST_2 : Operation 175 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr_32, i64 %arr_16" [d2.cpp:42]   --->   Operation 175 'store' 'store_ln42' <Predicate = (!icmp_ln42)> <Delay = 0.42>

State 3 <SV = 2> <Delay = 7.12>
ST_3 : Operation 176 [1/1] (0.00ns)   --->   "%k_load = load i32 %k_s" [d2.cpp:42]   --->   Operation 176 'load' 'k_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 177 [1/1] (0.00ns)   --->   "%k1_load = load i32 %k1" [d2.cpp:42]   --->   Operation 177 'load' 'k1_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 178 [1/1] (0.00ns)   --->   "%arr_17_load_1 = load i64 %arr_17" [d2.cpp:65]   --->   Operation 178 'load' 'arr_17_load_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 179 [1/1] (0.00ns)   --->   "%arr_18_load_1 = load i64 %arr_18" [d2.cpp:65]   --->   Operation 179 'load' 'arr_18_load_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 180 [1/1] (0.00ns)   --->   "%arr_19_load_1 = load i64 %arr_19" [d2.cpp:65]   --->   Operation 180 'load' 'arr_19_load_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 181 [1/1] (0.00ns)   --->   "%arr_20_load_1 = load i64 %arr_20" [d2.cpp:65]   --->   Operation 181 'load' 'arr_20_load_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 182 [1/1] (0.00ns)   --->   "%arr_21_load_1 = load i64 %arr_21" [d2.cpp:65]   --->   Operation 182 'load' 'arr_21_load_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 183 [1/1] (0.00ns)   --->   "%arr_22_load_1 = load i64 %arr_22" [d2.cpp:65]   --->   Operation 183 'load' 'arr_22_load_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 184 [1/1] (0.00ns)   --->   "%arr_23_load_1 = load i64 %arr_23" [d2.cpp:65]   --->   Operation 184 'load' 'arr_23_load_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 185 [1/1] (0.00ns)   --->   "%arr_24_load_1 = load i64 %arr_24" [d2.cpp:65]   --->   Operation 185 'load' 'arr_24_load_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 186 [1/1] (0.00ns)   --->   "%arr_25_load_1 = load i64 %arr_25" [d2.cpp:65]   --->   Operation 186 'load' 'arr_25_load_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 187 [1/1] (0.00ns)   --->   "%arr_26_load_1 = load i64 %arr_26" [d2.cpp:65]   --->   Operation 187 'load' 'arr_26_load_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 188 [1/1] (0.00ns)   --->   "%arr_31_load_1 = load i64 %arr_31" [d2.cpp:51]   --->   Operation 188 'load' 'arr_31_load_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 189 [1/1] (0.00ns)   --->   "%trunc_ln42 = trunc i32 %k_load" [d2.cpp:42]   --->   Operation 189 'trunc' 'trunc_ln42' <Predicate = (tmp_33)> <Delay = 0.00>
ST_3 : Operation 190 [1/1] (0.00ns)   --->   "%trunc_ln42_1 = trunc i32 %k1_load" [d2.cpp:42]   --->   Operation 190 'trunc' 'trunc_ln42_1' <Predicate = (tmp_33)> <Delay = 0.00>
ST_3 : Operation 191 [1/1] (1.01ns)   --->   "%k1_1 = add i32 %k1_load, i32 1" [d2.cpp:51]   --->   Operation 191 'add' 'k1_1' <Predicate = (tmp_33)> <Delay = 1.01> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.01> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 192 [1/1] (0.48ns)   --->   "%tmp_2 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %trunc_ln42_1" [d2.cpp:51]   --->   Operation 192 'mux' 'tmp_2' <Predicate = (tmp_33)> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 193 [1/1] (0.00ns)   --->   "%zext_ln51 = zext i32 %tmp_2" [d2.cpp:51]   --->   Operation 193 'zext' 'zext_ln51' <Predicate = (tmp_33)> <Delay = 0.00>
ST_3 : Operation 194 [1/1] (1.01ns)   --->   "%k_1_35 = add i32 %k_load, i32 1" [d2.cpp:51]   --->   Operation 194 'add' 'k_1_35' <Predicate = (tmp_33)> <Delay = 1.01> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.01> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 195 [1/1] (0.48ns)   --->   "%tmp_3 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %trunc_ln42" [d2.cpp:51]   --->   Operation 195 'mux' 'tmp_3' <Predicate = (tmp_33)> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 196 [1/1] (0.00ns)   --->   "%tmp_3_cast = zext i32 %tmp_3" [d2.cpp:51]   --->   Operation 196 'zext' 'tmp_3_cast' <Predicate = (tmp_33)> <Delay = 0.00>
ST_3 : Operation 197 [1/1] (1.01ns)   --->   "%tmp = add i33 %tmp_3_cast, i33 %zext_ln51" [d2.cpp:51]   --->   Operation 197 'add' 'tmp' <Predicate = (tmp_33)> <Delay = 1.01> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.01> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 198 [1/1] (0.00ns)   --->   "%tmp_cast = zext i33 %tmp" [d2.cpp:51]   --->   Operation 198 'zext' 'tmp_cast' <Predicate = (tmp_33)> <Delay = 0.00>
ST_3 : Operation 199 [1/1] (3.41ns)   --->   "%tmp1 = mul i64 %tmp_cast, i64 %zext_ln59" [d2.cpp:51]   --->   Operation 199 'mul' 'tmp1' <Predicate = (tmp_33)> <Delay = 3.41> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.41> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 200 [1/1] (1.08ns)   --->   "%add_ln51 = add i64 %tmp1, i64 %arr_31_load_1" [d2.cpp:51]   --->   Operation 200 'add' 'add_ln51' <Predicate = (tmp_33)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 201 [1/1] (0.42ns)   --->   "%arr = select i1 %tmp_33, i64 %add_ln51, i64 %arr_31_load_1" [d2.cpp:51]   --->   Operation 201 'select' 'arr' <Predicate = true> <Delay = 0.42> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.42> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 202 [1/1] (0.44ns)   --->   "%k_2 = select i1 %tmp_33, i32 %k_1_35, i32 %k_load" [d2.cpp:51]   --->   Operation 202 'select' 'k_2' <Predicate = true> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 203 [1/1] (0.44ns)   --->   "%k1_2 = select i1 %tmp_33, i32 %k1_1, i32 %k1_load" [d2.cpp:51]   --->   Operation 203 'select' 'k1_2' <Predicate = true> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 204 [1/1] (0.44ns)   --->   "%select_ln59 = select i1 %and_ln59, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read" [d2.cpp:59]   --->   Operation 204 'select' 'select_ln59' <Predicate = true> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 205 [1/1] (0.00ns)   --->   "%zext_ln59_1 = zext i32 %select_ln59" [d2.cpp:59]   --->   Operation 205 'zext' 'zext_ln59_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 206 [1/1] (0.00ns)   --->   "%sext_ln63 = sext i3 %sub_ln63_3" [d2.cpp:63]   --->   Operation 206 'sext' 'sext_ln63' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 207 [1/1] (0.48ns)   --->   "%tmp_6 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %add_ln65" [d2.cpp:63]   --->   Operation 207 'mux' 'tmp_6' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 208 [1/1] (0.00ns)   --->   "%zext_ln63_1 = zext i32 %tmp_6" [d2.cpp:63]   --->   Operation 208 'zext' 'zext_ln63_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 209 [1/1] (0.44ns)   --->   "%select_ln65 = select i1 %tmp_34, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read" [d2.cpp:65]   --->   Operation 209 'select' 'select_ln65' <Predicate = true> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 210 [1/1] (0.00ns)   --->   "%zext_ln65 = zext i32 %select_ln65" [d2.cpp:65]   --->   Operation 210 'zext' 'zext_ln65' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 211 '%mul_ln65_1 = mul i64 %zext_ln65, i64 %zext_ln59'
ST_3 : Operation 211 [1/1] (2.10ns)   --->   "%mul_ln65_1 = mul i64 %zext_ln65, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 211 'mul' 'mul_ln65_1' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 212 '%mul_ln65_2 = mul i64 %zext_ln59_1, i64 %zext_ln59'
ST_3 : Operation 212 [1/1] (2.10ns)   --->   "%mul_ln65_2 = mul i64 %zext_ln59_1, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 212 'mul' 'mul_ln65_2' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 213 '%mul_ln65_3 = mul i64 %zext_ln63_1, i64 %zext_ln59'
ST_3 : Operation 213 [1/1] (2.10ns)   --->   "%mul_ln65_3 = mul i64 %zext_ln63_1, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 213 'mul' 'mul_ln65_3' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 214 [1/1] (0.00ns) (grouped into LUT with out node add_ln65_4)   --->   "%select_ln65_5 = select i1 %icmp_ln59, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 214 'select' 'select_ln65_5' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 215 [1/1] (0.00ns) (grouped into LUT with out node add_ln65_4)   --->   "%and_ln65_3 = and i64 %mul_ln65_1, i64 %select_ln65_5" [d2.cpp:65]   --->   Operation 215 'and' 'and_ln65_3' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 216 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_4)   --->   "%select_ln65_6 = select i1 %and_ln59_1, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 216 'select' 'select_ln65_6' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 217 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln65_4 = and i64 %mul_ln65_2, i64 %select_ln65_6" [d2.cpp:65]   --->   Operation 217 'and' 'and_ln65_4' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 218 [1/1] (0.00ns) (grouped into LUT with out node add_ln65_4)   --->   "%and_ln65_5 = and i64 %mul_ln65_3, i64 %select_ln65_2" [d2.cpp:65]   --->   Operation 218 'and' 'and_ln65_5' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 219 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln65_4 = add i64 %and_ln65_5, i64 %and_ln65_3" [d2.cpp:65]   --->   Operation 219 'add' 'add_ln65_4' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 220 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln65_5 = add i64 %add_ln65_4, i64 %and_ln65_4" [d2.cpp:65]   --->   Operation 220 'add' 'add_ln65_5' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 221 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%arr_33 = add i64 %arr_17_load_1, i64 %add_ln65_5" [d2.cpp:65]   --->   Operation 221 'add' 'arr_33' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 222 [1/1] (0.00ns)   --->   "%sext_ln36 = sext i3 %k3" [d2.cpp:36]   --->   Operation 222 'sext' 'sext_ln36' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 223 [1/1] (0.48ns)   --->   "%tmp_8 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sext_ln63" [d2.cpp:59]   --->   Operation 223 'mux' 'tmp_8' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 224 [1/1] (0.00ns)   --->   "%zext_ln59_2 = zext i32 %tmp_8" [d2.cpp:59]   --->   Operation 224 'zext' 'zext_ln59_2' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 225 [1/1] (0.48ns)   --->   "%tmp_9 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln65_6" [d2.cpp:63]   --->   Operation 225 'mux' 'tmp_9' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 226 [1/1] (0.00ns)   --->   "%zext_ln63_2 = zext i32 %tmp_9" [d2.cpp:63]   --->   Operation 226 'zext' 'zext_ln63_2' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 227 [1/1] (0.48ns)   --->   "%tmp_s = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sext_ln36" [d2.cpp:65]   --->   Operation 227 'mux' 'tmp_s' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 228 [1/1] (0.00ns)   --->   "%zext_ln65_1 = zext i32 %tmp_s" [d2.cpp:65]   --->   Operation 228 'zext' 'zext_ln65_1' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 229 '%mul_ln65_4 = mul i64 %zext_ln65_1, i64 %zext_ln59'
ST_3 : Operation 229 [1/1] (2.10ns)   --->   "%mul_ln65_4 = mul i64 %zext_ln65_1, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 229 'mul' 'mul_ln65_4' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 230 '%mul_ln65_5 = mul i64 %zext_ln59_2, i64 %zext_ln59'
ST_3 : Operation 230 [1/1] (2.10ns)   --->   "%mul_ln65_5 = mul i64 %zext_ln59_2, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 230 'mul' 'mul_ln65_5' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 231 '%mul_ln65_6 = mul i64 %zext_ln63_2, i64 %zext_ln59'
ST_3 : Operation 231 [1/1] (2.10ns)   --->   "%mul_ln65_6 = mul i64 %zext_ln63_2, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 231 'mul' 'mul_ln65_6' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 232 [1/1] (0.00ns) (grouped into LUT with out node add_ln65_7)   --->   "%select_ln65_7 = select i1 %icmp_ln59_1, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 232 'select' 'select_ln65_7' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 233 [1/1] (0.00ns) (grouped into LUT with out node add_ln65_7)   --->   "%and_ln65_6 = and i64 %mul_ln65_4, i64 %select_ln65_7" [d2.cpp:65]   --->   Operation 233 'and' 'and_ln65_6' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 234 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_7)   --->   "%select_ln65_8 = select i1 %and_ln59_2, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 234 'select' 'select_ln65_8' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 235 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln65_7 = and i64 %mul_ln65_5, i64 %select_ln65_8" [d2.cpp:65]   --->   Operation 235 'and' 'and_ln65_7' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 236 [1/1] (0.00ns) (grouped into LUT with out node add_ln65_7)   --->   "%and_ln65_8 = and i64 %mul_ln65_6, i64 %select_ln65_2" [d2.cpp:65]   --->   Operation 236 'and' 'and_ln65_8' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 237 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln65_7 = add i64 %and_ln65_8, i64 %and_ln65_6" [d2.cpp:65]   --->   Operation 237 'add' 'add_ln65_7' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 238 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln65_8 = add i64 %add_ln65_7, i64 %and_ln65_7" [d2.cpp:65]   --->   Operation 238 'add' 'add_ln65_8' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 239 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%arr_34 = add i64 %arr_18_load_1, i64 %add_ln65_8" [d2.cpp:65]   --->   Operation 239 'add' 'arr_34' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 240 [1/1] (0.48ns)   --->   "%tmp_5 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sext_ln63_1" [d2.cpp:59]   --->   Operation 240 'mux' 'tmp_5' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 241 [1/1] (0.00ns)   --->   "%zext_ln59_3 = zext i32 %tmp_5" [d2.cpp:59]   --->   Operation 241 'zext' 'zext_ln59_3' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 242 [1/1] (0.48ns)   --->   "%tmp_7 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln65_7" [d2.cpp:63]   --->   Operation 242 'mux' 'tmp_7' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 243 [1/1] (0.00ns)   --->   "%zext_ln63_3 = zext i32 %tmp_7" [d2.cpp:63]   --->   Operation 243 'zext' 'zext_ln63_3' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 244 [1/1] (0.48ns)   --->   "%tmp_10 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sext_ln36_1" [d2.cpp:65]   --->   Operation 244 'mux' 'tmp_10' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 245 [1/1] (0.00ns)   --->   "%zext_ln65_2 = zext i32 %tmp_10" [d2.cpp:65]   --->   Operation 245 'zext' 'zext_ln65_2' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 246 '%mul_ln65_7 = mul i64 %zext_ln65_2, i64 %zext_ln59'
ST_3 : Operation 246 [1/1] (2.10ns)   --->   "%mul_ln65_7 = mul i64 %zext_ln65_2, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 246 'mul' 'mul_ln65_7' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 247 '%mul_ln65_8 = mul i64 %zext_ln59_3, i64 %zext_ln59'
ST_3 : Operation 247 [1/1] (2.10ns)   --->   "%mul_ln65_8 = mul i64 %zext_ln59_3, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 247 'mul' 'mul_ln65_8' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 248 '%mul_ln65_9 = mul i64 %zext_ln63_3, i64 %zext_ln59'
ST_3 : Operation 248 [1/1] (2.10ns)   --->   "%mul_ln65_9 = mul i64 %zext_ln63_3, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 248 'mul' 'mul_ln65_9' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 249 [1/1] (0.00ns) (grouped into LUT with out node add_ln65_10)   --->   "%select_ln65_9 = select i1 %icmp_ln59_2, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 249 'select' 'select_ln65_9' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 250 [1/1] (0.00ns) (grouped into LUT with out node add_ln65_10)   --->   "%and_ln65_9 = and i64 %mul_ln65_7, i64 %select_ln65_9" [d2.cpp:65]   --->   Operation 250 'and' 'and_ln65_9' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 251 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_10)   --->   "%select_ln65_10 = select i1 %and_ln59_3, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 251 'select' 'select_ln65_10' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 252 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln65_10 = and i64 %mul_ln65_8, i64 %select_ln65_10" [d2.cpp:65]   --->   Operation 252 'and' 'and_ln65_10' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 253 [1/1] (0.00ns) (grouped into LUT with out node add_ln65_10)   --->   "%and_ln65_11 = and i64 %mul_ln65_9, i64 %select_ln65_2" [d2.cpp:65]   --->   Operation 253 'and' 'and_ln65_11' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 254 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln65_10 = add i64 %and_ln65_11, i64 %and_ln65_9" [d2.cpp:65]   --->   Operation 254 'add' 'add_ln65_10' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 255 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln65_11 = add i64 %add_ln65_10, i64 %and_ln65_10" [d2.cpp:65]   --->   Operation 255 'add' 'add_ln65_11' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 256 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%arr_35 = add i64 %arr_19_load_1, i64 %add_ln65_11" [d2.cpp:65]   --->   Operation 256 'add' 'arr_35' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 257 [1/1] (0.48ns)   --->   "%tmp_11 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln63" [d2.cpp:59]   --->   Operation 257 'mux' 'tmp_11' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 258 [1/1] (0.00ns)   --->   "%zext_ln59_4 = zext i32 %tmp_11" [d2.cpp:59]   --->   Operation 258 'zext' 'zext_ln59_4' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 259 [1/1] (0.00ns)   --->   "%zext_ln60_1 = zext i1 %and_ln59_4" [d2.cpp:60]   --->   Operation 259 'zext' 'zext_ln60_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 260 [1/1] (0.79ns)   --->   "%sub_ln63_1 = sub i4 %sub_ln63, i4 %zext_ln60_1" [d2.cpp:63]   --->   Operation 260 'sub' 'sub_ln63_1' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 261 [1/1] (0.48ns)   --->   "%tmp_12 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln65" [d2.cpp:63]   --->   Operation 261 'mux' 'tmp_12' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 262 [1/1] (0.00ns)   --->   "%zext_ln63_4 = zext i32 %tmp_12" [d2.cpp:63]   --->   Operation 262 'zext' 'zext_ln63_4' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 263 [1/1] (0.48ns)   --->   "%tmp_13 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln36_11" [d2.cpp:65]   --->   Operation 263 'mux' 'tmp_13' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 264 [1/1] (0.00ns)   --->   "%zext_ln65_3 = zext i32 %tmp_13" [d2.cpp:65]   --->   Operation 264 'zext' 'zext_ln65_3' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 265 '%mul_ln65_10 = mul i64 %zext_ln65_3, i64 %zext_ln59'
ST_3 : Operation 265 [1/1] (2.10ns)   --->   "%mul_ln65_10 = mul i64 %zext_ln65_3, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 265 'mul' 'mul_ln65_10' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 266 '%mul_ln65_11 = mul i64 %zext_ln59_4, i64 %zext_ln59'
ST_3 : Operation 266 [1/1] (2.10ns)   --->   "%mul_ln65_11 = mul i64 %zext_ln59_4, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 266 'mul' 'mul_ln65_11' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 267 '%mul_ln65_12 = mul i64 %zext_ln63_4, i64 %zext_ln59'
ST_3 : Operation 267 [1/1] (2.10ns)   --->   "%mul_ln65_12 = mul i64 %zext_ln63_4, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 267 'mul' 'mul_ln65_12' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 268 [1/1] (0.00ns) (grouped into LUT with out node add_ln65_13)   --->   "%select_ln65_11 = select i1 %icmp_ln59_3, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 268 'select' 'select_ln65_11' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 269 [1/1] (0.00ns) (grouped into LUT with out node add_ln65_13)   --->   "%and_ln65_12 = and i64 %mul_ln65_10, i64 %select_ln65_11" [d2.cpp:65]   --->   Operation 269 'and' 'and_ln65_12' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 270 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_13)   --->   "%select_ln65_12 = select i1 %and_ln59_4, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 270 'select' 'select_ln65_12' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 271 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln65_13 = and i64 %mul_ln65_11, i64 %select_ln65_12" [d2.cpp:65]   --->   Operation 271 'and' 'and_ln65_13' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 272 [1/1] (0.00ns) (grouped into LUT with out node add_ln65_13)   --->   "%and_ln65_14 = and i64 %mul_ln65_12, i64 %select_ln65_2" [d2.cpp:65]   --->   Operation 272 'and' 'and_ln65_14' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 273 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln65_13 = add i64 %and_ln65_14, i64 %and_ln65_12" [d2.cpp:65]   --->   Operation 273 'add' 'add_ln65_13' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 274 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln65_14 = add i64 %add_ln65_13, i64 %and_ln65_13" [d2.cpp:65]   --->   Operation 274 'add' 'add_ln65_14' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 275 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%arr_36 = add i64 %arr_20_load_1, i64 %add_ln65_14" [d2.cpp:65]   --->   Operation 275 'add' 'arr_36' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 276 [1/1] (0.48ns)   --->   "%tmp_14 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln63_1" [d2.cpp:59]   --->   Operation 276 'mux' 'tmp_14' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 277 [1/1] (0.00ns)   --->   "%zext_ln59_5 = zext i32 %tmp_14" [d2.cpp:59]   --->   Operation 277 'zext' 'zext_ln59_5' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 278 [1/1] (0.28ns)   --->   "%and_ln59_5 = and i1 %icmp_ln59_4, i1 %cmp69" [d2.cpp:59]   --->   Operation 278 'and' 'and_ln59_5' <Predicate = true> <Delay = 0.28> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 279 [1/1] (0.00ns)   --->   "%zext_ln60_2 = zext i1 %and_ln59_5" [d2.cpp:60]   --->   Operation 279 'zext' 'zext_ln60_2' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 280 [1/1] (0.79ns)   --->   "%sub_ln63_2 = sub i4 %sub_ln63_1, i4 %zext_ln60_2" [d2.cpp:63]   --->   Operation 280 'sub' 'sub_ln63_2' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 281 [1/1] (0.48ns)   --->   "%tmp_15 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln65_1" [d2.cpp:63]   --->   Operation 281 'mux' 'tmp_15' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 282 [1/1] (0.00ns)   --->   "%zext_ln63_5 = zext i32 %tmp_15" [d2.cpp:63]   --->   Operation 282 'zext' 'zext_ln63_5' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 283 [1/1] (0.79ns)   --->   "%sub_ln65_2 = sub i4 %sub_ln65_1, i4 %zext_ln64" [d2.cpp:65]   --->   Operation 283 'sub' 'sub_ln65_2' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 284 [1/1] (0.48ns)   --->   "%tmp_16 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln36_7" [d2.cpp:65]   --->   Operation 284 'mux' 'tmp_16' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 285 [1/1] (0.00ns)   --->   "%zext_ln65_4 = zext i32 %tmp_16" [d2.cpp:65]   --->   Operation 285 'zext' 'zext_ln65_4' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 286 '%mul_ln65_13 = mul i64 %zext_ln65_4, i64 %zext_ln59'
ST_3 : Operation 286 [1/1] (2.10ns)   --->   "%mul_ln65_13 = mul i64 %zext_ln65_4, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 286 'mul' 'mul_ln65_13' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 287 '%mul_ln65_14 = mul i64 %zext_ln59_5, i64 %zext_ln59'
ST_3 : Operation 287 [1/1] (2.10ns)   --->   "%mul_ln65_14 = mul i64 %zext_ln59_5, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 287 'mul' 'mul_ln65_14' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 288 '%mul_ln65_15 = mul i64 %zext_ln63_5, i64 %zext_ln59'
ST_3 : Operation 288 [1/1] (2.10ns)   --->   "%mul_ln65_15 = mul i64 %zext_ln63_5, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 288 'mul' 'mul_ln65_15' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 289 [1/1] (0.00ns) (grouped into LUT with out node add_ln65_16)   --->   "%select_ln65_13 = select i1 %icmp_ln59_4, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 289 'select' 'select_ln65_13' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 290 [1/1] (0.00ns) (grouped into LUT with out node add_ln65_16)   --->   "%and_ln65_15 = and i64 %mul_ln65_13, i64 %select_ln65_13" [d2.cpp:65]   --->   Operation 290 'and' 'and_ln65_15' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 291 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_16)   --->   "%select_ln65_14 = select i1 %and_ln59_5, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 291 'select' 'select_ln65_14' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 292 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln65_16 = and i64 %mul_ln65_14, i64 %select_ln65_14" [d2.cpp:65]   --->   Operation 292 'and' 'and_ln65_16' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 293 [1/1] (0.00ns) (grouped into LUT with out node add_ln65_16)   --->   "%and_ln65_17 = and i64 %mul_ln65_15, i64 %select_ln65_2" [d2.cpp:65]   --->   Operation 293 'and' 'and_ln65_17' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 294 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln65_16 = add i64 %and_ln65_17, i64 %and_ln65_15" [d2.cpp:65]   --->   Operation 294 'add' 'add_ln65_16' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 295 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln65_17 = add i64 %add_ln65_16, i64 %and_ln65_16" [d2.cpp:65]   --->   Operation 295 'add' 'add_ln65_17' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 296 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%arr_37 = add i64 %arr_21_load_1, i64 %add_ln65_17" [d2.cpp:65]   --->   Operation 296 'add' 'arr_37' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 297 [1/1] (0.48ns)   --->   "%tmp_17 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln63_2" [d2.cpp:59]   --->   Operation 297 'mux' 'tmp_17' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 298 [1/1] (0.00ns)   --->   "%zext_ln59_6 = zext i32 %tmp_17" [d2.cpp:59]   --->   Operation 298 'zext' 'zext_ln59_6' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 299 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_19)   --->   "%and_ln59_6 = and i1 %icmp_ln59_5, i1 %cmp69" [d2.cpp:59]   --->   Operation 299 'and' 'and_ln59_6' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 300 [1/1] (0.48ns)   --->   "%tmp_18 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln65_2" [d2.cpp:63]   --->   Operation 300 'mux' 'tmp_18' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 301 [1/1] (0.00ns)   --->   "%zext_ln63_6 = zext i32 %tmp_18" [d2.cpp:63]   --->   Operation 301 'zext' 'zext_ln63_6' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 302 [1/1] (0.48ns)   --->   "%tmp_19 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln36_8" [d2.cpp:65]   --->   Operation 302 'mux' 'tmp_19' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 303 [1/1] (0.00ns)   --->   "%zext_ln65_5 = zext i32 %tmp_19" [d2.cpp:65]   --->   Operation 303 'zext' 'zext_ln65_5' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 304 '%mul_ln65_16 = mul i64 %zext_ln65_5, i64 %zext_ln59'
ST_3 : Operation 304 [1/1] (2.10ns)   --->   "%mul_ln65_16 = mul i64 %zext_ln65_5, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 304 'mul' 'mul_ln65_16' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 305 '%mul_ln65_17 = mul i64 %zext_ln59_6, i64 %zext_ln59'
ST_3 : Operation 305 [1/1] (2.10ns)   --->   "%mul_ln65_17 = mul i64 %zext_ln59_6, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 305 'mul' 'mul_ln65_17' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 306 '%mul_ln65_18 = mul i64 %zext_ln63_6, i64 %zext_ln59'
ST_3 : Operation 306 [1/1] (2.10ns)   --->   "%mul_ln65_18 = mul i64 %zext_ln63_6, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 306 'mul' 'mul_ln65_18' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 307 [1/1] (0.00ns) (grouped into LUT with out node add_ln65_19)   --->   "%select_ln65_15 = select i1 %icmp_ln59_5, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 307 'select' 'select_ln65_15' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 308 [1/1] (0.00ns) (grouped into LUT with out node add_ln65_19)   --->   "%and_ln65_18 = and i64 %mul_ln65_16, i64 %select_ln65_15" [d2.cpp:65]   --->   Operation 308 'and' 'and_ln65_18' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 309 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_19)   --->   "%select_ln65_16 = select i1 %and_ln59_6, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 309 'select' 'select_ln65_16' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 310 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln65_19 = and i64 %mul_ln65_17, i64 %select_ln65_16" [d2.cpp:65]   --->   Operation 310 'and' 'and_ln65_19' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 311 [1/1] (0.00ns) (grouped into LUT with out node add_ln65_19)   --->   "%and_ln65_20 = and i64 %mul_ln65_18, i64 %select_ln65_2" [d2.cpp:65]   --->   Operation 311 'and' 'and_ln65_20' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 312 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln65_19 = add i64 %and_ln65_20, i64 %and_ln65_18" [d2.cpp:65]   --->   Operation 312 'add' 'add_ln65_19' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 313 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln65_20 = add i64 %add_ln65_19, i64 %and_ln65_19" [d2.cpp:65]   --->   Operation 313 'add' 'add_ln65_20' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 314 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%arr_38 = add i64 %arr_22_load_1, i64 %add_ln65_20" [d2.cpp:65]   --->   Operation 314 'add' 'arr_38' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 315 [1/1] (0.48ns)   --->   "%tmp_20 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln36_9" [d2.cpp:65]   --->   Operation 315 'mux' 'tmp_20' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 316 [1/1] (0.00ns)   --->   "%zext_ln65_6 = zext i32 %tmp_20" [d2.cpp:65]   --->   Operation 316 'zext' 'zext_ln65_6' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 317 '%mul_ln65_19 = mul i64 %zext_ln65_6, i64 %zext_ln59'
ST_3 : Operation 317 [1/1] (2.10ns)   --->   "%mul_ln65_19 = mul i64 %zext_ln65_6, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 317 'mul' 'mul_ln65_19' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 318 [1/1] (0.00ns) (grouped into LUT with out node arr_39)   --->   "%select_ln65_17 = select i1 %icmp_ln65, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 318 'select' 'select_ln65_17' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 319 [1/1] (0.00ns) (grouped into LUT with out node arr_39)   --->   "%and_ln65_21 = and i64 %mul_ln65_19, i64 %select_ln65_17" [d2.cpp:65]   --->   Operation 319 'and' 'and_ln65_21' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 320 [1/1] (1.08ns) (out node of the LUT)   --->   "%arr_39 = add i64 %and_ln65_21, i64 %arr_23_load_1" [d2.cpp:65]   --->   Operation 320 'add' 'arr_39' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 321 [1/1] (0.00ns) (grouped into LUT with out node sub_ln65_8)   --->   "%select_ln65_18 = select i1 %and_ln61, i3 6, i3 7" [d2.cpp:65]   --->   Operation 321 'select' 'select_ln65_18' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 322 [1/1] (0.48ns)   --->   "%tmp_21 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln36_3" [d2.cpp:65]   --->   Operation 322 'mux' 'tmp_21' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 323 [1/1] (0.00ns)   --->   "%zext_ln65_7 = zext i32 %tmp_21" [d2.cpp:65]   --->   Operation 323 'zext' 'zext_ln65_7' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 324 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_22)   --->   "%select_ln65_19 = select i1 %and_ln61, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 324 'select' 'select_ln65_19' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 325 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln65_22 = and i64 %mul_ln59, i64 %select_ln65_19" [d2.cpp:65]   --->   Operation 325 'and' 'and_ln65_22' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 326 '%mul_ln65_20 = mul i64 %zext_ln65_7, i64 %zext_ln59'
ST_3 : Operation 326 [1/1] (2.10ns)   --->   "%mul_ln65_20 = mul i64 %zext_ln65_7, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 326 'mul' 'mul_ln65_20' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 327 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_23)   --->   "%select_ln65_20 = select i1 %icmp_ln65_1, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 327 'select' 'select_ln65_20' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 328 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln65_23 = and i64 %mul_ln65_20, i64 %select_ln65_20" [d2.cpp:65]   --->   Operation 328 'and' 'and_ln65_23' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 329 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln65_23 = add i64 %and_ln65_23, i64 %and_ln65_22" [d2.cpp:65]   --->   Operation 329 'add' 'add_ln65_23' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 330 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%arr_40 = add i64 %arr_24_load_1, i64 %add_ln65_23" [d2.cpp:65]   --->   Operation 330 'add' 'arr_40' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 331 [1/1] (0.00ns)   --->   "%zext_ln66_6 = zext i1 %icmp_ln65_1" [d2.cpp:66]   --->   Operation 331 'zext' 'zext_ln66_6' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 332 [1/1] (0.79ns)   --->   "%sub_ln36_4 = sub i4 %sub_ln36_3, i4 %zext_ln66_6" [d2.cpp:36]   --->   Operation 332 'sub' 'sub_ln36_4' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 333 [1/1] (0.44ns)   --->   "%select_ln61 = select i1 %and_ln61, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read" [d2.cpp:61]   --->   Operation 333 'select' 'select_ln61' <Predicate = true> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 334 [1/1] (0.00ns)   --->   "%zext_ln61 = zext i32 %select_ln61" [d2.cpp:61]   --->   Operation 334 'zext' 'zext_ln61' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 335 [1/1] (0.28ns)   --->   "%and_ln61_1 = and i1 %icmp_ln61_1, i1 %cmp69" [d2.cpp:61]   --->   Operation 335 'and' 'and_ln61_1' <Predicate = true> <Delay = 0.28> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 336 [1/1] (0.00ns) (grouped into LUT with out node sub_ln65_8)   --->   "%zext_ln65_14 = zext i1 %and_ln61_1" [d2.cpp:65]   --->   Operation 336 'zext' 'zext_ln65_14' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 337 [1/1] (0.54ns) (out node of the LUT)   --->   "%sub_ln65_8 = sub i3 %select_ln65_18, i3 %zext_ln65_14" [d2.cpp:65]   --->   Operation 337 'sub' 'sub_ln65_8' <Predicate = true> <Delay = 0.54> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 338 [1/1] (0.00ns)   --->   "%sext_ln65 = sext i3 %sub_ln65_8" [d2.cpp:65]   --->   Operation 338 'sext' 'sext_ln65' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 339 [1/1] (0.48ns)   --->   "%tmp_22 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln36_4" [d2.cpp:65]   --->   Operation 339 'mux' 'tmp_22' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 340 [1/1] (0.00ns)   --->   "%zext_ln65_8 = zext i32 %tmp_22" [d2.cpp:65]   --->   Operation 340 'zext' 'zext_ln65_8' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 341 '%mul_ln65_21 = mul i64 %zext_ln61, i64 %zext_ln59'
ST_3 : Operation 341 [1/1] (2.10ns)   --->   "%mul_ln65_21 = mul i64 %zext_ln61, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 341 'mul' 'mul_ln65_21' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 342 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_24)   --->   "%select_ln65_21 = select i1 %and_ln61_1, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 342 'select' 'select_ln65_21' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 343 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln65_24 = and i64 %mul_ln65_21, i64 %select_ln65_21" [d2.cpp:65]   --->   Operation 343 'and' 'and_ln65_24' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 344 '%mul_ln65_22 = mul i64 %zext_ln65_8, i64 %zext_ln59'
ST_3 : Operation 344 [1/1] (2.10ns)   --->   "%mul_ln65_22 = mul i64 %zext_ln65_8, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 344 'mul' 'mul_ln65_22' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 345 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_25)   --->   "%select_ln65_22 = select i1 %icmp_ln65_2, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 345 'select' 'select_ln65_22' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 346 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln65_25 = and i64 %mul_ln65_22, i64 %select_ln65_22" [d2.cpp:65]   --->   Operation 346 'and' 'and_ln65_25' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 347 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln65_25 = add i64 %and_ln65_25, i64 %and_ln65_24" [d2.cpp:65]   --->   Operation 347 'add' 'add_ln65_25' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 348 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%arr_41 = add i64 %arr_25_load_1, i64 %add_ln65_25" [d2.cpp:65]   --->   Operation 348 'add' 'arr_41' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 349 [1/1] (0.00ns)   --->   "%zext_ln66_7 = zext i1 %icmp_ln65_2" [d2.cpp:66]   --->   Operation 349 'zext' 'zext_ln66_7' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 350 [1/1] (0.79ns)   --->   "%sub_ln36_5 = sub i4 %sub_ln36_4, i4 %zext_ln66_7" [d2.cpp:36]   --->   Operation 350 'sub' 'sub_ln36_5' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 351 [1/1] (0.48ns)   --->   "%tmp_23 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sext_ln65" [d2.cpp:61]   --->   Operation 351 'mux' 'tmp_23' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 352 [1/1] (0.00ns)   --->   "%zext_ln61_1 = zext i32 %tmp_23" [d2.cpp:61]   --->   Operation 352 'zext' 'zext_ln61_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 353 [1/1] (0.28ns)   --->   "%and_ln61_2 = and i1 %icmp_ln61_2, i1 %cmp69" [d2.cpp:61]   --->   Operation 353 'and' 'and_ln61_2' <Predicate = true> <Delay = 0.28> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 354 [1/1] (0.00ns)   --->   "%zext_ln65_15 = zext i1 %and_ln61_2" [d2.cpp:65]   --->   Operation 354 'zext' 'zext_ln65_15' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 355 [1/1] (0.67ns)   --->   "%sub_ln65_9 = sub i3 %sub_ln65_8, i3 %zext_ln65_15" [d2.cpp:65]   --->   Operation 355 'sub' 'sub_ln65_9' <Predicate = true> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 356 [1/1] (0.00ns)   --->   "%sext_ln65_1 = sext i3 %sub_ln65_9" [d2.cpp:65]   --->   Operation 356 'sext' 'sext_ln65_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 357 [1/1] (0.48ns)   --->   "%tmp_24 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln36_5" [d2.cpp:65]   --->   Operation 357 'mux' 'tmp_24' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 358 [1/1] (0.00ns)   --->   "%zext_ln65_9 = zext i32 %tmp_24" [d2.cpp:65]   --->   Operation 358 'zext' 'zext_ln65_9' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 359 '%mul_ln65_23 = mul i64 %zext_ln61_1, i64 %zext_ln59'
ST_3 : Operation 359 [1/1] (2.10ns)   --->   "%mul_ln65_23 = mul i64 %zext_ln61_1, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 359 'mul' 'mul_ln65_23' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 360 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_26)   --->   "%select_ln65_23 = select i1 %and_ln61_2, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 360 'select' 'select_ln65_23' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 361 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln65_26 = and i64 %mul_ln65_23, i64 %select_ln65_23" [d2.cpp:65]   --->   Operation 361 'and' 'and_ln65_26' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 362 '%mul_ln65_24 = mul i64 %zext_ln65_9, i64 %zext_ln59'
ST_3 : Operation 362 [1/1] (2.10ns)   --->   "%mul_ln65_24 = mul i64 %zext_ln65_9, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 362 'mul' 'mul_ln65_24' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 363 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_27)   --->   "%select_ln65_24 = select i1 %icmp_ln65_3, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 363 'select' 'select_ln65_24' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 364 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln65_27 = and i64 %mul_ln65_24, i64 %select_ln65_24" [d2.cpp:65]   --->   Operation 364 'and' 'and_ln65_27' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 365 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln65_27 = add i64 %and_ln65_27, i64 %and_ln65_26" [d2.cpp:65]   --->   Operation 365 'add' 'add_ln65_27' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 366 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%arr_42 = add i64 %arr_26_load_1, i64 %add_ln65_27" [d2.cpp:65]   --->   Operation 366 'add' 'arr_42' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 367 [1/1] (0.00ns)   --->   "%zext_ln66_8 = zext i1 %icmp_ln65_3" [d2.cpp:66]   --->   Operation 367 'zext' 'zext_ln66_8' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 368 [1/1] (0.79ns)   --->   "%sub_ln36_6 = sub i4 %sub_ln36_5, i4 %zext_ln66_8" [d2.cpp:36]   --->   Operation 368 'sub' 'sub_ln36_6' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 369 [1/1] (0.00ns)   --->   "%zext_ln62 = zext i1 %and_ln61_3" [d2.cpp:62]   --->   Operation 369 'zext' 'zext_ln62' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 370 [1/1] (0.67ns)   --->   "%sub_ln65_3 = sub i4 %sext_ln65_1, i4 %zext_ln62" [d2.cpp:65]   --->   Operation 370 'sub' 'sub_ln65_3' <Predicate = true> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 371 [1/1] (0.00ns)   --->   "%zext_ln66_9 = zext i1 %icmp_ln65_4" [d2.cpp:66]   --->   Operation 371 'zext' 'zext_ln66_9' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 372 [1/1] (0.79ns)   --->   "%sub_ln36 = sub i4 %sub_ln36_6, i4 %zext_ln66_9" [d2.cpp:36]   --->   Operation 372 'sub' 'sub_ln36' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 373 [1/1] (0.28ns)   --->   "%and_ln61_4 = and i1 %icmp_ln61_4, i1 %cmp69" [d2.cpp:61]   --->   Operation 373 'and' 'and_ln61_4' <Predicate = true> <Delay = 0.28> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 374 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr, i64 %arr_31" [d2.cpp:42]   --->   Operation 374 'store' 'store_ln42' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 375 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr_42, i64 %arr_26" [d2.cpp:42]   --->   Operation 375 'store' 'store_ln42' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 376 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr_41, i64 %arr_25" [d2.cpp:42]   --->   Operation 376 'store' 'store_ln42' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 377 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr_40, i64 %arr_24" [d2.cpp:42]   --->   Operation 377 'store' 'store_ln42' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 378 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr_39, i64 %arr_23" [d2.cpp:42]   --->   Operation 378 'store' 'store_ln42' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 379 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr_38, i64 %arr_22" [d2.cpp:42]   --->   Operation 379 'store' 'store_ln42' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 380 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr_37, i64 %arr_21" [d2.cpp:42]   --->   Operation 380 'store' 'store_ln42' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 381 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr_36, i64 %arr_20" [d2.cpp:42]   --->   Operation 381 'store' 'store_ln42' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 382 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr_35, i64 %arr_19" [d2.cpp:42]   --->   Operation 382 'store' 'store_ln42' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 383 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr_34, i64 %arr_18" [d2.cpp:42]   --->   Operation 383 'store' 'store_ln42' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 384 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr_33, i64 %arr_17" [d2.cpp:42]   --->   Operation 384 'store' 'store_ln42' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 385 [1/1] (0.42ns)   --->   "%store_ln42 = store i32 %k1_2, i32 %k1" [d2.cpp:42]   --->   Operation 385 'store' 'store_ln42' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 386 [1/1] (0.42ns)   --->   "%store_ln42 = store i32 %k_2, i32 %k_s" [d2.cpp:42]   --->   Operation 386 'store' 'store_ln42' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 455 [1/1] (0.00ns)   --->   "%arr_16_load = load i64 %arr_16"   --->   Operation 455 'load' 'arr_16_load' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 456 [1/1] (0.00ns)   --->   "%arr_17_load = load i64 %arr_17"   --->   Operation 456 'load' 'arr_17_load' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 457 [1/1] (0.00ns)   --->   "%arr_18_load = load i64 %arr_18"   --->   Operation 457 'load' 'arr_18_load' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 458 [1/1] (0.00ns)   --->   "%arr_19_load = load i64 %arr_19"   --->   Operation 458 'load' 'arr_19_load' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 459 [1/1] (0.00ns)   --->   "%arr_20_load = load i64 %arr_20"   --->   Operation 459 'load' 'arr_20_load' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 460 [1/1] (0.00ns)   --->   "%arr_21_load = load i64 %arr_21"   --->   Operation 460 'load' 'arr_21_load' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 461 [1/1] (0.00ns)   --->   "%arr_22_load = load i64 %arr_22"   --->   Operation 461 'load' 'arr_22_load' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 462 [1/1] (0.00ns)   --->   "%arr_23_load = load i64 %arr_23"   --->   Operation 462 'load' 'arr_23_load' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 463 [1/1] (0.00ns)   --->   "%arr_24_load = load i64 %arr_24"   --->   Operation 463 'load' 'arr_24_load' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 464 [1/1] (0.00ns)   --->   "%arr_25_load = load i64 %arr_25"   --->   Operation 464 'load' 'arr_25_load' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 465 [1/1] (0.00ns)   --->   "%arr_26_load = load i64 %arr_26"   --->   Operation 465 'load' 'arr_26_load' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 466 [1/1] (0.00ns)   --->   "%arr_27_load = load i64 %arr_27"   --->   Operation 466 'load' 'arr_27_load' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 467 [1/1] (0.00ns)   --->   "%arr_28_load = load i64 %arr_28"   --->   Operation 467 'load' 'arr_28_load' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 468 [1/1] (0.00ns)   --->   "%arr_29_load = load i64 %arr_29"   --->   Operation 468 'load' 'arr_29_load' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 469 [1/1] (0.00ns)   --->   "%arr_30_load = load i64 %arr_30"   --->   Operation 469 'load' 'arr_30_load' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 470 [1/1] (0.00ns)   --->   "%arr_31_load = load i64 %arr_31"   --->   Operation 470 'load' 'arr_31_load' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 471 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add44271_out, i64 %arr_31_load"   --->   Operation 471 'write' 'write_ln0' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 472 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add75_4_2269_out, i64 %arr_30_load"   --->   Operation 472 'write' 'write_ln0' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 473 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add75_4_1268_out, i64 %arr_29_load"   --->   Operation 473 'write' 'write_ln0' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 474 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add75_4267_out, i64 %arr_28_load"   --->   Operation 474 'write' 'write_ln0' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 475 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add75_3_2266_out, i64 %arr_27_load"   --->   Operation 475 'write' 'write_ln0' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 476 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add75_3_1265_out, i64 %arr_26_load"   --->   Operation 476 'write' 'write_ln0' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 477 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add75_3264_out, i64 %arr_25_load"   --->   Operation 477 'write' 'write_ln0' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 478 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add75_2_2263_out, i64 %arr_24_load"   --->   Operation 478 'write' 'write_ln0' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 479 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add75_2_1262_out, i64 %arr_23_load"   --->   Operation 479 'write' 'write_ln0' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 480 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add75_2261_out, i64 %arr_22_load"   --->   Operation 480 'write' 'write_ln0' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 481 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add75_1_2260_out, i64 %arr_21_load"   --->   Operation 481 'write' 'write_ln0' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 482 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add75_1_1259_out, i64 %arr_20_load"   --->   Operation 482 'write' 'write_ln0' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 483 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add75_1258_out, i64 %arr_19_load"   --->   Operation 483 'write' 'write_ln0' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 484 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add75_2171257_out, i64 %arr_18_load"   --->   Operation 484 'write' 'write_ln0' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 485 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add75_1104256_out, i64 %arr_17_load"   --->   Operation 485 'write' 'write_ln0' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 486 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add75255_out, i64 %arr_16_load"   --->   Operation 486 'write' 'write_ln0' <Predicate = (icmp_ln42)> <Delay = 0.00>
ST_3 : Operation 487 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 487 'ret' 'ret_ln0' <Predicate = (icmp_ln42)> <Delay = 0.00>

State 4 <SV = 3> <Delay = 7.12>
ST_4 : Operation 387 [1/1] (0.00ns)   --->   "%arr_27_load_1 = load i64 %arr_27" [d2.cpp:65]   --->   Operation 387 'load' 'arr_27_load_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 388 [1/1] (0.00ns)   --->   "%arr_28_load_1 = load i64 %arr_28" [d2.cpp:65]   --->   Operation 388 'load' 'arr_28_load_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 389 [1/1] (0.00ns)   --->   "%arr_29_load_1 = load i64 %arr_29" [d2.cpp:65]   --->   Operation 389 'load' 'arr_29_load_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 390 [1/1] (0.00ns)   --->   "%arr_30_load_1 = load i64 %arr_30" [d2.cpp:65]   --->   Operation 390 'load' 'arr_30_load_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 391 [1/1] (0.00ns)   --->   "%specpipeline_ln44 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty_2" [d2.cpp:44]   --->   Operation 391 'specpipeline' 'specpipeline_ln44' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 392 [1/1] (0.00ns)   --->   "%speclooptripcount_ln42 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 15, i64 15, i64 15" [d2.cpp:42]   --->   Operation 392 'speclooptripcount' 'speclooptripcount_ln42' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 393 [1/1] (0.00ns)   --->   "%specloopname_ln42 = specloopname void @_ssdm_op_SpecLoopName, void @empty_9" [d2.cpp:42]   --->   Operation 393 'specloopname' 'specloopname_ln42' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 394 [1/1] (0.48ns)   --->   "%tmp_25 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sext_ln65_1" [d2.cpp:61]   --->   Operation 394 'mux' 'tmp_25' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 395 [1/1] (0.00ns)   --->   "%zext_ln61_2 = zext i32 %tmp_25" [d2.cpp:61]   --->   Operation 395 'zext' 'zext_ln61_2' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 396 [1/1] (0.48ns)   --->   "%tmp_26 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln36_6" [d2.cpp:65]   --->   Operation 396 'mux' 'tmp_26' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 397 [1/1] (0.00ns)   --->   "%zext_ln65_10 = zext i32 %tmp_26" [d2.cpp:65]   --->   Operation 397 'zext' 'zext_ln65_10' <Predicate = true> <Delay = 0.00>
ST_4 : [1/1] (1.31ns)   --->   Input mux for Operation 398 '%mul_ln65_25 = mul i64 %zext_ln61_2, i64 %zext_ln59'
ST_4 : Operation 398 [1/1] (2.10ns)   --->   "%mul_ln65_25 = mul i64 %zext_ln61_2, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 398 'mul' 'mul_ln65_25' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 399 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_28)   --->   "%select_ln65_25 = select i1 %and_ln61_3, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 399 'select' 'select_ln65_25' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 400 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln65_28 = and i64 %mul_ln65_25, i64 %select_ln65_25" [d2.cpp:65]   --->   Operation 400 'and' 'and_ln65_28' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : [1/1] (1.31ns)   --->   Input mux for Operation 401 '%mul_ln65_26 = mul i64 %zext_ln65_10, i64 %zext_ln59'
ST_4 : Operation 401 [1/1] (2.10ns)   --->   "%mul_ln65_26 = mul i64 %zext_ln65_10, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 401 'mul' 'mul_ln65_26' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 402 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_29)   --->   "%select_ln65_26 = select i1 %icmp_ln65_4, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 402 'select' 'select_ln65_26' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 403 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln65_29 = and i64 %mul_ln65_26, i64 %select_ln65_26" [d2.cpp:65]   --->   Operation 403 'and' 'and_ln65_29' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 404 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln65_29 = add i64 %and_ln65_29, i64 %and_ln65_28" [d2.cpp:65]   --->   Operation 404 'add' 'add_ln65_29' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 405 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%arr_43 = add i64 %arr_27_load_1, i64 %add_ln65_29" [d2.cpp:65]   --->   Operation 405 'add' 'arr_43' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 406 [1/1] (0.48ns)   --->   "%tmp_27 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln65_3" [d2.cpp:61]   --->   Operation 406 'mux' 'tmp_27' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 407 [1/1] (0.00ns)   --->   "%zext_ln61_3 = zext i32 %tmp_27" [d2.cpp:61]   --->   Operation 407 'zext' 'zext_ln61_3' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 408 [1/1] (0.00ns)   --->   "%zext_ln62_1 = zext i1 %and_ln61_4" [d2.cpp:62]   --->   Operation 408 'zext' 'zext_ln62_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 409 [1/1] (0.79ns)   --->   "%sub_ln65_4 = sub i4 %sub_ln65_3, i4 %zext_ln62_1" [d2.cpp:65]   --->   Operation 409 'sub' 'sub_ln65_4' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 410 [1/1] (0.48ns)   --->   "%tmp_28 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln36" [d2.cpp:65]   --->   Operation 410 'mux' 'tmp_28' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 411 [1/1] (0.00ns)   --->   "%zext_ln65_11 = zext i32 %tmp_28" [d2.cpp:65]   --->   Operation 411 'zext' 'zext_ln65_11' <Predicate = true> <Delay = 0.00>
ST_4 : [1/1] (1.31ns)   --->   Input mux for Operation 412 '%mul_ln65_27 = mul i64 %zext_ln61_3, i64 %zext_ln59'
ST_4 : Operation 412 [1/1] (2.10ns)   --->   "%mul_ln65_27 = mul i64 %zext_ln61_3, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 412 'mul' 'mul_ln65_27' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 413 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_30)   --->   "%select_ln65_27 = select i1 %and_ln61_4, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 413 'select' 'select_ln65_27' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 414 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln65_30 = and i64 %mul_ln65_27, i64 %select_ln65_27" [d2.cpp:65]   --->   Operation 414 'and' 'and_ln65_30' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : [1/1] (1.31ns)   --->   Input mux for Operation 415 '%mul_ln65_28 = mul i64 %zext_ln65_11, i64 %zext_ln59'
ST_4 : Operation 415 [1/1] (2.10ns)   --->   "%mul_ln65_28 = mul i64 %zext_ln65_11, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 415 'mul' 'mul_ln65_28' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 416 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_31)   --->   "%select_ln65_28 = select i1 %icmp_ln65_5, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 416 'select' 'select_ln65_28' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 417 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln65_31 = and i64 %mul_ln65_28, i64 %select_ln65_28" [d2.cpp:65]   --->   Operation 417 'and' 'and_ln65_31' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 418 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln65_31 = add i64 %and_ln65_31, i64 %and_ln65_30" [d2.cpp:65]   --->   Operation 418 'add' 'add_ln65_31' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 419 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%arr_44 = add i64 %arr_28_load_1, i64 %add_ln65_31" [d2.cpp:65]   --->   Operation 419 'add' 'arr_44' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 420 [1/1] (0.00ns)   --->   "%zext_ln66_10 = zext i1 %icmp_ln65_5" [d2.cpp:66]   --->   Operation 420 'zext' 'zext_ln66_10' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 421 [1/1] (0.79ns)   --->   "%sub_ln36_1 = sub i4 %sub_ln36, i4 %zext_ln66_10" [d2.cpp:36]   --->   Operation 421 'sub' 'sub_ln36_1' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 422 [1/1] (0.48ns)   --->   "%tmp_29 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln65_4" [d2.cpp:61]   --->   Operation 422 'mux' 'tmp_29' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 423 [1/1] (0.00ns)   --->   "%zext_ln61_4 = zext i32 %tmp_29" [d2.cpp:61]   --->   Operation 423 'zext' 'zext_ln61_4' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 424 [1/1] (0.28ns)   --->   "%and_ln61_5 = and i1 %icmp_ln61_5, i1 %cmp69" [d2.cpp:61]   --->   Operation 424 'and' 'and_ln61_5' <Predicate = true> <Delay = 0.28> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 425 [1/1] (0.00ns)   --->   "%zext_ln62_2 = zext i1 %and_ln61_5" [d2.cpp:62]   --->   Operation 425 'zext' 'zext_ln62_2' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 426 [1/1] (0.79ns)   --->   "%sub_ln65_5 = sub i4 %sub_ln65_4, i4 %zext_ln62_2" [d2.cpp:65]   --->   Operation 426 'sub' 'sub_ln65_5' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 427 [1/1] (0.48ns)   --->   "%tmp_30 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln36_1" [d2.cpp:65]   --->   Operation 427 'mux' 'tmp_30' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 428 [1/1] (0.00ns)   --->   "%zext_ln65_12 = zext i32 %tmp_30" [d2.cpp:65]   --->   Operation 428 'zext' 'zext_ln65_12' <Predicate = true> <Delay = 0.00>
ST_4 : [1/1] (1.31ns)   --->   Input mux for Operation 429 '%mul_ln65_29 = mul i64 %zext_ln61_4, i64 %zext_ln59'
ST_4 : Operation 429 [1/1] (2.10ns)   --->   "%mul_ln65_29 = mul i64 %zext_ln61_4, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 429 'mul' 'mul_ln65_29' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 430 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_32)   --->   "%select_ln65_29 = select i1 %and_ln61_5, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 430 'select' 'select_ln65_29' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 431 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln65_32 = and i64 %mul_ln65_29, i64 %select_ln65_29" [d2.cpp:65]   --->   Operation 431 'and' 'and_ln65_32' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : [1/1] (1.31ns)   --->   Input mux for Operation 432 '%mul_ln65_30 = mul i64 %zext_ln65_12, i64 %zext_ln59'
ST_4 : Operation 432 [1/1] (2.10ns)   --->   "%mul_ln65_30 = mul i64 %zext_ln65_12, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 432 'mul' 'mul_ln65_30' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 433 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_33)   --->   "%select_ln65_30 = select i1 %icmp_ln65_6, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 433 'select' 'select_ln65_30' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 434 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln65_33 = and i64 %mul_ln65_30, i64 %select_ln65_30" [d2.cpp:65]   --->   Operation 434 'and' 'and_ln65_33' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 435 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln65_33 = add i64 %and_ln65_33, i64 %and_ln65_32" [d2.cpp:65]   --->   Operation 435 'add' 'add_ln65_33' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 436 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%arr_45 = add i64 %arr_29_load_1, i64 %add_ln65_33" [d2.cpp:65]   --->   Operation 436 'add' 'arr_45' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 437 [1/1] (0.00ns)   --->   "%zext_ln66_11 = zext i1 %icmp_ln65_6" [d2.cpp:66]   --->   Operation 437 'zext' 'zext_ln66_11' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 438 [1/1] (0.79ns)   --->   "%sub_ln36_2 = sub i4 %sub_ln36_1, i4 %zext_ln66_11" [d2.cpp:36]   --->   Operation 438 'sub' 'sub_ln36_2' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 439 [1/1] (0.48ns)   --->   "%tmp_31 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln65_5" [d2.cpp:61]   --->   Operation 439 'mux' 'tmp_31' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 440 [1/1] (0.00ns)   --->   "%zext_ln61_5 = zext i32 %tmp_31" [d2.cpp:61]   --->   Operation 440 'zext' 'zext_ln61_5' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 441 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_34)   --->   "%and_ln61_6 = and i1 %icmp_ln61_6, i1 %cmp69" [d2.cpp:61]   --->   Operation 441 'and' 'and_ln61_6' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 442 [1/1] (0.48ns)   --->   "%tmp_32 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln36_2" [d2.cpp:65]   --->   Operation 442 'mux' 'tmp_32' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 443 [1/1] (0.00ns)   --->   "%zext_ln65_13 = zext i32 %tmp_32" [d2.cpp:65]   --->   Operation 443 'zext' 'zext_ln65_13' <Predicate = true> <Delay = 0.00>
ST_4 : [1/1] (1.31ns)   --->   Input mux for Operation 444 '%mul_ln65_31 = mul i64 %zext_ln61_5, i64 %zext_ln59'
ST_4 : Operation 444 [1/1] (2.10ns)   --->   "%mul_ln65_31 = mul i64 %zext_ln61_5, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 444 'mul' 'mul_ln65_31' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 445 [1/1] (0.00ns) (grouped into LUT with out node and_ln65_34)   --->   "%select_ln65_31 = select i1 %and_ln61_6, i64 18446744073709551615, i64 0" [d2.cpp:65]   --->   Operation 445 'select' 'select_ln65_31' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 446 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln65_34 = and i64 %mul_ln65_31, i64 %select_ln65_31" [d2.cpp:65]   --->   Operation 446 'and' 'and_ln65_34' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : [1/1] (1.31ns)   --->   Input mux for Operation 447 '%mul_ln65_32 = mul i64 %zext_ln65_13, i64 %zext_ln59'
ST_4 : Operation 447 [1/1] (2.10ns)   --->   "%mul_ln65_32 = mul i64 %zext_ln65_13, i64 %zext_ln59" [d2.cpp:65]   --->   Operation 447 'mul' 'mul_ln65_32' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 448 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln65_35 = add i64 %mul_ln65_32, i64 %and_ln65_34" [d2.cpp:65]   --->   Operation 448 'add' 'add_ln65_35' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 449 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%arr_46 = add i64 %arr_30_load_1, i64 %add_ln65_35" [d2.cpp:65]   --->   Operation 449 'add' 'arr_46' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 450 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr_46, i64 %arr_30" [d2.cpp:42]   --->   Operation 450 'store' 'store_ln42' <Predicate = true> <Delay = 0.42>
ST_4 : Operation 451 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr_45, i64 %arr_29" [d2.cpp:42]   --->   Operation 451 'store' 'store_ln42' <Predicate = true> <Delay = 0.42>
ST_4 : Operation 452 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr_44, i64 %arr_28" [d2.cpp:42]   --->   Operation 452 'store' 'store_ln42' <Predicate = true> <Delay = 0.42>
ST_4 : Operation 453 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr_43, i64 %arr_27" [d2.cpp:42]   --->   Operation 453 'store' 'store_ln42' <Predicate = true> <Delay = 0.42>
ST_4 : Operation 454 [1/1] (0.00ns)   --->   "%br_ln42 = br void %for.body23" [d2.cpp:42]   --->   Operation 454 'br' 'br_ln42' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 0.427ns
The critical path consists of the following:
	'alloca' operation ('i') [68]  (0.000 ns)
	'store' operation ('store_ln0') of constant 15 on local variable 'i' [102]  (0.427 ns)

 <State 2>: 6.667ns
The critical path consists of the following:
	'load' operation ('i_load', d2.cpp:51) on local variable 'i' [147]  (0.000 ns)
	'add' operation ('empty', d2.cpp:42) [170]  (0.797 ns)
	'icmp' operation ('icmp_ln59', d2.cpp:59) [196]  (0.789 ns)
	'sub' operation ('k3', d2.cpp:36) [219]  (0.548 ns)
	'sub' operation ('k3', d2.cpp:66) [245]  (0.673 ns)
	'sub' operation ('sub_ln36_11', d2.cpp:36) [270]  (0.673 ns)
	'sub' operation ('sub_ln36_7', d2.cpp:36) [294]  (0.797 ns)
	'sub' operation ('sub_ln36_8', d2.cpp:36) [318]  (0.797 ns)
	'sub' operation ('sub_ln36_9', d2.cpp:36) [339]  (0.797 ns)
	'sub' operation ('sub_ln36_3', d2.cpp:36) [348]  (0.797 ns)

 <State 3>: 7.128ns
The critical path consists of the following:
	'sub' operation ('sub_ln36_4', d2.cpp:36) [365]  (0.797 ns)
	'sub' operation ('sub_ln36_5', d2.cpp:36) [385]  (0.797 ns)
	'mux' operation ('tmp_24', d2.cpp:65) [393]  (0.489 ns)
	multiplexor before operation 'mul' with delay (1.316 ns)
'mul' operation ('mul_ln65_24', d2.cpp:65) [399]  (2.104 ns)
	'and' operation ('and_ln65_27', d2.cpp:65) [401]  (0.379 ns)
	'add' operation ('add_ln65_27', d2.cpp:65) [402]  (0.000 ns)
	'add' operation ('arr', d2.cpp:65) [403]  (0.819 ns)
	'store' operation ('store_ln42', d2.cpp:42) of variable 'arr', d2.cpp:65 on local variable 'arr' [486]  (0.427 ns)

 <State 4>: 7.128ns
The critical path consists of the following:
	'sub' operation ('sub_ln65_4', d2.cpp:65) [431]  (0.797 ns)
	'sub' operation ('sub_ln65_5', d2.cpp:65) [451]  (0.797 ns)
	'mux' operation ('tmp_31', d2.cpp:61) [465]  (0.489 ns)
	multiplexor before operation 'mul' with delay (1.316 ns)
'mul' operation ('mul_ln65_31', d2.cpp:65) [472]  (2.104 ns)
	'and' operation ('and_ln65_34', d2.cpp:65) [474]  (0.379 ns)
	'add' operation ('add_ln65_35', d2.cpp:65) [476]  (0.000 ns)
	'add' operation ('arr', d2.cpp:65) [477]  (0.819 ns)
	'store' operation ('store_ln42', d2.cpp:42) of variable 'arr', d2.cpp:65 on local variable 'arr' [482]  (0.427 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
