// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_88_9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add169_1211_1371_reload,
        add169_1211370_reload,
        add169_4369_reload,
        add169_3368_reload,
        add169_2305367_reload,
        add169_1276366_reload,
        add169365_reload,
        arg1_r_9_reload,
        arg1_r_10_reload,
        arg1_r_11_reload,
        arg1_r_12_reload,
        arg1_r_13_reload,
        arg1_r_14_reload,
        arg2_r_reload,
        arg2_r_1_reload,
        arg2_r_2_reload,
        arg2_r_3_reload,
        arg2_r_4_reload,
        arg2_r_5_reload,
        arg2_r_15_reload,
        arg2_r_14_reload,
        arg2_r_13_reload,
        arg2_r_12_reload,
        arg2_r_11_reload,
        arg1_r_1_reload,
        arg1_r_2_reload,
        arg1_r_3_reload,
        arg1_r_4_reload,
        arg1_r_5_reload,
        arg1_r_6_reload,
        conv36,
        arg2_r_10_reload,
        add280_2_4364_out,
        add280_2_4364_out_ap_vld,
        add256_1359_out,
        add256_1359_out_ap_vld,
        add256_4356_out,
        add256_4356_out_ap_vld,
        add256_3353_out,
        add256_3353_out_ap_vld,
        add256_274350_out,
        add256_274350_out_ap_vld,
        add256_143347_out,
        add256_143347_out_ap_vld,
        add256344_out,
        add256344_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] add169_1211_1371_reload;
input  [63:0] add169_1211370_reload;
input  [63:0] add169_4369_reload;
input  [63:0] add169_3368_reload;
input  [63:0] add169_2305367_reload;
input  [63:0] add169_1276366_reload;
input  [63:0] add169365_reload;
input  [31:0] arg1_r_9_reload;
input  [31:0] arg1_r_10_reload;
input  [31:0] arg1_r_11_reload;
input  [31:0] arg1_r_12_reload;
input  [31:0] arg1_r_13_reload;
input  [31:0] arg1_r_14_reload;
input  [31:0] arg2_r_reload;
input  [31:0] arg2_r_1_reload;
input  [31:0] arg2_r_2_reload;
input  [31:0] arg2_r_3_reload;
input  [31:0] arg2_r_4_reload;
input  [31:0] arg2_r_5_reload;
input  [31:0] arg2_r_15_reload;
input  [31:0] arg2_r_14_reload;
input  [31:0] arg2_r_13_reload;
input  [31:0] arg2_r_12_reload;
input  [31:0] arg2_r_11_reload;
input  [31:0] arg1_r_1_reload;
input  [31:0] arg1_r_2_reload;
input  [31:0] arg1_r_3_reload;
input  [31:0] arg1_r_4_reload;
input  [31:0] arg1_r_5_reload;
input  [31:0] arg1_r_6_reload;
input  [31:0] conv36;
input  [31:0] arg2_r_10_reload;
output  [63:0] add280_2_4364_out;
output   add280_2_4364_out_ap_vld;
output  [63:0] add256_1359_out;
output   add256_1359_out_ap_vld;
output  [63:0] add256_4356_out;
output   add256_4356_out_ap_vld;
output  [63:0] add256_3353_out;
output   add256_3353_out_ap_vld;
output  [63:0] add256_274350_out;
output   add256_274350_out_ap_vld;
output  [63:0] add256_143347_out;
output   add256_143347_out_ap_vld;
output  [63:0] add256344_out;
output   add256344_out_ap_vld;

reg ap_idle;
reg add280_2_4364_out_ap_vld;
reg add256_1359_out_ap_vld;
reg add256_4356_out_ap_vld;
reg add256_3353_out_ap_vld;
reg add256_274350_out_ap_vld;
reg add256_143347_out_ap_vld;
reg add256344_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln88_fu_516_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] conv36_cast_fu_469_p1;
reg   [63:0] conv36_cast_reg_1610;
reg   [3:0] i_1_reg_1615;
wire   [63:0] mul_ln103_1_fu_425_p2;
reg   [63:0] mul_ln103_1_reg_1627;
wire   [63:0] mul_ln103_2_fu_429_p2;
reg   [63:0] mul_ln103_2_reg_1632;
wire   [63:0] mul_ln103_3_fu_433_p2;
reg   [63:0] mul_ln103_3_reg_1637;
wire   [63:0] mul_ln103_4_fu_437_p2;
reg   [63:0] mul_ln103_4_reg_1642;
wire   [63:0] mul_ln103_5_fu_441_p2;
reg   [63:0] mul_ln103_5_reg_1647;
wire   [31:0] tmp_7_fu_805_p17;
reg   [31:0] tmp_7_reg_1652;
wire   [0:0] icmp_ln106_fu_835_p2;
reg   [0:0] icmp_ln106_reg_1657;
wire   [0:0] icmp_ln106_1_fu_849_p2;
reg   [0:0] icmp_ln106_1_reg_1663;
wire  signed [2:0] sub_ln98_3_fu_859_p2;
reg  signed [2:0] sub_ln98_3_reg_1668;
wire   [0:0] icmp_ln106_2_fu_865_p2;
reg   [0:0] icmp_ln106_2_reg_1673;
wire   [2:0] sub_ln98_fu_875_p2;
reg   [2:0] sub_ln98_reg_1678;
wire   [0:0] icmp_ln106_3_fu_891_p2;
reg   [0:0] icmp_ln106_3_reg_1683;
wire   [0:0] icmp_ln106_4_fu_897_p2;
reg   [0:0] icmp_ln106_4_reg_1689;
reg   [63:0] add256344_fu_148;
wire   [63:0] add_ln103_fu_604_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [63:0] add256_143347_fu_152;
wire   [63:0] add_ln106_fu_1049_p2;
reg   [63:0] add256_274350_fu_156;
wire   [63:0] add_ln106_1_fu_1078_p2;
reg   [63:0] add256_3353_fu_160;
wire   [63:0] add_ln106_2_fu_1140_p2;
reg   [63:0] add256_4356_fu_164;
wire   [63:0] add_ln106_3_fu_1201_p2;
reg   [63:0] add256_1359_fu_168;
wire   [63:0] add_ln106_4_fu_1267_p2;
reg   [63:0] add280_2_4364_fu_172;
wire   [63:0] add_ln106_5_fu_1319_p2;
reg   [3:0] i_fu_176;
wire   [3:0] add_ln88_fu_903_p2;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] mul_ln103_fu_421_p0;
wire   [31:0] mul_ln103_fu_421_p1;
wire   [63:0] zext_ln103_fu_569_p1;
wire   [31:0] mul_ln103_1_fu_425_p0;
wire   [31:0] mul_ln103_1_fu_425_p1;
wire   [31:0] mul_ln103_2_fu_429_p0;
wire   [31:0] mul_ln103_2_fu_429_p1;
wire   [31:0] mul_ln103_3_fu_433_p0;
wire   [31:0] mul_ln103_3_fu_433_p1;
wire   [31:0] mul_ln103_4_fu_437_p0;
wire   [31:0] mul_ln103_4_fu_437_p1;
wire   [31:0] mul_ln103_5_fu_441_p0;
wire   [31:0] mul_ln103_5_fu_441_p1;
wire   [31:0] mul_ln106_fu_445_p0;
wire   [63:0] zext_ln106_fu_1027_p1;
wire   [31:0] mul_ln106_fu_445_p1;
wire   [31:0] mul_ln106_1_fu_449_p0;
wire   [31:0] mul_ln106_1_fu_449_p1;
wire   [31:0] mul_ln106_2_fu_453_p0;
wire   [31:0] mul_ln106_2_fu_453_p1;
wire   [31:0] mul_ln106_3_fu_457_p0;
wire   [31:0] mul_ln106_3_fu_457_p1;
wire   [31:0] mul_ln106_4_fu_461_p0;
wire   [31:0] mul_ln106_4_fu_461_p1;
wire   [31:0] mul_ln106_5_fu_465_p0;
wire   [31:0] mul_ln106_5_fu_465_p1;
wire   [3:0] empty_fu_529_p2;
wire   [31:0] tmp_s_fu_539_p17;
wire   [2:0] trunc_ln88_fu_525_p1;
wire   [2:0] tmp_1_fu_585_p8;
wire   [31:0] tmp_1_fu_585_p9;
wire   [63:0] mul_ln103_fu_421_p2;
wire   [2:0] tmp_2_fu_616_p7;
wire   [31:0] tmp_2_fu_616_p8;
wire   [3:0] tmp_3_fu_639_p17;
wire   [31:0] tmp_3_fu_639_p18;
wire   [3:0] tmp_4_fu_682_p17;
wire   [31:0] tmp_4_fu_682_p18;
wire   [3:0] tmp_5_fu_725_p17;
wire   [31:0] tmp_5_fu_725_p18;
wire   [3:0] tmp_6_fu_768_p17;
wire   [31:0] tmp_6_fu_768_p18;
wire   [2:0] trunc_ln103_fu_535_p1;
wire   [2:0] select_ln106_2_fu_841_p3;
wire   [2:0] zext_ln98_fu_855_p1;
wire   [2:0] zext_ln98_1_fu_871_p1;
wire   [1:0] tmp_fu_881_p4;
wire   [0:0] icmp_ln101_fu_937_p2;
wire   [63:0] add_ln103_1_fu_942_p2;
wire   [0:0] icmp_ln101_1_fu_955_p2;
wire   [63:0] add_ln103_2_fu_960_p2;
wire   [0:0] icmp_ln101_2_fu_973_p2;
wire   [63:0] add_ln103_3_fu_978_p2;
wire   [0:0] icmp_ln101_3_fu_991_p2;
wire   [63:0] add_ln103_4_fu_996_p2;
wire   [0:0] icmp_ln101_4_fu_1009_p2;
wire   [63:0] add_ln103_5_fu_1014_p2;
wire   [63:0] mul_ln106_fu_445_p2;
wire   [63:0] select_ln106_1_fu_1036_p3;
wire   [63:0] and_ln106_fu_1043_p2;
wire   [63:0] select_ln101_fu_947_p3;
wire   [31:0] select_ln106_fu_1055_p3;
wire   [63:0] mul_ln106_1_fu_449_p2;
wire   [63:0] select_ln106_3_fu_1065_p3;
wire   [63:0] and_ln106_1_fu_1072_p2;
wire   [63:0] select_ln101_1_fu_965_p3;
wire  signed [3:0] tmp_8_fu_1087_p17;
wire   [31:0] tmp_8_fu_1087_p18;
wire   [63:0] mul_ln106_2_fu_453_p2;
wire   [63:0] select_ln106_4_fu_1127_p3;
wire   [63:0] and_ln106_2_fu_1134_p2;
wire   [63:0] select_ln101_2_fu_983_p3;
wire  signed [3:0] sext_ln106_1_fu_1146_p1;
wire   [31:0] tmp_9_fu_1149_p18;
wire   [63:0] mul_ln106_3_fu_457_p2;
wire   [63:0] select_ln106_5_fu_1188_p3;
wire   [63:0] and_ln106_3_fu_1195_p2;
wire   [63:0] select_ln101_3_fu_1001_p3;
wire   [3:0] zext_ln107_fu_1207_p1;
wire   [3:0] sub_ln98_1_fu_1210_p2;
wire   [31:0] tmp_10_fu_1216_p18;
wire   [63:0] mul_ln106_4_fu_461_p2;
wire   [63:0] select_ln106_6_fu_1254_p3;
wire   [63:0] and_ln106_4_fu_1261_p2;
wire   [63:0] select_ln101_4_fu_1019_p3;
wire   [3:0] zext_ln107_1_fu_1273_p1;
wire   [3:0] tmp_11_fu_1282_p17;
wire   [31:0] tmp_11_fu_1282_p18;
wire   [63:0] mul_ln106_5_fu_465_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [63:0] mul_ln103_1_fu_425_p00;
wire   [63:0] mul_ln103_2_fu_429_p00;
wire   [63:0] mul_ln103_3_fu_433_p00;
wire   [63:0] mul_ln103_4_fu_437_p00;
wire   [63:0] mul_ln103_5_fu_441_p00;
wire   [63:0] mul_ln103_fu_421_p00;
wire   [63:0] mul_ln106_1_fu_449_p00;
wire   [63:0] mul_ln106_2_fu_453_p00;
wire   [63:0] mul_ln106_3_fu_457_p00;
wire   [63:0] mul_ln106_4_fu_461_p00;
wire   [63:0] mul_ln106_5_fu_465_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U289(
    .din0(mul_ln103_fu_421_p0),
    .din1(mul_ln103_fu_421_p1),
    .dout(mul_ln103_fu_421_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U290(
    .din0(mul_ln103_1_fu_425_p0),
    .din1(mul_ln103_1_fu_425_p1),
    .dout(mul_ln103_1_fu_425_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U291(
    .din0(mul_ln103_2_fu_429_p0),
    .din1(mul_ln103_2_fu_429_p1),
    .dout(mul_ln103_2_fu_429_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U292(
    .din0(mul_ln103_3_fu_433_p0),
    .din1(mul_ln103_3_fu_433_p1),
    .dout(mul_ln103_3_fu_433_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U293(
    .din0(mul_ln103_4_fu_437_p0),
    .din1(mul_ln103_4_fu_437_p1),
    .dout(mul_ln103_4_fu_437_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U294(
    .din0(mul_ln103_5_fu_441_p0),
    .din1(mul_ln103_5_fu_441_p1),
    .dout(mul_ln103_5_fu_441_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U295(
    .din0(mul_ln106_fu_445_p0),
    .din1(mul_ln106_fu_445_p1),
    .dout(mul_ln106_fu_445_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U296(
    .din0(mul_ln106_1_fu_449_p0),
    .din1(mul_ln106_1_fu_449_p1),
    .dout(mul_ln106_1_fu_449_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U297(
    .din0(mul_ln106_2_fu_453_p0),
    .din1(mul_ln106_2_fu_453_p1),
    .dout(mul_ln106_2_fu_453_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U298(
    .din0(mul_ln106_3_fu_457_p0),
    .din1(mul_ln106_3_fu_457_p1),
    .dout(mul_ln106_3_fu_457_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U299(
    .din0(mul_ln106_4_fu_461_p0),
    .din1(mul_ln106_4_fu_461_p1),
    .dout(mul_ln106_4_fu_461_p2)
);

test_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U300(
    .din0(mul_ln106_5_fu_465_p0),
    .din1(mul_ln106_5_fu_465_p1),
    .dout(mul_ln106_5_fu_465_p2)
);

test_mux_15_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_15_4_32_1_1_U301(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(arg1_r_9_reload),
    .din10(arg1_r_10_reload),
    .din11(arg1_r_11_reload),
    .din12(arg1_r_12_reload),
    .din13(arg1_r_13_reload),
    .din14(arg1_r_14_reload),
    .din15(i_fu_176),
    .dout(tmp_s_fu_539_p17)
);

test_mux_7_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_7_3_32_1_1_U302(
    .din0(32'd0),
    .din1(arg2_r_reload),
    .din2(arg2_r_1_reload),
    .din3(arg2_r_2_reload),
    .din4(arg2_r_3_reload),
    .din5(arg2_r_4_reload),
    .din6(arg2_r_5_reload),
    .din7(tmp_1_fu_585_p8),
    .dout(tmp_1_fu_585_p9)
);

test_mux_6_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_6_3_32_1_1_U303(
    .din0(arg2_r_15_reload),
    .din1(arg2_r_reload),
    .din2(arg2_r_1_reload),
    .din3(arg2_r_2_reload),
    .din4(arg2_r_3_reload),
    .din5(arg2_r_4_reload),
    .din6(tmp_2_fu_616_p7),
    .dout(tmp_2_fu_616_p8)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U304(
    .din0(arg2_r_15_reload),
    .din1(arg2_r_reload),
    .din2(arg2_r_1_reload),
    .din3(arg2_r_2_reload),
    .din4(arg2_r_3_reload),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(32'd0),
    .din13(32'd0),
    .din14(32'd0),
    .din15(arg2_r_14_reload),
    .din16(tmp_3_fu_639_p17),
    .dout(tmp_3_fu_639_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U305(
    .din0(arg2_r_15_reload),
    .din1(arg2_r_reload),
    .din2(arg2_r_1_reload),
    .din3(arg2_r_2_reload),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(32'd0),
    .din13(32'd0),
    .din14(arg2_r_13_reload),
    .din15(arg2_r_14_reload),
    .din16(tmp_4_fu_682_p17),
    .dout(tmp_4_fu_682_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U306(
    .din0(arg2_r_15_reload),
    .din1(arg2_r_reload),
    .din2(arg2_r_1_reload),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(32'd0),
    .din13(arg2_r_12_reload),
    .din14(arg2_r_13_reload),
    .din15(arg2_r_14_reload),
    .din16(tmp_5_fu_725_p17),
    .dout(tmp_5_fu_725_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U307(
    .din0(arg2_r_15_reload),
    .din1(arg2_r_reload),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(arg2_r_11_reload),
    .din13(arg2_r_12_reload),
    .din14(arg2_r_13_reload),
    .din15(arg2_r_14_reload),
    .din16(tmp_6_fu_768_p17),
    .dout(tmp_6_fu_768_p18)
);

test_mux_15_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_15_4_32_1_1_U308(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(arg1_r_1_reload),
    .din10(arg1_r_2_reload),
    .din11(arg1_r_3_reload),
    .din12(arg1_r_4_reload),
    .din13(arg1_r_5_reload),
    .din14(arg1_r_6_reload),
    .din15(i_fu_176),
    .dout(tmp_7_fu_805_p17)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U309(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(32'd0),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_8_fu_1087_p17),
    .dout(tmp_8_fu_1087_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U310(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(32'd0),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(sext_ln106_1_fu_1146_p1),
    .dout(tmp_9_fu_1149_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U311(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(32'd0),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(sub_ln98_1_fu_1210_p2),
    .dout(tmp_10_fu_1216_p18)
);

test_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U312(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(32'd0),
    .din10(arg2_r_10_reload),
    .din11(arg2_r_11_reload),
    .din12(arg2_r_12_reload),
    .din13(arg2_r_13_reload),
    .din14(arg2_r_14_reload),
    .din15(arg2_r_15_reload),
    .din16(tmp_11_fu_1282_p17),
    .dout(tmp_11_fu_1282_p18)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add256344_fu_148 <= add169365_reload;
        end else if (((icmp_ln88_fu_516_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            add256344_fu_148 <= add_ln103_fu_604_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add256_1359_fu_168 <= add169_1211370_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add256_1359_fu_168 <= add_ln106_4_fu_1267_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add256_143347_fu_152 <= add169_1276366_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add256_143347_fu_152 <= add_ln106_fu_1049_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add256_274350_fu_156 <= add169_2305367_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add256_274350_fu_156 <= add_ln106_1_fu_1078_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add256_3353_fu_160 <= add169_3368_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add256_3353_fu_160 <= add_ln106_2_fu_1140_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add256_4356_fu_164 <= add169_4369_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add256_4356_fu_164 <= add_ln106_3_fu_1201_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add280_2_4364_fu_172 <= add169_1211_1371_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add280_2_4364_fu_172 <= add_ln106_5_fu_1319_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_176 <= 4'd14;
        end else if (((icmp_ln88_fu_516_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_176 <= add_ln88_fu_903_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv36_cast_reg_1610[31 : 0] <= conv36_cast_fu_469_p1[31 : 0];
        i_1_reg_1615 <= i_fu_176;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln88_fu_516_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln106_1_reg_1663 <= icmp_ln106_1_fu_849_p2;
        icmp_ln106_2_reg_1673 <= icmp_ln106_2_fu_865_p2;
        icmp_ln106_3_reg_1683 <= icmp_ln106_3_fu_891_p2;
        icmp_ln106_4_reg_1689 <= icmp_ln106_4_fu_897_p2;
        icmp_ln106_reg_1657 <= icmp_ln106_fu_835_p2;
        mul_ln103_1_reg_1627 <= mul_ln103_1_fu_425_p2;
        mul_ln103_2_reg_1632 <= mul_ln103_2_fu_429_p2;
        mul_ln103_3_reg_1637 <= mul_ln103_3_fu_433_p2;
        mul_ln103_4_reg_1642 <= mul_ln103_4_fu_437_p2;
        mul_ln103_5_reg_1647 <= mul_ln103_5_fu_441_p2;
        sub_ln98_3_reg_1668 <= sub_ln98_3_fu_859_p2;
        sub_ln98_reg_1678 <= sub_ln98_fu_875_p2;
        tmp_7_reg_1652 <= tmp_7_fu_805_p17;
    end
end

always @ (*) begin
    if (((icmp_ln88_fu_516_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add256344_out_ap_vld = 1'b1;
    end else begin
        add256344_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln88_fu_516_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add256_1359_out_ap_vld = 1'b1;
    end else begin
        add256_1359_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln88_fu_516_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add256_143347_out_ap_vld = 1'b1;
    end else begin
        add256_143347_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln88_fu_516_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add256_274350_out_ap_vld = 1'b1;
    end else begin
        add256_274350_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln88_fu_516_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add256_3353_out_ap_vld = 1'b1;
    end else begin
        add256_3353_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln88_fu_516_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add256_4356_out_ap_vld = 1'b1;
    end else begin
        add256_4356_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln88_fu_516_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add280_2_4364_out_ap_vld = 1'b1;
    end else begin
        add280_2_4364_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln88_fu_516_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add256344_out = add256344_fu_148;

assign add256_1359_out = add256_1359_fu_168;

assign add256_143347_out = add256_143347_fu_152;

assign add256_274350_out = add256_274350_fu_156;

assign add256_3353_out = add256_3353_fu_160;

assign add256_4356_out = add256_4356_fu_164;

assign add280_2_4364_out = add280_2_4364_fu_172;

assign add_ln103_1_fu_942_p2 = (mul_ln103_1_reg_1627 + add256_143347_fu_152);

assign add_ln103_2_fu_960_p2 = (mul_ln103_2_reg_1632 + add256_274350_fu_156);

assign add_ln103_3_fu_978_p2 = (mul_ln103_3_reg_1637 + add256_3353_fu_160);

assign add_ln103_4_fu_996_p2 = (mul_ln103_4_reg_1642 + add256_4356_fu_164);

assign add_ln103_5_fu_1014_p2 = (mul_ln103_5_reg_1647 + add256_1359_fu_168);

assign add_ln103_fu_604_p2 = (mul_ln103_fu_421_p2 + add256344_fu_148);

assign add_ln106_1_fu_1078_p2 = (and_ln106_1_fu_1072_p2 + select_ln101_1_fu_965_p3);

assign add_ln106_2_fu_1140_p2 = (and_ln106_2_fu_1134_p2 + select_ln101_2_fu_983_p3);

assign add_ln106_3_fu_1201_p2 = (and_ln106_3_fu_1195_p2 + select_ln101_3_fu_1001_p3);

assign add_ln106_4_fu_1267_p2 = (and_ln106_4_fu_1261_p2 + select_ln101_4_fu_1019_p3);

assign add_ln106_5_fu_1319_p2 = (mul_ln106_5_fu_465_p2 + add280_2_4364_fu_172);

assign add_ln106_fu_1049_p2 = (and_ln106_fu_1043_p2 + select_ln101_fu_947_p3);

assign add_ln88_fu_903_p2 = ($signed(i_fu_176) + $signed(4'd15));

assign and_ln106_1_fu_1072_p2 = (select_ln106_3_fu_1065_p3 & mul_ln106_1_fu_449_p2);

assign and_ln106_2_fu_1134_p2 = (select_ln106_4_fu_1127_p3 & mul_ln106_2_fu_453_p2);

assign and_ln106_3_fu_1195_p2 = (select_ln106_5_fu_1188_p3 & mul_ln106_3_fu_457_p2);

assign and_ln106_4_fu_1261_p2 = (select_ln106_6_fu_1254_p3 & mul_ln106_4_fu_461_p2);

assign and_ln106_fu_1043_p2 = (select_ln106_1_fu_1036_p3 & mul_ln106_fu_445_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign conv36_cast_fu_469_p1 = conv36;

assign empty_fu_529_p2 = ($signed(i_fu_176) + $signed(4'd9));

assign icmp_ln101_1_fu_955_p2 = ((i_1_reg_1615 < 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln101_2_fu_973_p2 = ((i_1_reg_1615 < 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln101_3_fu_991_p2 = ((i_1_reg_1615 < 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln101_4_fu_1009_p2 = ((i_1_reg_1615 < 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln101_fu_937_p2 = ((i_1_reg_1615 < 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln106_1_fu_849_p2 = (($signed(empty_fu_529_p2) > $signed(4'd5)) ? 1'b1 : 1'b0);

assign icmp_ln106_2_fu_865_p2 = (($signed(empty_fu_529_p2) > $signed(4'd4)) ? 1'b1 : 1'b0);

assign icmp_ln106_3_fu_891_p2 = ((tmp_fu_881_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln106_4_fu_897_p2 = (($signed(empty_fu_529_p2) > $signed(4'd2)) ? 1'b1 : 1'b0);

assign icmp_ln106_fu_835_p2 = ((trunc_ln103_fu_535_p1 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_516_p2 = ((i_fu_176 > 4'd8) ? 1'b1 : 1'b0);

assign mul_ln103_1_fu_425_p0 = mul_ln103_1_fu_425_p00;

assign mul_ln103_1_fu_425_p00 = tmp_2_fu_616_p8;

assign mul_ln103_1_fu_425_p1 = zext_ln103_fu_569_p1;

assign mul_ln103_2_fu_429_p0 = mul_ln103_2_fu_429_p00;

assign mul_ln103_2_fu_429_p00 = tmp_3_fu_639_p18;

assign mul_ln103_2_fu_429_p1 = zext_ln103_fu_569_p1;

assign mul_ln103_3_fu_433_p0 = mul_ln103_3_fu_433_p00;

assign mul_ln103_3_fu_433_p00 = tmp_4_fu_682_p18;

assign mul_ln103_3_fu_433_p1 = zext_ln103_fu_569_p1;

assign mul_ln103_4_fu_437_p0 = mul_ln103_4_fu_437_p00;

assign mul_ln103_4_fu_437_p00 = tmp_5_fu_725_p18;

assign mul_ln103_4_fu_437_p1 = zext_ln103_fu_569_p1;

assign mul_ln103_5_fu_441_p0 = mul_ln103_5_fu_441_p00;

assign mul_ln103_5_fu_441_p00 = tmp_6_fu_768_p18;

assign mul_ln103_5_fu_441_p1 = zext_ln103_fu_569_p1;

assign mul_ln103_fu_421_p0 = mul_ln103_fu_421_p00;

assign mul_ln103_fu_421_p00 = tmp_1_fu_585_p9;

assign mul_ln103_fu_421_p1 = zext_ln103_fu_569_p1;

assign mul_ln106_1_fu_449_p0 = mul_ln106_1_fu_449_p00;

assign mul_ln106_1_fu_449_p00 = select_ln106_fu_1055_p3;

assign mul_ln106_1_fu_449_p1 = zext_ln106_fu_1027_p1;

assign mul_ln106_2_fu_453_p0 = mul_ln106_2_fu_453_p00;

assign mul_ln106_2_fu_453_p00 = tmp_8_fu_1087_p18;

assign mul_ln106_2_fu_453_p1 = zext_ln106_fu_1027_p1;

assign mul_ln106_3_fu_457_p0 = mul_ln106_3_fu_457_p00;

assign mul_ln106_3_fu_457_p00 = tmp_9_fu_1149_p18;

assign mul_ln106_3_fu_457_p1 = zext_ln106_fu_1027_p1;

assign mul_ln106_4_fu_461_p0 = mul_ln106_4_fu_461_p00;

assign mul_ln106_4_fu_461_p00 = tmp_10_fu_1216_p18;

assign mul_ln106_4_fu_461_p1 = zext_ln106_fu_1027_p1;

assign mul_ln106_5_fu_465_p0 = mul_ln106_5_fu_465_p00;

assign mul_ln106_5_fu_465_p00 = tmp_11_fu_1282_p18;

assign mul_ln106_5_fu_465_p1 = zext_ln106_fu_1027_p1;

assign mul_ln106_fu_445_p0 = zext_ln106_fu_1027_p1;

assign mul_ln106_fu_445_p1 = conv36_cast_reg_1610;

assign select_ln101_1_fu_965_p3 = ((icmp_ln101_1_fu_955_p2[0:0] == 1'b1) ? add_ln103_2_fu_960_p2 : add256_274350_fu_156);

assign select_ln101_2_fu_983_p3 = ((icmp_ln101_2_fu_973_p2[0:0] == 1'b1) ? add_ln103_3_fu_978_p2 : add256_3353_fu_160);

assign select_ln101_3_fu_1001_p3 = ((icmp_ln101_3_fu_991_p2[0:0] == 1'b1) ? add_ln103_4_fu_996_p2 : add256_4356_fu_164);

assign select_ln101_4_fu_1019_p3 = ((icmp_ln101_4_fu_1009_p2[0:0] == 1'b1) ? add_ln103_5_fu_1014_p2 : add256_1359_fu_168);

assign select_ln101_fu_947_p3 = ((icmp_ln101_fu_937_p2[0:0] == 1'b1) ? add_ln103_1_fu_942_p2 : add256_143347_fu_152);

assign select_ln106_1_fu_1036_p3 = ((icmp_ln106_reg_1657[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln106_2_fu_841_p3 = ((icmp_ln106_fu_835_p2[0:0] == 1'b1) ? 3'd6 : 3'd7);

assign select_ln106_3_fu_1065_p3 = ((icmp_ln106_1_reg_1663[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln106_4_fu_1127_p3 = ((icmp_ln106_2_reg_1673[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln106_5_fu_1188_p3 = ((icmp_ln106_3_reg_1683[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln106_6_fu_1254_p3 = ((icmp_ln106_4_reg_1689[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln106_fu_1055_p3 = ((icmp_ln106_reg_1657[0:0] == 1'b1) ? arg2_r_14_reload : arg2_r_15_reload);

assign sext_ln106_1_fu_1146_p1 = $signed(sub_ln98_reg_1678);

assign sub_ln98_1_fu_1210_p2 = ($signed(sext_ln106_1_fu_1146_p1) - $signed(zext_ln107_fu_1207_p1));

assign sub_ln98_3_fu_859_p2 = (select_ln106_2_fu_841_p3 - zext_ln98_fu_855_p1);

assign sub_ln98_fu_875_p2 = ($signed(sub_ln98_3_fu_859_p2) - $signed(zext_ln98_1_fu_871_p1));

assign tmp_11_fu_1282_p17 = (sub_ln98_1_fu_1210_p2 - zext_ln107_1_fu_1273_p1);

assign tmp_1_fu_585_p8 = (trunc_ln88_fu_525_p1 ^ 3'd7);

assign tmp_2_fu_616_p7 = ($signed(3'd6) - $signed(trunc_ln88_fu_525_p1));

assign tmp_3_fu_639_p17 = ($signed(4'd13) - $signed(i_fu_176));

assign tmp_4_fu_682_p17 = ($signed(4'd12) - $signed(i_fu_176));

assign tmp_5_fu_725_p17 = ($signed(4'd11) - $signed(i_fu_176));

assign tmp_6_fu_768_p17 = ($signed(4'd10) - $signed(i_fu_176));

assign tmp_8_fu_1087_p17 = sub_ln98_3_reg_1668;

assign tmp_fu_881_p4 = {{empty_fu_529_p2[3:2]}};

assign trunc_ln103_fu_535_p1 = empty_fu_529_p2[2:0];

assign trunc_ln88_fu_525_p1 = i_fu_176[2:0];

assign zext_ln103_fu_569_p1 = tmp_s_fu_539_p17;

assign zext_ln106_fu_1027_p1 = tmp_7_reg_1652;

assign zext_ln107_1_fu_1273_p1 = icmp_ln106_4_reg_1689;

assign zext_ln107_fu_1207_p1 = icmp_ln106_3_reg_1683;

assign zext_ln98_1_fu_871_p1 = icmp_ln106_2_fu_865_p2;

assign zext_ln98_fu_855_p1 = icmp_ln106_1_fu_849_p2;

always @ (posedge ap_clk) begin
    conv36_cast_reg_1610[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //test_test_Pipeline_VITIS_LOOP_88_9
