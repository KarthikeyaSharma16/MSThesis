

================================================================
== Vitis HLS Report for 'test_Pipeline_VITIS_LOOP_88_9'
================================================================
* Date:           Fri May 10 15:00:59 2024

* Version:        2023.1.1 (Build 3869133 on Jun 15 2023)
* Project:        D1
* Solution:       comb_2 (Vivado IP Flow Target)
* Product family: zynquplus
* Target device:  xczu9eg-ffvb1156-2-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  6.890 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+-----------+-----------+-----+-----+---------+
    |  Latency (cycles) |   Latency (absolute)  |  Interval | Pipeline|
    |   min   |   max   |    min    |    max    | min | max |   Type  |
    +---------+---------+-----------+-----------+-----+-----+---------+
    |        8|        8|  80.000 ns|  80.000 ns|    8|    8|       no|
    +---------+---------+-----------+-----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- VITIS_LOOP_88_9  |        6|        6|         2|          1|          1|     6|       yes|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 3
* Pipeline : 1
  Pipeline-0 : II = 1, D = 3, States = { 1 2 3 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 0.42>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%add256110 = alloca i32 1"   --->   Operation 5 'alloca' 'add256110' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%add256_1113 = alloca i32 1"   --->   Operation 6 'alloca' 'add256_1113' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%add256_2116 = alloca i32 1"   --->   Operation 7 'alloca' 'add256_2116' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%add256_3119 = alloca i32 1"   --->   Operation 8 'alloca' 'add256_3119' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%add256_4122 = alloca i32 1"   --->   Operation 9 'alloca' 'add256_4122' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%add256_5125 = alloca i32 1"   --->   Operation 10 'alloca' 'add256_5125' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%add280_14130 = alloca i32 1"   --->   Operation 11 'alloca' 'add280_14130' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%i = alloca i32 1"   --->   Operation 12 'alloca' 'i' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%arg2_r_10_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_10_reload"   --->   Operation 13 'read' 'arg2_r_10_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%conv36_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %conv36"   --->   Operation 14 'read' 'conv36_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%arg1_r_6_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_6_reload"   --->   Operation 15 'read' 'arg1_r_6_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%arg1_r_5_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_5_reload"   --->   Operation 16 'read' 'arg1_r_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%arg1_r_4_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_4_reload"   --->   Operation 17 'read' 'arg1_r_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%arg1_r_3_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_3_reload"   --->   Operation 18 'read' 'arg1_r_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%arg1_r_2_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_2_reload"   --->   Operation 19 'read' 'arg1_r_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%arg1_r_1_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_1_reload"   --->   Operation 20 'read' 'arg1_r_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%arg2_r_11_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_11_reload"   --->   Operation 21 'read' 'arg2_r_11_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%arg2_r_12_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_12_reload"   --->   Operation 22 'read' 'arg2_r_12_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%arg2_r_13_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_13_reload"   --->   Operation 23 'read' 'arg2_r_13_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%arg2_r_14_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_14_reload"   --->   Operation 24 'read' 'arg2_r_14_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%arg2_r_15_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_15_reload"   --->   Operation 25 'read' 'arg2_r_15_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%arg2_r_5_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_5_reload"   --->   Operation 26 'read' 'arg2_r_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%arg2_r_4_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_4_reload"   --->   Operation 27 'read' 'arg2_r_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%arg2_r_3_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_3_reload"   --->   Operation 28 'read' 'arg2_r_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%arg2_r_2_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_2_reload"   --->   Operation 29 'read' 'arg2_r_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%arg2_r_1_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_1_reload"   --->   Operation 30 'read' 'arg2_r_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%arg2_r_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_reload"   --->   Operation 31 'read' 'arg2_r_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%arg1_r_14_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_14_reload"   --->   Operation 32 'read' 'arg1_r_14_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%arg1_r_13_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_13_reload"   --->   Operation 33 'read' 'arg1_r_13_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%arg1_r_12_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_12_reload"   --->   Operation 34 'read' 'arg1_r_12_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%arg1_r_11_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_11_reload"   --->   Operation 35 'read' 'arg1_r_11_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%arg1_r_10_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_10_reload"   --->   Operation 36 'read' 'arg1_r_10_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%arg1_r_9_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_9_reload"   --->   Operation 37 'read' 'arg1_r_9_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%add169131_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add169131_reload"   --->   Operation 38 'read' 'add169131_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "%add169_143132_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add169_143132_reload"   --->   Operation 39 'read' 'add169_143132_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "%add169_272133_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add169_272133_reload"   --->   Operation 40 'read' 'add169_272133_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.00ns)   --->   "%add169_3134_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add169_3134_reload"   --->   Operation 41 'read' 'add169_3134_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 42 [1/1] (0.00ns)   --->   "%add169_4135_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add169_4135_reload"   --->   Operation 42 'read' 'add169_4135_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (0.00ns)   --->   "%add169_5136_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add169_5136_reload"   --->   Operation 43 'read' 'add169_5136_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 44 [1/1] (0.00ns)   --->   "%add169_6137_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add169_6137_reload"   --->   Operation 44 'read' 'add169_6137_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 45 [1/1] (0.00ns)   --->   "%conv36_cast = zext i32 %conv36_read"   --->   Operation 45 'zext' 'conv36_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 46 [1/1] (0.42ns)   --->   "%store_ln0 = store i4 14, i4 %i"   --->   Operation 46 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 47 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add169_6137_reload_read, i64 %add280_14130"   --->   Operation 47 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 48 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add169_5136_reload_read, i64 %add256_5125"   --->   Operation 48 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 49 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add169_4135_reload_read, i64 %add256_4122"   --->   Operation 49 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 50 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add169_3134_reload_read, i64 %add256_3119"   --->   Operation 50 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 51 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add169_272133_reload_read, i64 %add256_2116"   --->   Operation 51 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 52 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add169_143132_reload_read, i64 %add256_1113"   --->   Operation 52 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 53 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add169131_reload_read, i64 %add256110"   --->   Operation 53 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 54 [1/1] (0.00ns)   --->   "%br_ln0 = br void %if.end"   --->   Operation 54 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 5.72>
ST_2 : Operation 55 [1/1] (0.00ns)   --->   "%i_1 = load i4 %i" [d1.cpp:88]   --->   Operation 55 'load' 'i_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 56 [1/1] (0.79ns)   --->   "%icmp_ln88 = icmp_ugt  i4 %i_1, i4 8" [d1.cpp:88]   --->   Operation 56 'icmp' 'icmp_ln88' <Predicate = true> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 57 [1/1] (0.00ns)   --->   "%br_ln88 = br i1 %icmp_ln88, void %for.end303.exitStub, void %if.end.split_ifconv" [d1.cpp:88]   --->   Operation 57 'br' 'br_ln88' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 58 [1/1] (0.00ns)   --->   "%add256110_load = load i64 %add256110" [d1.cpp:103]   --->   Operation 58 'load' 'add256110_load' <Predicate = (icmp_ln88)> <Delay = 0.00>
ST_2 : Operation 59 [1/1] (0.00ns)   --->   "%trunc_ln88 = trunc i4 %i_1" [d1.cpp:88]   --->   Operation 59 'trunc' 'trunc_ln88' <Predicate = (icmp_ln88)> <Delay = 0.00>
ST_2 : Operation 60 [1/1] (0.79ns)   --->   "%empty = add i4 %i_1, i4 9" [d1.cpp:88]   --->   Operation 60 'add' 'empty' <Predicate = (icmp_ln88)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 61 [1/1] (0.00ns)   --->   "%trunc_ln103 = trunc i4 %empty" [d1.cpp:103]   --->   Operation 61 'trunc' 'trunc_ln103' <Predicate = (icmp_ln88)> <Delay = 0.00>
ST_2 : Operation 62 [1/1] (0.54ns)   --->   "%tmp_s = mux i32 @_ssdm_op_Mux.ap_auto.15i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg1_r_9_reload_read, i32 %arg1_r_10_reload_read, i32 %arg1_r_11_reload_read, i32 %arg1_r_12_reload_read, i32 %arg1_r_13_reload_read, i32 %arg1_r_14_reload_read, i4 %i_1" [d1.cpp:103]   --->   Operation 62 'mux' 'tmp_s' <Predicate = (icmp_ln88)> <Delay = 0.54> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 63 [1/1] (0.00ns)   --->   "%zext_ln103 = zext i32 %tmp_s" [d1.cpp:103]   --->   Operation 63 'zext' 'zext_ln103' <Predicate = (icmp_ln88)> <Delay = 0.00>
ST_2 : Operation 64 [1/1] (0.12ns)   --->   "%xor_ln103 = xor i3 %trunc_ln88, i3 7" [d1.cpp:103]   --->   Operation 64 'xor' 'xor_ln103' <Predicate = (icmp_ln88)> <Delay = 0.12> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.12> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 65 [1/1] (0.67ns)   --->   "%tmp_1 = mux i32 @_ssdm_op_Mux.ap_auto.7i32.i3, i32 0, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i3 %xor_ln103" [d1.cpp:103]   --->   Operation 65 'mux' 'tmp_1' <Predicate = (icmp_ln88)> <Delay = 0.67> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 66 [1/1] (0.00ns)   --->   "%zext_ln103_1 = zext i32 %tmp_1" [d1.cpp:103]   --->   Operation 66 'zext' 'zext_ln103_1' <Predicate = (icmp_ln88)> <Delay = 0.00>
ST_2 : [1/1] (1.31ns)   --->   Input mux for Operation 67 '%mul_ln103 = mul i64 %zext_ln103_1, i64 %zext_ln103'
ST_2 : Operation 67 [1/1] (2.10ns)   --->   "%mul_ln103 = mul i64 %zext_ln103_1, i64 %zext_ln103" [d1.cpp:103]   --->   Operation 67 'mul' 'mul_ln103' <Predicate = (icmp_ln88)> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 68 [1/1] (1.08ns)   --->   "%add_ln103 = add i64 %mul_ln103, i64 %add256110_load" [d1.cpp:103]   --->   Operation 68 'add' 'add_ln103' <Predicate = (icmp_ln88)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 69 [1/1] (0.67ns)   --->   "%sub_ln103 = sub i3 6, i3 %trunc_ln88" [d1.cpp:103]   --->   Operation 69 'sub' 'sub_ln103' <Predicate = (icmp_ln88)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 70 [1/1] (0.62ns)   --->   "%tmp_2 = mux i32 @_ssdm_op_Mux.ap_auto.6i32.i3, i32 %arg2_r_15_reload_read, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i3 %sub_ln103" [d1.cpp:103]   --->   Operation 70 'mux' 'tmp_2' <Predicate = (icmp_ln88)> <Delay = 0.62> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.62> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 71 [1/1] (0.00ns)   --->   "%zext_ln103_2 = zext i32 %tmp_2" [d1.cpp:103]   --->   Operation 71 'zext' 'zext_ln103_2' <Predicate = (icmp_ln88)> <Delay = 0.00>
ST_2 : [1/1] (1.31ns)   --->   Input mux for Operation 72 '%mul_ln103_1 = mul i64 %zext_ln103_2, i64 %zext_ln103'
ST_2 : Operation 72 [1/1] (2.10ns)   --->   "%mul_ln103_1 = mul i64 %zext_ln103_2, i64 %zext_ln103" [d1.cpp:103]   --->   Operation 72 'mul' 'mul_ln103_1' <Predicate = (icmp_ln88)> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 73 [1/1] (0.79ns)   --->   "%sub_ln103_1 = sub i4 13, i4 %i_1" [d1.cpp:103]   --->   Operation 73 'sub' 'sub_ln103_1' <Predicate = (icmp_ln88)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 74 [1/1] (0.48ns)   --->   "%tmp_3 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_15_reload_read, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_14_reload_read, i4 %sub_ln103_1" [d1.cpp:103]   --->   Operation 74 'mux' 'tmp_3' <Predicate = (icmp_ln88)> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 75 [1/1] (0.00ns)   --->   "%zext_ln103_3 = zext i32 %tmp_3" [d1.cpp:103]   --->   Operation 75 'zext' 'zext_ln103_3' <Predicate = (icmp_ln88)> <Delay = 0.00>
ST_2 : [1/1] (1.31ns)   --->   Input mux for Operation 76 '%mul_ln103_2 = mul i64 %zext_ln103_3, i64 %zext_ln103'
ST_2 : Operation 76 [1/1] (2.10ns)   --->   "%mul_ln103_2 = mul i64 %zext_ln103_3, i64 %zext_ln103" [d1.cpp:103]   --->   Operation 76 'mul' 'mul_ln103_2' <Predicate = (icmp_ln88)> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 77 [1/1] (0.79ns)   --->   "%sub_ln103_2 = sub i4 12, i4 %i_1" [d1.cpp:103]   --->   Operation 77 'sub' 'sub_ln103_2' <Predicate = (icmp_ln88)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 78 [1/1] (0.48ns)   --->   "%tmp_4 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_15_reload_read, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i4 %sub_ln103_2" [d1.cpp:103]   --->   Operation 78 'mux' 'tmp_4' <Predicate = (icmp_ln88)> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 79 [1/1] (0.00ns)   --->   "%zext_ln103_4 = zext i32 %tmp_4" [d1.cpp:103]   --->   Operation 79 'zext' 'zext_ln103_4' <Predicate = (icmp_ln88)> <Delay = 0.00>
ST_2 : [1/1] (1.31ns)   --->   Input mux for Operation 80 '%mul_ln103_3 = mul i64 %zext_ln103_4, i64 %zext_ln103'
ST_2 : Operation 80 [1/1] (2.10ns)   --->   "%mul_ln103_3 = mul i64 %zext_ln103_4, i64 %zext_ln103" [d1.cpp:103]   --->   Operation 80 'mul' 'mul_ln103_3' <Predicate = (icmp_ln88)> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 81 [1/1] (0.79ns)   --->   "%sub_ln103_3 = sub i4 11, i4 %i_1" [d1.cpp:103]   --->   Operation 81 'sub' 'sub_ln103_3' <Predicate = (icmp_ln88)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 82 [1/1] (0.48ns)   --->   "%tmp_5 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_15_reload_read, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i4 %sub_ln103_3" [d1.cpp:103]   --->   Operation 82 'mux' 'tmp_5' <Predicate = (icmp_ln88)> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 83 [1/1] (0.00ns)   --->   "%zext_ln103_5 = zext i32 %tmp_5" [d1.cpp:103]   --->   Operation 83 'zext' 'zext_ln103_5' <Predicate = (icmp_ln88)> <Delay = 0.00>
ST_2 : [1/1] (1.31ns)   --->   Input mux for Operation 84 '%mul_ln103_4 = mul i64 %zext_ln103_5, i64 %zext_ln103'
ST_2 : Operation 84 [1/1] (2.10ns)   --->   "%mul_ln103_4 = mul i64 %zext_ln103_5, i64 %zext_ln103" [d1.cpp:103]   --->   Operation 84 'mul' 'mul_ln103_4' <Predicate = (icmp_ln88)> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 85 [1/1] (0.79ns)   --->   "%sub_ln103_4 = sub i4 10, i4 %i_1" [d1.cpp:103]   --->   Operation 85 'sub' 'sub_ln103_4' <Predicate = (icmp_ln88)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 86 [1/1] (0.48ns)   --->   "%tmp_6 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 %arg2_r_15_reload_read, i32 %arg2_r_reload_read, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i4 %sub_ln103_4" [d1.cpp:103]   --->   Operation 86 'mux' 'tmp_6' <Predicate = (icmp_ln88)> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 87 [1/1] (0.00ns)   --->   "%zext_ln103_6 = zext i32 %tmp_6" [d1.cpp:103]   --->   Operation 87 'zext' 'zext_ln103_6' <Predicate = (icmp_ln88)> <Delay = 0.00>
ST_2 : [1/1] (1.31ns)   --->   Input mux for Operation 88 '%mul_ln103_5 = mul i64 %zext_ln103_6, i64 %zext_ln103'
ST_2 : Operation 88 [1/1] (2.10ns)   --->   "%mul_ln103_5 = mul i64 %zext_ln103_6, i64 %zext_ln103" [d1.cpp:103]   --->   Operation 88 'mul' 'mul_ln103_5' <Predicate = (icmp_ln88)> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 89 [1/1] (0.54ns)   --->   "%tmp_7 = mux i32 @_ssdm_op_Mux.ap_auto.15i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg1_r_1_reload_read, i32 %arg1_r_2_reload_read, i32 %arg1_r_3_reload_read, i32 %arg1_r_4_reload_read, i32 %arg1_r_5_reload_read, i32 %arg1_r_6_reload_read, i4 %i_1" [d1.cpp:106]   --->   Operation 89 'mux' 'tmp_7' <Predicate = (icmp_ln88)> <Delay = 0.54> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 90 [1/1] (0.67ns)   --->   "%icmp_ln106 = icmp_eq  i3 %trunc_ln103, i3 7" [d1.cpp:106]   --->   Operation 90 'icmp' 'icmp_ln106' <Predicate = (icmp_ln88)> <Delay = 0.67> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 91 [1/1] (0.00ns) (grouped into LUT with out node sub_ln98_3)   --->   "%select_ln106_2 = select i1 %icmp_ln106, i3 6, i3 7" [d1.cpp:106]   --->   Operation 91 'select' 'select_ln106_2' <Predicate = (icmp_ln88)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 92 [1/1] (0.79ns)   --->   "%icmp_ln106_1 = icmp_sgt  i4 %empty, i4 5" [d1.cpp:106]   --->   Operation 92 'icmp' 'icmp_ln106_1' <Predicate = (icmp_ln88)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 93 [1/1] (0.00ns) (grouped into LUT with out node sub_ln98_3)   --->   "%zext_ln98 = zext i1 %icmp_ln106_1" [d1.cpp:98]   --->   Operation 93 'zext' 'zext_ln98' <Predicate = (icmp_ln88)> <Delay = 0.00>
ST_2 : Operation 94 [1/1] (0.54ns) (out node of the LUT)   --->   "%sub_ln98_3 = sub i3 %select_ln106_2, i3 %zext_ln98" [d1.cpp:98]   --->   Operation 94 'sub' 'sub_ln98_3' <Predicate = (icmp_ln88)> <Delay = 0.54> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 95 [1/1] (0.79ns)   --->   "%icmp_ln106_2 = icmp_sgt  i4 %empty, i4 4" [d1.cpp:106]   --->   Operation 95 'icmp' 'icmp_ln106_2' <Predicate = (icmp_ln88)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 96 [1/1] (0.00ns)   --->   "%zext_ln98_1 = zext i1 %icmp_ln106_2" [d1.cpp:98]   --->   Operation 96 'zext' 'zext_ln98_1' <Predicate = (icmp_ln88)> <Delay = 0.00>
ST_2 : Operation 97 [1/1] (0.67ns)   --->   "%sub_ln98 = sub i3 %sub_ln98_3, i3 %zext_ln98_1" [d1.cpp:98]   --->   Operation 97 'sub' 'sub_ln98' <Predicate = (icmp_ln88)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 98 [1/1] (0.00ns)   --->   "%tmp = partselect i2 @_ssdm_op_PartSelect.i2.i4.i32.i32, i4 %empty, i32 2, i32 3" [d1.cpp:106]   --->   Operation 98 'partselect' 'tmp' <Predicate = (icmp_ln88)> <Delay = 0.00>
ST_2 : Operation 99 [1/1] (0.54ns)   --->   "%icmp_ln106_3 = icmp_eq  i2 %tmp, i2 1" [d1.cpp:106]   --->   Operation 99 'icmp' 'icmp_ln106_3' <Predicate = (icmp_ln88)> <Delay = 0.54> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 100 [1/1] (0.79ns)   --->   "%icmp_ln106_4 = icmp_sgt  i4 %empty, i4 2" [d1.cpp:106]   --->   Operation 100 'icmp' 'icmp_ln106_4' <Predicate = (icmp_ln88)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 101 [1/1] (0.79ns)   --->   "%add_ln88 = add i4 %i_1, i4 15" [d1.cpp:88]   --->   Operation 101 'add' 'add_ln88' <Predicate = (icmp_ln88)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 102 [1/1] (0.42ns)   --->   "%store_ln88 = store i4 %add_ln88, i4 %i" [d1.cpp:88]   --->   Operation 102 'store' 'store_ln88' <Predicate = (icmp_ln88)> <Delay = 0.42>
ST_2 : Operation 103 [1/1] (0.42ns)   --->   "%store_ln88 = store i64 %add_ln103, i64 %add256110" [d1.cpp:88]   --->   Operation 103 'store' 'store_ln88' <Predicate = (icmp_ln88)> <Delay = 0.42>
ST_2 : Operation 174 [1/1] (0.00ns)   --->   "%add256110_load_1 = load i64 %add256110"   --->   Operation 174 'load' 'add256110_load_1' <Predicate = (!icmp_ln88)> <Delay = 0.00>
ST_2 : Operation 175 [1/1] (0.00ns)   --->   "%add256_1113_load_1 = load i64 %add256_1113"   --->   Operation 175 'load' 'add256_1113_load_1' <Predicate = (!icmp_ln88)> <Delay = 0.00>
ST_2 : Operation 176 [1/1] (0.00ns)   --->   "%add256_2116_load_1 = load i64 %add256_2116"   --->   Operation 176 'load' 'add256_2116_load_1' <Predicate = (!icmp_ln88)> <Delay = 0.00>
ST_2 : Operation 177 [1/1] (0.00ns)   --->   "%add256_3119_load_1 = load i64 %add256_3119"   --->   Operation 177 'load' 'add256_3119_load_1' <Predicate = (!icmp_ln88)> <Delay = 0.00>
ST_2 : Operation 178 [1/1] (0.00ns)   --->   "%add256_4122_load_1 = load i64 %add256_4122"   --->   Operation 178 'load' 'add256_4122_load_1' <Predicate = (!icmp_ln88)> <Delay = 0.00>
ST_2 : Operation 179 [1/1] (0.00ns)   --->   "%add256_5125_load_1 = load i64 %add256_5125"   --->   Operation 179 'load' 'add256_5125_load_1' <Predicate = (!icmp_ln88)> <Delay = 0.00>
ST_2 : Operation 180 [1/1] (0.00ns)   --->   "%add280_14130_load_1 = load i64 %add280_14130"   --->   Operation 180 'load' 'add280_14130_load_1' <Predicate = (!icmp_ln88)> <Delay = 0.00>
ST_2 : Operation 181 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add280_14130_out, i64 %add280_14130_load_1"   --->   Operation 181 'write' 'write_ln0' <Predicate = (!icmp_ln88)> <Delay = 0.00>
ST_2 : Operation 182 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add256_5125_out, i64 %add256_5125_load_1"   --->   Operation 182 'write' 'write_ln0' <Predicate = (!icmp_ln88)> <Delay = 0.00>
ST_2 : Operation 183 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add256_4122_out, i64 %add256_4122_load_1"   --->   Operation 183 'write' 'write_ln0' <Predicate = (!icmp_ln88)> <Delay = 0.00>
ST_2 : Operation 184 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add256_3119_out, i64 %add256_3119_load_1"   --->   Operation 184 'write' 'write_ln0' <Predicate = (!icmp_ln88)> <Delay = 0.00>
ST_2 : Operation 185 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add256_2116_out, i64 %add256_2116_load_1"   --->   Operation 185 'write' 'write_ln0' <Predicate = (!icmp_ln88)> <Delay = 0.00>
ST_2 : Operation 186 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add256_1113_out, i64 %add256_1113_load_1"   --->   Operation 186 'write' 'write_ln0' <Predicate = (!icmp_ln88)> <Delay = 0.00>
ST_2 : Operation 187 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add256110_out, i64 %add256110_load_1"   --->   Operation 187 'write' 'write_ln0' <Predicate = (!icmp_ln88)> <Delay = 0.00>
ST_2 : Operation 188 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 188 'ret' 'ret_ln0' <Predicate = (!icmp_ln88)> <Delay = 0.00>

State 3 <SV = 2> <Delay = 6.89>
ST_3 : Operation 104 [1/1] (0.00ns)   --->   "%add256_1113_load = load i64 %add256_1113" [d1.cpp:103]   --->   Operation 104 'load' 'add256_1113_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 105 [1/1] (0.00ns)   --->   "%add256_2116_load = load i64 %add256_2116" [d1.cpp:103]   --->   Operation 105 'load' 'add256_2116_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 106 [1/1] (0.00ns)   --->   "%add256_3119_load = load i64 %add256_3119" [d1.cpp:103]   --->   Operation 106 'load' 'add256_3119_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 107 [1/1] (0.00ns)   --->   "%add256_4122_load = load i64 %add256_4122" [d1.cpp:103]   --->   Operation 107 'load' 'add256_4122_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 108 [1/1] (0.00ns)   --->   "%add256_5125_load = load i64 %add256_5125" [d1.cpp:103]   --->   Operation 108 'load' 'add256_5125_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 109 [1/1] (0.00ns)   --->   "%add280_14130_load = load i64 %add280_14130" [d1.cpp:106]   --->   Operation 109 'load' 'add280_14130_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 110 [1/1] (0.00ns)   --->   "%specpipeline_ln90 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty_3" [d1.cpp:90]   --->   Operation 110 'specpipeline' 'specpipeline_ln90' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 111 [1/1] (0.00ns)   --->   "%speclooptripcount_ln88 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 6, i64 6, i64 6" [d1.cpp:88]   --->   Operation 111 'speclooptripcount' 'speclooptripcount_ln88' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 112 [1/1] (0.00ns)   --->   "%specloopname_ln88 = specloopname void @_ssdm_op_SpecLoopName, void @empty_8" [d1.cpp:88]   --->   Operation 112 'specloopname' 'specloopname_ln88' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 113 [1/1] (0.79ns)   --->   "%icmp_ln101 = icmp_ult  i4 %i_1, i4 14" [d1.cpp:101]   --->   Operation 113 'icmp' 'icmp_ln101' <Predicate = true> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 114 [1/1] (1.08ns)   --->   "%add_ln103_1 = add i64 %mul_ln103_1, i64 %add256_1113_load" [d1.cpp:103]   --->   Operation 114 'add' 'add_ln103_1' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 115 [1/1] (0.00ns) (grouped into LUT with out node add_ln106)   --->   "%select_ln101 = select i1 %icmp_ln101, i64 %add_ln103_1, i64 %add256_1113_load" [d1.cpp:101]   --->   Operation 115 'select' 'select_ln101' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.42> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 116 [1/1] (0.79ns)   --->   "%icmp_ln101_1 = icmp_ult  i4 %i_1, i4 13" [d1.cpp:101]   --->   Operation 116 'icmp' 'icmp_ln101_1' <Predicate = true> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 117 [1/1] (1.08ns)   --->   "%add_ln103_2 = add i64 %mul_ln103_2, i64 %add256_2116_load" [d1.cpp:103]   --->   Operation 117 'add' 'add_ln103_2' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 118 [1/1] (0.00ns) (grouped into LUT with out node add_ln106_1)   --->   "%select_ln101_1 = select i1 %icmp_ln101_1, i64 %add_ln103_2, i64 %add256_2116_load" [d1.cpp:101]   --->   Operation 118 'select' 'select_ln101_1' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.42> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 119 [1/1] (0.79ns)   --->   "%icmp_ln101_2 = icmp_ult  i4 %i_1, i4 12" [d1.cpp:101]   --->   Operation 119 'icmp' 'icmp_ln101_2' <Predicate = true> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 120 [1/1] (1.08ns)   --->   "%add_ln103_3 = add i64 %mul_ln103_3, i64 %add256_3119_load" [d1.cpp:103]   --->   Operation 120 'add' 'add_ln103_3' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 121 [1/1] (0.00ns) (grouped into LUT with out node add_ln106_2)   --->   "%select_ln101_2 = select i1 %icmp_ln101_2, i64 %add_ln103_3, i64 %add256_3119_load" [d1.cpp:101]   --->   Operation 121 'select' 'select_ln101_2' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.42> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 122 [1/1] (0.79ns)   --->   "%icmp_ln101_3 = icmp_ult  i4 %i_1, i4 11" [d1.cpp:101]   --->   Operation 122 'icmp' 'icmp_ln101_3' <Predicate = true> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 123 [1/1] (1.08ns)   --->   "%add_ln103_4 = add i64 %mul_ln103_4, i64 %add256_4122_load" [d1.cpp:103]   --->   Operation 123 'add' 'add_ln103_4' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 124 [1/1] (0.00ns) (grouped into LUT with out node add_ln106_3)   --->   "%select_ln101_3 = select i1 %icmp_ln101_3, i64 %add_ln103_4, i64 %add256_4122_load" [d1.cpp:101]   --->   Operation 124 'select' 'select_ln101_3' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.42> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 125 [1/1] (0.79ns)   --->   "%icmp_ln101_4 = icmp_ult  i4 %i_1, i4 10" [d1.cpp:101]   --->   Operation 125 'icmp' 'icmp_ln101_4' <Predicate = true> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 126 [1/1] (1.08ns)   --->   "%add_ln103_5 = add i64 %mul_ln103_5, i64 %add256_5125_load" [d1.cpp:103]   --->   Operation 126 'add' 'add_ln103_5' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 127 [1/1] (0.00ns) (grouped into LUT with out node add_ln106_4)   --->   "%select_ln101_4 = select i1 %icmp_ln101_4, i64 %add_ln103_5, i64 %add256_5125_load" [d1.cpp:101]   --->   Operation 127 'select' 'select_ln101_4' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.42> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 128 [1/1] (0.00ns)   --->   "%zext_ln106 = zext i32 %tmp_7" [d1.cpp:106]   --->   Operation 128 'zext' 'zext_ln106' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 129 '%mul_ln106 = mul i64 %zext_ln106, i64 %conv36_cast'
ST_3 : Operation 129 [1/1] (2.10ns)   --->   "%mul_ln106 = mul i64 %zext_ln106, i64 %conv36_cast" [d1.cpp:106]   --->   Operation 129 'mul' 'mul_ln106' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 130 [1/1] (0.00ns) (grouped into LUT with out node add_ln106)   --->   "%select_ln106_1 = select i1 %icmp_ln106, i64 18446744073709551615, i64 0" [d1.cpp:106]   --->   Operation 130 'select' 'select_ln106_1' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 131 [1/1] (0.00ns) (grouped into LUT with out node add_ln106)   --->   "%and_ln106 = and i64 %mul_ln106, i64 %select_ln106_1" [d1.cpp:106]   --->   Operation 131 'and' 'and_ln106' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 132 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln106 = add i64 %and_ln106, i64 %select_ln101" [d1.cpp:106]   --->   Operation 132 'add' 'add_ln106' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 133 [1/1] (0.44ns)   --->   "%select_ln106 = select i1 %icmp_ln106, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read" [d1.cpp:106]   --->   Operation 133 'select' 'select_ln106' <Predicate = true> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 134 [1/1] (0.00ns)   --->   "%zext_ln106_1 = zext i32 %select_ln106" [d1.cpp:106]   --->   Operation 134 'zext' 'zext_ln106_1' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 135 '%mul_ln106_1 = mul i64 %zext_ln106_1, i64 %zext_ln106'
ST_3 : Operation 135 [1/1] (2.10ns)   --->   "%mul_ln106_1 = mul i64 %zext_ln106_1, i64 %zext_ln106" [d1.cpp:106]   --->   Operation 135 'mul' 'mul_ln106_1' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 136 [1/1] (0.00ns) (grouped into LUT with out node add_ln106_1)   --->   "%select_ln106_3 = select i1 %icmp_ln106_1, i64 18446744073709551615, i64 0" [d1.cpp:106]   --->   Operation 136 'select' 'select_ln106_3' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 137 [1/1] (0.00ns) (grouped into LUT with out node add_ln106_1)   --->   "%and_ln106_1 = and i64 %mul_ln106_1, i64 %select_ln106_3" [d1.cpp:106]   --->   Operation 137 'and' 'and_ln106_1' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 138 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln106_1 = add i64 %and_ln106_1, i64 %select_ln101_1" [d1.cpp:106]   --->   Operation 138 'add' 'add_ln106_1' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 139 [1/1] (0.00ns)   --->   "%sext_ln106 = sext i3 %sub_ln98_3" [d1.cpp:106]   --->   Operation 139 'sext' 'sext_ln106' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 140 [1/1] (0.48ns)   --->   "%tmp_8 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sext_ln106" [d1.cpp:106]   --->   Operation 140 'mux' 'tmp_8' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 141 [1/1] (0.00ns)   --->   "%zext_ln106_2 = zext i32 %tmp_8" [d1.cpp:106]   --->   Operation 141 'zext' 'zext_ln106_2' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 142 '%mul_ln106_2 = mul i64 %zext_ln106_2, i64 %zext_ln106'
ST_3 : Operation 142 [1/1] (2.10ns)   --->   "%mul_ln106_2 = mul i64 %zext_ln106_2, i64 %zext_ln106" [d1.cpp:106]   --->   Operation 142 'mul' 'mul_ln106_2' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 143 [1/1] (0.00ns) (grouped into LUT with out node add_ln106_2)   --->   "%select_ln106_4 = select i1 %icmp_ln106_2, i64 18446744073709551615, i64 0" [d1.cpp:106]   --->   Operation 143 'select' 'select_ln106_4' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 144 [1/1] (0.00ns) (grouped into LUT with out node add_ln106_2)   --->   "%and_ln106_2 = and i64 %mul_ln106_2, i64 %select_ln106_4" [d1.cpp:106]   --->   Operation 144 'and' 'and_ln106_2' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 145 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln106_2 = add i64 %and_ln106_2, i64 %select_ln101_2" [d1.cpp:106]   --->   Operation 145 'add' 'add_ln106_2' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 146 [1/1] (0.00ns)   --->   "%sext_ln106_1 = sext i3 %sub_ln98" [d1.cpp:106]   --->   Operation 146 'sext' 'sext_ln106_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 147 [1/1] (0.48ns)   --->   "%tmp_9 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sext_ln106_1" [d1.cpp:106]   --->   Operation 147 'mux' 'tmp_9' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 148 [1/1] (0.00ns)   --->   "%zext_ln106_3 = zext i32 %tmp_9" [d1.cpp:106]   --->   Operation 148 'zext' 'zext_ln106_3' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 149 '%mul_ln106_3 = mul i64 %zext_ln106_3, i64 %zext_ln106'
ST_3 : Operation 149 [1/1] (2.10ns)   --->   "%mul_ln106_3 = mul i64 %zext_ln106_3, i64 %zext_ln106" [d1.cpp:106]   --->   Operation 149 'mul' 'mul_ln106_3' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 150 [1/1] (0.00ns) (grouped into LUT with out node add_ln106_3)   --->   "%select_ln106_5 = select i1 %icmp_ln106_3, i64 18446744073709551615, i64 0" [d1.cpp:106]   --->   Operation 150 'select' 'select_ln106_5' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 151 [1/1] (0.00ns) (grouped into LUT with out node add_ln106_3)   --->   "%and_ln106_3 = and i64 %mul_ln106_3, i64 %select_ln106_5" [d1.cpp:106]   --->   Operation 151 'and' 'and_ln106_3' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 152 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln106_3 = add i64 %and_ln106_3, i64 %select_ln101_3" [d1.cpp:106]   --->   Operation 152 'add' 'add_ln106_3' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 153 [1/1] (0.00ns)   --->   "%zext_ln107 = zext i1 %icmp_ln106_3" [d1.cpp:107]   --->   Operation 153 'zext' 'zext_ln107' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 154 [1/1] (0.67ns)   --->   "%sub_ln98_1 = sub i4 %sext_ln106_1, i4 %zext_ln107" [d1.cpp:98]   --->   Operation 154 'sub' 'sub_ln98_1' <Predicate = true> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 155 [1/1] (0.48ns)   --->   "%tmp_10 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln98_1" [d1.cpp:106]   --->   Operation 155 'mux' 'tmp_10' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 156 [1/1] (0.00ns)   --->   "%zext_ln106_4 = zext i32 %tmp_10" [d1.cpp:106]   --->   Operation 156 'zext' 'zext_ln106_4' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 157 '%mul_ln106_4 = mul i64 %zext_ln106_4, i64 %zext_ln106'
ST_3 : Operation 157 [1/1] (2.10ns)   --->   "%mul_ln106_4 = mul i64 %zext_ln106_4, i64 %zext_ln106" [d1.cpp:106]   --->   Operation 157 'mul' 'mul_ln106_4' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 158 [1/1] (0.00ns) (grouped into LUT with out node add_ln106_4)   --->   "%select_ln106_6 = select i1 %icmp_ln106_4, i64 18446744073709551615, i64 0" [d1.cpp:106]   --->   Operation 158 'select' 'select_ln106_6' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 159 [1/1] (0.00ns) (grouped into LUT with out node add_ln106_4)   --->   "%and_ln106_4 = and i64 %mul_ln106_4, i64 %select_ln106_6" [d1.cpp:106]   --->   Operation 159 'and' 'and_ln106_4' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 160 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln106_4 = add i64 %and_ln106_4, i64 %select_ln101_4" [d1.cpp:106]   --->   Operation 160 'add' 'add_ln106_4' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 161 [1/1] (0.00ns)   --->   "%zext_ln107_1 = zext i1 %icmp_ln106_4" [d1.cpp:107]   --->   Operation 161 'zext' 'zext_ln107_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 162 [1/1] (0.79ns)   --->   "%sub_ln98_2 = sub i4 %sub_ln98_1, i4 %zext_ln107_1" [d1.cpp:98]   --->   Operation 162 'sub' 'sub_ln98_2' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 163 [1/1] (0.48ns)   --->   "%tmp_11 = mux i32 @_ssdm_op_Mux.ap_auto.16i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_10_reload_read, i32 %arg2_r_11_reload_read, i32 %arg2_r_12_reload_read, i32 %arg2_r_13_reload_read, i32 %arg2_r_14_reload_read, i32 %arg2_r_15_reload_read, i4 %sub_ln98_2" [d1.cpp:106]   --->   Operation 163 'mux' 'tmp_11' <Predicate = true> <Delay = 0.48> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 164 [1/1] (0.00ns)   --->   "%zext_ln106_5 = zext i32 %tmp_11" [d1.cpp:106]   --->   Operation 164 'zext' 'zext_ln106_5' <Predicate = true> <Delay = 0.00>
ST_3 : [1/1] (1.31ns)   --->   Input mux for Operation 165 '%mul_ln106_5 = mul i64 %zext_ln106_5, i64 %zext_ln106'
ST_3 : Operation 165 [1/1] (2.10ns)   --->   "%mul_ln106_5 = mul i64 %zext_ln106_5, i64 %zext_ln106" [d1.cpp:106]   --->   Operation 165 'mul' 'mul_ln106_5' <Predicate = true> <Delay = 2.10> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 166 [1/1] (1.08ns)   --->   "%add_ln106_5 = add i64 %mul_ln106_5, i64 %add280_14130_load" [d1.cpp:106]   --->   Operation 166 'add' 'add_ln106_5' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 167 [1/1] (0.42ns)   --->   "%store_ln88 = store i64 %add_ln106_5, i64 %add280_14130" [d1.cpp:88]   --->   Operation 167 'store' 'store_ln88' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 168 [1/1] (0.42ns)   --->   "%store_ln88 = store i64 %add_ln106_4, i64 %add256_5125" [d1.cpp:88]   --->   Operation 168 'store' 'store_ln88' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 169 [1/1] (0.42ns)   --->   "%store_ln88 = store i64 %add_ln106_3, i64 %add256_4122" [d1.cpp:88]   --->   Operation 169 'store' 'store_ln88' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 170 [1/1] (0.42ns)   --->   "%store_ln88 = store i64 %add_ln106_2, i64 %add256_3119" [d1.cpp:88]   --->   Operation 170 'store' 'store_ln88' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 171 [1/1] (0.42ns)   --->   "%store_ln88 = store i64 %add_ln106_1, i64 %add256_2116" [d1.cpp:88]   --->   Operation 171 'store' 'store_ln88' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 172 [1/1] (0.42ns)   --->   "%store_ln88 = store i64 %add_ln106, i64 %add256_1113" [d1.cpp:88]   --->   Operation 172 'store' 'store_ln88' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 173 [1/1] (0.00ns)   --->   "%br_ln88 = br void %if.end" [d1.cpp:88]   --->   Operation 173 'br' 'br_ln88' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 0.427ns
The critical path consists of the following:
	'alloca' operation ('i') [47]  (0.000 ns)
	'store' operation ('store_ln0') of constant 14 on local variable 'i' [81]  (0.427 ns)

 <State 2>: 5.727ns
The critical path consists of the following:
	'load' operation ('i', d1.cpp:88) on local variable 'i' [91]  (0.000 ns)
	'xor' operation ('xor_ln103', d1.cpp:103) [110]  (0.123 ns)
	'mux' operation ('tmp_1', d1.cpp:103) [111]  (0.672 ns)
	multiplexor before operation 'mul' with delay (1.317 ns)
'mul' operation ('mul_ln103', d1.cpp:103) [113]  (2.103 ns)
	'add' operation ('add_ln103', d1.cpp:103) [114]  (1.085 ns)
	'store' operation ('store_ln88', d1.cpp:88) of variable 'add_ln103', d1.cpp:103 on local variable 'add256110' [209]  (0.427 ns)

 <State 3>: 6.890ns
The critical path consists of the following:
	'sub' operation ('sub_ln98_1', d1.cpp:98) [187]  (0.673 ns)
	'sub' operation ('sub_ln98_2', d1.cpp:98) [196]  (0.797 ns)
	'mux' operation ('tmp_11', d1.cpp:106) [197]  (0.489 ns)
	multiplexor before operation 'mul' with delay (1.317 ns)
'mul' operation ('mul_ln106_5', d1.cpp:106) [199]  (2.103 ns)
	'add' operation ('add_ln106_5', d1.cpp:106) [200]  (1.085 ns)
	'store' operation ('store_ln88', d1.cpp:88) of variable 'add_ln106_5', d1.cpp:106 on local variable 'add280_14130' [203]  (0.427 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
