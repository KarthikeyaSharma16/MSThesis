-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_34_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arg1_r_137_0256_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_238_0257_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_0_0255_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_0_0259_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_1_0260_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_2_0261_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_0_0263_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_1_0264_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_2_0265_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln40 : IN STD_LOGIC_VECTOR (31 downto 0);
    arr_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    arr_ce0 : OUT STD_LOGIC;
    arr_we0 : OUT STD_LOGIC;
    arr_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    arr_ce1 : OUT STD_LOGIC;
    arr_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    arr_1_ce0 : OUT STD_LOGIC;
    arr_1_we0 : OUT STD_LOGIC;
    arr_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    arr_1_ce1 : OUT STD_LOGIC;
    arr_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    arr_2_ce0 : OUT STD_LOGIC;
    arr_2_we0 : OUT STD_LOGIC;
    arr_2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_2_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    arr_2_ce1 : OUT STD_LOGIC;
    arr_2_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_34_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln34_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln40_cast_fu_211_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln40_cast_reg_597 : STD_LOGIC_VECTOR (62 downto 0);
    signal indvars_iv_load_reg_604 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvars_iv_load_reg_604_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal indvars_iv_load_reg_604_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal indvars_iv_load_reg_604_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal indvars_iv_load_reg_604_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln37_fu_241_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln37_reg_613 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln37_reg_613_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln37_reg_613_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln37_reg_613_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln37_reg_613_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln3_reg_621 : STD_LOGIC_VECTOR (1 downto 0);
    signal arr_addr_reg_628 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln40_2_reg_634 : STD_LOGIC_VECTOR (1 downto 0);
    signal arr_1_addr_reg_641 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_reg_647 : STD_LOGIC_VECTOR (0 downto 0);
    signal arr_2_addr_reg_654 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln22_fu_275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_1_fu_80 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln34_fu_253_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_fu_84 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln34_1_fu_259_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_indvars_iv_load : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln40_1_fu_199_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln40_1_fu_199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln40_fu_203_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln40_fu_203_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln40_2_fu_207_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln40_2_fu_207_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln34_fu_237_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_247_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln37_fu_284_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln37_fu_284_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln37_fu_284_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln40_1_fu_300_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln40_3_fu_309_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln40_3_fu_309_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln40_3_fu_309_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln40_2_fu_325_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln40_4_fu_334_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln40_4_fu_334_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln40_4_fu_334_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_247_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln_fu_352_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln40_1_fu_362_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln40_2_fu_372_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln40_fu_348_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_382_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln40_1_fu_199_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1_fu_399_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_ln40_5_fu_434_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln40_3_fu_414_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln40_4_fu_424_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_444_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln40_fu_203_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_3_fu_484_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_484_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_484_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_484_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln40_2_fu_207_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln40_1_fu_461_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln40_2_fu_501_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln37_fu_284_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_1_fu_199_p10 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln40_2_fu_207_p10 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln40_3_fu_309_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_4_fu_334_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_fu_203_p10 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fiat_25519_carry_square_mul_32ns_32ns_63_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component fiat_25519_carry_square_urem_3ns_3ns_2_7_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component fiat_25519_carry_square_mul_3ns_5ns_7_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_4_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_3_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32ns_32ns_63_1_1_U18 : component fiat_25519_carry_square_mul_32ns_32ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => mul_ln40_1_fu_199_p0,
        din1 => mul_ln40_1_fu_199_p1,
        dout => mul_ln40_1_fu_199_p2);

    mul_32ns_32ns_63_1_1_U19 : component fiat_25519_carry_square_mul_32ns_32ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => mul_ln40_fu_203_p0,
        din1 => mul_ln40_fu_203_p1,
        dout => mul_ln40_fu_203_p2);

    mul_32ns_32ns_63_1_1_U20 : component fiat_25519_carry_square_mul_32ns_32ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => mul_ln40_2_fu_207_p0,
        din1 => mul_ln40_2_fu_207_p1,
        dout => mul_ln40_2_fu_207_p2);

    urem_3ns_3ns_2_7_1_U21 : component fiat_25519_carry_square_urem_3ns_3ns_2_7_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 3,
        din1_WIDTH => 3,
        dout_WIDTH => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_247_p0,
        din1 => ap_const_lv3_3,
        ce => ap_const_logic_1,
        dout => grp_fu_247_p2);

    mul_3ns_5ns_7_1_1_U22 : component fiat_25519_carry_square_mul_3ns_5ns_7_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 5,
        dout_WIDTH => 7)
    port map (
        din0 => mul_ln37_fu_284_p0,
        din1 => mul_ln37_fu_284_p1,
        dout => mul_ln37_fu_284_p2);

    mul_3ns_5ns_7_1_1_U23 : component fiat_25519_carry_square_mul_3ns_5ns_7_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 5,
        dout_WIDTH => 7)
    port map (
        din0 => mul_ln40_3_fu_309_p0,
        din1 => mul_ln40_3_fu_309_p1,
        dout => mul_ln40_3_fu_309_p2);

    mul_3ns_5ns_7_1_1_U24 : component fiat_25519_carry_square_mul_3ns_5ns_7_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 5,
        dout_WIDTH => 7)
    port map (
        din0 => mul_ln40_4_fu_334_p0,
        din1 => mul_ln40_4_fu_334_p1,
        dout => mul_ln40_4_fu_334_p2);

    mux_4_2_32_1_1_U25 : component fiat_25519_carry_square_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => arg1_r_0_0255_reload,
        din1 => arg1_r_137_0256_reload,
        din2 => arg1_r_238_0257_reload,
        din3 => ap_const_lv32_0,
        din4 => trunc_ln3_reg_621,
        dout => phi_ln_fu_352_p6);

    mux_4_2_32_1_1_U26 : component fiat_25519_carry_square_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => arg1_r_1_0_0259_reload,
        din1 => arg1_r_1_1_0260_reload,
        din2 => arg1_r_1_2_0261_reload,
        din3 => ap_const_lv32_0,
        din4 => trunc_ln3_reg_621,
        dout => phi_ln40_1_fu_362_p6);

    mux_4_2_32_1_1_U27 : component fiat_25519_carry_square_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => arg1_r_2_0_0263_reload,
        din1 => arg1_r_2_1_0264_reload,
        din2 => arg1_r_2_2_0265_reload,
        din3 => ap_const_lv32_0,
        din4 => trunc_ln3_reg_621,
        dout => phi_ln40_2_fu_372_p6);

    mux_3_2_32_1_1_U28 : component fiat_25519_carry_square_mux_3_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => phi_ln_fu_352_p6,
        din1 => phi_ln40_1_fu_362_p6,
        din2 => phi_ln40_2_fu_372_p6,
        din3 => trunc_ln40_fu_348_p1,
        dout => tmp_fu_382_p5);

    mux_4_2_32_1_1_U29 : component fiat_25519_carry_square_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => arg1_r_0_0255_reload,
        din1 => arg1_r_137_0256_reload,
        din2 => arg1_r_238_0257_reload,
        din3 => ap_const_lv32_0,
        din4 => trunc_ln40_2_reg_634,
        dout => phi_ln40_3_fu_414_p6);

    mux_4_2_32_1_1_U30 : component fiat_25519_carry_square_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => arg1_r_1_0_0259_reload,
        din1 => arg1_r_1_1_0260_reload,
        din2 => arg1_r_1_2_0261_reload,
        din3 => ap_const_lv32_0,
        din4 => trunc_ln40_2_reg_634,
        dout => phi_ln40_4_fu_424_p6);

    mux_4_2_32_1_1_U31 : component fiat_25519_carry_square_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => arg1_r_2_0_0263_reload,
        din1 => arg1_r_2_1_0264_reload,
        din2 => arg1_r_2_2_0265_reload,
        din3 => ap_const_lv32_0,
        din4 => trunc_ln40_2_reg_634,
        dout => phi_ln40_5_fu_434_p6);

    mux_3_2_32_1_1_U32 : component fiat_25519_carry_square_mux_3_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => phi_ln40_5_fu_434_p6,
        din1 => phi_ln40_3_fu_414_p6,
        din2 => phi_ln40_4_fu_424_p6,
        din3 => trunc_ln40_fu_348_p1,
        dout => tmp_2_fu_444_p5);

    mux_3_2_32_1_1_U33 : component fiat_25519_carry_square_mux_3_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_3_fu_484_p1,
        din1 => tmp_3_fu_484_p2,
        din2 => tmp_3_fu_484_p3,
        din3 => trunc_ln40_fu_348_p1,
        dout => tmp_3_fu_484_p5);

    flow_control_loop_pipe_sequential_init_U : component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln34_fu_228_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_1_fu_80 <= add_ln34_fu_253_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_80 <= ap_const_lv4_3;
                end if;
            end if; 
        end if;
    end process;

    indvars_iv_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln34_fu_228_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvars_iv_fu_84 <= add_ln34_1_fu_259_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvars_iv_fu_84 <= ap_const_lv2_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                indvars_iv_load_reg_604 <= ap_sig_allocacmp_indvars_iv_load;
                indvars_iv_load_reg_604_pp0_iter1_reg <= indvars_iv_load_reg_604;
                sub_ln37_reg_613_pp0_iter1_reg <= sub_ln37_reg_613;
                    zext_ln40_cast_reg_597(31 downto 0) <= zext_ln40_cast_fu_211_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                arr_1_addr_reg_641 <= zext_ln22_fu_275_p1(2 - 1 downto 0);
                arr_2_addr_reg_654 <= zext_ln22_fu_275_p1(2 - 1 downto 0);
                arr_addr_reg_628 <= zext_ln22_fu_275_p1(2 - 1 downto 0);
                indvars_iv_load_reg_604_pp0_iter2_reg <= indvars_iv_load_reg_604_pp0_iter1_reg;
                indvars_iv_load_reg_604_pp0_iter3_reg <= indvars_iv_load_reg_604_pp0_iter2_reg;
                indvars_iv_load_reg_604_pp0_iter4_reg <= indvars_iv_load_reg_604_pp0_iter3_reg;
                sub_ln37_reg_613_pp0_iter2_reg <= sub_ln37_reg_613_pp0_iter1_reg;
                sub_ln37_reg_613_pp0_iter3_reg <= sub_ln37_reg_613_pp0_iter2_reg;
                sub_ln37_reg_613_pp0_iter4_reg <= sub_ln37_reg_613_pp0_iter3_reg;
                tmp_1_reg_647 <= mul_ln40_4_fu_334_p2(5 downto 5);
                trunc_ln3_reg_621 <= mul_ln37_fu_284_p2(6 downto 5);
                trunc_ln40_2_reg_634 <= mul_ln40_3_fu_309_p2(6 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_228_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sub_ln37_reg_613 <= sub_ln37_fu_241_p2;
            end if;
        end if;
    end process;
    zext_ln40_cast_reg_597(62 downto 32) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln34_1_fu_259_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvars_iv_load) + unsigned(ap_const_lv2_1));
    add_ln34_fu_253_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1_load) + unsigned(ap_const_lv4_3));
    add_ln40_1_fu_300_p2 <= std_logic_vector(unsigned(sub_ln37_reg_613_pp0_iter4_reg) + unsigned(ap_const_lv3_7));
    add_ln40_2_fu_325_p2 <= std_logic_vector(unsigned(sub_ln37_reg_613_pp0_iter4_reg) + unsigned(ap_const_lv3_6));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln34_fu_228_p2)
    begin
        if (((icmp_ln34_fu_228_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_1_fu_80, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1_load <= ap_const_lv4_3;
        else 
            ap_sig_allocacmp_i_1_load <= i_1_fu_80;
        end if; 
    end process;


    ap_sig_allocacmp_indvars_iv_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvars_iv_fu_84)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvars_iv_load <= ap_const_lv2_1;
        else 
            ap_sig_allocacmp_indvars_iv_load <= indvars_iv_fu_84;
        end if; 
    end process;

    arr_1_address0 <= arr_1_addr_reg_641;
    arr_1_address1 <= zext_ln22_fu_275_p1(2 - 1 downto 0);

    arr_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            arr_1_ce0 <= ap_const_logic_1;
        else 
            arr_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arr_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            arr_1_ce1 <= ap_const_logic_1;
        else 
            arr_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    arr_1_d0 <= std_logic_vector(unsigned(arr_1_q1) + unsigned(shl_ln40_1_fu_461_p3));

    arr_1_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            arr_1_we0 <= ap_const_logic_1;
        else 
            arr_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    arr_2_address0 <= arr_2_addr_reg_654;
    arr_2_address1 <= zext_ln22_fu_275_p1(2 - 1 downto 0);

    arr_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            arr_2_ce0 <= ap_const_logic_1;
        else 
            arr_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arr_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            arr_2_ce1 <= ap_const_logic_1;
        else 
            arr_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    arr_2_d0 <= std_logic_vector(unsigned(arr_2_q1) + unsigned(shl_ln40_2_fu_501_p3));

    arr_2_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            arr_2_we0 <= ap_const_logic_1;
        else 
            arr_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    arr_address0 <= arr_addr_reg_628;
    arr_address1 <= zext_ln22_fu_275_p1(2 - 1 downto 0);

    arr_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            arr_ce0 <= ap_const_logic_1;
        else 
            arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arr_ce1_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            arr_ce1 <= ap_const_logic_1;
        else 
            arr_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    arr_d0 <= std_logic_vector(unsigned(arr_q1) + unsigned(shl_ln1_fu_399_p3));

    arr_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            arr_we0 <= ap_const_logic_1;
        else 
            arr_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_247_p0 <= std_logic_vector(unsigned(ap_const_lv3_2) - unsigned(trunc_ln34_fu_237_p1));
    icmp_ln34_fu_228_p2 <= "1" when (ap_sig_allocacmp_indvars_iv_load = ap_const_lv2_3) else "0";
    mul_ln37_fu_284_p0 <= mul_ln37_fu_284_p00(3 - 1 downto 0);
    mul_ln37_fu_284_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln37_reg_613_pp0_iter4_reg),7));
    mul_ln37_fu_284_p1 <= ap_const_lv7_B(5 - 1 downto 0);
    mul_ln40_1_fu_199_p0 <= zext_ln40_cast_reg_597(32 - 1 downto 0);
    mul_ln40_1_fu_199_p1 <= mul_ln40_1_fu_199_p10(32 - 1 downto 0);
    mul_ln40_1_fu_199_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_382_p5),63));
    mul_ln40_2_fu_207_p0 <= zext_ln40_cast_reg_597(32 - 1 downto 0);
    mul_ln40_2_fu_207_p1 <= mul_ln40_2_fu_207_p10(32 - 1 downto 0);
    mul_ln40_2_fu_207_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_484_p5),63));
    mul_ln40_3_fu_309_p0 <= mul_ln40_3_fu_309_p00(3 - 1 downto 0);
    mul_ln40_3_fu_309_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_1_fu_300_p2),7));
    mul_ln40_3_fu_309_p1 <= ap_const_lv7_B(5 - 1 downto 0);
    mul_ln40_4_fu_334_p0 <= mul_ln40_4_fu_334_p00(3 - 1 downto 0);
    mul_ln40_4_fu_334_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_2_fu_325_p2),7));
    mul_ln40_4_fu_334_p1 <= ap_const_lv7_B(5 - 1 downto 0);
    mul_ln40_fu_203_p0 <= zext_ln40_cast_reg_597(32 - 1 downto 0);
    mul_ln40_fu_203_p1 <= mul_ln40_fu_203_p10(32 - 1 downto 0);
    mul_ln40_fu_203_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_444_p5),63));
    shl_ln1_fu_399_p3 <= (mul_ln40_1_fu_199_p2 & ap_const_lv1_0);
    shl_ln40_1_fu_461_p3 <= (mul_ln40_fu_203_p2 & ap_const_lv1_0);
    shl_ln40_2_fu_501_p3 <= (mul_ln40_2_fu_207_p2 & ap_const_lv1_0);
    sub_ln37_fu_241_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) - unsigned(trunc_ln34_fu_237_p1));
    tmp_3_fu_484_p1 <= 
        arg1_r_1_1_0260_reload when (tmp_1_reg_647(0) = '1') else 
        arg1_r_1_0_0259_reload;
    tmp_3_fu_484_p2 <= 
        arg1_r_2_1_0264_reload when (tmp_1_reg_647(0) = '1') else 
        arg1_r_2_0_0263_reload;
    tmp_3_fu_484_p3 <= 
        arg1_r_137_0256_reload when (tmp_1_reg_647(0) = '1') else 
        arg1_r_0_0255_reload;
    trunc_ln34_fu_237_p1 <= ap_sig_allocacmp_i_1_load(3 - 1 downto 0);
    trunc_ln40_fu_348_p1 <= grp_fu_247_p2(2 - 1 downto 0);
    zext_ln22_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_load_reg_604_pp0_iter4_reg),64));
    zext_ln40_cast_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln40),63));
end behav;
