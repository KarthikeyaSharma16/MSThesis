-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_68_9 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arr_load_18 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_load_17 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_load_16 : IN STD_LOGIC_VECTOR (63 downto 0);
    add11813_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_load_15 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_load_14 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul211 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul202 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul3 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul246 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul254 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul262 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul5 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul318 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul325 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul6 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul360 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul369 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul344 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul353 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul299 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul4 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul290 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul237 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul221 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul229 : IN STD_LOGIC_VECTOR (63 downto 0);
    add371_129_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add371_129_out_ap_vld : OUT STD_LOGIC;
    add239_127_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add239_127_out_ap_vld : OUT STD_LOGIC;
    add301_125_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add301_125_out_ap_vld : OUT STD_LOGIC;
    add21323_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add21323_out_ap_vld : OUT STD_LOGIC;
    add33720_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add33720_out_ap_vld : OUT STD_LOGIC;
    add27418_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add27418_out_ap_vld : OUT STD_LOGIC;
    p_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_68_9 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln68_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_100 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_fu_545_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_1_load_fu_377_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal empty_fu_104 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln78_fu_450_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add27418_fu_108 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln89_3_fu_403_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add33720_fu_112 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln100_3_fu_431_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add21323_fu_116 : STD_LOGIC_VECTOR (63 downto 0);
    signal add301_125_fu_120 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln94_2_fu_483_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln74_fu_465_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add239_127_fu_124 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln83_2_fu_506_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add371_129_fu_128 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln106_3_fu_534_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln89_fu_389_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln89_1_fu_393_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln89_2_fu_397_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln100_fu_417_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln100_1_fu_421_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln100_2_fu_425_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln78_1_fu_445_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln94_1_fu_478_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln94_fu_474_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln83_1_fu_501_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln83_fu_497_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln106_fu_520_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln106_1_fu_524_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln106_2_fu_528_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_359 : BOOLEAN;
    signal ap_condition_362 : BOOLEAN;
    signal ap_condition_365 : BOOLEAN;
    signal ap_condition_368 : BOOLEAN;
    signal ap_condition_371 : BOOLEAN;
    signal ap_condition_374 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    add21323_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add21323_fu_116 <= add11813_reload;
                elsif ((ap_const_boolean_1 = ap_condition_359)) then 
                    add21323_fu_116 <= add_ln78_fu_450_p2;
                end if;
            end if; 
        end if;
    end process;

    add239_127_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add239_127_fu_124 <= arr_load_17;
                elsif ((ap_const_boolean_1 = ap_condition_362)) then 
                    add239_127_fu_124 <= add_ln83_2_fu_506_p2;
                end if;
            end if; 
        end if;
    end process;

    add27418_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add27418_fu_108 <= arr_load_14;
                elsif ((ap_const_boolean_1 = ap_condition_365)) then 
                    add27418_fu_108 <= add_ln89_3_fu_403_p2;
                end if;
            end if; 
        end if;
    end process;

    add301_125_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add301_125_fu_120 <= arr_load_16;
                elsif ((ap_const_boolean_1 = ap_condition_368)) then 
                    add301_125_fu_120 <= add_ln94_2_fu_483_p2;
                end if;
            end if; 
        end if;
    end process;

    add33720_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add33720_fu_112 <= arr_load_15;
                elsif ((ap_const_boolean_1 = ap_condition_371)) then 
                    add33720_fu_112 <= add_ln100_3_fu_431_p2;
                end if;
            end if; 
        end if;
    end process;

    add371_129_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add371_129_fu_128 <= arr_load_18;
                elsif ((ap_const_boolean_1 = ap_condition_374)) then 
                    add371_129_fu_128 <= add_ln106_3_fu_534_p2;
                end if;
            end if; 
        end if;
    end process;

    empty_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_fu_104 <= add11813_reload;
                elsif ((ap_const_boolean_1 = ap_condition_359)) then 
                    empty_fu_104 <= add_ln78_fu_450_p2;
                end if;
            end if; 
        end if;
    end process;

    i_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_100 <= ap_const_lv3_0;
                elsif (((icmp_ln68_fu_380_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_100 <= i_2_fu_545_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add21323_out <= add21323_fu_116;

    add21323_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln68_fu_380_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_fu_380_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add21323_out_ap_vld <= ap_const_logic_1;
        else 
            add21323_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add239_127_out <= add239_127_fu_124;

    add239_127_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln68_fu_380_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_fu_380_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add239_127_out_ap_vld <= ap_const_logic_1;
        else 
            add239_127_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add27418_out <= add27418_fu_108;

    add27418_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln68_fu_380_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_fu_380_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add27418_out_ap_vld <= ap_const_logic_1;
        else 
            add27418_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add301_125_out <= add301_125_fu_120;

    add301_125_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln68_fu_380_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_fu_380_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add301_125_out_ap_vld <= ap_const_logic_1;
        else 
            add301_125_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add33720_out <= add33720_fu_112;

    add33720_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln68_fu_380_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_fu_380_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add33720_out_ap_vld <= ap_const_logic_1;
        else 
            add33720_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add371_129_out <= add371_129_fu_128;

    add371_129_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln68_fu_380_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_fu_380_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add371_129_out_ap_vld <= ap_const_logic_1;
        else 
            add371_129_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln100_1_fu_421_p2 <= std_logic_vector(unsigned(mul6) + unsigned(mul325));
    add_ln100_2_fu_425_p2 <= std_logic_vector(unsigned(add_ln100_fu_417_p2) + unsigned(add_ln100_1_fu_421_p2));
    add_ln100_3_fu_431_p2 <= std_logic_vector(unsigned(add_ln100_2_fu_425_p2) + unsigned(add33720_fu_112));
    add_ln100_fu_417_p2 <= std_logic_vector(unsigned(mul5) + unsigned(mul318));
    add_ln106_1_fu_524_p2 <= std_logic_vector(unsigned(mul353) + unsigned(mul344));
    add_ln106_2_fu_528_p2 <= std_logic_vector(unsigned(add_ln106_fu_520_p2) + unsigned(add_ln106_1_fu_524_p2));
    add_ln106_3_fu_534_p2 <= std_logic_vector(unsigned(add_ln106_2_fu_528_p2) + unsigned(add371_129_fu_128));
    add_ln106_fu_520_p2 <= std_logic_vector(unsigned(mul360) + unsigned(mul369));
    add_ln78_1_fu_445_p2 <= std_logic_vector(unsigned(mul211) + unsigned(add21323_fu_116));
    add_ln78_fu_450_p2 <= std_logic_vector(unsigned(add_ln78_1_fu_445_p2) + unsigned(mul202));
    add_ln83_1_fu_501_p2 <= std_logic_vector(unsigned(mul229) + unsigned(add239_127_fu_124));
    add_ln83_2_fu_506_p2 <= std_logic_vector(unsigned(add_ln83_1_fu_501_p2) + unsigned(add_ln83_fu_497_p2));
    add_ln83_fu_497_p2 <= std_logic_vector(unsigned(mul237) + unsigned(mul221));
    add_ln89_1_fu_393_p2 <= std_logic_vector(unsigned(mul262) + unsigned(mul254));
    add_ln89_2_fu_397_p2 <= std_logic_vector(unsigned(add_ln89_fu_389_p2) + unsigned(add_ln89_1_fu_393_p2));
    add_ln89_3_fu_403_p2 <= std_logic_vector(unsigned(add_ln89_2_fu_397_p2) + unsigned(add27418_fu_108));
    add_ln89_fu_389_p2 <= std_logic_vector(unsigned(mul3) + unsigned(mul246));
    add_ln94_1_fu_478_p2 <= std_logic_vector(unsigned(mul290) + unsigned(add301_125_fu_120));
    add_ln94_2_fu_483_p2 <= std_logic_vector(unsigned(add_ln94_1_fu_478_p2) + unsigned(add_ln94_fu_474_p2));
    add_ln94_fu_474_p2 <= std_logic_vector(unsigned(mul299) + unsigned(mul4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_359_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln68_fu_380_p2, i_1_load_fu_377_p1)
    begin
                ap_condition_359 <= ((icmp_ln68_fu_380_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_1_load_fu_377_p1 = ap_const_lv3_0));
    end process;


    ap_condition_362_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln68_fu_380_p2, or_ln74_fu_465_p2)
    begin
                ap_condition_362 <= ((icmp_ln68_fu_380_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (or_ln74_fu_465_p2 = ap_const_lv3_1));
    end process;


    ap_condition_365_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln68_fu_380_p2, i_1_load_fu_377_p1)
    begin
                ap_condition_365 <= ((icmp_ln68_fu_380_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_1_load_fu_377_p1 = ap_const_lv3_2));
    end process;


    ap_condition_368_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln68_fu_380_p2, or_ln74_fu_465_p2)
    begin
                ap_condition_368 <= ((icmp_ln68_fu_380_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (or_ln74_fu_465_p2 = ap_const_lv3_3));
    end process;


    ap_condition_371_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln68_fu_380_p2, i_1_load_fu_377_p1)
    begin
                ap_condition_371 <= ((icmp_ln68_fu_380_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_1_load_fu_377_p1 = ap_const_lv3_4));
    end process;


    ap_condition_374_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln68_fu_380_p2, or_ln74_fu_465_p2)
    begin
                ap_condition_374 <= ((icmp_ln68_fu_380_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (or_ln74_fu_465_p2 = ap_const_lv3_5));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln68_fu_380_p2)
    begin
        if (((icmp_ln68_fu_380_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    i_1_load_fu_377_p1 <= i_fu_100;
    i_2_fu_545_p2 <= std_logic_vector(unsigned(i_fu_100) + unsigned(ap_const_lv3_2));
    icmp_ln68_fu_380_p2 <= "1" when (i_fu_100 = ap_const_lv3_6) else "0";
    or_ln74_fu_465_p2 <= (i_fu_100 or ap_const_lv3_1);
    p_out <= empty_fu_104;

    p_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln68_fu_380_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_fu_380_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
