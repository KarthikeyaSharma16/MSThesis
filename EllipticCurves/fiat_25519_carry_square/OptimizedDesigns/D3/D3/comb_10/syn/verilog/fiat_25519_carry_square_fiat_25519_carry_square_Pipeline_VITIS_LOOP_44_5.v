// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_44_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr_1_load_3,
        arg1_r_address0,
        arg1_r_ce0,
        arg1_r_q0,
        arg1_r_address1,
        arg1_r_ce1,
        arg1_r_q1,
        arg1_r_1_address0,
        arg1_r_1_ce0,
        arg1_r_1_q0,
        arg1_r_1_address1,
        arg1_r_1_ce1,
        arg1_r_1_q1,
        add8117_out,
        add8117_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] arr_1_load_3;
output  [2:0] arg1_r_address0;
output   arg1_r_ce0;
input  [31:0] arg1_r_q0;
output  [2:0] arg1_r_address1;
output   arg1_r_ce1;
input  [31:0] arg1_r_q1;
output  [2:0] arg1_r_1_address0;
output   arg1_r_1_ce0;
input  [31:0] arg1_r_1_q0;
output  [2:0] arg1_r_1_address1;
output   arg1_r_1_ce1;
input  [31:0] arg1_r_1_q1;
output  [63:0] add8117_out;
output   add8117_out_ap_vld;

reg ap_idle;
reg arg1_r_ce0;
reg arg1_r_ce1;
reg arg1_r_1_ce0;
reg arg1_r_1_ce1;
reg add8117_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln44_fu_142_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [0:0] trunc_ln44_fu_158_p1;
reg   [0:0] trunc_ln44_reg_289;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] trunc_ln47_fu_184_p1;
reg   [0:0] trunc_ln47_reg_294;
wire   [63:0] zext_ln44_1_fu_172_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln47_fu_198_p1;
reg   [63:0] add8117_fu_54;
wire   [63:0] add_ln50_fu_256_p2;
wire    ap_loop_init;
reg   [2:0] i_fu_58;
wire   [2:0] add_ln44_fu_148_p2;
reg   [2:0] ap_sig_allocacmp_i_3;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] mul_ln50_fu_125_p0;
wire   [31:0] mul_ln50_fu_125_p1;
wire   [1:0] lshr_ln6_fu_162_p4;
wire   [3:0] zext_ln44_fu_154_p1;
wire   [3:0] empty_fu_178_p2;
wire   [2:0] lshr_ln7_fu_188_p4;
wire   [31:0] tmp_3_fu_212_p4;
wire   [30:0] tmp_4_fu_234_p1;
wire   [30:0] tmp_4_fu_234_p2;
wire   [30:0] tmp_4_fu_234_p4;
wire   [31:0] shl_ln6_fu_243_p3;
wire   [63:0] mul_ln50_fu_125_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [63:0] mul_ln50_fu_125_p00;
wire   [63:0] mul_ln50_fu_125_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fiat_25519_carry_square_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U43(
    .din0(mul_ln50_fu_125_p0),
    .din1(mul_ln50_fu_125_p1),
    .dout(mul_ln50_fu_125_p2)
);

fiat_25519_carry_square_mux_2_1_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_2_1_32_1_1_U44(
    .din0(arg1_r_q1),
    .din1(arg1_r_1_q1),
    .din2(trunc_ln44_reg_289),
    .dout(tmp_3_fu_212_p4)
);

fiat_25519_carry_square_mux_2_1_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 31 ))
mux_2_1_31_1_1_U45(
    .din0(tmp_4_fu_234_p1),
    .din1(tmp_4_fu_234_p2),
    .din2(trunc_ln47_reg_294),
    .dout(tmp_4_fu_234_p4)
);

fiat_25519_carry_square_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add8117_fu_54 <= arr_1_load_3;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add8117_fu_54 <= add_ln50_fu_256_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln44_fu_142_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_58 <= add_ln44_fu_148_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_58 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_142_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln44_reg_289 <= trunc_ln44_fu_158_p1;
        trunc_ln47_reg_294 <= trunc_ln47_fu_184_p1;
    end
end

always @ (*) begin
    if (((icmp_ln44_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add8117_out_ap_vld = 1'b1;
    end else begin
        add8117_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln44_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_3 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arg1_r_1_ce0 = 1'b1;
    end else begin
        arg1_r_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arg1_r_1_ce1 = 1'b1;
    end else begin
        arg1_r_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arg1_r_ce0 = 1'b1;
    end else begin
        arg1_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arg1_r_ce1 = 1'b1;
    end else begin
        arg1_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add8117_out = add8117_fu_54;

assign add_ln44_fu_148_p2 = (ap_sig_allocacmp_i_3 + 3'd1);

assign add_ln50_fu_256_p2 = (mul_ln50_fu_125_p2 + add8117_fu_54);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign arg1_r_1_address0 = zext_ln47_fu_198_p1;

assign arg1_r_1_address1 = zext_ln44_1_fu_172_p1;

assign arg1_r_address0 = zext_ln47_fu_198_p1;

assign arg1_r_address1 = zext_ln44_1_fu_172_p1;

assign empty_fu_178_p2 = ($signed(4'd9) - $signed(zext_ln44_fu_154_p1));

assign icmp_ln44_fu_142_p2 = ((ap_sig_allocacmp_i_3 == 3'd5) ? 1'b1 : 1'b0);

assign lshr_ln6_fu_162_p4 = {{ap_sig_allocacmp_i_3[2:1]}};

assign lshr_ln7_fu_188_p4 = {{empty_fu_178_p2[3:1]}};

assign mul_ln50_fu_125_p0 = mul_ln50_fu_125_p00;

assign mul_ln50_fu_125_p00 = shl_ln6_fu_243_p3;

assign mul_ln50_fu_125_p1 = mul_ln50_fu_125_p10;

assign mul_ln50_fu_125_p10 = tmp_3_fu_212_p4;

assign shl_ln6_fu_243_p3 = {{tmp_4_fu_234_p4}, {1'd0}};

assign tmp_4_fu_234_p1 = arg1_r_q0[30:0];

assign tmp_4_fu_234_p2 = arg1_r_1_q0[30:0];

assign trunc_ln44_fu_158_p1 = ap_sig_allocacmp_i_3[0:0];

assign trunc_ln47_fu_184_p1 = empty_fu_178_p2[0:0];

assign zext_ln44_1_fu_172_p1 = lshr_ln6_fu_162_p4;

assign zext_ln44_fu_154_p1 = ap_sig_allocacmp_i_3;

assign zext_ln47_fu_198_p1 = lshr_ln7_fu_188_p4;

endmodule //fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_44_5
