// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_23_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arg1_r_0_01_reload,
        arg1_r_1_04_reload,
        arg1_r_2_07_reload,
        arg1_r_0_1_010_reload,
        arg1_r_1_1_011_reload,
        arg1_r_2_1_012_reload,
        arg1_r_0_2_013_reload,
        arg1_r_1_2_014_reload,
        arg1_r_2_2_015_reload,
        arg1_r_0_3_016_reload,
        arg1_r_1_3_017_reload,
        arg1_r_2_3_018_reload,
        arr_address0,
        arr_ce0,
        arr_we0,
        arr_d0,
        arr_address1,
        arr_ce1,
        arr_q1,
        mul16,
        zext_ln23
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] arg1_r_0_01_reload;
input  [31:0] arg1_r_1_04_reload;
input  [31:0] arg1_r_2_07_reload;
input  [31:0] arg1_r_0_1_010_reload;
input  [31:0] arg1_r_1_1_011_reload;
input  [31:0] arg1_r_2_1_012_reload;
input  [31:0] arg1_r_0_2_013_reload;
input  [31:0] arg1_r_1_2_014_reload;
input  [31:0] arg1_r_2_2_015_reload;
input  [31:0] arg1_r_0_3_016_reload;
input  [31:0] arg1_r_1_3_017_reload;
input  [31:0] arg1_r_2_3_018_reload;
output  [3:0] arr_address0;
output   arr_ce0;
output   arr_we0;
output  [63:0] arr_d0;
output  [3:0] arr_address1;
output   arr_ce1;
input  [63:0] arr_q1;
input  [31:0] mul16;
input  [31:0] zext_ln23;

reg ap_idle;
reg arr_ce0;
reg arr_we0;
reg arr_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln23_fu_189_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [32:0] zext_ln23_cast_fu_177_p1;
reg   [32:0] zext_ln23_cast_reg_338;
wire   [0:0] empty_30_fu_210_p1;
reg   [0:0] empty_30_reg_346;
wire   [31:0] tmp_fu_272_p6;
reg   [31:0] tmp_reg_351;
reg   [3:0] arr_addr_reg_356;
wire   [63:0] zext_ln23_1_fu_195_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] i_1_fu_68;
wire   [3:0] add_ln23_fu_286_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
wire   [32:0] mul_ln30_fu_173_p0;
wire   [31:0] mul_ln30_fu_173_p1;
wire   [3:0] empty_fu_200_p2;
wire   [1:0] tmp_8_fu_224_p4;
wire   [1:0] tmp_9_fu_236_p4;
wire   [1:0] tmp_s_fu_248_p4;
wire   [1:0] tmp_1_fu_260_p4;
wire   [31:0] tmp_8_fu_224_p5;
wire   [31:0] tmp_9_fu_236_p5;
wire   [31:0] tmp_s_fu_248_p5;
wire   [31:0] tmp_1_fu_260_p5;
wire   [1:0] tmp_fu_272_p5;
wire   [32:0] shl_ln1_fu_301_p3;
wire   [32:0] select_ln30_fu_308_p3;
wire   [63:0] mul_ln30_fu_173_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [63:0] mul_ln30_fu_173_p00;
wire   [63:0] mul_ln30_fu_173_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fiat_25519_carry_square_mul_33ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 33 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_33ns_32ns_64_1_1_U16(
    .din0(mul_ln30_fu_173_p0),
    .din1(mul_ln30_fu_173_p1),
    .dout(mul_ln30_fu_173_p2)
);

fiat_25519_carry_square_mux_3_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_3_2_32_1_1_U17(
    .din0(arg1_r_0_01_reload),
    .din1(arg1_r_1_04_reload),
    .din2(arg1_r_2_07_reload),
    .din3(tmp_8_fu_224_p4),
    .dout(tmp_8_fu_224_p5)
);

fiat_25519_carry_square_mux_3_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_3_2_32_1_1_U18(
    .din0(arg1_r_0_1_010_reload),
    .din1(arg1_r_1_1_011_reload),
    .din2(arg1_r_2_1_012_reload),
    .din3(tmp_9_fu_236_p4),
    .dout(tmp_9_fu_236_p5)
);

fiat_25519_carry_square_mux_3_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_3_2_32_1_1_U19(
    .din0(arg1_r_0_2_013_reload),
    .din1(arg1_r_1_2_014_reload),
    .din2(arg1_r_2_2_015_reload),
    .din3(tmp_s_fu_248_p4),
    .dout(tmp_s_fu_248_p5)
);

fiat_25519_carry_square_mux_3_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_3_2_32_1_1_U20(
    .din0(arg1_r_0_3_016_reload),
    .din1(arg1_r_1_3_017_reload),
    .din2(arg1_r_2_3_018_reload),
    .din3(tmp_1_fu_260_p4),
    .dout(tmp_1_fu_260_p5)
);

fiat_25519_carry_square_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U21(
    .din0(tmp_8_fu_224_p5),
    .din1(tmp_9_fu_236_p5),
    .din2(tmp_s_fu_248_p5),
    .din3(tmp_1_fu_260_p5),
    .din4(tmp_fu_272_p5),
    .dout(tmp_fu_272_p6)
);

fiat_25519_carry_square_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln23_fu_189_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_68 <= add_ln23_fu_286_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_68 <= 4'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_189_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_addr_reg_356 <= zext_ln23_1_fu_195_p1;
        empty_30_reg_346 <= empty_30_fu_210_p1;
        tmp_reg_351 <= tmp_fu_272_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln23_cast_reg_338[31 : 0] <= zext_ln23_cast_fu_177_p1[31 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 4'd1;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_ce0 = 1'b1;
    end else begin
        arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_ce1 = 1'b1;
    end else begin
        arr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_we0 = 1'b1;
    end else begin
        arr_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_286_p2 = (ap_sig_allocacmp_i + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign arr_address0 = arr_addr_reg_356;

assign arr_address1 = zext_ln23_1_fu_195_p1;

assign arr_d0 = (arr_q1 + mul_ln30_fu_173_p2);

assign empty_30_fu_210_p1 = ap_sig_allocacmp_i[0:0];

assign empty_fu_200_p2 = ($signed(4'd9) - $signed(ap_sig_allocacmp_i));

assign icmp_ln23_fu_189_p2 = ((ap_sig_allocacmp_i == 4'd9) ? 1'b1 : 1'b0);

assign mul_ln30_fu_173_p0 = mul_ln30_fu_173_p00;

assign mul_ln30_fu_173_p00 = select_ln30_fu_308_p3;

assign mul_ln30_fu_173_p1 = mul_ln30_fu_173_p10;

assign mul_ln30_fu_173_p10 = tmp_reg_351;

assign select_ln30_fu_308_p3 = ((empty_30_reg_346[0:0] == 1'b1) ? zext_ln23_cast_reg_338 : shl_ln1_fu_301_p3);

assign shl_ln1_fu_301_p3 = {{mul16}, {1'd0}};

assign tmp_1_fu_260_p4 = {{empty_fu_200_p2[3:2]}};

assign tmp_8_fu_224_p4 = {{empty_fu_200_p2[3:2]}};

assign tmp_9_fu_236_p4 = {{empty_fu_200_p2[3:2]}};

assign tmp_fu_272_p5 = empty_fu_200_p2[1:0];

assign tmp_s_fu_248_p4 = {{empty_fu_200_p2[3:2]}};

assign zext_ln23_1_fu_195_p1 = ap_sig_allocacmp_i;

assign zext_ln23_cast_fu_177_p1 = zext_ln23;

always @ (posedge ap_clk) begin
    zext_ln23_cast_reg_338[32] <= 1'b0;
end

endmodule //fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_23_1
