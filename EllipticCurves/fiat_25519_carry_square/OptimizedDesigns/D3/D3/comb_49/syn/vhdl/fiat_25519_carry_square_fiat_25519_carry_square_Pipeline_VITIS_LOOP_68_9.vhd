-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_68_9 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arr_1_load_5 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_2_load_4 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_3_load_4 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_load_5 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_load_4 : IN STD_LOGIC_VECTOR (63 downto 0);
    add_ln60_3 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul211 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul202 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul229 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul237 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul221 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul254 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul262 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul2 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul246 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul299 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul290 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul3 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul5 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul325 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul318 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul4 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul369 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul360 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul344 : IN STD_LOGIC_VECTOR (63 downto 0);
    mul353 : IN STD_LOGIC_VECTOR (63 downto 0);
    add23924_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add23924_out_ap_vld : OUT STD_LOGIC;
    add27422_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add27422_out_ap_vld : OUT STD_LOGIC;
    add30120_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add30120_out_ap_vld : OUT STD_LOGIC;
    add33718_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add33718_out_ap_vld : OUT STD_LOGIC;
    add37116_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add37116_out_ap_vld : OUT STD_LOGIC;
    add20414_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add20414_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_68_9 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln68_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_98 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_fu_368_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_1_load_fu_359_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal add20414_fu_102 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln78_fu_511_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add37116_fu_106 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln106_3_fu_493_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add33718_fu_110 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln100_3_fu_391_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add30120_fu_114 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln94_2_fu_414_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add27422_fu_118 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln89_3_fu_442_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add23924_fu_122 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln83_2_fu_465_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln100_fu_377_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln100_1_fu_381_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln100_2_fu_385_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln94_fu_405_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln94_1_fu_409_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln89_fu_428_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln89_1_fu_432_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln89_2_fu_436_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln83_fu_456_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln83_1_fu_460_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln106_fu_479_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln106_1_fu_483_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln106_2_fu_487_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln78_1_fu_507_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_360 : BOOLEAN;
    signal ap_condition_364 : BOOLEAN;
    signal ap_condition_367 : BOOLEAN;
    signal ap_condition_370 : BOOLEAN;
    signal ap_condition_373 : BOOLEAN;
    signal ap_condition_376 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    add20414_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add20414_fu_102 <= add_ln60_3;
                elsif ((ap_const_boolean_1 = ap_condition_360)) then 
                    add20414_fu_102 <= add_ln78_fu_511_p2;
                end if;
            end if; 
        end if;
    end process;

    add23924_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add23924_fu_122 <= arr_1_load_5;
                elsif ((ap_const_boolean_1 = ap_condition_364)) then 
                    add23924_fu_122 <= add_ln83_2_fu_465_p2;
                end if;
            end if; 
        end if;
    end process;

    add27422_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add27422_fu_118 <= arr_2_load_4;
                elsif ((ap_const_boolean_1 = ap_condition_367)) then 
                    add27422_fu_118 <= add_ln89_3_fu_442_p2;
                end if;
            end if; 
        end if;
    end process;

    add30120_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add30120_fu_114 <= arr_3_load_4;
                elsif ((ap_const_boolean_1 = ap_condition_370)) then 
                    add30120_fu_114 <= add_ln94_2_fu_414_p2;
                end if;
            end if; 
        end if;
    end process;

    add33718_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add33718_fu_110 <= arr_load_5;
                elsif ((ap_const_boolean_1 = ap_condition_373)) then 
                    add33718_fu_110 <= add_ln100_3_fu_391_p2;
                end if;
            end if; 
        end if;
    end process;

    add37116_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add37116_fu_106 <= arr_load_4;
                elsif ((ap_const_boolean_1 = ap_condition_376)) then 
                    add37116_fu_106 <= add_ln106_3_fu_493_p2;
                end if;
            end if; 
        end if;
    end process;

    i_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_98 <= ap_const_lv3_0;
                elsif (((icmp_ln68_fu_362_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_98 <= i_2_fu_368_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add20414_out <= add20414_fu_102;

    add20414_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln68_fu_362_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_fu_362_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add20414_out_ap_vld <= ap_const_logic_1;
        else 
            add20414_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add23924_out <= add23924_fu_122;

    add23924_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln68_fu_362_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_fu_362_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add23924_out_ap_vld <= ap_const_logic_1;
        else 
            add23924_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add27422_out <= add27422_fu_118;

    add27422_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln68_fu_362_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_fu_362_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add27422_out_ap_vld <= ap_const_logic_1;
        else 
            add27422_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add30120_out <= add30120_fu_114;

    add30120_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln68_fu_362_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_fu_362_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add30120_out_ap_vld <= ap_const_logic_1;
        else 
            add30120_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add33718_out <= add33718_fu_110;

    add33718_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln68_fu_362_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_fu_362_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add33718_out_ap_vld <= ap_const_logic_1;
        else 
            add33718_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add37116_out <= add37116_fu_106;

    add37116_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln68_fu_362_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_fu_362_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add37116_out_ap_vld <= ap_const_logic_1;
        else 
            add37116_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln100_1_fu_381_p2 <= std_logic_vector(unsigned(mul4) + unsigned(mul318));
    add_ln100_2_fu_385_p2 <= std_logic_vector(unsigned(add_ln100_fu_377_p2) + unsigned(add_ln100_1_fu_381_p2));
    add_ln100_3_fu_391_p2 <= std_logic_vector(unsigned(add_ln100_2_fu_385_p2) + unsigned(add33718_fu_110));
    add_ln100_fu_377_p2 <= std_logic_vector(unsigned(mul5) + unsigned(mul325));
    add_ln106_1_fu_483_p2 <= std_logic_vector(unsigned(mul353) + unsigned(mul344));
    add_ln106_2_fu_487_p2 <= std_logic_vector(unsigned(add_ln106_fu_479_p2) + unsigned(add_ln106_1_fu_483_p2));
    add_ln106_3_fu_493_p2 <= std_logic_vector(unsigned(add_ln106_2_fu_487_p2) + unsigned(add37116_fu_106));
    add_ln106_fu_479_p2 <= std_logic_vector(unsigned(mul369) + unsigned(mul360));
    add_ln78_1_fu_507_p2 <= std_logic_vector(unsigned(mul202) + unsigned(mul211));
    add_ln78_fu_511_p2 <= std_logic_vector(unsigned(add_ln78_1_fu_507_p2) + unsigned(add20414_fu_102));
    add_ln83_1_fu_460_p2 <= std_logic_vector(unsigned(add_ln83_fu_456_p2) + unsigned(mul221));
    add_ln83_2_fu_465_p2 <= std_logic_vector(unsigned(add_ln83_1_fu_460_p2) + unsigned(add23924_fu_122));
    add_ln83_fu_456_p2 <= std_logic_vector(unsigned(mul229) + unsigned(mul237));
    add_ln89_1_fu_432_p2 <= std_logic_vector(unsigned(mul246) + unsigned(mul2));
    add_ln89_2_fu_436_p2 <= std_logic_vector(unsigned(add_ln89_fu_428_p2) + unsigned(add_ln89_1_fu_432_p2));
    add_ln89_3_fu_442_p2 <= std_logic_vector(unsigned(add_ln89_2_fu_436_p2) + unsigned(add27422_fu_118));
    add_ln89_fu_428_p2 <= std_logic_vector(unsigned(mul254) + unsigned(mul262));
    add_ln94_1_fu_409_p2 <= std_logic_vector(unsigned(add_ln94_fu_405_p2) + unsigned(mul3));
    add_ln94_2_fu_414_p2 <= std_logic_vector(unsigned(add_ln94_1_fu_409_p2) + unsigned(add30120_fu_114));
    add_ln94_fu_405_p2 <= std_logic_vector(unsigned(mul299) + unsigned(mul290));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_360_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln68_fu_362_p2, i_1_load_fu_359_p1)
    begin
                ap_condition_360 <= (not((i_1_load_fu_359_p1 = ap_const_lv3_4)) and not((i_1_load_fu_359_p1 = ap_const_lv3_3)) and not((i_1_load_fu_359_p1 = ap_const_lv3_2)) and not((i_1_load_fu_359_p1 = ap_const_lv3_1)) and not((i_1_load_fu_359_p1 = ap_const_lv3_5)) and (icmp_ln68_fu_362_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_364_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln68_fu_362_p2, i_1_load_fu_359_p1)
    begin
                ap_condition_364 <= ((icmp_ln68_fu_362_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_1_load_fu_359_p1 = ap_const_lv3_1));
    end process;


    ap_condition_367_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln68_fu_362_p2, i_1_load_fu_359_p1)
    begin
                ap_condition_367 <= ((icmp_ln68_fu_362_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_1_load_fu_359_p1 = ap_const_lv3_2));
    end process;


    ap_condition_370_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln68_fu_362_p2, i_1_load_fu_359_p1)
    begin
                ap_condition_370 <= ((icmp_ln68_fu_362_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_1_load_fu_359_p1 = ap_const_lv3_3));
    end process;


    ap_condition_373_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln68_fu_362_p2, i_1_load_fu_359_p1)
    begin
                ap_condition_373 <= ((icmp_ln68_fu_362_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_1_load_fu_359_p1 = ap_const_lv3_4));
    end process;


    ap_condition_376_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln68_fu_362_p2, i_1_load_fu_359_p1)
    begin
                ap_condition_376 <= ((icmp_ln68_fu_362_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_1_load_fu_359_p1 = ap_const_lv3_5));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln68_fu_362_p2)
    begin
        if (((icmp_ln68_fu_362_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    i_1_load_fu_359_p1 <= i_fu_98;
    i_2_fu_368_p2 <= std_logic_vector(unsigned(i_fu_98) + unsigned(ap_const_lv3_1));
    icmp_ln68_fu_362_p2 <= "1" when (i_fu_98 = ap_const_lv3_6) else "0";
end behav;
