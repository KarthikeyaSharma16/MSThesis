-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_23_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arr_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    arr_1_ce0 : OUT STD_LOGIC;
    arr_1_we0 : OUT STD_LOGIC;
    arr_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    arr_1_ce1 : OUT STD_LOGIC;
    arr_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    arr_ce0 : OUT STD_LOGIC;
    arr_we0 : OUT STD_LOGIC;
    arr_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    arr_ce1 : OUT STD_LOGIC;
    arr_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_0_01_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_04_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_07_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_0_1_010_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_1_011_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_1_012_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_0_2_013_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_2_014_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_2_015_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_0_3_016_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_3_017_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_3_018_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    conv17 : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln30_1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_23_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln23_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal zext_ln30_1_cast_fu_212_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln30_1_cast_reg_490 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal conv17_cast_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv17_cast_reg_495 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln23_fu_234_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln23_reg_503 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_321_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_509 : STD_LOGIC_VECTOR (31 downto 0);
    signal arr_1_addr_reg_514 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_410_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal arr_addr_reg_525 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln22_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln30_3_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_fu_82 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln23_fu_424_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln30_1_fu_204_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_1_fu_204_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_fu_208_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln_fu_238_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_fu_253_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_273_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_285_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_297_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_309_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_273_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_285_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_297_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_309_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln26_fu_259_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln29_fu_335_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln22_1_fu_341_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln30_1_fu_356_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln30_1_fu_362_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln30_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_410_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_410_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_439_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln30_fu_208_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln30_1_fu_204_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_3_fu_455_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_468_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln30_1_fu_204_p10 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln30_fu_208_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fiat_25519_carry_square_mul_32ns_32ns_63_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component fiat_25519_carry_square_mul_32ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_3_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_4_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_2_1_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32ns_32ns_63_1_1_U17 : component fiat_25519_carry_square_mul_32ns_32ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => mul_ln30_1_fu_204_p0,
        din1 => mul_ln30_1_fu_204_p1,
        dout => mul_ln30_1_fu_204_p2);

    mul_32ns_32ns_64_1_1_U18 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln30_fu_208_p0,
        din1 => mul_ln30_fu_208_p1,
        dout => mul_ln30_fu_208_p2);

    mux_3_2_32_1_1_U19 : component fiat_25519_carry_square_mux_3_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => arg1_r_0_01_reload,
        din1 => arg1_r_1_04_reload,
        din2 => arg1_r_2_07_reload,
        din3 => tmp_s_fu_273_p4,
        dout => tmp_s_fu_273_p5);

    mux_3_2_32_1_1_U20 : component fiat_25519_carry_square_mux_3_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => arg1_r_0_1_010_reload,
        din1 => arg1_r_1_1_011_reload,
        din2 => arg1_r_2_1_012_reload,
        din3 => tmp_4_fu_285_p4,
        dout => tmp_4_fu_285_p5);

    mux_3_2_32_1_1_U21 : component fiat_25519_carry_square_mux_3_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => arg1_r_0_2_013_reload,
        din1 => arg1_r_1_2_014_reload,
        din2 => arg1_r_2_2_015_reload,
        din3 => tmp_5_fu_297_p4,
        dout => tmp_5_fu_297_p5);

    mux_3_2_32_1_1_U22 : component fiat_25519_carry_square_mux_3_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => arg1_r_0_3_016_reload,
        din1 => arg1_r_1_3_017_reload,
        din2 => arg1_r_2_3_018_reload,
        din3 => tmp_6_fu_309_p4,
        dout => tmp_6_fu_309_p5);

    mux_4_2_32_1_1_U23 : component fiat_25519_carry_square_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_s_fu_273_p5,
        din1 => tmp_4_fu_285_p5,
        din2 => tmp_5_fu_297_p5,
        din3 => tmp_6_fu_309_p5,
        din4 => trunc_ln26_fu_259_p1,
        dout => tmp_fu_321_p6);

    mux_4_2_32_1_1_U24 : component fiat_25519_carry_square_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_2_fu_410_p1,
        din1 => tmp_2_fu_410_p2,
        din2 => tmp_2_fu_410_p3,
        din3 => tmp_2_fu_410_p4,
        din4 => trunc_ln26_fu_259_p1,
        dout => tmp_2_fu_410_p6);

    mux_2_1_64_1_1_U25 : component fiat_25519_carry_square_mux_2_1_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 1,
        dout_WIDTH => 64)
    port map (
        din0 => ap_const_lv64_0,
        din1 => arr_1_q1,
        din2 => trunc_ln23_reg_503,
        dout => tmp_1_fu_439_p4);

    mux_2_1_64_1_1_U26 : component fiat_25519_carry_square_mux_2_1_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 1,
        dout_WIDTH => 64)
    port map (
        din0 => ap_const_lv64_0,
        din1 => arr_q1,
        din2 => trunc_ln23_reg_503,
        dout => tmp_3_fu_455_p4);

    flow_control_loop_pipe_sequential_init_U : component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln23_fu_228_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_1_fu_82 <= add_ln23_fu_424_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_82 <= ap_const_lv4_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_228_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    arr_1_addr_reg_514(1 downto 0) <= zext_ln22_fu_248_p1(3 - 1 downto 0)(1 downto 0);
                arr_addr_reg_525 <= zext_ln30_3_fu_351_p1(3 - 1 downto 0);
                tmp_2_reg_520 <= tmp_2_fu_410_p6;
                tmp_reg_509 <= tmp_fu_321_p6;
                trunc_ln23_reg_503 <= trunc_ln23_fu_234_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    conv17_cast_reg_495(31 downto 0) <= conv17_cast_fu_216_p1(31 downto 0);
                    zext_ln30_1_cast_reg_490(31 downto 0) <= zext_ln30_1_cast_fu_212_p1(31 downto 0);
            end if;
        end if;
    end process;
    zext_ln30_1_cast_reg_490(62 downto 32) <= "0000000000000000000000000000000";
    conv17_cast_reg_495(63 downto 32) <= "00000000000000000000000000000000";
    arr_1_addr_reg_514(2) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln23_fu_424_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv4_2));
    add_ln29_fu_335_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv4_1));
    add_ln30_1_fu_356_p2 <= std_logic_vector(unsigned(empty_fu_253_p2) + unsigned(ap_const_lv4_F));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln23_fu_228_p2)
    begin
        if (((icmp_ln23_fu_228_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_1_fu_82, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv4_1;
        else 
            ap_sig_allocacmp_i <= i_1_fu_82;
        end if; 
    end process;

    arr_1_address0 <= arr_1_addr_reg_514;
    arr_1_address1 <= zext_ln22_fu_248_p1(3 - 1 downto 0);

    arr_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_1_ce0 <= ap_const_logic_1;
        else 
            arr_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arr_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_1_ce1 <= ap_const_logic_1;
        else 
            arr_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    arr_1_d0 <= std_logic_vector(unsigned(tmp_1_fu_439_p4) + unsigned(mul_ln30_fu_208_p2));

    arr_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_1_we0 <= ap_const_logic_1;
        else 
            arr_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    arr_address0 <= arr_addr_reg_525;
    arr_address1 <= zext_ln30_3_fu_351_p1(3 - 1 downto 0);

    arr_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_ce0 <= ap_const_logic_1;
        else 
            arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arr_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_ce1 <= ap_const_logic_1;
        else 
            arr_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    arr_d0 <= std_logic_vector(unsigned(tmp_3_fu_455_p4) + unsigned(shl_ln_fu_468_p3));

    arr_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_we0 <= ap_const_logic_1;
        else 
            arr_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv17_cast_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv17),64));
    empty_fu_253_p2 <= std_logic_vector(signed(ap_const_lv4_9) - signed(ap_sig_allocacmp_i));
    icmp_ln23_fu_228_p2 <= "1" when (unsigned(ap_sig_allocacmp_i) < unsigned(ap_const_lv4_9)) else "0";
    icmp_ln30_fu_372_p2 <= "1" when (trunc_ln30_1_fu_362_p4 = ap_const_lv2_0) else "0";
    lshr_ln22_1_fu_341_p4 <= add_ln29_fu_335_p2(3 downto 1);
    lshr_ln_fu_238_p4 <= ap_sig_allocacmp_i(2 downto 1);
    mul_ln30_1_fu_204_p0 <= zext_ln30_1_cast_reg_490(32 - 1 downto 0);
    mul_ln30_1_fu_204_p1 <= mul_ln30_1_fu_204_p10(32 - 1 downto 0);
    mul_ln30_1_fu_204_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_520),63));
    mul_ln30_fu_208_p0 <= mul_ln30_fu_208_p00(32 - 1 downto 0);
    mul_ln30_fu_208_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_509),64));
    mul_ln30_fu_208_p1 <= conv17_cast_reg_495(32 - 1 downto 0);
    shl_ln_fu_468_p3 <= (mul_ln30_1_fu_204_p2 & ap_const_lv1_0);
    tmp_2_fu_410_p1 <= 
        arg1_r_0_3_016_reload when (icmp_ln30_fu_372_p2(0) = '1') else 
        arg1_r_1_3_017_reload;
    tmp_2_fu_410_p2 <= 
        arg1_r_0_01_reload when (icmp_ln30_fu_372_p2(0) = '1') else 
        arg1_r_1_04_reload;
    tmp_2_fu_410_p3 <= 
        arg1_r_0_1_010_reload when (icmp_ln30_fu_372_p2(0) = '1') else 
        arg1_r_1_1_011_reload;
    tmp_2_fu_410_p4 <= 
        arg1_r_0_2_013_reload when (icmp_ln30_fu_372_p2(0) = '1') else 
        arg1_r_1_2_014_reload;
    tmp_4_fu_285_p4 <= empty_fu_253_p2(3 downto 2);
    tmp_5_fu_297_p4 <= empty_fu_253_p2(3 downto 2);
    tmp_6_fu_309_p4 <= empty_fu_253_p2(3 downto 2);
    tmp_s_fu_273_p4 <= empty_fu_253_p2(3 downto 2);
    trunc_ln23_fu_234_p1 <= ap_sig_allocacmp_i(1 - 1 downto 0);
    trunc_ln26_fu_259_p1 <= empty_fu_253_p2(2 - 1 downto 0);
    trunc_ln30_1_fu_362_p4 <= add_ln30_1_fu_356_p2(3 downto 2);
    zext_ln22_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_238_p4),64));
    zext_ln30_1_cast_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln30_1),63));
    zext_ln30_3_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln22_1_fu_341_p4),64));
end behav;
