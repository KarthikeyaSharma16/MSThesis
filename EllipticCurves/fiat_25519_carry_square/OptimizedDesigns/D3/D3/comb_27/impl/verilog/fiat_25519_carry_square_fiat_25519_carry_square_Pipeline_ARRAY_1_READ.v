// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_ARRAY_1_READ (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RFIFONUM,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        sext_ln17,
        arg1_r_2_2_0203_out,
        arg1_r_2_2_0203_out_ap_vld,
        arg1_r_2_1_0202_out,
        arg1_r_2_1_0202_out_ap_vld,
        arg1_r_2_0_0201_out,
        arg1_r_2_0_0201_out_ap_vld,
        arg1_r_1_2_0200_out,
        arg1_r_1_2_0200_out_ap_vld,
        arg1_r_1_1_0199_out,
        arg1_r_1_1_0199_out_ap_vld,
        arg1_r_1_0_0198_out,
        arg1_r_1_0_0198_out_ap_vld,
        arg1_r_3_0197_out,
        arg1_r_3_0197_out_ap_vld,
        arg1_r_238_0196_out,
        arg1_r_238_0196_out_ap_vld,
        arg1_r_137_0195_out,
        arg1_r_137_0195_out_ap_vld,
        arg1_r_0_0194_out,
        arg1_r_0_0194_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [63:0] m_axi_mem_AWADDR;
output  [0:0] m_axi_mem_AWID;
output  [31:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [0:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [31:0] m_axi_mem_WDATA;
output  [3:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [0:0] m_axi_mem_WID;
output  [0:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [63:0] m_axi_mem_ARADDR;
output  [0:0] m_axi_mem_ARID;
output  [31:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [0:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [31:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [0:0] m_axi_mem_RID;
input  [8:0] m_axi_mem_RFIFONUM;
input  [0:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [0:0] m_axi_mem_BID;
input  [0:0] m_axi_mem_BUSER;
input  [61:0] sext_ln17;
output  [31:0] arg1_r_2_2_0203_out;
output   arg1_r_2_2_0203_out_ap_vld;
output  [31:0] arg1_r_2_1_0202_out;
output   arg1_r_2_1_0202_out_ap_vld;
output  [31:0] arg1_r_2_0_0201_out;
output   arg1_r_2_0_0201_out_ap_vld;
output  [31:0] arg1_r_1_2_0200_out;
output   arg1_r_1_2_0200_out_ap_vld;
output  [31:0] arg1_r_1_1_0199_out;
output   arg1_r_1_1_0199_out_ap_vld;
output  [31:0] arg1_r_1_0_0198_out;
output   arg1_r_1_0_0198_out_ap_vld;
output  [31:0] arg1_r_3_0197_out;
output   arg1_r_3_0197_out_ap_vld;
output  [31:0] arg1_r_238_0196_out;
output   arg1_r_238_0196_out_ap_vld;
output  [31:0] arg1_r_137_0195_out;
output   arg1_r_137_0195_out_ap_vld;
output  [31:0] arg1_r_0_0194_out;
output   arg1_r_0_0194_out_ap_vld;

reg ap_idle;
reg m_axi_mem_RREADY;
reg arg1_r_2_2_0203_out_ap_vld;
reg arg1_r_2_1_0202_out_ap_vld;
reg arg1_r_2_0_0201_out_ap_vld;
reg arg1_r_1_2_0200_out_ap_vld;
reg arg1_r_1_1_0199_out_ap_vld;
reg arg1_r_1_0_0198_out_ap_vld;
reg arg1_r_3_0197_out_ap_vld;
reg arg1_r_238_0196_out_ap_vld;
reg arg1_r_137_0195_out_ap_vld;
reg arg1_r_0_0194_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln17_fu_252_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mem_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [1:0] trunc_ln17_fu_273_p1;
reg   [1:0] trunc_ln17_reg_501;
reg   [1:0] trunc_ln1_reg_505;
reg   [3:0] phi_urem12_fu_88;
wire   [3:0] select_ln17_fu_299_p3;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_phi_urem12_load;
reg   [7:0] phi_mul10_fu_92;
wire   [7:0] add_ln17_1_fu_267_p2;
reg   [7:0] ap_sig_allocacmp_phi_mul10_load;
reg   [3:0] i_fu_96;
wire   [3:0] add_ln17_fu_258_p2;
reg   [3:0] ap_sig_allocacmp_i_4;
reg   [31:0] arg1_r_0_1_fu_100;
reg   [31:0] arg1_r_0_2_fu_104;
reg   [31:0] arg1_r_0_3_fu_108;
reg   [31:0] arg1_r_0_4_fu_112;
reg   [31:0] arg1_r_0_5_fu_116;
reg   [31:0] arg1_r_0_6_fu_120;
reg   [31:0] arg1_r_0_7_fu_124;
reg   [31:0] arg1_r_0_8_fu_128;
reg   [31:0] arg1_r_0_9_fu_132;
reg   [31:0] arg1_r_0_10_fu_136;
reg    ap_block_pp0_stage0_01001;
wire   [3:0] add_ln17_2_fu_287_p2;
wire   [0:0] icmp_ln17_1_fu_293_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fiat_25519_carry_square_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln17_fu_252_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_96 <= add_ln17_fu_258_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_96 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln17_fu_252_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            phi_mul10_fu_92 <= add_ln17_1_fu_267_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            phi_mul10_fu_92 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln17_fu_252_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            phi_urem12_fu_88 <= select_ln17_fu_299_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            phi_urem12_fu_88 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~(trunc_ln17_reg_501 == 2'd1) & ~(trunc_ln17_reg_501 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln1_reg_505 == 2'd2))) begin
        arg1_r_0_10_fu_136 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln1_reg_505 == 2'd0) & (trunc_ln17_reg_501 == 2'd0))) begin
        arg1_r_0_1_fu_100 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln1_reg_505 == 2'd1) & (trunc_ln17_reg_501 == 2'd0))) begin
        arg1_r_0_2_fu_104 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln1_reg_505 == 2'd2) & (trunc_ln17_reg_501 == 2'd0))) begin
        arg1_r_0_3_fu_108 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln1_reg_505 == 2'd3) & (trunc_ln17_reg_501 == 2'd0))) begin
        arg1_r_0_4_fu_112 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln1_reg_505 == 2'd0) & (trunc_ln17_reg_501 == 2'd1))) begin
        arg1_r_0_5_fu_116 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln1_reg_505 == 2'd1) & (trunc_ln17_reg_501 == 2'd1))) begin
        arg1_r_0_6_fu_120 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln1_reg_505 == 2'd2) & (trunc_ln17_reg_501 == 2'd1))) begin
        arg1_r_0_7_fu_124 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~(trunc_ln17_reg_501 == 2'd1) & ~(trunc_ln17_reg_501 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln1_reg_505 == 2'd0))) begin
        arg1_r_0_8_fu_128 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~(trunc_ln17_reg_501 == 2'd1) & ~(trunc_ln17_reg_501 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln1_reg_505 == 2'd1))) begin
        arg1_r_0_9_fu_132 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_252_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln17_reg_501 <= trunc_ln17_fu_273_p1;
        trunc_ln1_reg_505 <= {{ap_sig_allocacmp_phi_mul10_load[7:6]}};
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_252_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_4 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_4 = i_fu_96;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_phi_mul10_load = 8'd0;
    end else begin
        ap_sig_allocacmp_phi_mul10_load = phi_mul10_fu_92;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_phi_urem12_load = 4'd0;
    end else begin
        ap_sig_allocacmp_phi_urem12_load = phi_urem12_fu_88;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_252_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arg1_r_0_0194_out_ap_vld = 1'b1;
    end else begin
        arg1_r_0_0194_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_252_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arg1_r_137_0195_out_ap_vld = 1'b1;
    end else begin
        arg1_r_137_0195_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_252_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arg1_r_1_0_0198_out_ap_vld = 1'b1;
    end else begin
        arg1_r_1_0_0198_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_252_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arg1_r_1_1_0199_out_ap_vld = 1'b1;
    end else begin
        arg1_r_1_1_0199_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_252_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arg1_r_1_2_0200_out_ap_vld = 1'b1;
    end else begin
        arg1_r_1_2_0200_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_252_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arg1_r_238_0196_out_ap_vld = 1'b1;
    end else begin
        arg1_r_238_0196_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_252_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arg1_r_2_0_0201_out_ap_vld = 1'b1;
    end else begin
        arg1_r_2_0_0201_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_252_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arg1_r_2_1_0202_out_ap_vld = 1'b1;
    end else begin
        arg1_r_2_1_0202_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_252_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arg1_r_2_2_0203_out_ap_vld = 1'b1;
    end else begin
        arg1_r_2_2_0203_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_252_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arg1_r_3_0197_out_ap_vld = 1'b1;
    end else begin
        arg1_r_3_0197_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_mem_RREADY = 1'b1;
    end else begin
        m_axi_mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln17_1_fu_267_p2 = (ap_sig_allocacmp_phi_mul10_load + 8'd22);

assign add_ln17_2_fu_287_p2 = (ap_sig_allocacmp_phi_urem12_load + 4'd1);

assign add_ln17_fu_258_p2 = (ap_sig_allocacmp_i_4 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((m_axi_mem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_mem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_mem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (m_axi_mem_RVALID == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign arg1_r_0_0194_out = arg1_r_0_1_fu_100;

assign arg1_r_137_0195_out = arg1_r_0_2_fu_104;

assign arg1_r_1_0_0198_out = arg1_r_0_5_fu_116;

assign arg1_r_1_1_0199_out = arg1_r_0_6_fu_120;

assign arg1_r_1_2_0200_out = arg1_r_0_7_fu_124;

assign arg1_r_238_0196_out = arg1_r_0_3_fu_108;

assign arg1_r_2_0_0201_out = arg1_r_0_8_fu_128;

assign arg1_r_2_1_0202_out = arg1_r_0_9_fu_132;

assign arg1_r_2_2_0203_out = arg1_r_0_10_fu_136;

assign arg1_r_3_0197_out = arg1_r_0_4_fu_112;

assign icmp_ln17_1_fu_293_p2 = ((add_ln17_2_fu_287_p2 < 4'd3) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_252_p2 = ((ap_sig_allocacmp_i_4 == 4'd10) ? 1'b1 : 1'b0);

assign m_axi_mem_ARADDR = 64'd0;

assign m_axi_mem_ARBURST = 2'd0;

assign m_axi_mem_ARCACHE = 4'd0;

assign m_axi_mem_ARID = 1'd0;

assign m_axi_mem_ARLEN = 32'd0;

assign m_axi_mem_ARLOCK = 2'd0;

assign m_axi_mem_ARPROT = 3'd0;

assign m_axi_mem_ARQOS = 4'd0;

assign m_axi_mem_ARREGION = 4'd0;

assign m_axi_mem_ARSIZE = 3'd0;

assign m_axi_mem_ARUSER = 1'd0;

assign m_axi_mem_ARVALID = 1'b0;

assign m_axi_mem_AWADDR = 64'd0;

assign m_axi_mem_AWBURST = 2'd0;

assign m_axi_mem_AWCACHE = 4'd0;

assign m_axi_mem_AWID = 1'd0;

assign m_axi_mem_AWLEN = 32'd0;

assign m_axi_mem_AWLOCK = 2'd0;

assign m_axi_mem_AWPROT = 3'd0;

assign m_axi_mem_AWQOS = 4'd0;

assign m_axi_mem_AWREGION = 4'd0;

assign m_axi_mem_AWSIZE = 3'd0;

assign m_axi_mem_AWUSER = 1'd0;

assign m_axi_mem_AWVALID = 1'b0;

assign m_axi_mem_BREADY = 1'b0;

assign m_axi_mem_WDATA = 32'd0;

assign m_axi_mem_WID = 1'd0;

assign m_axi_mem_WLAST = 1'b0;

assign m_axi_mem_WSTRB = 4'd0;

assign m_axi_mem_WUSER = 1'd0;

assign m_axi_mem_WVALID = 1'b0;

assign select_ln17_fu_299_p3 = ((icmp_ln17_1_fu_293_p2[0:0] == 1'b1) ? add_ln17_2_fu_287_p2 : 4'd0);

assign trunc_ln17_fu_273_p1 = ap_sig_allocacmp_phi_urem12_load[1:0];

endmodule //fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_ARRAY_1_READ
