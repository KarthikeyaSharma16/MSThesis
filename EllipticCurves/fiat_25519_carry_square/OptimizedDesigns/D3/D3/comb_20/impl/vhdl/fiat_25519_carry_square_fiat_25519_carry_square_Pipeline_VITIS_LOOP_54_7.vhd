-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_54_7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    add_ln40 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_load_5 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_1_load_5 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_load_4 : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_8_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_6_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_7_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_5_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_4_reload : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mul157 : IN STD_LOGIC_VECTOR (63 downto 0);
    add180_116_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add180_116_out_ap_vld : OUT STD_LOGIC;
    add151_115_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add151_115_out_ap_vld : OUT STD_LOGIC;
    add131_114_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add131_114_out_ap_vld : OUT STD_LOGIC;
    add118_113_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add118_113_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_54_7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_fu_282_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add118_113_fu_90 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln60_1_fu_494_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal add131_114_fu_94 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln61_1_fu_506_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add151_115_fu_98 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln62_2_fu_558_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add180_116_fu_102 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln64_1_fu_613_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_106 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln54_fu_619_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln60_fu_222_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln60_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln60_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln60_1_fu_226_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln60_1_fu_226_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln62_1_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln61_fu_230_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln61_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln61_1_fu_234_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln61_1_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln62_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln62_1_fu_238_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln62_1_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln64_fu_242_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln64_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln64_fu_242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln64_1_fu_246_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln64_1_fu_246_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln62_fu_250_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln62_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln54_fu_302_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_306_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln60_2_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln60_fu_330_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln3_fu_336_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln61_fu_349_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln4_fu_355_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln62_fu_368_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln5_fu_374_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln64_fu_394_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln64_fu_397_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln6_fu_404_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_424_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln60_fu_418_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln60_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_1_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln60_fu_463_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal or_ln60_1_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal st_fu_467_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln60_1_fu_475_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln60_1_fu_226_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln60_fu_222_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln60_fu_488_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln61_1_fu_234_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln61_fu_230_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln61_fu_500_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln62_1_fu_512_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln60_3_fu_441_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln62_1_fu_520_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln63_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln62_2_fu_533_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln62_1_fu_238_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln62_fu_250_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln62_fu_546_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln62_fu_541_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln62_1_fu_552_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln64_1_fu_564_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln64_1_fu_567_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln64_1_fu_574_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln64_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln64_1_fu_246_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln64_2_fu_593_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln64_fu_601_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln64_fu_242_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln64_fu_607_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln60_1_fu_226_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln60_fu_222_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln61_fu_230_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln62_fu_250_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln64_1_fu_246_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fiat_25519_carry_square_mul_32ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fiat_25519_carry_square_mul_33ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_3_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32ns_32ns_64_1_1_U54 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln60_fu_222_p0,
        din1 => mul_ln60_fu_222_p1,
        dout => mul_ln60_fu_222_p2);

    mul_32ns_32ns_64_1_1_U55 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln60_1_fu_226_p0,
        din1 => mul_ln60_1_fu_226_p1,
        dout => mul_ln60_1_fu_226_p2);

    mul_32ns_32ns_64_1_1_U56 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln61_fu_230_p0,
        din1 => mul_ln61_fu_230_p1,
        dout => mul_ln61_fu_230_p2);

    mul_32ns_32ns_64_1_1_U57 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln61_1_fu_234_p0,
        din1 => mul_ln61_1_fu_234_p1,
        dout => mul_ln61_1_fu_234_p2);

    mul_32ns_32ns_64_1_1_U58 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln62_1_fu_238_p0,
        din1 => mul_ln62_1_fu_238_p1,
        dout => mul_ln62_1_fu_238_p2);

    mul_32ns_32ns_64_1_1_U59 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln64_fu_242_p0,
        din1 => mul_ln64_fu_242_p1,
        dout => mul_ln64_fu_242_p2);

    mul_32ns_32ns_64_1_1_U60 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln64_1_fu_246_p0,
        din1 => mul_ln64_1_fu_246_p1,
        dout => mul_ln64_1_fu_246_p2);

    mul_33ns_32ns_64_1_1_U61 : component fiat_25519_carry_square_mul_33ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln62_fu_250_p0,
        din1 => mul_ln62_fu_250_p1,
        dout => mul_ln62_fu_250_p2);

    mux_3_2_32_1_1_U62 : component fiat_25519_carry_square_mux_3_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => arg1_r_reload,
        din1 => ap_const_lv32_0,
        din2 => arg1_r_2_reload,
        din3 => trunc_ln54_fu_302_p1,
        dout => tmp_6_fu_306_p5);

    mux_3_2_32_1_1_U63 : component fiat_25519_carry_square_mux_3_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => arg1_r_1_reload,
        din1 => ap_const_lv32_0,
        din2 => arg1_r_3_reload,
        din3 => trunc_ln54_fu_302_p1,
        dout => tmp_s_fu_424_p5);

    flow_control_loop_pipe_sequential_init_U : component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    add118_113_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add118_113_fu_90 <= arr_load_4;
                elsif (((tmp_fu_282_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add118_113_fu_90 <= add_ln60_1_fu_494_p2;
                end if;
            end if; 
        end if;
    end process;

    add131_114_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add131_114_fu_94 <= arr_1_load_5;
                elsif (((tmp_fu_282_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add131_114_fu_94 <= add_ln61_1_fu_506_p2;
                end if;
            end if; 
        end if;
    end process;

    add151_115_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add151_115_fu_98 <= arr_load_5;
                elsif (((tmp_fu_282_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add151_115_fu_98 <= add_ln62_2_fu_558_p2;
                end if;
            end if; 
        end if;
    end process;

    add180_116_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add180_116_fu_102 <= add_ln40;
                elsif (((tmp_fu_282_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add180_116_fu_102 <= add_ln64_1_fu_613_p2;
                end if;
            end if; 
        end if;
    end process;

    i_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_106 <= ap_const_lv3_0;
                elsif (((tmp_fu_282_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_106 <= add_ln54_fu_619_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add118_113_out <= add118_113_fu_90;

    add118_113_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_282_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_282_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add118_113_out_ap_vld <= ap_const_logic_1;
        else 
            add118_113_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add131_114_out <= add131_114_fu_94;

    add131_114_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_282_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_282_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add131_114_out_ap_vld <= ap_const_logic_1;
        else 
            add131_114_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add151_115_out <= add151_115_fu_98;

    add151_115_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_282_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_282_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add151_115_out_ap_vld <= ap_const_logic_1;
        else 
            add151_115_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add180_116_out <= add180_116_fu_102;

    add180_116_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_282_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_282_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add180_116_out_ap_vld <= ap_const_logic_1;
        else 
            add180_116_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln54_fu_619_p2 <= std_logic_vector(unsigned(i_fu_106) + unsigned(ap_const_lv3_2));
    add_ln60_1_fu_494_p2 <= std_logic_vector(unsigned(add118_113_fu_90) + unsigned(add_ln60_fu_488_p2));
    add_ln60_fu_488_p2 <= std_logic_vector(unsigned(mul_ln60_1_fu_226_p2) + unsigned(mul_ln60_fu_222_p2));
    add_ln61_1_fu_506_p2 <= std_logic_vector(unsigned(add131_114_fu_94) + unsigned(add_ln61_fu_500_p2));
    add_ln61_fu_500_p2 <= std_logic_vector(unsigned(mul_ln61_1_fu_234_p2) + unsigned(mul_ln61_fu_230_p2));
    add_ln62_1_fu_552_p2 <= std_logic_vector(unsigned(add_ln62_fu_546_p2) + unsigned(and_ln62_fu_541_p2));
    add_ln62_2_fu_558_p2 <= std_logic_vector(unsigned(add151_115_fu_98) + unsigned(add_ln62_1_fu_552_p2));
    add_ln62_fu_546_p2 <= std_logic_vector(unsigned(mul_ln62_1_fu_238_p2) + unsigned(mul_ln62_fu_250_p2));
    add_ln64_1_fu_613_p2 <= std_logic_vector(unsigned(add180_116_fu_102) + unsigned(add_ln64_fu_607_p2));
    add_ln64_fu_607_p2 <= std_logic_vector(unsigned(and_ln64_fu_601_p2) + unsigned(mul_ln64_fu_242_p2));
    and_ln62_fu_541_p2 <= (select_ln62_2_fu_533_p3 and mul157);
    and_ln64_fu_601_p2 <= (select_ln64_2_fu_593_p3 and mul_ln64_1_fu_246_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, tmp_fu_282_p3)
    begin
        if (((tmp_fu_282_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln60_1_fu_451_p2 <= "1" when (or_ln60_fu_418_p2 = ap_const_lv2_3) else "0";
    icmp_ln60_2_fu_324_p2 <= "1" when (trunc_ln54_fu_302_p1 = ap_const_lv2_0) else "0";
    icmp_ln60_fu_445_p2 <= "1" when (or_ln60_fu_418_p2 = ap_const_lv2_1) else "0";
    icmp_ln63_fu_388_p2 <= "1" when (i_fu_106 = ap_const_lv3_0) else "0";
    icmp_ln64_fu_587_p2 <= "0" when (or_ln60_fu_418_p2 = ap_const_lv2_3) else "1";
    mul_ln60_1_fu_226_p0 <= mul_ln60_1_fu_226_p00(32 - 1 downto 0);
    mul_ln60_1_fu_226_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln60_1_fu_475_p3),64));
    mul_ln60_1_fu_226_p1 <= zext_ln62_1_fu_434_p1(32 - 1 downto 0);
    mul_ln60_fu_222_p0 <= mul_ln60_fu_222_p00(32 - 1 downto 0);
    mul_ln60_fu_222_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_336_p3),64));
    mul_ln60_fu_222_p1 <= zext_ln60_fu_316_p1(32 - 1 downto 0);
    mul_ln61_1_fu_234_p0 <= zext_ln62_1_fu_434_p1(32 - 1 downto 0);
    mul_ln61_1_fu_234_p1 <= zext_ln62_fu_382_p1(32 - 1 downto 0);
    mul_ln61_fu_230_p0 <= mul_ln61_fu_230_p00(32 - 1 downto 0);
    mul_ln61_fu_230_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln4_fu_355_p3),64));
    mul_ln61_fu_230_p1 <= zext_ln60_fu_316_p1(32 - 1 downto 0);
    mul_ln62_1_fu_238_p0 <= zext_ln62_fu_382_p1(32 - 1 downto 0);
    mul_ln62_1_fu_238_p1 <= zext_ln60_fu_316_p1(32 - 1 downto 0);
    mul_ln62_fu_250_p0 <= mul_ln62_fu_250_p00(33 - 1 downto 0);
    mul_ln62_fu_250_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln62_1_fu_520_p3),64));
    mul_ln62_fu_250_p1 <= zext_ln64_fu_412_p1(32 - 1 downto 0);
    mul_ln64_1_fu_246_p0 <= mul_ln64_1_fu_246_p00(32 - 1 downto 0);
    mul_ln64_1_fu_246_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln64_1_fu_574_p3),64));
    mul_ln64_1_fu_246_p1 <= zext_ln62_1_fu_434_p1(32 - 1 downto 0);
    mul_ln64_fu_242_p0 <= zext_ln64_fu_412_p1(32 - 1 downto 0);
    mul_ln64_fu_242_p1 <= zext_ln60_fu_316_p1(32 - 1 downto 0);
    or_ln60_1_fu_457_p2 <= (icmp_ln60_fu_445_p2 or icmp_ln60_1_fu_451_p2);
    or_ln60_fu_418_p2 <= (trunc_ln54_fu_302_p1 or ap_const_lv2_1);
    select_ln60_1_fu_475_p3 <= 
        st_fu_467_p3 when (or_ln60_1_fu_457_p2(0) = '1') else 
        shl_ln4_fu_355_p3;
    select_ln60_fu_330_p3 <= 
        arg1_r_8_cast when (icmp_ln60_2_fu_324_p2(0) = '1') else 
        arg1_r_6_cast;
    select_ln61_fu_349_p3 <= 
        arg1_r_7_cast when (icmp_ln60_2_fu_324_p2(0) = '1') else 
        arg1_r_5_cast;
    select_ln62_1_fu_520_p3 <= 
        shl_ln62_1_fu_512_p3 when (icmp_ln60_fu_445_p2(0) = '1') else 
        zext_ln60_3_fu_441_p1;
    select_ln62_2_fu_533_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln63_fu_388_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln62_fu_368_p3 <= 
        arg1_r_6_cast when (icmp_ln60_2_fu_324_p2(0) = '1') else 
        arg1_r_4_reload;
    select_ln64_1_fu_567_p3 <= 
        arg1_r_4_reload when (icmp_ln60_2_fu_324_p2(0) = '1') else 
        trunc_ln64_1_fu_564_p1;
    select_ln64_2_fu_593_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln64_fu_587_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln64_fu_397_p3 <= 
        arg1_r_5_cast when (icmp_ln60_2_fu_324_p2(0) = '1') else 
        trunc_ln64_fu_394_p1;
    shl_ln3_fu_336_p3 <= (select_ln60_fu_330_p3 & ap_const_lv1_0);
    shl_ln4_fu_355_p3 <= (select_ln61_fu_349_p3 & ap_const_lv1_0);
    shl_ln5_fu_374_p3 <= (select_ln62_fu_368_p3 & ap_const_lv1_0);
    shl_ln62_1_fu_512_p3 <= (tmp_s_fu_424_p5 & ap_const_lv1_0);
    shl_ln64_1_fu_574_p3 <= (select_ln64_1_fu_567_p3 & ap_const_lv1_0);
    shl_ln6_fu_404_p3 <= (select_ln64_fu_397_p3 & ap_const_lv1_0);
    st_fu_467_p3 <= (trunc_ln60_fu_463_p1 & ap_const_lv2_0);
    tmp_fu_282_p3 <= i_fu_106(2 downto 2);
    trunc_ln54_fu_302_p1 <= i_fu_106(2 - 1 downto 0);
    trunc_ln60_fu_463_p1 <= select_ln61_fu_349_p3(30 - 1 downto 0);
    trunc_ln64_1_fu_564_p1 <= arg1_r_2_reload(31 - 1 downto 0);
    trunc_ln64_fu_394_p1 <= arg1_r_3_reload(31 - 1 downto 0);
    zext_ln60_3_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_424_p5),33));
    zext_ln60_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_306_p5),64));
    zext_ln62_1_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_424_p5),64));
    zext_ln62_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln5_fu_374_p3),64));
    zext_ln64_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln6_fu_404_p3),64));
end behav;
