-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_ARRAY_1_READ is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln17 : IN STD_LOGIC_VECTOR (61 downto 0);
    arg1_r_2_3_0283_out : OUT STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_2_3_0283_out_ap_vld : OUT STD_LOGIC;
    arg1_r_2_2_0282_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_2_0282_out_ap_vld : OUT STD_LOGIC;
    arg1_r_2_1_0281_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_1_0281_out_ap_vld : OUT STD_LOGIC;
    arg1_r_2_0_0280_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_0_0280_out_ap_vld : OUT STD_LOGIC;
    arg1_r_1_3_0279_out : OUT STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_1_3_0279_out_ap_vld : OUT STD_LOGIC;
    arg1_r_1_2_0278_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_2_0278_out_ap_vld : OUT STD_LOGIC;
    arg1_r_1_1_0277_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_1_0277_out_ap_vld : OUT STD_LOGIC;
    arg1_r_1_0_0276_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_0_0276_out_ap_vld : OUT STD_LOGIC;
    arg1_r_3_0275_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_3_0275_out_ap_vld : OUT STD_LOGIC;
    arg1_r_226_0274_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_226_0274_out_ap_vld : OUT STD_LOGIC;
    arg1_r_125_0273_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_125_0273_out_ap_vld : OUT STD_LOGIC;
    arg1_r_0_0272_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_0_0272_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_ARRAY_1_READ is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_16 : STD_LOGIC_VECTOR (7 downto 0) := "00010110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln17_reg_564 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln17_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal mem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln17_fu_295_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln17_reg_568 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1_reg_572 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_urem23_fu_94 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln17_fu_321_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_phi_urem23_load : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul21_fu_98 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln17_1_fu_289_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_phi_mul21_load : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_102 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln17_fu_280_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_5 : STD_LOGIC_VECTOR (3 downto 0);
    signal arg1_r_1_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_1_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_2_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_3_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_4_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_5_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_6_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_7_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_8_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_9_fu_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_10_fu_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_11_fu_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln17_2_fu_309_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln17_1_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready = ap_const_logic_0))) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                end if;
            end if; 
        end if;
    end process;

    i_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln17_fu_274_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_102 <= add_ln17_fu_280_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_102 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    phi_mul21_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln17_fu_274_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    phi_mul21_fu_98 <= add_ln17_1_fu_289_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    phi_mul21_fu_98 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    phi_urem23_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln17_fu_274_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    phi_urem23_fu_94 <= select_ln17_fu_321_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    phi_urem23_fu_94 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((trunc_ln17_reg_568 = ap_const_lv2_1)) and not((trunc_ln17_reg_568 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln1_reg_572 = ap_const_lv2_2))) then
                arg1_r_1_10_fu_146 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((trunc_ln17_reg_568 = ap_const_lv2_1)) and not((trunc_ln17_reg_568 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln1_reg_572 = ap_const_lv2_3))) then
                arg1_r_1_11_fu_150 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln1_reg_572 = ap_const_lv2_1) and (trunc_ln17_reg_568 = ap_const_lv2_0))) then
                arg1_r_1_1_fu_110 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln1_reg_572 = ap_const_lv2_2) and (trunc_ln17_reg_568 = ap_const_lv2_0))) then
                arg1_r_1_2_fu_114 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln1_reg_572 = ap_const_lv2_3) and (trunc_ln17_reg_568 = ap_const_lv2_0))) then
                arg1_r_1_3_fu_118 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln1_reg_572 = ap_const_lv2_0) and (trunc_ln17_reg_568 = ap_const_lv2_1))) then
                arg1_r_1_4_fu_122 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln1_reg_572 = ap_const_lv2_1) and (trunc_ln17_reg_568 = ap_const_lv2_1))) then
                arg1_r_1_5_fu_126 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln1_reg_572 = ap_const_lv2_2) and (trunc_ln17_reg_568 = ap_const_lv2_1))) then
                arg1_r_1_6_fu_130 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln1_reg_572 = ap_const_lv2_3) and (trunc_ln17_reg_568 = ap_const_lv2_1))) then
                arg1_r_1_7_fu_134 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((trunc_ln17_reg_568 = ap_const_lv2_1)) and not((trunc_ln17_reg_568 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln1_reg_572 = ap_const_lv2_0))) then
                arg1_r_1_8_fu_138 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((trunc_ln17_reg_568 = ap_const_lv2_1)) and not((trunc_ln17_reg_568 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln1_reg_572 = ap_const_lv2_1))) then
                arg1_r_1_9_fu_142 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln1_reg_572 = ap_const_lv2_0) and (trunc_ln17_reg_568 = ap_const_lv2_0))) then
                arg1_r_1_fu_106 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln17_reg_564 <= icmp_ln17_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_274_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln17_reg_568 <= trunc_ln17_fu_295_p1;
                trunc_ln1_reg_572 <= ap_sig_allocacmp_phi_mul21_load(7 downto 6);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln17_1_fu_289_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_phi_mul21_load) + unsigned(ap_const_lv8_16));
    add_ln17_2_fu_309_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_phi_urem23_load) + unsigned(ap_const_lv4_1));
    add_ln17_fu_280_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_5) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_mem_RVALID, icmp_ln17_reg_564)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln17_reg_564 = ap_const_lv1_0) and (m_axi_mem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_mem_RVALID, icmp_ln17_reg_564)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln17_reg_564 = ap_const_lv1_0) and (m_axi_mem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_mem_RVALID, icmp_ln17_reg_564)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln17_reg_564 = ap_const_lv1_0) and (m_axi_mem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_mem_RVALID, icmp_ln17_reg_564)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln17_reg_564 = ap_const_lv1_0) and (m_axi_mem_RVALID = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln17_fu_274_p2)
    begin
        if (((icmp_ln17_fu_274_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_102)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_5 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_5 <= i_fu_102;
        end if; 
    end process;


    ap_sig_allocacmp_phi_mul21_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, phi_mul21_fu_98)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_phi_mul21_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_phi_mul21_load <= phi_mul21_fu_98;
        end if; 
    end process;


    ap_sig_allocacmp_phi_urem23_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, phi_urem23_fu_94, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_phi_urem23_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_phi_urem23_load <= phi_urem23_fu_94;
        end if; 
    end process;

    arg1_r_0_0272_out <= arg1_r_1_fu_106;

    arg1_r_0_0272_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_reg_564, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_0_0272_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_0_0272_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_125_0273_out <= arg1_r_1_1_fu_110;

    arg1_r_125_0273_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_reg_564, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_125_0273_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_125_0273_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_1_0_0276_out <= arg1_r_1_4_fu_122;

    arg1_r_1_0_0276_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_reg_564, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_1_0_0276_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_1_0_0276_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_1_1_0277_out <= arg1_r_1_5_fu_126;

    arg1_r_1_1_0277_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_reg_564, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_1_1_0277_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_1_1_0277_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_1_2_0278_out <= arg1_r_1_6_fu_130;

    arg1_r_1_2_0278_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_reg_564, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_1_2_0278_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_1_2_0278_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_1_3_0279_out <= arg1_r_1_7_fu_134(31 - 1 downto 0);

    arg1_r_1_3_0279_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_reg_564, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_1_3_0279_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_1_3_0279_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_226_0274_out <= arg1_r_1_2_fu_114;

    arg1_r_226_0274_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_reg_564, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_226_0274_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_226_0274_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_2_0_0280_out <= arg1_r_1_8_fu_138;

    arg1_r_2_0_0280_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_reg_564, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_2_0_0280_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_2_0_0280_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_2_1_0281_out <= arg1_r_1_9_fu_142;

    arg1_r_2_1_0281_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_reg_564, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_2_1_0281_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_2_1_0281_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_2_2_0282_out <= arg1_r_1_10_fu_146;

    arg1_r_2_2_0282_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_reg_564, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_2_2_0282_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_2_2_0282_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_2_3_0283_out <= arg1_r_1_11_fu_150(31 - 1 downto 0);

    arg1_r_2_3_0283_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_reg_564, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_2_3_0283_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_2_3_0283_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_3_0275_out <= arg1_r_1_3_fu_118;

    arg1_r_3_0275_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_reg_564, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_3_0275_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_3_0275_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln17_1_fu_315_p2 <= "1" when (unsigned(add_ln17_2_fu_309_p2) < unsigned(ap_const_lv4_3)) else "0";
    icmp_ln17_fu_274_p2 <= "1" when (ap_sig_allocacmp_i_5 = ap_const_lv4_A) else "0";
    m_axi_mem_ARADDR <= ap_const_lv64_0;
    m_axi_mem_ARBURST <= ap_const_lv2_0;
    m_axi_mem_ARCACHE <= ap_const_lv4_0;
    m_axi_mem_ARID <= ap_const_lv1_0;
    m_axi_mem_ARLEN <= ap_const_lv32_0;
    m_axi_mem_ARLOCK <= ap_const_lv2_0;
    m_axi_mem_ARPROT <= ap_const_lv3_0;
    m_axi_mem_ARQOS <= ap_const_lv4_0;
    m_axi_mem_ARREGION <= ap_const_lv4_0;
    m_axi_mem_ARSIZE <= ap_const_lv3_0;
    m_axi_mem_ARUSER <= ap_const_lv1_0;
    m_axi_mem_ARVALID <= ap_const_logic_0;
    m_axi_mem_AWADDR <= ap_const_lv64_0;
    m_axi_mem_AWBURST <= ap_const_lv2_0;
    m_axi_mem_AWCACHE <= ap_const_lv4_0;
    m_axi_mem_AWID <= ap_const_lv1_0;
    m_axi_mem_AWLEN <= ap_const_lv32_0;
    m_axi_mem_AWLOCK <= ap_const_lv2_0;
    m_axi_mem_AWPROT <= ap_const_lv3_0;
    m_axi_mem_AWQOS <= ap_const_lv4_0;
    m_axi_mem_AWREGION <= ap_const_lv4_0;
    m_axi_mem_AWSIZE <= ap_const_lv3_0;
    m_axi_mem_AWUSER <= ap_const_lv1_0;
    m_axi_mem_AWVALID <= ap_const_logic_0;
    m_axi_mem_BREADY <= ap_const_logic_0;

    m_axi_mem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln17_reg_564, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln17_reg_564 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_mem_RREADY <= ap_const_logic_1;
        else 
            m_axi_mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_WDATA <= ap_const_lv32_0;
    m_axi_mem_WID <= ap_const_lv1_0;
    m_axi_mem_WLAST <= ap_const_logic_0;
    m_axi_mem_WSTRB <= ap_const_lv4_0;
    m_axi_mem_WUSER <= ap_const_lv1_0;
    m_axi_mem_WVALID <= ap_const_logic_0;

    mem_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_mem_RVALID, icmp_ln17_reg_564, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln17_reg_564 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mem_blk_n_R <= m_axi_mem_RVALID;
        else 
            mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    select_ln17_fu_321_p3 <= 
        add_ln17_2_fu_309_p2 when (icmp_ln17_1_fu_315_p2(0) = '1') else 
        ap_const_lv4_0;
    trunc_ln17_fu_295_p1 <= ap_sig_allocacmp_phi_urem23_load(2 - 1 downto 0);
end behav;
