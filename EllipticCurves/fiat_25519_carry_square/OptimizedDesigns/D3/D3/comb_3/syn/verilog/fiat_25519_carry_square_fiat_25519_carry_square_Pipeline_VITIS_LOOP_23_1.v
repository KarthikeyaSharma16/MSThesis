// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_23_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr_2_address0,
        arr_2_ce0,
        arr_2_we0,
        arr_2_d0,
        arr_2_address1,
        arr_2_ce1,
        arr_2_q1,
        arr_1_address0,
        arr_1_ce0,
        arr_1_we0,
        arr_1_d0,
        arr_1_address1,
        arr_1_ce1,
        arr_1_q1,
        arr_address0,
        arr_ce0,
        arr_we0,
        arr_d0,
        arr_address1,
        arr_ce1,
        arr_q1,
        arg1_r_1_reload,
        arg1_r_2_reload,
        arg1_r_3_reload,
        arg1_r_4_reload,
        arg1_r_5_reload,
        arg1_r_6_reload,
        arg1_r_7_reload,
        arg1_r_8_reload,
        mul16,
        zext_ln23
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] arr_2_address0;
output   arr_2_ce0;
output   arr_2_we0;
output  [63:0] arr_2_d0;
output  [1:0] arr_2_address1;
output   arr_2_ce1;
input  [63:0] arr_2_q1;
output  [1:0] arr_1_address0;
output   arr_1_ce0;
output   arr_1_we0;
output  [63:0] arr_1_d0;
output  [1:0] arr_1_address1;
output   arr_1_ce1;
input  [63:0] arr_1_q1;
output  [1:0] arr_address0;
output   arr_ce0;
output   arr_we0;
output  [63:0] arr_d0;
output  [1:0] arr_address1;
output   arr_ce1;
input  [63:0] arr_q1;
input  [31:0] arg1_r_1_reload;
input  [31:0] arg1_r_2_reload;
input  [31:0] arg1_r_3_reload;
input  [31:0] arg1_r_4_reload;
input  [31:0] arg1_r_5_reload;
input  [31:0] arg1_r_6_reload;
input  [31:0] arg1_r_7_reload;
input  [31:0] arg1_r_8_reload;
input  [31:0] mul16;
input  [31:0] zext_ln23;

reg ap_idle;
reg arr_2_ce0;
reg arr_2_we0;
reg arr_2_ce1;
reg arr_1_ce0;
reg arr_1_we0;
reg arr_1_ce1;
reg arr_ce0;
reg arr_we0;
reg arr_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln23_fu_205_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [32:0] zext_ln23_cast_fu_193_p1;
reg   [32:0] zext_ln23_cast_reg_379;
reg   [3:0] i_reg_384;
reg   [3:0] i_reg_384_pp0_iter1_reg;
reg   [3:0] i_reg_384_pp0_iter2_reg;
reg   [3:0] i_reg_384_pp0_iter3_reg;
reg   [3:0] i_reg_384_pp0_iter4_reg;
reg   [3:0] i_reg_384_pp0_iter5_reg;
reg   [3:0] i_reg_384_pp0_iter6_reg;
reg   [1:0] arr_addr_reg_396;
reg   [1:0] arr_1_addr_reg_402;
reg   [1:0] arr_2_addr_reg_408;
wire   [63:0] zext_ln22_fu_247_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] i_1_fu_74;
wire   [3:0] add_ln23_fu_217_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
wire   [1:0] trunc_ln22_fu_254_p1;
wire   [63:0] add_ln30_fu_318_p2;
wire   [32:0] mul_ln30_fu_189_p0;
wire   [31:0] mul_ln30_fu_189_p1;
wire   [2:0] grp_fu_211_p1;
wire   [3:0] mul_ln22_fu_231_p0;
wire   [5:0] mul_ln22_fu_231_p1;
wire   [8:0] mul_ln22_fu_231_p2;
wire   [2:0] tmp_2_fu_237_p4;
wire   [1:0] grp_fu_211_p2;
wire   [3:0] tmp_fu_266_p10;
wire   [31:0] tmp_fu_266_p11;
wire   [1:0] tmp_1_fu_287_p4;
wire   [0:0] empty_fu_263_p1;
wire   [32:0] shl_ln_fu_299_p3;
wire   [32:0] select_ln30_fu_306_p3;
wire   [63:0] tmp_1_fu_287_p5;
wire   [63:0] mul_ln30_fu_189_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [8:0] mul_ln22_fu_231_p00;
wire   [63:0] mul_ln30_fu_189_p00;
wire   [63:0] mul_ln30_fu_189_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fiat_25519_carry_square_mul_33ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 33 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_33ns_32ns_64_1_1_U16(
    .din0(mul_ln30_fu_189_p0),
    .din1(mul_ln30_fu_189_p1),
    .dout(mul_ln30_fu_189_p2)
);

fiat_25519_carry_square_urem_4ns_3ns_2_8_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 2 ))
urem_4ns_3ns_2_8_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_sig_allocacmp_i),
    .din1(grp_fu_211_p1),
    .ce(1'b1),
    .dout(grp_fu_211_p2)
);

fiat_25519_carry_square_mul_4ns_6ns_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 9 ))
mul_4ns_6ns_9_1_1_U18(
    .din0(mul_ln22_fu_231_p0),
    .din1(mul_ln22_fu_231_p1),
    .dout(mul_ln22_fu_231_p2)
);

fiat_25519_carry_square_mux_9_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_9_4_32_1_1_U19(
    .din0(32'd0),
    .din1(arg1_r_1_reload),
    .din2(arg1_r_2_reload),
    .din3(arg1_r_3_reload),
    .din4(arg1_r_4_reload),
    .din5(arg1_r_5_reload),
    .din6(arg1_r_6_reload),
    .din7(arg1_r_7_reload),
    .din8(arg1_r_8_reload),
    .din9(tmp_fu_266_p10),
    .dout(tmp_fu_266_p11)
);

fiat_25519_carry_square_mux_3_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_3_2_64_1_1_U20(
    .din0(arr_q1),
    .din1(arr_1_q1),
    .din2(arr_2_q1),
    .din3(tmp_1_fu_287_p4),
    .dout(tmp_1_fu_287_p5)
);

fiat_25519_carry_square_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln23_fu_205_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_74 <= add_ln23_fu_217_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_74 <= 4'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_reg_384 <= ap_sig_allocacmp_i;
        i_reg_384_pp0_iter1_reg <= i_reg_384;
        zext_ln23_cast_reg_379[31 : 0] <= zext_ln23_cast_fu_193_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        arr_1_addr_reg_402 <= zext_ln22_fu_247_p1;
        arr_2_addr_reg_408 <= zext_ln22_fu_247_p1;
        arr_addr_reg_396 <= zext_ln22_fu_247_p1;
        i_reg_384_pp0_iter2_reg <= i_reg_384_pp0_iter1_reg;
        i_reg_384_pp0_iter3_reg <= i_reg_384_pp0_iter2_reg;
        i_reg_384_pp0_iter4_reg <= i_reg_384_pp0_iter3_reg;
        i_reg_384_pp0_iter5_reg <= i_reg_384_pp0_iter4_reg;
        i_reg_384_pp0_iter6_reg <= i_reg_384_pp0_iter5_reg;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_205_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 4'd1;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        arr_1_ce0 = 1'b1;
    end else begin
        arr_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        arr_1_ce1 = 1'b1;
    end else begin
        arr_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (trunc_ln22_fu_254_p1 == 2'd1))) begin
        arr_1_we0 = 1'b1;
    end else begin
        arr_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        arr_2_ce0 = 1'b1;
    end else begin
        arr_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        arr_2_ce1 = 1'b1;
    end else begin
        arr_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln22_fu_254_p1 == 2'd1) & ~(trunc_ln22_fu_254_p1 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        arr_2_we0 = 1'b1;
    end else begin
        arr_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        arr_ce0 = 1'b1;
    end else begin
        arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        arr_ce1 = 1'b1;
    end else begin
        arr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (trunc_ln22_fu_254_p1 == 2'd0))) begin
        arr_we0 = 1'b1;
    end else begin
        arr_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_217_p2 = (ap_sig_allocacmp_i + 4'd1);

assign add_ln30_fu_318_p2 = (tmp_1_fu_287_p5 + mul_ln30_fu_189_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign arr_1_address0 = arr_1_addr_reg_402;

assign arr_1_address1 = zext_ln22_fu_247_p1;

assign arr_1_d0 = add_ln30_fu_318_p2;

assign arr_2_address0 = arr_2_addr_reg_408;

assign arr_2_address1 = zext_ln22_fu_247_p1;

assign arr_2_d0 = add_ln30_fu_318_p2;

assign arr_address0 = arr_addr_reg_396;

assign arr_address1 = zext_ln22_fu_247_p1;

assign arr_d0 = add_ln30_fu_318_p2;

assign empty_fu_263_p1 = i_reg_384_pp0_iter6_reg[0:0];

assign grp_fu_211_p1 = 4'd3;

assign icmp_ln23_fu_205_p2 = ((ap_sig_allocacmp_i == 4'd9) ? 1'b1 : 1'b0);

assign mul_ln22_fu_231_p0 = mul_ln22_fu_231_p00;

assign mul_ln22_fu_231_p00 = i_reg_384_pp0_iter5_reg;

assign mul_ln22_fu_231_p1 = 9'd22;

assign mul_ln30_fu_189_p0 = mul_ln30_fu_189_p00;

assign mul_ln30_fu_189_p00 = select_ln30_fu_306_p3;

assign mul_ln30_fu_189_p1 = mul_ln30_fu_189_p10;

assign mul_ln30_fu_189_p10 = tmp_fu_266_p11;

assign select_ln30_fu_306_p3 = ((empty_fu_263_p1[0:0] == 1'b1) ? zext_ln23_cast_reg_379 : shl_ln_fu_299_p3);

assign shl_ln_fu_299_p3 = {{mul16}, {1'd0}};

assign tmp_1_fu_287_p4 = grp_fu_211_p2[1:0];

assign tmp_2_fu_237_p4 = {{mul_ln22_fu_231_p2[8:6]}};

assign tmp_fu_266_p10 = ($signed(4'd9) - $signed(i_reg_384_pp0_iter6_reg));

assign trunc_ln22_fu_254_p1 = grp_fu_211_p2[1:0];

assign zext_ln22_fu_247_p1 = tmp_2_fu_237_p4;

assign zext_ln23_cast_fu_193_p1 = zext_ln23;

always @ (posedge ap_clk) begin
    zext_ln23_cast_reg_379[32] <= 1'b0;
end

endmodule //fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_23_1
