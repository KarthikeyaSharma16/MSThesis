-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_ARRAY_1_READ is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln17 : IN STD_LOGIC_VECTOR (61 downto 0);
    arg1_r_2_3_018_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_3_018_out_ap_vld : OUT STD_LOGIC;
    arg1_r_1_3_017_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_3_017_out_ap_vld : OUT STD_LOGIC;
    arg1_r_0_3_016_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_0_3_016_out_ap_vld : OUT STD_LOGIC;
    arg1_r_2_2_015_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_2_015_out_ap_vld : OUT STD_LOGIC;
    arg1_r_1_2_014_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_2_014_out_ap_vld : OUT STD_LOGIC;
    arg1_r_0_2_013_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_0_2_013_out_ap_vld : OUT STD_LOGIC;
    arg1_r_2_1_012_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_1_012_out_ap_vld : OUT STD_LOGIC;
    arg1_r_1_1_011_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_1_011_out_ap_vld : OUT STD_LOGIC;
    arg1_r_0_1_010_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_0_1_010_out_ap_vld : OUT STD_LOGIC;
    arg1_r_2_07_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_07_out_ap_vld : OUT STD_LOGIC;
    arg1_r_1_04_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_04_out_ap_vld : OUT STD_LOGIC;
    arg1_r_0_01_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_0_01_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_ARRAY_1_READ is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln17_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal mem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_fu_263_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_477 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1_reg_481 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_fu_86 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln17_fu_257_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_4 : STD_LOGIC_VECTOR (3 downto 0);
    signal arg1_r_1_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_1_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_2_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_3_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_4_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_5_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_6_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_7_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_8_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_9_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_10_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal arg1_r_1_11_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln17_fu_251_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_86 <= add_ln17_fu_257_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_86 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln1_reg_481 = ap_const_lv2_1) and (empty_reg_477 = ap_const_lv2_3))) then
                arg1_r_1_10_fu_130 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((trunc_ln1_reg_481 = ap_const_lv2_1)) and not((trunc_ln1_reg_481 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_reg_477 = ap_const_lv2_3))) then
                arg1_r_1_11_fu_134 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln1_reg_481 = ap_const_lv2_1) and (empty_reg_477 = ap_const_lv2_0))) then
                arg1_r_1_1_fu_94 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((trunc_ln1_reg_481 = ap_const_lv2_1)) and not((trunc_ln1_reg_481 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_reg_477 = ap_const_lv2_0))) then
                arg1_r_1_2_fu_98 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln1_reg_481 = ap_const_lv2_0) and (empty_reg_477 = ap_const_lv2_1))) then
                arg1_r_1_3_fu_102 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln1_reg_481 = ap_const_lv2_1) and (empty_reg_477 = ap_const_lv2_1))) then
                arg1_r_1_4_fu_106 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((trunc_ln1_reg_481 = ap_const_lv2_1)) and not((trunc_ln1_reg_481 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_reg_477 = ap_const_lv2_1))) then
                arg1_r_1_5_fu_110 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln1_reg_481 = ap_const_lv2_0) and (empty_reg_477 = ap_const_lv2_2))) then
                arg1_r_1_6_fu_114 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln1_reg_481 = ap_const_lv2_1) and (empty_reg_477 = ap_const_lv2_2))) then
                arg1_r_1_7_fu_118 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((trunc_ln1_reg_481 = ap_const_lv2_1)) and not((trunc_ln1_reg_481 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (empty_reg_477 = ap_const_lv2_2))) then
                arg1_r_1_8_fu_122 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln1_reg_481 = ap_const_lv2_0) and (empty_reg_477 = ap_const_lv2_3))) then
                arg1_r_1_9_fu_126 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln1_reg_481 = ap_const_lv2_0) and (empty_reg_477 = ap_const_lv2_0))) then
                arg1_r_1_fu_90 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_251_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_reg_477 <= empty_fu_263_p1;
                trunc_ln1_reg_481 <= ap_sig_allocacmp_i_4(3 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln17_fu_257_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_4) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_mem_RVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((m_axi_mem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_mem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_mem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_mem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_mem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_mem_RVALID)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (m_axi_mem_RVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln17_fu_251_p2)
    begin
        if (((icmp_ln17_fu_251_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_86, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_4 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_4 <= i_fu_86;
        end if; 
    end process;

    arg1_r_0_01_out <= arg1_r_1_fu_90;

    arg1_r_0_01_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_fu_251_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln17_fu_251_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_0_01_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_0_01_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_0_1_010_out <= arg1_r_1_3_fu_102;

    arg1_r_0_1_010_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_fu_251_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln17_fu_251_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_0_1_010_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_0_1_010_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_0_2_013_out <= arg1_r_1_6_fu_114;

    arg1_r_0_2_013_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_fu_251_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln17_fu_251_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_0_2_013_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_0_2_013_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_0_3_016_out <= arg1_r_1_9_fu_126;

    arg1_r_0_3_016_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_fu_251_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln17_fu_251_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_0_3_016_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_0_3_016_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_1_04_out <= arg1_r_1_1_fu_94;

    arg1_r_1_04_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_fu_251_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln17_fu_251_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_1_04_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_1_04_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_1_1_011_out <= arg1_r_1_4_fu_106;

    arg1_r_1_1_011_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_fu_251_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln17_fu_251_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_1_1_011_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_1_1_011_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_1_2_014_out <= arg1_r_1_7_fu_118;

    arg1_r_1_2_014_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_fu_251_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln17_fu_251_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_1_2_014_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_1_2_014_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_1_3_017_out <= arg1_r_1_10_fu_130;

    arg1_r_1_3_017_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_fu_251_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln17_fu_251_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_1_3_017_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_1_3_017_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_2_07_out <= arg1_r_1_2_fu_98;

    arg1_r_2_07_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_fu_251_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln17_fu_251_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_2_07_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_2_07_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_2_1_012_out <= arg1_r_1_5_fu_110;

    arg1_r_2_1_012_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_fu_251_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln17_fu_251_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_2_1_012_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_2_1_012_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_2_2_015_out <= arg1_r_1_8_fu_122;

    arg1_r_2_2_015_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_fu_251_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln17_fu_251_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_2_2_015_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_2_2_015_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arg1_r_2_3_018_out <= arg1_r_1_11_fu_134;

    arg1_r_2_3_018_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln17_fu_251_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln17_fu_251_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arg1_r_2_3_018_out_ap_vld <= ap_const_logic_1;
        else 
            arg1_r_2_3_018_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_263_p1 <= ap_sig_allocacmp_i_4(2 - 1 downto 0);
    icmp_ln17_fu_251_p2 <= "1" when (ap_sig_allocacmp_i_4 = ap_const_lv4_A) else "0";
    m_axi_mem_ARADDR <= ap_const_lv64_0;
    m_axi_mem_ARBURST <= ap_const_lv2_0;
    m_axi_mem_ARCACHE <= ap_const_lv4_0;
    m_axi_mem_ARID <= ap_const_lv1_0;
    m_axi_mem_ARLEN <= ap_const_lv32_0;
    m_axi_mem_ARLOCK <= ap_const_lv2_0;
    m_axi_mem_ARPROT <= ap_const_lv3_0;
    m_axi_mem_ARQOS <= ap_const_lv4_0;
    m_axi_mem_ARREGION <= ap_const_lv4_0;
    m_axi_mem_ARSIZE <= ap_const_lv3_0;
    m_axi_mem_ARUSER <= ap_const_lv1_0;
    m_axi_mem_ARVALID <= ap_const_logic_0;
    m_axi_mem_AWADDR <= ap_const_lv64_0;
    m_axi_mem_AWBURST <= ap_const_lv2_0;
    m_axi_mem_AWCACHE <= ap_const_lv4_0;
    m_axi_mem_AWID <= ap_const_lv1_0;
    m_axi_mem_AWLEN <= ap_const_lv32_0;
    m_axi_mem_AWLOCK <= ap_const_lv2_0;
    m_axi_mem_AWPROT <= ap_const_lv3_0;
    m_axi_mem_AWQOS <= ap_const_lv4_0;
    m_axi_mem_AWREGION <= ap_const_lv4_0;
    m_axi_mem_AWSIZE <= ap_const_lv3_0;
    m_axi_mem_AWUSER <= ap_const_lv1_0;
    m_axi_mem_AWVALID <= ap_const_logic_0;
    m_axi_mem_BREADY <= ap_const_logic_0;

    m_axi_mem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_mem_RREADY <= ap_const_logic_1;
        else 
            m_axi_mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_WDATA <= ap_const_lv32_0;
    m_axi_mem_WID <= ap_const_lv1_0;
    m_axi_mem_WLAST <= ap_const_logic_0;
    m_axi_mem_WSTRB <= ap_const_lv4_0;
    m_axi_mem_WUSER <= ap_const_lv1_0;
    m_axi_mem_WVALID <= ap_const_logic_0;

    mem_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_mem_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mem_blk_n_R <= m_axi_mem_RVALID;
        else 
            mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

end behav;
