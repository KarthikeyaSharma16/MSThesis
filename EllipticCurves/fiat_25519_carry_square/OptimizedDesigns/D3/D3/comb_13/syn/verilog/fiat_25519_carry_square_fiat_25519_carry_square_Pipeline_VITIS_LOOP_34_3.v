// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_34_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr_2_address0,
        arr_2_ce0,
        arr_2_we0,
        arr_2_d0,
        arr_2_address1,
        arr_2_ce1,
        arr_2_q1,
        arr_1_address0,
        arr_1_ce0,
        arr_1_we0,
        arr_1_d0,
        arr_1_address1,
        arr_1_ce1,
        arr_1_q1,
        arr_address0,
        arr_ce0,
        arr_we0,
        arr_d0,
        arr_address1,
        arr_ce1,
        arr_q1,
        arg1_r_1_04_reload,
        arg1_r_0_01_reload,
        arg1_r_1_1_011_reload,
        arg1_r_0_1_010_reload,
        arg1_r_1_2_014_reload,
        arg1_r_0_2_013_reload,
        arg1_r_1_3_017_reload,
        arg1_r_0_3_016_reload,
        zext_ln40
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] arr_2_address0;
output   arr_2_ce0;
output   arr_2_we0;
output  [63:0] arr_2_d0;
output  [1:0] arr_2_address1;
output   arr_2_ce1;
input  [63:0] arr_2_q1;
output  [1:0] arr_1_address0;
output   arr_1_ce0;
output   arr_1_we0;
output  [63:0] arr_1_d0;
output  [1:0] arr_1_address1;
output   arr_1_ce1;
input  [63:0] arr_1_q1;
output  [1:0] arr_address0;
output   arr_ce0;
output   arr_we0;
output  [63:0] arr_d0;
output  [1:0] arr_address1;
output   arr_ce1;
input  [63:0] arr_q1;
input  [31:0] arg1_r_1_04_reload;
input  [31:0] arg1_r_0_01_reload;
input  [31:0] arg1_r_1_1_011_reload;
input  [31:0] arg1_r_0_1_010_reload;
input  [31:0] arg1_r_1_2_014_reload;
input  [31:0] arg1_r_0_2_013_reload;
input  [31:0] arg1_r_1_3_017_reload;
input  [31:0] arg1_r_0_3_016_reload;
input  [31:0] zext_ln40;

reg ap_idle;
reg arr_2_ce0;
reg arr_2_we0;
reg arr_2_ce1;
reg arr_1_ce0;
reg arr_1_we0;
reg arr_1_ce1;
reg arr_ce0;
reg arr_we0;
reg arr_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln34_fu_206_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [62:0] zext_ln40_cast_fu_189_p1;
reg   [62:0] zext_ln40_cast_reg_481;
wire   [1:0] trunc_ln37_fu_232_p1;
reg   [1:0] trunc_ln37_reg_491;
reg   [0:0] tmp_reg_498;
reg   [1:0] arr_addr_reg_506;
reg   [0:0] tmp_3_reg_512;
reg   [1:0] arr_1_addr_reg_520;
reg   [1:0] arr_2_addr_reg_526;
wire   [63:0] zext_ln22_fu_219_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] i_2_fu_64;
wire   [3:0] add_ln34_fu_258_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_2_load;
reg   [1:0] indvars_iv_fu_68;
wire   [1:0] add_ln34_1_fu_264_p2;
reg   [1:0] ap_sig_allocacmp_indvars_iv_load;
wire   [31:0] mul_ln40_1_fu_177_p0;
wire   [31:0] mul_ln40_1_fu_177_p1;
wire   [31:0] mul_ln40_fu_181_p0;
wire   [31:0] mul_ln40_fu_181_p1;
wire   [31:0] mul_ln40_2_fu_185_p0;
wire   [31:0] mul_ln40_2_fu_185_p1;
wire   [2:0] trunc_ln34_fu_215_p1;
wire   [2:0] sub_ln37_fu_226_p2;
wire   [2:0] add_ln40_1_fu_244_p2;
wire   [31:0] tmp_2_fu_300_p1;
wire   [31:0] tmp_2_fu_300_p2;
wire   [31:0] tmp_2_fu_300_p3;
wire   [31:0] tmp_2_fu_300_p4;
wire   [31:0] tmp_2_fu_300_p6;
wire   [62:0] mul_ln40_1_fu_177_p2;
wire   [63:0] shl_ln1_fu_318_p3;
wire   [31:0] select_ln40_7_fu_348_p3;
wire   [31:0] select_ln40_4_fu_333_p3;
wire   [31:0] select_ln40_5_fu_338_p3;
wire   [31:0] select_ln40_6_fu_343_p3;
wire   [31:0] tmp_4_fu_353_p6;
wire   [62:0] mul_ln40_fu_181_p2;
wire   [31:0] tmp_5_fu_379_p6;
wire   [62:0] mul_ln40_2_fu_185_p2;
wire   [63:0] shl_ln40_1_fu_371_p3;
wire   [63:0] shl_ln40_2_fu_397_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [62:0] mul_ln40_1_fu_177_p10;
wire   [62:0] mul_ln40_2_fu_185_p10;
wire   [62:0] mul_ln40_fu_181_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fiat_25519_carry_square_mul_32ns_32ns_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32ns_32ns_63_1_1_U50(
    .din0(mul_ln40_1_fu_177_p0),
    .din1(mul_ln40_1_fu_177_p1),
    .dout(mul_ln40_1_fu_177_p2)
);

fiat_25519_carry_square_mul_32ns_32ns_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32ns_32ns_63_1_1_U51(
    .din0(mul_ln40_fu_181_p0),
    .din1(mul_ln40_fu_181_p1),
    .dout(mul_ln40_fu_181_p2)
);

fiat_25519_carry_square_mul_32ns_32ns_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32ns_32ns_63_1_1_U52(
    .din0(mul_ln40_2_fu_185_p0),
    .din1(mul_ln40_2_fu_185_p1),
    .dout(mul_ln40_2_fu_185_p2)
);

fiat_25519_carry_square_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U53(
    .din0(tmp_2_fu_300_p1),
    .din1(tmp_2_fu_300_p2),
    .din2(tmp_2_fu_300_p3),
    .din3(tmp_2_fu_300_p4),
    .din4(trunc_ln37_reg_491),
    .dout(tmp_2_fu_300_p6)
);

fiat_25519_carry_square_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U54(
    .din0(select_ln40_7_fu_348_p3),
    .din1(select_ln40_4_fu_333_p3),
    .din2(select_ln40_5_fu_338_p3),
    .din3(select_ln40_6_fu_343_p3),
    .din4(trunc_ln37_reg_491),
    .dout(tmp_4_fu_353_p6)
);

fiat_25519_carry_square_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U55(
    .din0(select_ln40_6_fu_343_p3),
    .din1(select_ln40_7_fu_348_p3),
    .din2(select_ln40_4_fu_333_p3),
    .din3(select_ln40_5_fu_338_p3),
    .din4(trunc_ln37_reg_491),
    .dout(tmp_5_fu_379_p6)
);

fiat_25519_carry_square_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln34_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_2_fu_64 <= add_ln34_fu_258_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_2_fu_64 <= 4'd3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln34_fu_206_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvars_iv_fu_68 <= add_ln34_1_fu_264_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvars_iv_fu_68 <= 2'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_206_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_1_addr_reg_520 <= zext_ln22_fu_219_p1;
        arr_2_addr_reg_526 <= zext_ln22_fu_219_p1;
        arr_addr_reg_506 <= zext_ln22_fu_219_p1;
        tmp_3_reg_512 <= add_ln40_1_fu_244_p2[32'd2];
        tmp_reg_498 <= sub_ln37_fu_226_p2[32'd2];
        trunc_ln37_reg_491 <= trunc_ln37_fu_232_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln40_cast_reg_481[31 : 0] <= zext_ln40_cast_fu_189_p1[31 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_206_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2_load = 4'd3;
    end else begin
        ap_sig_allocacmp_i_2_load = i_2_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvars_iv_load = 2'd1;
    end else begin
        ap_sig_allocacmp_indvars_iv_load = indvars_iv_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_1_ce0 = 1'b1;
    end else begin
        arr_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_1_ce1 = 1'b1;
    end else begin
        arr_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_1_we0 = 1'b1;
    end else begin
        arr_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_2_ce0 = 1'b1;
    end else begin
        arr_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_2_ce1 = 1'b1;
    end else begin
        arr_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_2_we0 = 1'b1;
    end else begin
        arr_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_ce0 = 1'b1;
    end else begin
        arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_ce1 = 1'b1;
    end else begin
        arr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_we0 = 1'b1;
    end else begin
        arr_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln34_1_fu_264_p2 = (ap_sig_allocacmp_indvars_iv_load + 2'd1);

assign add_ln34_fu_258_p2 = (ap_sig_allocacmp_i_2_load + 4'd3);

assign add_ln40_1_fu_244_p2 = ($signed(sub_ln37_fu_226_p2) + $signed(3'd7));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign arr_1_address0 = arr_1_addr_reg_520;

assign arr_1_address1 = zext_ln22_fu_219_p1;

assign arr_1_d0 = (arr_1_q1 + shl_ln40_1_fu_371_p3);

assign arr_2_address0 = arr_2_addr_reg_526;

assign arr_2_address1 = zext_ln22_fu_219_p1;

assign arr_2_d0 = (arr_2_q1 + shl_ln40_2_fu_397_p3);

assign arr_address0 = arr_addr_reg_506;

assign arr_address1 = zext_ln22_fu_219_p1;

assign arr_d0 = (arr_q1 + shl_ln1_fu_318_p3);

assign icmp_ln34_fu_206_p2 = ((ap_sig_allocacmp_indvars_iv_load == 2'd3) ? 1'b1 : 1'b0);

assign mul_ln40_1_fu_177_p0 = zext_ln40_cast_reg_481;

assign mul_ln40_1_fu_177_p1 = mul_ln40_1_fu_177_p10;

assign mul_ln40_1_fu_177_p10 = tmp_2_fu_300_p6;

assign mul_ln40_2_fu_185_p0 = zext_ln40_cast_reg_481;

assign mul_ln40_2_fu_185_p1 = mul_ln40_2_fu_185_p10;

assign mul_ln40_2_fu_185_p10 = tmp_5_fu_379_p6;

assign mul_ln40_fu_181_p0 = zext_ln40_cast_reg_481;

assign mul_ln40_fu_181_p1 = mul_ln40_fu_181_p10;

assign mul_ln40_fu_181_p10 = tmp_4_fu_353_p6;

assign select_ln40_4_fu_333_p3 = ((tmp_3_reg_512[0:0] == 1'b1) ? arg1_r_1_04_reload : arg1_r_0_01_reload);

assign select_ln40_5_fu_338_p3 = ((tmp_3_reg_512[0:0] == 1'b1) ? arg1_r_1_1_011_reload : arg1_r_0_1_010_reload);

assign select_ln40_6_fu_343_p3 = ((tmp_3_reg_512[0:0] == 1'b1) ? arg1_r_1_2_014_reload : arg1_r_0_2_013_reload);

assign select_ln40_7_fu_348_p3 = ((tmp_3_reg_512[0:0] == 1'b1) ? arg1_r_1_3_017_reload : arg1_r_0_3_016_reload);

assign shl_ln1_fu_318_p3 = {{mul_ln40_1_fu_177_p2}, {1'd0}};

assign shl_ln40_1_fu_371_p3 = {{mul_ln40_fu_181_p2}, {1'd0}};

assign shl_ln40_2_fu_397_p3 = {{mul_ln40_2_fu_185_p2}, {1'd0}};

assign sub_ln37_fu_226_p2 = (3'd2 - trunc_ln34_fu_215_p1);

assign tmp_2_fu_300_p1 = ((tmp_reg_498[0:0] == 1'b1) ? arg1_r_1_04_reload : arg1_r_0_01_reload);

assign tmp_2_fu_300_p2 = ((tmp_reg_498[0:0] == 1'b1) ? arg1_r_1_1_011_reload : arg1_r_0_1_010_reload);

assign tmp_2_fu_300_p3 = ((tmp_reg_498[0:0] == 1'b1) ? arg1_r_1_2_014_reload : arg1_r_0_2_013_reload);

assign tmp_2_fu_300_p4 = ((tmp_reg_498[0:0] == 1'b1) ? arg1_r_1_3_017_reload : arg1_r_0_3_016_reload);

assign trunc_ln34_fu_215_p1 = ap_sig_allocacmp_i_2_load[2:0];

assign trunc_ln37_fu_232_p1 = sub_ln37_fu_226_p2[1:0];

assign zext_ln22_fu_219_p1 = ap_sig_allocacmp_indvars_iv_load;

assign zext_ln40_cast_fu_189_p1 = zext_ln40;

always @ (posedge ap_clk) begin
    zext_ln40_cast_reg_481[62:32] <= 31'b0000000000000000000000000000000;
end

endmodule //fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_34_3
