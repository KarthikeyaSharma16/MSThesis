// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_44_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr_1_load_2,
        arg1_r_2_07_reload,
        arg1_r_3_010_reload,
        arg1_r_1_04_reload,
        arg1_r_3_1_016_cast,
        arg1_r_1_1_014_cast,
        arg1_r_2_1_015_cast,
        arg1_r_3_2_020_cast,
        arg1_r_1_2_018_cast,
        arg1_r_2_2_019_cast,
        arg1_r_0_01_reload,
        arg1_r_1_1_014_reload,
        arg1_r_0_1_013_reload,
        arg1_r_1_2_018_reload,
        arg1_r_0_2_017_reload,
        add8115_out,
        add8115_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] arr_1_load_2;
input  [30:0] arg1_r_2_07_reload;
input  [30:0] arg1_r_3_010_reload;
input  [31:0] arg1_r_1_04_reload;
input  [30:0] arg1_r_3_1_016_cast;
input  [30:0] arg1_r_1_1_014_cast;
input  [30:0] arg1_r_2_1_015_cast;
input  [30:0] arg1_r_3_2_020_cast;
input  [30:0] arg1_r_1_2_018_cast;
input  [30:0] arg1_r_2_2_019_cast;
input  [31:0] arg1_r_0_01_reload;
input  [31:0] arg1_r_1_1_014_reload;
input  [31:0] arg1_r_0_1_013_reload;
input  [31:0] arg1_r_1_2_018_reload;
input  [31:0] arg1_r_0_2_017_reload;
output  [63:0] add8115_out;
output   add8115_out_ap_vld;

reg ap_idle;
reg add8115_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln44_fu_235_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [30:0] empty_fu_209_p1;
reg   [30:0] empty_reg_533;
reg   [0:0] icmp_ln44_reg_538;
reg   [0:0] icmp_ln44_reg_538_pp0_iter1_reg;
reg   [0:0] icmp_ln44_reg_538_pp0_iter2_reg;
reg   [0:0] icmp_ln44_reg_538_pp0_iter3_reg;
reg   [0:0] icmp_ln44_reg_538_pp0_iter4_reg;
reg   [0:0] icmp_ln44_reg_538_pp0_iter5_reg;
wire   [1:0] select_ln44_fu_263_p3;
reg   [1:0] select_ln44_reg_542;
reg   [1:0] select_ln44_reg_542_pp0_iter1_reg;
reg   [1:0] select_ln44_reg_542_pp0_iter2_reg;
reg   [1:0] select_ln44_reg_542_pp0_iter3_reg;
reg   [1:0] select_ln44_reg_542_pp0_iter4_reg;
reg   [1:0] select_ln44_reg_542_pp0_iter5_reg;
reg   [1:0] select_ln44_reg_542_pp0_iter6_reg;
wire   [3:0] empty_33_fu_271_p2;
reg   [1:0] trunc_ln50_2_reg_552;
reg   [1:0] trunc_ln50_2_reg_552_pp0_iter1_reg;
reg   [1:0] trunc_ln50_2_reg_552_pp0_iter2_reg;
reg   [1:0] trunc_ln50_2_reg_552_pp0_iter3_reg;
reg   [1:0] trunc_ln50_2_reg_552_pp0_iter4_reg;
reg   [1:0] trunc_ln50_2_reg_552_pp0_iter5_reg;
reg   [1:0] trunc_ln50_2_reg_552_pp0_iter6_reg;
reg   [5:0] phi_mul24_fu_96;
wire   [5:0] add_ln44_2_fu_314_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [63:0] add8115_fu_100;
wire   [63:0] add_ln50_fu_418_p2;
reg   [2:0] i_fu_104;
wire   [2:0] add_ln44_fu_241_p2;
reg   [2:0] ap_sig_allocacmp_i_3;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] mul_ln50_fu_205_p0;
wire   [31:0] mul_ln50_fu_205_p1;
wire   [1:0] trunc_ln44_fu_231_p1;
wire   [0:0] icmp_ln44_1_fu_251_p2;
wire   [1:0] add_ln44_1_fu_257_p2;
wire   [3:0] zext_ln44_fu_247_p1;
wire   [3:0] mul_ln47_fu_281_p0;
wire   [5:0] mul_ln47_fu_281_p1;
wire   [2:0] grp_fu_287_p1;
wire   [8:0] mul_ln47_fu_281_p2;
wire   [1:0] grp_fu_287_p2;
wire   [0:0] tmp_fu_324_p3;
wire   [31:0] tmp_s_fu_350_p1;
wire   [31:0] tmp_s_fu_350_p2;
wire   [31:0] tmp_s_fu_350_p3;
wire   [31:0] tmp_s_fu_350_p5;
wire   [30:0] phi_ln50_3_fu_366_p6;
wire   [30:0] phi_ln50_1_fu_375_p6;
wire   [30:0] phi_ln50_2_fu_384_p6;
wire   [1:0] tmp_1_fu_393_p4;
wire   [30:0] tmp_1_fu_393_p5;
wire   [31:0] shl_ln6_fu_405_p3;
wire   [63:0] mul_ln50_fu_205_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [8:0] mul_ln47_fu_281_p00;
wire   [63:0] mul_ln50_fu_205_p00;
wire   [63:0] mul_ln50_fu_205_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fiat_25519_carry_square_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U109(
    .din0(mul_ln50_fu_205_p0),
    .din1(mul_ln50_fu_205_p1),
    .dout(mul_ln50_fu_205_p2)
);

fiat_25519_carry_square_mul_4ns_6ns_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 9 ))
mul_4ns_6ns_9_1_1_U110(
    .din0(mul_ln47_fu_281_p0),
    .din1(mul_ln47_fu_281_p1),
    .dout(mul_ln47_fu_281_p2)
);

fiat_25519_carry_square_urem_4ns_3ns_2_8_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 2 ))
urem_4ns_3ns_2_8_1_U111(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_33_fu_271_p2),
    .din1(grp_fu_287_p1),
    .ce(1'b1),
    .dout(grp_fu_287_p2)
);

fiat_25519_carry_square_mux_3_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_3_2_32_1_1_U112(
    .din0(tmp_s_fu_350_p1),
    .din1(tmp_s_fu_350_p2),
    .din2(tmp_s_fu_350_p3),
    .din3(select_ln44_reg_542_pp0_iter6_reg),
    .dout(tmp_s_fu_350_p5)
);

fiat_25519_carry_square_mux_4_2_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .din2_WIDTH( 31 ),
    .din3_WIDTH( 31 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 31 ))
mux_4_2_31_1_1_U113(
    .din0(arg1_r_3_010_reload),
    .din1(empty_reg_533),
    .din2(arg1_r_2_07_reload),
    .din3(arg1_r_3_010_reload),
    .din4(trunc_ln50_2_reg_552_pp0_iter6_reg),
    .dout(phi_ln50_3_fu_366_p6)
);

fiat_25519_carry_square_mux_4_2_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .din2_WIDTH( 31 ),
    .din3_WIDTH( 31 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 31 ))
mux_4_2_31_1_1_U114(
    .din0(arg1_r_3_1_016_cast),
    .din1(arg1_r_1_1_014_cast),
    .din2(arg1_r_2_1_015_cast),
    .din3(arg1_r_3_1_016_cast),
    .din4(trunc_ln50_2_reg_552_pp0_iter6_reg),
    .dout(phi_ln50_1_fu_375_p6)
);

fiat_25519_carry_square_mux_4_2_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .din2_WIDTH( 31 ),
    .din3_WIDTH( 31 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 31 ))
mux_4_2_31_1_1_U115(
    .din0(arg1_r_3_2_020_cast),
    .din1(arg1_r_1_2_018_cast),
    .din2(arg1_r_2_2_019_cast),
    .din3(arg1_r_3_2_020_cast),
    .din4(trunc_ln50_2_reg_552_pp0_iter6_reg),
    .dout(phi_ln50_2_fu_384_p6)
);

fiat_25519_carry_square_mux_3_2_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .din2_WIDTH( 31 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 31 ))
mux_3_2_31_1_1_U116(
    .din0(phi_ln50_3_fu_366_p6),
    .din1(phi_ln50_1_fu_375_p6),
    .din2(phi_ln50_2_fu_384_p6),
    .din3(tmp_1_fu_393_p4),
    .dout(tmp_1_fu_393_p5)
);

fiat_25519_carry_square_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add8115_fu_100 <= arr_1_load_2;
        end else if ((ap_enable_reg_pp0_iter7 == 1'b1)) begin
            add8115_fu_100 <= add_ln50_fu_418_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln44_fu_235_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_104 <= add_ln44_fu_241_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_104 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            phi_mul24_fu_96 <= 6'd0;
        end else if ((ap_enable_reg_pp0_iter7 == 1'b1)) begin
            phi_mul24_fu_96 <= add_ln44_2_fu_314_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_reg_533 <= empty_fu_209_p1;
        icmp_ln44_reg_538 <= icmp_ln44_fu_235_p2;
        icmp_ln44_reg_538_pp0_iter1_reg <= icmp_ln44_reg_538;
        select_ln44_reg_542_pp0_iter1_reg <= select_ln44_reg_542;
        trunc_ln50_2_reg_552_pp0_iter1_reg <= trunc_ln50_2_reg_552;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        icmp_ln44_reg_538_pp0_iter2_reg <= icmp_ln44_reg_538_pp0_iter1_reg;
        icmp_ln44_reg_538_pp0_iter3_reg <= icmp_ln44_reg_538_pp0_iter2_reg;
        icmp_ln44_reg_538_pp0_iter4_reg <= icmp_ln44_reg_538_pp0_iter3_reg;
        icmp_ln44_reg_538_pp0_iter5_reg <= icmp_ln44_reg_538_pp0_iter4_reg;
        select_ln44_reg_542_pp0_iter2_reg <= select_ln44_reg_542_pp0_iter1_reg;
        select_ln44_reg_542_pp0_iter3_reg <= select_ln44_reg_542_pp0_iter2_reg;
        select_ln44_reg_542_pp0_iter4_reg <= select_ln44_reg_542_pp0_iter3_reg;
        select_ln44_reg_542_pp0_iter5_reg <= select_ln44_reg_542_pp0_iter4_reg;
        select_ln44_reg_542_pp0_iter6_reg <= select_ln44_reg_542_pp0_iter5_reg;
        trunc_ln50_2_reg_552_pp0_iter2_reg <= trunc_ln50_2_reg_552_pp0_iter1_reg;
        trunc_ln50_2_reg_552_pp0_iter3_reg <= trunc_ln50_2_reg_552_pp0_iter2_reg;
        trunc_ln50_2_reg_552_pp0_iter4_reg <= trunc_ln50_2_reg_552_pp0_iter3_reg;
        trunc_ln50_2_reg_552_pp0_iter5_reg <= trunc_ln50_2_reg_552_pp0_iter4_reg;
        trunc_ln50_2_reg_552_pp0_iter6_reg <= trunc_ln50_2_reg_552_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_235_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln44_reg_542 <= select_ln44_fu_263_p3;
        trunc_ln50_2_reg_552 <= {{mul_ln47_fu_281_p2[7:6]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln44_reg_538_pp0_iter5_reg == 1'd1))) begin
        add8115_out_ap_vld = 1'b1;
    end else begin
        add8115_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln44_fu_235_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_3 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_104;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add8115_out = add8115_fu_100;

assign add_ln44_1_fu_257_p2 = (trunc_ln44_fu_231_p1 + 2'd1);

assign add_ln44_2_fu_314_p2 = (phi_mul24_fu_96 + 6'd11);

assign add_ln44_fu_241_p2 = (ap_sig_allocacmp_i_3 + 3'd1);

assign add_ln50_fu_418_p2 = (mul_ln50_fu_205_p2 + add8115_fu_100);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_33_fu_271_p2 = ($signed(4'd9) - $signed(zext_ln44_fu_247_p1));

assign empty_fu_209_p1 = arg1_r_1_04_reload[30:0];

assign grp_fu_287_p1 = 4'd3;

assign icmp_ln44_1_fu_251_p2 = ((ap_sig_allocacmp_i_3 < 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_235_p2 = ((ap_sig_allocacmp_i_3 == 3'd5) ? 1'b1 : 1'b0);

assign mul_ln47_fu_281_p0 = mul_ln47_fu_281_p00;

assign mul_ln47_fu_281_p00 = empty_33_fu_271_p2;

assign mul_ln47_fu_281_p1 = 9'd22;

assign mul_ln50_fu_205_p0 = mul_ln50_fu_205_p00;

assign mul_ln50_fu_205_p00 = shl_ln6_fu_405_p3;

assign mul_ln50_fu_205_p1 = mul_ln50_fu_205_p10;

assign mul_ln50_fu_205_p10 = tmp_s_fu_350_p5;

assign select_ln44_fu_263_p3 = ((icmp_ln44_1_fu_251_p2[0:0] == 1'b1) ? trunc_ln44_fu_231_p1 : add_ln44_1_fu_257_p2);

assign shl_ln6_fu_405_p3 = {{tmp_1_fu_393_p5}, {1'd0}};

assign tmp_1_fu_393_p4 = grp_fu_287_p2[1:0];

assign tmp_fu_324_p3 = phi_mul24_fu_96[32'd5];

assign tmp_s_fu_350_p1 = ((tmp_fu_324_p3[0:0] == 1'b1) ? arg1_r_1_04_reload : arg1_r_0_01_reload);

assign tmp_s_fu_350_p2 = ((tmp_fu_324_p3[0:0] == 1'b1) ? arg1_r_1_1_014_reload : arg1_r_0_1_013_reload);

assign tmp_s_fu_350_p3 = ((tmp_fu_324_p3[0:0] == 1'b1) ? arg1_r_1_2_018_reload : arg1_r_0_2_017_reload);

assign trunc_ln44_fu_231_p1 = ap_sig_allocacmp_i_3[1:0];

assign zext_ln44_fu_247_p1 = ap_sig_allocacmp_i_3;

endmodule //fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_44_5
