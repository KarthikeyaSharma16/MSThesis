// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_23_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr_3_address0,
        arr_3_ce0,
        arr_3_we0,
        arr_3_d0,
        arr_3_address1,
        arr_3_ce1,
        arr_3_q1,
        arr_2_address0,
        arr_2_ce0,
        arr_2_we0,
        arr_2_d0,
        arr_2_address1,
        arr_2_ce1,
        arr_2_q1,
        arr_1_address0,
        arr_1_ce0,
        arr_1_we0,
        arr_1_d0,
        arr_1_address1,
        arr_1_ce1,
        arr_1_q1,
        arr_address0,
        arr_ce0,
        arr_we0,
        arr_d0,
        arr_address1,
        arr_ce1,
        arr_q1,
        arg1_r_4_reload,
        arg1_r_5_reload,
        arg1_r_6_reload,
        arg1_r_7_reload,
        arg1_r_8_reload,
        conv17,
        arg1_r_3_reload,
        arg1_r_2_reload,
        arg1_r_1_reload,
        zext_ln30_2
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] arr_3_address0;
output   arr_3_ce0;
output   arr_3_we0;
output  [63:0] arr_3_d0;
output  [1:0] arr_3_address1;
output   arr_3_ce1;
input  [63:0] arr_3_q1;
output  [1:0] arr_2_address0;
output   arr_2_ce0;
output   arr_2_we0;
output  [63:0] arr_2_d0;
output  [1:0] arr_2_address1;
output   arr_2_ce1;
input  [63:0] arr_2_q1;
output  [1:0] arr_1_address0;
output   arr_1_ce0;
output   arr_1_we0;
output  [63:0] arr_1_d0;
output  [1:0] arr_1_address1;
output   arr_1_ce1;
input  [63:0] arr_1_q1;
output  [1:0] arr_address0;
output   arr_ce0;
output   arr_we0;
output  [63:0] arr_d0;
output  [1:0] arr_address1;
output   arr_ce1;
input  [63:0] arr_q1;
input  [31:0] arg1_r_4_reload;
input  [31:0] arg1_r_5_reload;
input  [31:0] arg1_r_6_reload;
input  [31:0] arg1_r_7_reload;
input  [31:0] arg1_r_8_reload;
input  [31:0] conv17;
input  [31:0] arg1_r_3_reload;
input  [31:0] arg1_r_2_reload;
input  [31:0] arg1_r_1_reload;
input  [31:0] zext_ln30_2;

reg ap_idle;
reg arr_3_ce0;
reg arr_3_we0;
reg arr_3_ce1;
reg arr_2_ce0;
reg arr_2_we0;
reg arr_2_ce1;
reg arr_1_ce0;
reg arr_1_we0;
reg arr_1_ce1;
reg arr_ce0;
reg arr_we0;
reg arr_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln23_fu_240_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [62:0] zext_ln30_2_cast_fu_224_p1;
reg   [62:0] zext_ln30_2_cast_reg_540;
wire   [63:0] conv17_cast_fu_228_p1;
reg   [63:0] conv17_cast_reg_546;
reg   [3:0] i_reg_552;
reg   [1:0] arr_1_addr_reg_561;
reg   [1:0] arr_2_addr_reg_567;
reg   [1:0] arr_3_addr_reg_573;
reg   [1:0] arr_addr_reg_579;
wire   [63:0] zext_ln22_fu_254_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln30_4_fu_277_p1;
reg   [3:0] i_1_fu_76;
wire   [3:0] add_ln23_fu_282_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
wire   [31:0] mul_ln30_2_fu_208_p0;
wire   [31:0] mul_ln30_2_fu_208_p1;
wire   [31:0] mul_ln30_3_fu_212_p0;
wire   [31:0] mul_ln30_3_fu_212_p1;
wire   [31:0] mul_ln30_fu_216_p0;
wire   [31:0] mul_ln30_fu_216_p1;
wire   [31:0] mul_ln30_1_fu_220_p0;
wire   [31:0] mul_ln30_1_fu_220_p1;
wire   [0:0] tmp_8_fu_246_p3;
wire   [3:0] add_ln29_fu_261_p2;
wire   [1:0] lshr_ln22_1_fu_267_p4;
wire   [3:0] sub_ln26_fu_296_p2;
wire   [31:0] tmp_fu_301_p11;
wire   [0:0] trunc_ln23_fu_293_p1;
wire   [63:0] tmp_1_fu_325_p4;
wire   [63:0] mul_ln30_fu_216_p2;
wire   [31:0] tmp_3_fu_361_p11;
wire   [31:0] tmp_2_fu_342_p11;
wire   [62:0] mul_ln30_2_fu_208_p2;
wire   [63:0] tmp_5_fu_404_p4;
wire   [63:0] shl_ln_fu_419_p3;
wire   [63:0] tmp_6_fu_434_p4;
wire   [63:0] mul_ln30_1_fu_220_p2;
wire   [31:0] tmp_4_fu_385_p11;
wire   [62:0] mul_ln30_3_fu_212_p2;
wire   [63:0] tmp_7_fu_451_p4;
wire   [63:0] shl_ln30_1_fu_466_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [63:0] mul_ln30_1_fu_220_p00;
wire   [62:0] mul_ln30_2_fu_208_p10;
wire   [62:0] mul_ln30_3_fu_212_p10;
wire   [63:0] mul_ln30_fu_216_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fiat_25519_carry_square_mul_32ns_32ns_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32ns_32ns_63_1_1_U17(
    .din0(mul_ln30_2_fu_208_p0),
    .din1(mul_ln30_2_fu_208_p1),
    .dout(mul_ln30_2_fu_208_p2)
);

fiat_25519_carry_square_mul_32ns_32ns_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32ns_32ns_63_1_1_U18(
    .din0(mul_ln30_3_fu_212_p0),
    .din1(mul_ln30_3_fu_212_p1),
    .dout(mul_ln30_3_fu_212_p2)
);

fiat_25519_carry_square_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U19(
    .din0(mul_ln30_fu_216_p0),
    .din1(mul_ln30_fu_216_p1),
    .dout(mul_ln30_fu_216_p2)
);

fiat_25519_carry_square_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U20(
    .din0(mul_ln30_1_fu_220_p0),
    .din1(mul_ln30_1_fu_220_p1),
    .dout(mul_ln30_1_fu_220_p2)
);

fiat_25519_carry_square_mux_9_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_9_4_32_1_1_U21(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(arg1_r_4_reload),
    .din5(arg1_r_5_reload),
    .din6(arg1_r_6_reload),
    .din7(arg1_r_7_reload),
    .din8(arg1_r_8_reload),
    .din9(sub_ln26_fu_296_p2),
    .dout(tmp_fu_301_p11)
);

fiat_25519_carry_square_mux_2_1_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 64 ))
mux_2_1_64_1_1_U22(
    .din0(64'd0),
    .din1(arr_1_q1),
    .din2(trunc_ln23_fu_293_p1),
    .dout(tmp_1_fu_325_p4)
);

fiat_25519_carry_square_mux_9_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_9_4_32_1_1_U23(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(arg1_r_3_reload),
    .din5(arg1_r_4_reload),
    .din6(arg1_r_5_reload),
    .din7(arg1_r_6_reload),
    .din8(arg1_r_7_reload),
    .din9(sub_ln26_fu_296_p2),
    .dout(tmp_2_fu_342_p11)
);

fiat_25519_carry_square_mux_9_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_9_4_32_1_1_U24(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(arg1_r_2_reload),
    .din5(arg1_r_3_reload),
    .din6(arg1_r_4_reload),
    .din7(arg1_r_5_reload),
    .din8(arg1_r_6_reload),
    .din9(sub_ln26_fu_296_p2),
    .dout(tmp_3_fu_361_p11)
);

fiat_25519_carry_square_mux_9_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_9_4_32_1_1_U25(
    .din0(32'd0),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(arg1_r_1_reload),
    .din5(arg1_r_2_reload),
    .din6(arg1_r_3_reload),
    .din7(arg1_r_4_reload),
    .din8(arg1_r_5_reload),
    .din9(sub_ln26_fu_296_p2),
    .dout(tmp_4_fu_385_p11)
);

fiat_25519_carry_square_mux_2_1_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 64 ))
mux_2_1_64_1_1_U26(
    .din0(64'd0),
    .din1(arr_2_q1),
    .din2(trunc_ln23_fu_293_p1),
    .dout(tmp_5_fu_404_p4)
);

fiat_25519_carry_square_mux_2_1_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 64 ))
mux_2_1_64_1_1_U27(
    .din0(64'd0),
    .din1(arr_3_q1),
    .din2(trunc_ln23_fu_293_p1),
    .dout(tmp_6_fu_434_p4)
);

fiat_25519_carry_square_mux_2_1_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 64 ))
mux_2_1_64_1_1_U28(
    .din0(64'd0),
    .din1(arr_q1),
    .din2(trunc_ln23_fu_293_p1),
    .dout(tmp_7_fu_451_p4)
);

fiat_25519_carry_square_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln23_fu_240_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_76 <= add_ln23_fu_282_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_76 <= 4'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_240_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_1_addr_reg_561[0] <= zext_ln22_fu_254_p1[0];
        arr_2_addr_reg_567[0] <= zext_ln22_fu_254_p1[0];
        arr_3_addr_reg_573[0] <= zext_ln22_fu_254_p1[0];
        arr_addr_reg_579 <= zext_ln30_4_fu_277_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv17_cast_reg_546[31 : 0] <= conv17_cast_fu_228_p1[31 : 0];
        i_reg_552 <= ap_sig_allocacmp_i;
        zext_ln30_2_cast_reg_540[31 : 0] <= zext_ln30_2_cast_fu_224_p1[31 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_240_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 4'd1;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_1_ce0 = 1'b1;
    end else begin
        arr_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_1_ce1 = 1'b1;
    end else begin
        arr_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_1_we0 = 1'b1;
    end else begin
        arr_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_2_ce0 = 1'b1;
    end else begin
        arr_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_2_ce1 = 1'b1;
    end else begin
        arr_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_2_we0 = 1'b1;
    end else begin
        arr_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_ce0 = 1'b1;
    end else begin
        arr_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_ce1 = 1'b1;
    end else begin
        arr_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_we0 = 1'b1;
    end else begin
        arr_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_ce0 = 1'b1;
    end else begin
        arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_ce1 = 1'b1;
    end else begin
        arr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_we0 = 1'b1;
    end else begin
        arr_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_282_p2 = (ap_sig_allocacmp_i + 4'd4);

assign add_ln29_fu_261_p2 = (ap_sig_allocacmp_i + 4'd3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign arr_1_address0 = arr_1_addr_reg_561;

assign arr_1_address1 = zext_ln22_fu_254_p1;

assign arr_1_d0 = (tmp_1_fu_325_p4 + mul_ln30_fu_216_p2);

assign arr_2_address0 = arr_2_addr_reg_567;

assign arr_2_address1 = zext_ln22_fu_254_p1;

assign arr_2_d0 = (tmp_5_fu_404_p4 + shl_ln_fu_419_p3);

assign arr_3_address0 = arr_3_addr_reg_573;

assign arr_3_address1 = zext_ln22_fu_254_p1;

assign arr_3_d0 = (tmp_6_fu_434_p4 + mul_ln30_1_fu_220_p2);

assign arr_address0 = arr_addr_reg_579;

assign arr_address1 = zext_ln30_4_fu_277_p1;

assign arr_d0 = (tmp_7_fu_451_p4 + shl_ln30_1_fu_466_p3);

assign conv17_cast_fu_228_p1 = conv17;

assign icmp_ln23_fu_240_p2 = ((ap_sig_allocacmp_i < 4'd9) ? 1'b1 : 1'b0);

assign lshr_ln22_1_fu_267_p4 = {{add_ln29_fu_261_p2[3:2]}};

assign mul_ln30_1_fu_220_p0 = mul_ln30_1_fu_220_p00;

assign mul_ln30_1_fu_220_p00 = tmp_3_fu_361_p11;

assign mul_ln30_1_fu_220_p1 = conv17_cast_reg_546;

assign mul_ln30_2_fu_208_p0 = zext_ln30_2_cast_reg_540;

assign mul_ln30_2_fu_208_p1 = mul_ln30_2_fu_208_p10;

assign mul_ln30_2_fu_208_p10 = tmp_2_fu_342_p11;

assign mul_ln30_3_fu_212_p0 = zext_ln30_2_cast_reg_540;

assign mul_ln30_3_fu_212_p1 = mul_ln30_3_fu_212_p10;

assign mul_ln30_3_fu_212_p10 = tmp_4_fu_385_p11;

assign mul_ln30_fu_216_p0 = mul_ln30_fu_216_p00;

assign mul_ln30_fu_216_p00 = tmp_fu_301_p11;

assign mul_ln30_fu_216_p1 = conv17_cast_reg_546;

assign shl_ln30_1_fu_466_p3 = {{mul_ln30_3_fu_212_p2}, {1'd0}};

assign shl_ln_fu_419_p3 = {{mul_ln30_2_fu_208_p2}, {1'd0}};

assign sub_ln26_fu_296_p2 = ($signed(4'd9) - $signed(i_reg_552));

assign tmp_8_fu_246_p3 = ap_sig_allocacmp_i[32'd2];

assign trunc_ln23_fu_293_p1 = i_reg_552[0:0];

assign zext_ln22_fu_254_p1 = tmp_8_fu_246_p3;

assign zext_ln30_2_cast_fu_224_p1 = zext_ln30_2;

assign zext_ln30_4_fu_277_p1 = lshr_ln22_1_fu_267_p4;

always @ (posedge ap_clk) begin
    zext_ln30_2_cast_reg_540[62:32] <= 31'b0000000000000000000000000000000;
    conv17_cast_reg_546[63:32] <= 32'b00000000000000000000000000000000;
    arr_1_addr_reg_561[1] <= 1'b0;
    arr_2_addr_reg_567[1] <= 1'b0;
    arr_3_addr_reg_573[1] <= 1'b0;
end

endmodule //fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_23_1
