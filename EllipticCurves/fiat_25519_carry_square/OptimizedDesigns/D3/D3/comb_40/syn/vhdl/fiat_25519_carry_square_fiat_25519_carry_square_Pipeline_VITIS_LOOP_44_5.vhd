-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_44_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arr_load_8 : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_130_0333_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_0_0332_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_1_0336_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_0_0335_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_1_0339_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_0_0338_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_3_1_0342_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_3_0_0341_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_130_0333_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_231_0334_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_1_1_0336_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_1_2_0337_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_2_1_0339_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_2_2_0340_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_3_1_0342_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_3_2_0343_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    add8122_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add8122_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_44_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln44_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add8122_fu_86 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln50_fu_371_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_90 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln44_fu_226_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln50_fu_203_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln50_fu_203_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln44_fu_235_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_243_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_253_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_285_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_285_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_285_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_285_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_285_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln50_1_fu_304_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln50_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_344_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_344_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_344_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_344_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_344_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_344_p6 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln2_fu_358_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln50_fu_203_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln50_fu_203_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln50_fu_203_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fiat_25519_carry_square_mul_32ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_4_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_4_2_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        din3 : IN STD_LOGIC_VECTOR (30 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32ns_32ns_64_1_1_U30 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln50_fu_203_p0,
        din1 => mul_ln50_fu_203_p1,
        dout => mul_ln50_fu_203_p2);

    mux_4_2_32_1_1_U31 : component fiat_25519_carry_square_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_1_fu_285_p1,
        din1 => tmp_1_fu_285_p2,
        din2 => tmp_1_fu_285_p3,
        din3 => tmp_1_fu_285_p4,
        din4 => tmp_1_fu_285_p5,
        dout => tmp_1_fu_285_p6);

    mux_4_2_31_1_1_U32 : component fiat_25519_carry_square_mux_4_2_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        din2_WIDTH => 31,
        din3_WIDTH => 31,
        din4_WIDTH => 2,
        dout_WIDTH => 31)
    port map (
        din0 => tmp_2_fu_344_p1,
        din1 => tmp_2_fu_344_p2,
        din2 => tmp_2_fu_344_p3,
        din3 => tmp_2_fu_344_p4,
        din4 => tmp_2_fu_344_p5,
        dout => tmp_2_fu_344_p6);

    flow_control_loop_pipe_sequential_init_U : component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    add8122_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add8122_fu_86 <= arr_load_8;
                elsif (((icmp_ln44_fu_220_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add8122_fu_86 <= add_ln50_fu_371_p2;
                end if;
            end if; 
        end if;
    end process;

    i_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_90 <= ap_const_lv3_0;
                elsif (((icmp_ln44_fu_220_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_90 <= add_ln44_fu_226_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add8122_out <= add8122_fu_86;

    add8122_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln44_fu_220_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln44_fu_220_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add8122_out_ap_vld <= ap_const_logic_1;
        else 
            add8122_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln44_fu_226_p2 <= std_logic_vector(unsigned(i_fu_90) + unsigned(ap_const_lv3_1));
    add_ln50_fu_371_p2 <= std_logic_vector(unsigned(mul_ln50_fu_203_p2) + unsigned(add8122_fu_86));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln44_fu_220_p2)
    begin
        if (((icmp_ln44_fu_220_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_243_p2 <= std_logic_vector(signed(ap_const_lv4_9) - signed(zext_ln44_fu_235_p1));
    icmp_ln44_fu_220_p2 <= "1" when (i_fu_90 = ap_const_lv3_5) else "0";
    icmp_ln50_fu_314_p2 <= "1" when (trunc_ln50_1_fu_304_p4 = ap_const_lv2_1) else "0";
    mul_ln50_fu_203_p0 <= mul_ln50_fu_203_p00(32 - 1 downto 0);
    mul_ln50_fu_203_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_358_p3),64));
    mul_ln50_fu_203_p1 <= mul_ln50_fu_203_p10(32 - 1 downto 0);
    mul_ln50_fu_203_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_285_p6),64));
    shl_ln2_fu_358_p3 <= (tmp_2_fu_344_p6 & ap_const_lv1_0);
    tmp_1_fu_285_p1 <= 
        arg1_r_130_0333_reload when (tmp_fu_253_p3(0) = '1') else 
        arg1_r_0_0332_reload;
    tmp_1_fu_285_p2 <= 
        arg1_r_1_1_0336_reload when (tmp_fu_253_p3(0) = '1') else 
        arg1_r_1_0_0335_reload;
    tmp_1_fu_285_p3 <= 
        arg1_r_2_1_0339_reload when (tmp_fu_253_p3(0) = '1') else 
        arg1_r_2_0_0338_reload;
    tmp_1_fu_285_p4 <= 
        arg1_r_3_1_0342_reload when (tmp_fu_253_p3(0) = '1') else 
        arg1_r_3_0_0341_reload;
    tmp_1_fu_285_p5 <= i_fu_90(2 - 1 downto 0);
    tmp_2_fu_344_p1 <= 
        arg1_r_130_0333_cast when (icmp_ln50_fu_314_p2(0) = '1') else 
        arg1_r_231_0334_cast;
    tmp_2_fu_344_p2 <= 
        arg1_r_1_1_0336_cast when (icmp_ln50_fu_314_p2(0) = '1') else 
        arg1_r_1_2_0337_cast;
    tmp_2_fu_344_p3 <= 
        arg1_r_2_1_0339_cast when (icmp_ln50_fu_314_p2(0) = '1') else 
        arg1_r_2_2_0340_cast;
    tmp_2_fu_344_p4 <= 
        arg1_r_3_1_0342_cast when (icmp_ln50_fu_314_p2(0) = '1') else 
        arg1_r_3_2_0343_cast;
    tmp_2_fu_344_p5 <= empty_fu_243_p2(2 - 1 downto 0);
    tmp_fu_253_p3 <= i_fu_90(2 downto 2);
    trunc_ln50_1_fu_304_p4 <= empty_fu_243_p2(3 downto 2);
    zext_ln44_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_90),4));
end behav;
