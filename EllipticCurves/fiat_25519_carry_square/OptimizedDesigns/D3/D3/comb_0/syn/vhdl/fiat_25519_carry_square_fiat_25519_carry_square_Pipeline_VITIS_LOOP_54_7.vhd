-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_54_7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arr_load_5 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_load_4 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_load_3 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_load_2 : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_0_01_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_0_1_010_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_0_2_013_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_0_3_016_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_04_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_2_07_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_1_1_011_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_2_1_012_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_1_2_014_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_2_2_015_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_1_3_017_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_2_3_018_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_0_01_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_0_1_010_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_0_2_013_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_0_3_016_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    mul157 : IN STD_LOGIC_VECTOR (63 downto 0);
    add18016_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add18016_out_ap_vld : OUT STD_LOGIC;
    add15115_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add15115_out_ap_vld : OUT STD_LOGIC;
    add13114_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add13114_out_ap_vld : OUT STD_LOGIC;
    add11813_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add11813_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_54_7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln54_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal mul_ln60_fu_292_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln60_reg_944 : STD_LOGIC_VECTOR (63 downto 0);
    signal add11813_fu_118 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln60_fu_775_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal add13114_fu_122 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln61_fu_550_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add15115_fu_126 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln63_1_fu_661_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add18016_fu_130 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln64_fu_746_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_134 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln54_fu_342_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln60_fu_292_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln60_fu_292_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln63_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln61_fu_296_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln61_fu_296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln64_fu_300_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln64_fu_300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln63_fu_304_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln63_fu_304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln54_fu_361_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_365_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln54_fu_357_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_27_fu_381_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_29_fu_391_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_401_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_422_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln60_2_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_462_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_fu_462_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_fu_462_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_fu_462_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_fu_462_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln60_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_1_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_462_p6 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln60_fu_494_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal or_ln60_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal st_fu_498_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sf_fu_506_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln60_4_fu_514_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_527_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_527_p6 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln3_fu_537_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln61_fu_296_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_556_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_588_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_fu_588_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_fu_588_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_fu_588_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_fu_588_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_588_p6 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln4_fu_602_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln5_fu_621_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln60_1_fu_418_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln63_fu_629_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln63_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln63_1_fu_642_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln63_fu_304_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln63_fu_650_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln63_fu_655_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_667_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_699_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_fu_699_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_fu_699_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_fu_699_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_fu_699_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_699_p6 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln6_fu_713_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln64_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln64_fu_300_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln64_4_fu_732_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln64_fu_740_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln60_fu_292_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln61_fu_296_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln63_fu_304_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln63_fu_304_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln64_fu_300_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fiat_25519_carry_square_mul_32ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fiat_25519_carry_square_mul_33ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_4_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_4_2_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        din3 : IN STD_LOGIC_VECTOR (30 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32ns_32ns_64_1_1_U53 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln60_fu_292_p0,
        din1 => mul_ln60_fu_292_p1,
        dout => mul_ln60_fu_292_p2);

    mul_32ns_32ns_64_1_1_U54 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln61_fu_296_p0,
        din1 => mul_ln61_fu_296_p1,
        dout => mul_ln61_fu_296_p2);

    mul_32ns_32ns_64_1_1_U55 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln64_fu_300_p0,
        din1 => mul_ln64_fu_300_p1,
        dout => mul_ln64_fu_300_p2);

    mul_33ns_32ns_64_1_1_U56 : component fiat_25519_carry_square_mul_33ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln63_fu_304_p0,
        din1 => mul_ln63_fu_304_p1,
        dout => mul_ln63_fu_304_p2);

    mux_4_2_32_1_1_U57 : component fiat_25519_carry_square_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => arg1_r_0_01_reload,
        din1 => arg1_r_0_1_010_reload,
        din2 => arg1_r_0_2_013_reload,
        din3 => arg1_r_0_3_016_reload,
        din4 => trunc_ln54_fu_357_p1,
        dout => tmp_2_fu_401_p6);

    mux_4_2_31_1_1_U58 : component fiat_25519_carry_square_mux_4_2_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        din2_WIDTH => 31,
        din3_WIDTH => 31,
        din4_WIDTH => 2,
        dout_WIDTH => 31)
    port map (
        din0 => tmp_3_fu_462_p1,
        din1 => tmp_3_fu_462_p2,
        din2 => tmp_3_fu_462_p3,
        din3 => tmp_3_fu_462_p4,
        din4 => tmp_3_fu_462_p5,
        dout => tmp_3_fu_462_p6);

    mux_4_2_31_1_1_U59 : component fiat_25519_carry_square_mux_4_2_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        din2_WIDTH => 31,
        din3_WIDTH => 31,
        din4_WIDTH => 2,
        dout_WIDTH => 31)
    port map (
        din0 => arg1_r_1_04_cast,
        din1 => arg1_r_1_1_011_cast,
        din2 => arg1_r_1_2_014_cast,
        din3 => arg1_r_1_3_017_cast,
        din4 => tmp_4_fu_527_p5,
        dout => tmp_4_fu_527_p6);

    mux_4_2_31_1_1_U60 : component fiat_25519_carry_square_mux_4_2_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        din2_WIDTH => 31,
        din3_WIDTH => 31,
        din4_WIDTH => 2,
        dout_WIDTH => 31)
    port map (
        din0 => tmp_5_fu_588_p1,
        din1 => tmp_5_fu_588_p2,
        din2 => tmp_5_fu_588_p3,
        din3 => tmp_5_fu_588_p4,
        din4 => tmp_5_fu_588_p5,
        dout => tmp_5_fu_588_p6);

    mux_4_2_31_1_1_U61 : component fiat_25519_carry_square_mux_4_2_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        din2_WIDTH => 31,
        din3_WIDTH => 31,
        din4_WIDTH => 2,
        dout_WIDTH => 31)
    port map (
        din0 => tmp_6_fu_699_p1,
        din1 => tmp_6_fu_699_p2,
        din2 => tmp_6_fu_699_p3,
        din3 => tmp_6_fu_699_p4,
        din4 => tmp_6_fu_699_p5,
        dout => tmp_6_fu_699_p6);

    flow_control_loop_pipe_sequential_init_U : component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    add11813_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    add11813_fu_118 <= arr_load_2;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    add11813_fu_118 <= add_ln60_fu_775_p2;
                end if;
            end if; 
        end if;
    end process;

    add13114_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add13114_fu_122 <= arr_load_3;
                elsif (((icmp_ln54_fu_336_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add13114_fu_122 <= add_ln61_fu_550_p2;
                end if;
            end if; 
        end if;
    end process;

    add15115_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add15115_fu_126 <= arr_load_4;
                elsif (((icmp_ln54_fu_336_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add15115_fu_126 <= add_ln63_1_fu_661_p2;
                end if;
            end if; 
        end if;
    end process;

    add18016_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add18016_fu_130 <= arr_load_5;
                elsif (((icmp_ln54_fu_336_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add18016_fu_130 <= add_ln64_fu_746_p2;
                end if;
            end if; 
        end if;
    end process;

    i_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_134 <= ap_const_lv3_0;
                elsif (((icmp_ln54_fu_336_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_134 <= add_ln54_fu_342_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_336_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln60_reg_944 <= mul_ln60_fu_292_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add11813_out <= add11813_fu_118;

    add11813_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln54_fu_336_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln54_fu_336_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add11813_out_ap_vld <= ap_const_logic_1;
        else 
            add11813_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add13114_out <= add13114_fu_122;

    add13114_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln54_fu_336_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln54_fu_336_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add13114_out_ap_vld <= ap_const_logic_1;
        else 
            add13114_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add15115_out <= add15115_fu_126;

    add15115_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln54_fu_336_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln54_fu_336_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add15115_out_ap_vld <= ap_const_logic_1;
        else 
            add15115_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add18016_out <= add18016_fu_130;

    add18016_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln54_fu_336_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln54_fu_336_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add18016_out_ap_vld <= ap_const_logic_1;
        else 
            add18016_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln54_fu_342_p2 <= std_logic_vector(unsigned(i_fu_134) + unsigned(ap_const_lv3_1));
    add_ln60_fu_775_p2 <= std_logic_vector(unsigned(mul_ln60_reg_944) + unsigned(add11813_fu_118));
    add_ln61_fu_550_p2 <= std_logic_vector(unsigned(mul_ln61_fu_296_p2) + unsigned(add13114_fu_122));
    add_ln63_1_fu_661_p2 <= std_logic_vector(unsigned(add15115_fu_126) + unsigned(add_ln63_fu_655_p2));
    add_ln63_fu_655_p2 <= std_logic_vector(unsigned(mul_ln63_fu_304_p2) + unsigned(and_ln63_fu_650_p2));
    add_ln64_fu_746_p2 <= std_logic_vector(unsigned(and_ln64_fu_740_p2) + unsigned(add18016_fu_130));
    and_ln63_fu_650_p2 <= (select_ln63_1_fu_642_p3 and mul157);
    and_ln64_fu_740_p2 <= (select_ln64_4_fu_732_p3 and mul_ln64_fu_300_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln54_fu_336_p2)
    begin
        if (((icmp_ln54_fu_336_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_27_fu_381_p2 <= std_logic_vector(signed(ap_const_lv3_6) - signed(i_fu_134));
    empty_29_fu_391_p2 <= std_logic_vector(signed(ap_const_lv3_5) - signed(i_fu_134));
    empty_fu_365_p2 <= std_logic_vector(signed(ap_const_lv4_8) - signed(zext_ln54_fu_361_p1));
    icmp_ln54_fu_336_p2 <= "1" when (i_fu_134 = ap_const_lv3_4) else "0";
    icmp_ln60_1_fu_482_p2 <= "1" when (i_fu_134 = ap_const_lv3_3) else "0";
    icmp_ln60_2_fu_432_p2 <= "1" when (trunc_ln_fu_422_p4 = ap_const_lv2_1) else "0";
    icmp_ln60_fu_476_p2 <= "1" when (i_fu_134 = ap_const_lv3_1) else "0";
    icmp_ln63_fu_615_p2 <= "1" when (i_fu_134 = ap_const_lv3_0) else "0";
    icmp_ln64_fu_726_p2 <= "1" when (unsigned(i_fu_134) < unsigned(ap_const_lv3_3)) else "0";
    mul_ln60_fu_292_p0 <= mul_ln60_fu_292_p00(32 - 1 downto 0);
    mul_ln60_fu_292_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln60_4_fu_514_p3),64));
    mul_ln60_fu_292_p1 <= zext_ln63_fu_411_p1(32 - 1 downto 0);
    mul_ln61_fu_296_p0 <= mul_ln61_fu_296_p00(32 - 1 downto 0);
    mul_ln61_fu_296_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_537_p3),64));
    mul_ln61_fu_296_p1 <= zext_ln63_fu_411_p1(32 - 1 downto 0);
    mul_ln63_fu_304_p0 <= mul_ln63_fu_304_p00(33 - 1 downto 0);
    mul_ln63_fu_304_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln63_fu_629_p3),64));
    mul_ln63_fu_304_p1 <= mul_ln63_fu_304_p10(32 - 1 downto 0);
    mul_ln63_fu_304_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln4_fu_602_p3),64));
    mul_ln64_fu_300_p0 <= mul_ln64_fu_300_p00(32 - 1 downto 0);
    mul_ln64_fu_300_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln6_fu_713_p3),64));
    mul_ln64_fu_300_p1 <= zext_ln63_fu_411_p1(32 - 1 downto 0);
    or_ln60_fu_488_p2 <= (icmp_ln60_fu_476_p2 or icmp_ln60_1_fu_482_p2);
    select_ln60_4_fu_514_p3 <= 
        st_fu_498_p3 when (or_ln60_fu_488_p2(0) = '1') else 
        sf_fu_506_p3;
    select_ln63_1_fu_642_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln63_fu_615_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln63_fu_629_p3 <= 
        shl_ln5_fu_621_p3 when (icmp_ln60_fu_476_p2(0) = '1') else 
        zext_ln60_1_fu_418_p1;
    select_ln64_4_fu_732_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln64_fu_726_p2(0) = '1') else 
        ap_const_lv64_0;
    sf_fu_506_p3 <= (tmp_3_fu_462_p6 & ap_const_lv1_0);
    shl_ln3_fu_537_p3 <= (tmp_4_fu_527_p6 & ap_const_lv1_0);
    shl_ln4_fu_602_p3 <= (tmp_5_fu_588_p6 & ap_const_lv1_0);
    shl_ln5_fu_621_p3 <= (tmp_2_fu_401_p6 & ap_const_lv1_0);
    shl_ln6_fu_713_p3 <= (tmp_6_fu_699_p6 & ap_const_lv1_0);
    st_fu_498_p3 <= (trunc_ln60_fu_494_p1 & ap_const_lv2_0);
    tmp_1_fu_667_p3 <= empty_29_fu_391_p2(2 downto 2);
    tmp_3_fu_462_p1 <= 
        arg1_r_1_04_cast when (icmp_ln60_2_fu_432_p2(0) = '1') else 
        arg1_r_2_07_cast;
    tmp_3_fu_462_p2 <= 
        arg1_r_1_1_011_cast when (icmp_ln60_2_fu_432_p2(0) = '1') else 
        arg1_r_2_1_012_cast;
    tmp_3_fu_462_p3 <= 
        arg1_r_1_2_014_cast when (icmp_ln60_2_fu_432_p2(0) = '1') else 
        arg1_r_2_2_015_cast;
    tmp_3_fu_462_p4 <= 
        arg1_r_1_3_017_cast when (icmp_ln60_2_fu_432_p2(0) = '1') else 
        arg1_r_2_3_018_cast;
    tmp_3_fu_462_p5 <= empty_fu_365_p2(2 - 1 downto 0);
    tmp_4_fu_527_p5 <= (trunc_ln54_fu_357_p1 xor ap_const_lv2_3);
    tmp_5_fu_588_p1 <= 
        arg1_r_1_04_cast when (tmp_fu_556_p3(0) = '1') else 
        arg1_r_0_01_cast;
    tmp_5_fu_588_p2 <= 
        arg1_r_1_1_011_cast when (tmp_fu_556_p3(0) = '1') else 
        arg1_r_0_1_010_cast;
    tmp_5_fu_588_p3 <= 
        arg1_r_1_2_014_cast when (tmp_fu_556_p3(0) = '1') else 
        arg1_r_0_2_013_cast;
    tmp_5_fu_588_p4 <= 
        arg1_r_1_3_017_cast when (tmp_fu_556_p3(0) = '1') else 
        arg1_r_0_3_016_cast;
    tmp_5_fu_588_p5 <= empty_27_fu_381_p2(2 - 1 downto 0);
    tmp_6_fu_699_p1 <= 
        arg1_r_1_04_cast when (tmp_1_fu_667_p3(0) = '1') else 
        arg1_r_0_01_cast;
    tmp_6_fu_699_p2 <= 
        arg1_r_1_1_011_cast when (tmp_1_fu_667_p3(0) = '1') else 
        arg1_r_0_1_010_cast;
    tmp_6_fu_699_p3 <= 
        arg1_r_1_2_014_cast when (tmp_1_fu_667_p3(0) = '1') else 
        arg1_r_0_2_013_cast;
    tmp_6_fu_699_p4 <= 
        arg1_r_1_3_017_cast when (tmp_1_fu_667_p3(0) = '1') else 
        arg1_r_0_3_016_cast;
    tmp_6_fu_699_p5 <= empty_29_fu_391_p2(2 - 1 downto 0);
    tmp_fu_556_p3 <= empty_27_fu_381_p2(2 downto 2);
    trunc_ln54_fu_357_p1 <= i_fu_134(2 - 1 downto 0);
    trunc_ln60_fu_494_p1 <= tmp_3_fu_462_p6(30 - 1 downto 0);
    trunc_ln_fu_422_p4 <= empty_fu_365_p2(3 downto 2);
    zext_ln54_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_134),4));
    zext_ln60_1_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_401_p6),33));
    zext_ln63_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_401_p6),64));
end behav;
