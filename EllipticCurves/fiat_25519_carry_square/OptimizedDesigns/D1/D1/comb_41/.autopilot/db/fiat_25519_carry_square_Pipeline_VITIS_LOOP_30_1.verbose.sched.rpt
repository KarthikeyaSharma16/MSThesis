

================================================================
== Vitis HLS Report for 'fiat_25519_carry_square_Pipeline_VITIS_LOOP_30_1'
================================================================
* Date:           Thu May  9 15:36:08 2024

* Version:        2023.1.1 (Build 3869133 on Jun 15 2023)
* Project:        D1
* Solution:       comb_41 (Vivado IP Flow Target)
* Product family: zynquplus
* Target device:  xczu9eg-ffvb1156-2-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  6.548 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+-----------+-----------+-----+-----+---------+
    |  Latency (cycles) |   Latency (absolute)  |  Interval | Pipeline|
    |   min   |   max   |    min    |    max    | min | max |   Type  |
    +---------+---------+-----------+-----------+-----+-----+---------+
    |        6|        6|  60.000 ns|  60.000 ns|    6|    6|       no|
    +---------+---------+-----------+-----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- VITIS_LOOP_30_1  |        4|        4|         1|          1|          1|     4|       yes|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 2


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 2
* Pipeline : 1
  Pipeline-0 : II = 1, D = 2, States = { 1 2 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 0.47>
ST_1 : Operation 4 [1/1] (0.00ns)   --->   "%i_1 = alloca i32 1"   --->   Operation 4 'alloca' 'i_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%arr_1 = alloca i32 1"   --->   Operation 5 'alloca' 'arr_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%arr = alloca i32 1"   --->   Operation 6 'alloca' 'arr' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%arr_2 = alloca i32 1"   --->   Operation 7 'alloca' 'arr_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%arr_3 = alloca i32 1"   --->   Operation 8 'alloca' 'arr_3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%arr_4 = alloca i32 1"   --->   Operation 9 'alloca' 'arr_4' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%arr_5 = alloca i32 1"   --->   Operation 10 'alloca' 'arr_5' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%arr_6 = alloca i32 1"   --->   Operation 11 'alloca' 'arr_6' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%arr_7 = alloca i32 1"   --->   Operation 12 'alloca' 'arr_7' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%zext_ln37_1_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %zext_ln37_1"   --->   Operation 13 'read' 'zext_ln37_1_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%arg1_r_1_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_1_reload"   --->   Operation 14 'read' 'arg1_r_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%zext_ln27_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %zext_ln27"   --->   Operation 15 'read' 'zext_ln27_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%arg1_r_8_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_8_reload"   --->   Operation 16 'read' 'arg1_r_8_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%arg1_r_7_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_7_reload"   --->   Operation 17 'read' 'arg1_r_7_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%arg1_r_6_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_6_reload"   --->   Operation 18 'read' 'arg1_r_6_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%arg1_r_5_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_5_reload"   --->   Operation 19 'read' 'arg1_r_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%arg1_r_4_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_4_reload"   --->   Operation 20 'read' 'arg1_r_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%arg1_r_3_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_3_reload"   --->   Operation 21 'read' 'arg1_r_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%arg1_r_2_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_2_reload"   --->   Operation 22 'read' 'arg1_r_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%zext_ln37_1_cast = zext i32 %zext_ln37_1_read"   --->   Operation 23 'zext' 'zext_ln37_1_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%zext_ln27_cast = zext i32 %zext_ln27_read"   --->   Operation 24 'zext' 'zext_ln27_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.47ns)   --->   "%store_ln0 = store i64 0, i64 %arr_7"   --->   Operation 25 'store' 'store_ln0' <Predicate = true> <Delay = 0.47>
ST_1 : Operation 26 [1/1] (0.47ns)   --->   "%store_ln0 = store i64 0, i64 %arr_6"   --->   Operation 26 'store' 'store_ln0' <Predicate = true> <Delay = 0.47>
ST_1 : Operation 27 [1/1] (0.47ns)   --->   "%store_ln0 = store i64 0, i64 %arr_5"   --->   Operation 27 'store' 'store_ln0' <Predicate = true> <Delay = 0.47>
ST_1 : Operation 28 [1/1] (0.47ns)   --->   "%store_ln0 = store i64 0, i64 %arr_4"   --->   Operation 28 'store' 'store_ln0' <Predicate = true> <Delay = 0.47>
ST_1 : Operation 29 [1/1] (0.47ns)   --->   "%store_ln0 = store i64 0, i64 %arr_3"   --->   Operation 29 'store' 'store_ln0' <Predicate = true> <Delay = 0.47>
ST_1 : Operation 30 [1/1] (0.47ns)   --->   "%store_ln0 = store i64 0, i64 %arr_2"   --->   Operation 30 'store' 'store_ln0' <Predicate = true> <Delay = 0.47>
ST_1 : Operation 31 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr"   --->   Operation 31 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 32 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_1"   --->   Operation 32 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 33 [1/1] (0.42ns)   --->   "%store_ln0 = store i4 1, i4 %i_1"   --->   Operation 33 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.inc34"   --->   Operation 34 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 6.54>
ST_2 : Operation 35 [1/1] (0.00ns)   --->   "%i = load i4 %i_1" [d1.cpp:29]   --->   Operation 35 'load' 'i' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 36 [1/1] (0.79ns)   --->   "%icmp_ln30 = icmp_ult  i4 %i, i4 9" [d1.cpp:30]   --->   Operation 36 'icmp' 'icmp_ln30' <Predicate = true> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 37 [1/1] (0.00ns)   --->   "%br_ln30 = br i1 %icmp_ln30, void %for.end39.exitStub, void %for.inc34.split" [d1.cpp:30]   --->   Operation 37 'br' 'br_ln30' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 38 [1/1] (0.00ns)   --->   "%arr_1_load21 = load i64 %arr_1" [d1.cpp:37]   --->   Operation 38 'load' 'arr_1_load21' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 39 [1/1] (0.00ns)   --->   "%arr_load = load i64 %arr" [d1.cpp:37]   --->   Operation 39 'load' 'arr_load' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 40 [1/1] (0.00ns)   --->   "%arr_2_load_2 = load i64 %arr_2" [d1.cpp:37]   --->   Operation 40 'load' 'arr_2_load_2' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 41 [1/1] (0.00ns)   --->   "%arr_3_load_2 = load i64 %arr_3" [d1.cpp:37]   --->   Operation 41 'load' 'arr_3_load_2' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 42 [1/1] (0.00ns)   --->   "%arr_4_load_2 = load i64 %arr_4" [d1.cpp:37]   --->   Operation 42 'load' 'arr_4_load_2' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 43 [1/1] (0.00ns)   --->   "%arr_5_load_2 = load i64 %arr_5" [d1.cpp:37]   --->   Operation 43 'load' 'arr_5_load_2' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 44 [1/1] (0.00ns)   --->   "%arr_6_load_1 = load i64 %arr_6" [d1.cpp:37]   --->   Operation 44 'load' 'arr_6_load_1' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 45 [1/1] (0.00ns)   --->   "%arr_7_load_1 = load i64 %arr_7" [d1.cpp:37]   --->   Operation 45 'load' 'arr_7_load_1' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 46 [1/1] (0.00ns)   --->   "%specpipeline_ln32 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty_2" [d1.cpp:32]   --->   Operation 46 'specpipeline' 'specpipeline_ln32' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 47 [1/1] (0.00ns)   --->   "%speclooptripcount_ln14 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 4, i64 4, i64 4" [d1.cpp:14]   --->   Operation 47 'speclooptripcount' 'speclooptripcount_ln14' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 48 [1/1] (0.00ns)   --->   "%specloopname_ln30 = specloopname void @_ssdm_op_SpecLoopName, void @empty_6" [d1.cpp:30]   --->   Operation 48 'specloopname' 'specloopname_ln30' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 49 [1/1] (0.00ns)   --->   "%trunc_ln29 = trunc i4 %i" [d1.cpp:29]   --->   Operation 49 'trunc' 'trunc_ln29' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 50 [1/1] (0.79ns)   --->   "%sub_ln37 = sub i4 9, i4 %i" [d1.cpp:37]   --->   Operation 50 'sub' 'sub_ln37' <Predicate = (icmp_ln30)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 51 [1/1] (0.77ns)   --->   "%tmp = mux i32 @_ssdm_op_Mux.ap_auto.9i32.i4, i32 0, i32 0, i32 %arg1_r_2_reload_read, i32 %arg1_r_3_reload_read, i32 %arg1_r_4_reload_read, i32 %arg1_r_5_reload_read, i32 %arg1_r_6_reload_read, i32 %arg1_r_7_reload_read, i32 %arg1_r_8_reload_read, i4 %sub_ln37" [d1.cpp:37]   --->   Operation 51 'mux' 'tmp' <Predicate = (icmp_ln30)> <Delay = 0.77> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 52 [1/1] (0.00ns)   --->   "%zext_ln37 = zext i32 %tmp" [d1.cpp:37]   --->   Operation 52 'zext' 'zext_ln37' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_2 : [1/1] (0.82ns)   --->   Input mux for Operation 53 '%mul_ln37 = mul i64 %zext_ln37, i64 %zext_ln27_cast'
ST_2 : Operation 53 [1/1] (2.59ns)   --->   "%mul_ln37 = mul i64 %zext_ln37, i64 %zext_ln27_cast" [d1.cpp:37]   --->   Operation 53 'mul' 'mul_ln37' <Predicate = (icmp_ln30)> <Delay = 2.59> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 54 [1/1] (0.72ns)   --->   "%tmp_1 = mux i64 @_ssdm_op_Mux.ap_auto.8i64.i3, i64 0, i64 %arr_load, i64 %arr_7_load_1, i64 %arr_6_load_1, i64 %arr_5_load_2, i64 %arr_4_load_2, i64 %arr_3_load_2, i64 %arr_2_load_2, i3 %trunc_ln29" [d1.cpp:37]   --->   Operation 54 'mux' 'tmp_1' <Predicate = (icmp_ln30)> <Delay = 0.72> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.72> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 55 [1/1] (1.08ns)   --->   "%arr_8 = add i64 %mul_ln37, i64 %tmp_1" [d1.cpp:37]   --->   Operation 55 'add' 'arr_8' <Predicate = (icmp_ln30)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 56 [1/1] (0.67ns)   --->   "%sub_ln37_1 = sub i3 0, i3 %trunc_ln29" [d1.cpp:37]   --->   Operation 56 'sub' 'sub_ln37_1' <Predicate = (icmp_ln30)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 57 [1/1] (0.72ns)   --->   "%tmp_2 = mux i32 @_ssdm_op_Mux.ap_auto.8i32.i3, i32 0, i32 %arg1_r_1_reload_read, i32 %arg1_r_2_reload_read, i32 %arg1_r_3_reload_read, i32 %arg1_r_4_reload_read, i32 %arg1_r_5_reload_read, i32 %arg1_r_6_reload_read, i32 %arg1_r_7_reload_read, i3 %sub_ln37_1" [d1.cpp:37]   --->   Operation 57 'mux' 'tmp_2' <Predicate = (icmp_ln30)> <Delay = 0.72> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.72> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 58 [1/1] (0.72ns)   --->   "%tmp_3 = mux i64 @_ssdm_op_Mux.ap_auto.8i64.i3, i64 0, i64 %arr_7_load_1, i64 %arr_6_load_1, i64 %arr_5_load_2, i64 %arr_4_load_2, i64 %arr_3_load_2, i64 %arr_2_load_2, i64 %arr_1_load21, i3 %trunc_ln29" [d1.cpp:37]   --->   Operation 58 'mux' 'tmp_3' <Predicate = (icmp_ln30)> <Delay = 0.72> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.72> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 59 [1/1] (0.00ns)   --->   "%zext_ln37_2 = zext i32 %tmp_2" [d1.cpp:37]   --->   Operation 59 'zext' 'zext_ln37_2' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_2 : [1/1] (0.62ns)   --->   Input mux for Operation 60 '%mul_ln37_1 = mul i63 %zext_ln37_1_cast, i63 %zext_ln37_2'
ST_2 : Operation 60 [1/1] (2.79ns)   --->   "%mul_ln37_1 = mul i63 %zext_ln37_1_cast, i63 %zext_ln37_2" [d1.cpp:37]   --->   Operation 60 'mul' 'mul_ln37_1' <Predicate = (icmp_ln30)> <Delay = 2.79> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 61 [1/1] (0.00ns)   --->   "%shl_ln = bitconcatenate i64 @_ssdm_op_BitConcatenate.i64.i63.i1, i63 %mul_ln37_1, i1 0" [d1.cpp:37]   --->   Operation 61 'bitconcatenate' 'shl_ln' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 62 [1/1] (1.08ns)   --->   "%arr_9 = add i64 %shl_ln, i64 %tmp_3" [d1.cpp:37]   --->   Operation 62 'add' 'arr_9' <Predicate = (icmp_ln30)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 63 [1/1] (0.74ns)   --->   "%switch_ln37 = switch i4 %i, void %arrayidx32.1.case.8, i4 1, void %for.inc34.split.arrayidx32.1.exit_crit_edge13, i4 2, void %arrayidx32.1.case.3, i4 3, void %arrayidx32.1.case.4, i4 4, void %arrayidx32.1.case.5, i4 5, void %arrayidx32.1.case.6, i4 6, void %for.inc34.split.arrayidx32.1.exit_crit_edge" [d1.cpp:37]   --->   Operation 63 'switch' 'switch_ln37' <Predicate = (icmp_ln30)> <Delay = 0.74>
ST_2 : Operation 64 [1/1] (0.47ns)   --->   "%store_ln37 = store i64 %arr_8, i64 %arr_3" [d1.cpp:37]   --->   Operation 64 'store' 'store_ln37' <Predicate = (icmp_ln30 & i == 6)> <Delay = 0.47>
ST_2 : Operation 65 [1/1] (0.47ns)   --->   "%store_ln37 = store i64 %arr_9, i64 %arr_2" [d1.cpp:37]   --->   Operation 65 'store' 'store_ln37' <Predicate = (icmp_ln30 & i == 6)> <Delay = 0.47>
ST_2 : Operation 66 [1/1] (0.00ns)   --->   "%br_ln37 = br void %arrayidx32.1.exit" [d1.cpp:37]   --->   Operation 66 'br' 'br_ln37' <Predicate = (icmp_ln30 & i == 6)> <Delay = 0.00>
ST_2 : Operation 67 [1/1] (0.47ns)   --->   "%store_ln37 = store i64 %arr_8, i64 %arr_4" [d1.cpp:37]   --->   Operation 67 'store' 'store_ln37' <Predicate = (icmp_ln30 & i == 5)> <Delay = 0.47>
ST_2 : Operation 68 [1/1] (0.47ns)   --->   "%store_ln37 = store i64 %arr_9, i64 %arr_3" [d1.cpp:37]   --->   Operation 68 'store' 'store_ln37' <Predicate = (icmp_ln30 & i == 5)> <Delay = 0.47>
ST_2 : Operation 69 [1/1] (0.00ns)   --->   "%br_ln37 = br void %arrayidx32.1.exit" [d1.cpp:37]   --->   Operation 69 'br' 'br_ln37' <Predicate = (icmp_ln30 & i == 5)> <Delay = 0.00>
ST_2 : Operation 70 [1/1] (0.47ns)   --->   "%store_ln37 = store i64 %arr_8, i64 %arr_5" [d1.cpp:37]   --->   Operation 70 'store' 'store_ln37' <Predicate = (icmp_ln30 & i == 4)> <Delay = 0.47>
ST_2 : Operation 71 [1/1] (0.47ns)   --->   "%store_ln37 = store i64 %arr_9, i64 %arr_4" [d1.cpp:37]   --->   Operation 71 'store' 'store_ln37' <Predicate = (icmp_ln30 & i == 4)> <Delay = 0.47>
ST_2 : Operation 72 [1/1] (0.00ns)   --->   "%br_ln37 = br void %arrayidx32.1.exit" [d1.cpp:37]   --->   Operation 72 'br' 'br_ln37' <Predicate = (icmp_ln30 & i == 4)> <Delay = 0.00>
ST_2 : Operation 73 [1/1] (0.47ns)   --->   "%store_ln37 = store i64 %arr_8, i64 %arr_6" [d1.cpp:37]   --->   Operation 73 'store' 'store_ln37' <Predicate = (icmp_ln30 & i == 3)> <Delay = 0.47>
ST_2 : Operation 74 [1/1] (0.47ns)   --->   "%store_ln37 = store i64 %arr_9, i64 %arr_5" [d1.cpp:37]   --->   Operation 74 'store' 'store_ln37' <Predicate = (icmp_ln30 & i == 3)> <Delay = 0.47>
ST_2 : Operation 75 [1/1] (0.00ns)   --->   "%br_ln37 = br void %arrayidx32.1.exit" [d1.cpp:37]   --->   Operation 75 'br' 'br_ln37' <Predicate = (icmp_ln30 & i == 3)> <Delay = 0.00>
ST_2 : Operation 76 [1/1] (0.47ns)   --->   "%store_ln37 = store i64 %arr_8, i64 %arr_7" [d1.cpp:37]   --->   Operation 76 'store' 'store_ln37' <Predicate = (icmp_ln30 & i == 2)> <Delay = 0.47>
ST_2 : Operation 77 [1/1] (0.47ns)   --->   "%store_ln37 = store i64 %arr_9, i64 %arr_6" [d1.cpp:37]   --->   Operation 77 'store' 'store_ln37' <Predicate = (icmp_ln30 & i == 2)> <Delay = 0.47>
ST_2 : Operation 78 [1/1] (0.00ns)   --->   "%br_ln37 = br void %arrayidx32.1.exit" [d1.cpp:37]   --->   Operation 78 'br' 'br_ln37' <Predicate = (icmp_ln30 & i == 2)> <Delay = 0.00>
ST_2 : Operation 79 [1/1] (0.47ns)   --->   "%store_ln37 = store i64 %arr_9, i64 %arr_7" [d1.cpp:37]   --->   Operation 79 'store' 'store_ln37' <Predicate = (icmp_ln30 & i == 1)> <Delay = 0.47>
ST_2 : Operation 80 [1/1] (0.42ns)   --->   "%store_ln37 = store i64 %arr_8, i64 %arr" [d1.cpp:37]   --->   Operation 80 'store' 'store_ln37' <Predicate = (icmp_ln30 & i == 1)> <Delay = 0.42>
ST_2 : Operation 81 [1/1] (0.00ns)   --->   "%br_ln37 = br void %arrayidx32.1.exit" [d1.cpp:37]   --->   Operation 81 'br' 'br_ln37' <Predicate = (icmp_ln30 & i == 1)> <Delay = 0.00>
ST_2 : Operation 82 [1/1] (0.47ns)   --->   "%store_ln37 = store i64 %arr_8, i64 %arr_2" [d1.cpp:37]   --->   Operation 82 'store' 'store_ln37' <Predicate = (icmp_ln30 & i != 1 & i != 2 & i != 3 & i != 4 & i != 5 & i != 6)> <Delay = 0.47>
ST_2 : Operation 83 [1/1] (0.42ns)   --->   "%store_ln37 = store i64 %arr_9, i64 %arr_1" [d1.cpp:37]   --->   Operation 83 'store' 'store_ln37' <Predicate = (icmp_ln30 & i != 1 & i != 2 & i != 3 & i != 4 & i != 5 & i != 6)> <Delay = 0.42>
ST_2 : Operation 84 [1/1] (0.00ns)   --->   "%br_ln37 = br void %arrayidx32.1.exit" [d1.cpp:37]   --->   Operation 84 'br' 'br_ln37' <Predicate = (icmp_ln30 & i != 1 & i != 2 & i != 3 & i != 4 & i != 5 & i != 6)> <Delay = 0.00>
ST_2 : Operation 85 [1/1] (0.79ns)   --->   "%add_ln30 = add i4 %i, i4 2" [d1.cpp:30]   --->   Operation 85 'add' 'add_ln30' <Predicate = (icmp_ln30)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 86 [1/1] (0.42ns)   --->   "%store_ln30 = store i4 %add_ln30, i4 %i_1" [d1.cpp:30]   --->   Operation 86 'store' 'store_ln30' <Predicate = (icmp_ln30)> <Delay = 0.42>
ST_2 : Operation 87 [1/1] (0.00ns)   --->   "%br_ln30 = br void %for.inc34" [d1.cpp:30]   --->   Operation 87 'br' 'br_ln30' <Predicate = (icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 88 [1/1] (0.00ns)   --->   "%arr_1_load = load i64 %arr_1"   --->   Operation 88 'load' 'arr_1_load' <Predicate = (!icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 89 [1/1] (0.00ns)   --->   "%arr_load_2 = load i64 %arr"   --->   Operation 89 'load' 'arr_load_2' <Predicate = (!icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 90 [1/1] (0.00ns)   --->   "%arr_2_load = load i64 %arr_2"   --->   Operation 90 'load' 'arr_2_load' <Predicate = (!icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 91 [1/1] (0.00ns)   --->   "%arr_3_load = load i64 %arr_3"   --->   Operation 91 'load' 'arr_3_load' <Predicate = (!icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 92 [1/1] (0.00ns)   --->   "%arr_4_load = load i64 %arr_4"   --->   Operation 92 'load' 'arr_4_load' <Predicate = (!icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 93 [1/1] (0.00ns)   --->   "%arr_5_load = load i64 %arr_5"   --->   Operation 93 'load' 'arr_5_load' <Predicate = (!icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 94 [1/1] (0.00ns)   --->   "%arr_6_load = load i64 %arr_6"   --->   Operation 94 'load' 'arr_6_load' <Predicate = (!icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 95 [1/1] (0.00ns)   --->   "%arr_7_load = load i64 %arr_7"   --->   Operation 95 'load' 'arr_7_load' <Predicate = (!icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 96 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %arr_8_out, i64 %arr_load_2"   --->   Operation 96 'write' 'write_ln0' <Predicate = (!icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 97 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %arr_7_out, i64 %arr_7_load"   --->   Operation 97 'write' 'write_ln0' <Predicate = (!icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 98 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %arr_6_out, i64 %arr_6_load"   --->   Operation 98 'write' 'write_ln0' <Predicate = (!icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 99 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %arr_5_out, i64 %arr_5_load"   --->   Operation 99 'write' 'write_ln0' <Predicate = (!icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 100 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %arr_4_out, i64 %arr_4_load"   --->   Operation 100 'write' 'write_ln0' <Predicate = (!icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 101 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %arr_3_out, i64 %arr_3_load"   --->   Operation 101 'write' 'write_ln0' <Predicate = (!icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 102 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %arr_2_out, i64 %arr_2_load"   --->   Operation 102 'write' 'write_ln0' <Predicate = (!icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 103 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %arr_1_out, i64 %arr_1_load"   --->   Operation 103 'write' 'write_ln0' <Predicate = (!icmp_ln30)> <Delay = 0.00>
ST_2 : Operation 104 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 104 'ret' 'ret_ln0' <Predicate = (!icmp_ln30)> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 0.476ns
The critical path consists of the following:
	'alloca' operation ('arr') [27]  (0.000 ns)
	'store' operation ('store_ln0') of constant 0 on local variable 'arr' [40]  (0.476 ns)

 <State 2>: 6.548ns
The critical path consists of the following:
	'load' operation ('i', d1.cpp:29) on local variable 'i' [51]  (0.000 ns)
	'sub' operation ('sub_ln37', d1.cpp:37) [67]  (0.797 ns)
	'mux' operation ('tmp', d1.cpp:37) [68]  (0.770 ns)
	multiplexor before operation 'mul' with delay (0.822 ns)
'mul' operation ('mul_ln37', d1.cpp:37) [70]  (2.598 ns)
	'add' operation ('arr', d1.cpp:37) [72]  (1.085 ns)
	'store' operation ('store_ln37', d1.cpp:37) of variable 'arr', d1.cpp:37 on local variable 'arr' [94]  (0.476 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
