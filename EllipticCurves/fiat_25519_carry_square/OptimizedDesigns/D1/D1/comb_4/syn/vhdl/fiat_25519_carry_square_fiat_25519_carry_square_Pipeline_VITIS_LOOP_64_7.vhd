-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_64_7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arr_25_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_38 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_10_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arr : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_5_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_6_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_7_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_8_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_4_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_3_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_2_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    add19314_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add19314_out_ap_vld : OUT STD_LOGIC;
    add17613_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add17613_out_ap_vld : OUT STD_LOGIC;
    add15612_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add15612_out_ap_vld : OUT STD_LOGIC;
    add14311_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add14311_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_64_7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln64_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add14311_fu_104 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln70_fu_438_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal add15612_fu_108 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln71_fu_475_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add17613_fu_112 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln72_fu_531_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add19314_fu_116 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln73_fu_584_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_120 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln64_fu_292_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln70_fu_242_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln70_fu_242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln72_1_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln71_fu_246_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln71_fu_246_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln73_fu_250_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln73_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln72_fu_254_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln72_fu_254_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln64_fu_310_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln64_fu_314_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln64_1_fu_318_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_346_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_367_p10 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln70_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_1_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_367_p11 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln70_fu_405_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal or_ln70_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal st_fu_409_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sf_fu_417_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln70_fu_425_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln70_fu_242_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_444_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_444_p10 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln_fu_462_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln71_fu_246_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_481_p8 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_481_p9 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln1_fu_497_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln72_1_fu_510_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln70_1_fu_363_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln72_fu_518_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln72_fu_254_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_537_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_537_p8 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln2_fu_551_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln73_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln73_fu_250_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln73_fu_570_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln73_fu_578_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln70_fu_242_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln71_fu_246_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln72_fu_254_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln72_fu_254_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln73_fu_250_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fiat_25519_carry_square_mul_32ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fiat_25519_carry_square_mul_33ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_4_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_9_4_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        din3 : IN STD_LOGIC_VECTOR (30 downto 0);
        din4 : IN STD_LOGIC_VECTOR (30 downto 0);
        din5 : IN STD_LOGIC_VECTOR (30 downto 0);
        din6 : IN STD_LOGIC_VECTOR (30 downto 0);
        din7 : IN STD_LOGIC_VECTOR (30 downto 0);
        din8 : IN STD_LOGIC_VECTOR (30 downto 0);
        din9 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_8_3_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        din3 : IN STD_LOGIC_VECTOR (30 downto 0);
        din4 : IN STD_LOGIC_VECTOR (30 downto 0);
        din5 : IN STD_LOGIC_VECTOR (30 downto 0);
        din6 : IN STD_LOGIC_VECTOR (30 downto 0);
        din7 : IN STD_LOGIC_VECTOR (30 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_7_3_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        din3 : IN STD_LOGIC_VECTOR (30 downto 0);
        din4 : IN STD_LOGIC_VECTOR (30 downto 0);
        din5 : IN STD_LOGIC_VECTOR (30 downto 0);
        din6 : IN STD_LOGIC_VECTOR (30 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_6_3_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        din3 : IN STD_LOGIC_VECTOR (30 downto 0);
        din4 : IN STD_LOGIC_VECTOR (30 downto 0);
        din5 : IN STD_LOGIC_VECTOR (30 downto 0);
        din6 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32ns_32ns_64_1_1_U86 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln70_fu_242_p0,
        din1 => mul_ln70_fu_242_p1,
        dout => mul_ln70_fu_242_p2);

    mul_32ns_32ns_64_1_1_U87 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln71_fu_246_p0,
        din1 => mul_ln71_fu_246_p1,
        dout => mul_ln71_fu_246_p2);

    mul_32ns_32ns_64_1_1_U88 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln73_fu_250_p0,
        din1 => mul_ln73_fu_250_p1,
        dout => mul_ln73_fu_250_p2);

    mul_33ns_32ns_64_1_1_U89 : component fiat_25519_carry_square_mul_33ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln72_fu_254_p0,
        din1 => mul_ln72_fu_254_p1,
        dout => mul_ln72_fu_254_p2);

    mux_4_2_32_1_1_U90 : component fiat_25519_carry_square_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => arg1_r_reload,
        din1 => arg1_r_1_reload,
        din2 => arg1_r_2_reload,
        din3 => arg1_r_3_reload,
        din4 => trunc_ln64_fu_310_p1,
        dout => tmp_s_fu_346_p6);

    mux_9_4_31_1_1_U91 : component fiat_25519_carry_square_mux_9_4_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        din2_WIDTH => 31,
        din3_WIDTH => 31,
        din4_WIDTH => 31,
        din5_WIDTH => 31,
        din6_WIDTH => 31,
        din7_WIDTH => 31,
        din8_WIDTH => 31,
        din9_WIDTH => 4,
        dout_WIDTH => 31)
    port map (
        din0 => ap_const_lv31_0,
        din1 => ap_const_lv31_0,
        din2 => ap_const_lv31_0,
        din3 => ap_const_lv31_0,
        din4 => ap_const_lv31_0,
        din5 => arg1_r_5_cast,
        din6 => arg1_r_6_cast,
        din7 => arg1_r_7_cast,
        din8 => arg1_r_8_cast,
        din9 => tmp_1_fu_367_p10,
        dout => tmp_1_fu_367_p11);

    mux_8_3_31_1_1_U92 : component fiat_25519_carry_square_mux_8_3_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        din2_WIDTH => 31,
        din3_WIDTH => 31,
        din4_WIDTH => 31,
        din5_WIDTH => 31,
        din6_WIDTH => 31,
        din7_WIDTH => 31,
        din8_WIDTH => 3,
        dout_WIDTH => 31)
    port map (
        din0 => ap_const_lv31_0,
        din1 => ap_const_lv31_0,
        din2 => ap_const_lv31_0,
        din3 => ap_const_lv31_0,
        din4 => arg1_r_4_cast,
        din5 => arg1_r_5_cast,
        din6 => arg1_r_6_cast,
        din7 => arg1_r_7_cast,
        din8 => tmp_2_fu_444_p9,
        dout => tmp_2_fu_444_p10);

    mux_7_3_31_1_1_U93 : component fiat_25519_carry_square_mux_7_3_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        din2_WIDTH => 31,
        din3_WIDTH => 31,
        din4_WIDTH => 31,
        din5_WIDTH => 31,
        din6_WIDTH => 31,
        din7_WIDTH => 3,
        dout_WIDTH => 31)
    port map (
        din0 => ap_const_lv31_0,
        din1 => ap_const_lv31_0,
        din2 => ap_const_lv31_0,
        din3 => arg1_r_3_cast,
        din4 => arg1_r_4_cast,
        din5 => arg1_r_5_cast,
        din6 => arg1_r_6_cast,
        din7 => tmp_3_fu_481_p8,
        dout => tmp_3_fu_481_p9);

    mux_6_3_31_1_1_U94 : component fiat_25519_carry_square_mux_6_3_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        din2_WIDTH => 31,
        din3_WIDTH => 31,
        din4_WIDTH => 31,
        din5_WIDTH => 31,
        din6_WIDTH => 3,
        dout_WIDTH => 31)
    port map (
        din0 => ap_const_lv31_0,
        din1 => ap_const_lv31_0,
        din2 => arg1_r_2_cast,
        din3 => arg1_r_3_cast,
        din4 => arg1_r_4_cast,
        din5 => arg1_r_5_cast,
        din6 => tmp_4_fu_537_p7,
        dout => tmp_4_fu_537_p8);

    flow_control_loop_pipe_sequential_init_U : component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    add14311_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add14311_fu_104 <= arr;
                elsif (((icmp_ln64_fu_286_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add14311_fu_104 <= add_ln70_fu_438_p2;
                end if;
            end if; 
        end if;
    end process;

    add15612_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add15612_fu_108 <= arr_10_reload;
                elsif (((icmp_ln64_fu_286_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add15612_fu_108 <= add_ln71_fu_475_p2;
                end if;
            end if; 
        end if;
    end process;

    add17613_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add17613_fu_112 <= arr_38;
                elsif (((icmp_ln64_fu_286_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add17613_fu_112 <= add_ln72_fu_531_p2;
                end if;
            end if; 
        end if;
    end process;

    add19314_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add19314_fu_116 <= arr_25_reload;
                elsif (((icmp_ln64_fu_286_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add19314_fu_116 <= add_ln73_fu_584_p2;
                end if;
            end if; 
        end if;
    end process;

    i_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_120 <= ap_const_lv3_0;
                elsif (((icmp_ln64_fu_286_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_120 <= add_ln64_fu_292_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add14311_out <= add14311_fu_104;

    add14311_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln64_fu_286_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln64_fu_286_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add14311_out_ap_vld <= ap_const_logic_1;
        else 
            add14311_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add15612_out <= add15612_fu_108;

    add15612_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln64_fu_286_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln64_fu_286_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add15612_out_ap_vld <= ap_const_logic_1;
        else 
            add15612_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add17613_out <= add17613_fu_112;

    add17613_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln64_fu_286_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln64_fu_286_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add17613_out_ap_vld <= ap_const_logic_1;
        else 
            add17613_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add19314_out <= add19314_fu_116;

    add19314_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln64_fu_286_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln64_fu_286_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add19314_out_ap_vld <= ap_const_logic_1;
        else 
            add19314_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln64_fu_292_p2 <= std_logic_vector(unsigned(i_fu_120) + unsigned(ap_const_lv3_1));
    add_ln70_fu_438_p2 <= std_logic_vector(unsigned(mul_ln70_fu_242_p2) + unsigned(add14311_fu_104));
    add_ln71_fu_475_p2 <= std_logic_vector(unsigned(mul_ln71_fu_246_p2) + unsigned(add15612_fu_108));
    add_ln72_fu_531_p2 <= std_logic_vector(unsigned(mul_ln72_fu_254_p2) + unsigned(add17613_fu_112));
    add_ln73_fu_584_p2 <= std_logic_vector(unsigned(and_ln73_fu_578_p2) + unsigned(add19314_fu_116));
    and_ln73_fu_578_p2 <= (select_ln73_fu_570_p3 and mul_ln73_fu_250_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln64_fu_286_p2)
    begin
        if (((icmp_ln64_fu_286_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln64_fu_286_p2 <= "1" when (i_fu_120 = ap_const_lv3_4) else "0";
    icmp_ln70_1_fu_393_p2 <= "1" when (i_fu_120 = ap_const_lv3_3) else "0";
    icmp_ln70_fu_387_p2 <= "1" when (i_fu_120 = ap_const_lv3_1) else "0";
    icmp_ln73_fu_564_p2 <= "1" when (unsigned(i_fu_120) < unsigned(ap_const_lv3_3)) else "0";
    mul_ln70_fu_242_p0 <= mul_ln70_fu_242_p00(32 - 1 downto 0);
    mul_ln70_fu_242_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln70_fu_425_p3),64));
    mul_ln70_fu_242_p1 <= zext_ln72_1_fu_356_p1(32 - 1 downto 0);
    mul_ln71_fu_246_p0 <= mul_ln71_fu_246_p00(32 - 1 downto 0);
    mul_ln71_fu_246_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_462_p3),64));
    mul_ln71_fu_246_p1 <= zext_ln72_1_fu_356_p1(32 - 1 downto 0);
    mul_ln72_fu_254_p0 <= mul_ln72_fu_254_p00(33 - 1 downto 0);
    mul_ln72_fu_254_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln72_fu_518_p3),64));
    mul_ln72_fu_254_p1 <= mul_ln72_fu_254_p10(32 - 1 downto 0);
    mul_ln72_fu_254_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_497_p3),64));
    mul_ln73_fu_250_p0 <= mul_ln73_fu_250_p00(32 - 1 downto 0);
    mul_ln73_fu_250_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_551_p3),64));
    mul_ln73_fu_250_p1 <= zext_ln72_1_fu_356_p1(32 - 1 downto 0);
    or_ln70_fu_399_p2 <= (icmp_ln70_fu_387_p2 or icmp_ln70_1_fu_393_p2);
    select_ln70_fu_425_p3 <= 
        st_fu_409_p3 when (or_ln70_fu_399_p2(0) = '1') else 
        sf_fu_417_p3;
    select_ln72_fu_518_p3 <= 
        shl_ln72_1_fu_510_p3 when (icmp_ln70_fu_387_p2(0) = '1') else 
        zext_ln70_1_fu_363_p1;
    select_ln73_fu_570_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln73_fu_564_p2(0) = '1') else 
        ap_const_lv64_0;
    sf_fu_417_p3 <= (tmp_1_fu_367_p11 & ap_const_lv1_0);
    shl_ln1_fu_497_p3 <= (tmp_3_fu_481_p9 & ap_const_lv1_0);
    shl_ln2_fu_551_p3 <= (tmp_4_fu_537_p8 & ap_const_lv1_0);
    shl_ln72_1_fu_510_p3 <= (tmp_s_fu_346_p6 & ap_const_lv1_0);
    shl_ln_fu_462_p3 <= (tmp_2_fu_444_p10 & ap_const_lv1_0);
    st_fu_409_p3 <= (trunc_ln70_fu_405_p1 & ap_const_lv2_0);
    tmp_1_fu_367_p10 <= std_logic_vector(signed(ap_const_lv4_8) - signed(zext_ln64_fu_314_p1));
    tmp_2_fu_444_p9 <= (zext_ln64_1_fu_318_p1 xor ap_const_lv3_7);
    tmp_3_fu_481_p8 <= std_logic_vector(signed(ap_const_lv3_6) - signed(zext_ln64_1_fu_318_p1));
    tmp_4_fu_537_p7 <= std_logic_vector(signed(ap_const_lv3_5) - signed(zext_ln64_1_fu_318_p1));
    trunc_ln64_fu_310_p1 <= i_fu_120(2 - 1 downto 0);
    trunc_ln70_fu_405_p1 <= tmp_1_fu_367_p11(30 - 1 downto 0);
    zext_ln64_1_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln64_fu_310_p1),3));
    zext_ln64_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln64_fu_310_p1),4));
    zext_ln70_1_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_346_p6),33));
    zext_ln72_1_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_346_p6),64));
end behav;
