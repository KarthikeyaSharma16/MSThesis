-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_44_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arr_8_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_7_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_6_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_5_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_4_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_3_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_4_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_5_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_6_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_7_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln50 : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arr_25_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_25_out_ap_vld : OUT STD_LOGIC;
    arr_24_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_24_out_ap_vld : OUT STD_LOGIC;
    arr_23_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_23_out_ap_vld : OUT STD_LOGIC;
    arr_22_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_22_out_ap_vld : OUT STD_LOGIC;
    arr_21_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_21_out_ap_vld : OUT STD_LOGIC;
    arr_20_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_20_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_44_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln44_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln50_cast_fu_250_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln50_cast_reg_695 : STD_LOGIC_VECTOR (62 downto 0);
    signal i_2_fu_90 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln44_fu_563_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_load_fu_289_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal arr_fu_94 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_8_fu_497_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_1_fu_98 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_6_fu_377_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_2_fu_102 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_7_fu_471_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_3_fu_106 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_4_fu_110 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_5_fu_114 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln50_1_fu_238_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln50_1_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln50_fu_242_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln50_fu_242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln50_2_fu_246_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln50_2_fu_246_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln29_fu_316_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_326_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_326_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln50_1_fu_238_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1_fu_349_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_357_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_395_p8 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_395_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln50_fu_242_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_5_fu_424_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_424_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln50_2_fu_246_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_6_fu_451_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln50_1_fu_416_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_477_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln50_2_fu_443_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln50_1_fu_238_p10 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln50_2_fu_246_p10 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln50_fu_242_p10 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_condition_358 : BOOLEAN;
    signal ap_condition_361 : BOOLEAN;
    signal ap_condition_366 : BOOLEAN;
    signal ap_condition_369 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component fiat_25519_carry_square_mul_32ns_32ns_63_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_8_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_7_3_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_7_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_6_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32ns_32ns_63_1_1_U37 : component fiat_25519_carry_square_mul_32ns_32ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => mul_ln50_1_fu_238_p0,
        din1 => mul_ln50_1_fu_238_p1,
        dout => mul_ln50_1_fu_238_p2);

    mul_32ns_32ns_63_1_1_U38 : component fiat_25519_carry_square_mul_32ns_32ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => mul_ln50_fu_242_p0,
        din1 => mul_ln50_fu_242_p1,
        dout => mul_ln50_fu_242_p2);

    mul_32ns_32ns_63_1_1_U39 : component fiat_25519_carry_square_mul_32ns_32ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => mul_ln50_2_fu_246_p0,
        din1 => mul_ln50_2_fu_246_p1,
        dout => mul_ln50_2_fu_246_p2);

    mux_8_3_32_1_1_U40 : component fiat_25519_carry_square_mux_8_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => ap_const_lv32_0,
        din3 => ap_const_lv32_0,
        din4 => arg1_r_4_reload,
        din5 => arg1_r_5_reload,
        din6 => arg1_r_6_reload,
        din7 => arg1_r_7_reload,
        din8 => tmp_2_fu_326_p9,
        dout => tmp_2_fu_326_p10);

    mux_7_3_64_1_1_U41 : component fiat_25519_carry_square_mux_7_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => ap_const_lv64_0,
        din1 => ap_const_lv64_0,
        din2 => ap_const_lv64_0,
        din3 => arr_1_fu_98,
        din4 => arr_3_fu_106,
        din5 => arr_5_fu_114,
        din6 => arr_4_fu_110,
        din7 => trunc_ln29_fu_316_p1,
        dout => tmp_3_fu_357_p9);

    mux_7_3_32_1_1_U42 : component fiat_25519_carry_square_mux_7_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => ap_const_lv32_0,
        din3 => arg1_r_3_reload,
        din4 => arg1_r_4_reload,
        din5 => arg1_r_5_reload,
        din6 => arg1_r_6_reload,
        din7 => tmp_4_fu_395_p8,
        dout => tmp_4_fu_395_p9);

    mux_6_3_32_1_1_U43 : component fiat_25519_carry_square_mux_6_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => arg1_r_2_reload,
        din3 => arg1_r_3_reload,
        din4 => arg1_r_4_reload,
        din5 => arg1_r_5_reload,
        din6 => tmp_5_fu_424_p7,
        dout => tmp_5_fu_424_p8);

    mux_7_3_64_1_1_U44 : component fiat_25519_carry_square_mux_7_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => ap_const_lv64_0,
        din1 => ap_const_lv64_0,
        din2 => ap_const_lv64_0,
        din3 => arr_3_fu_106,
        din4 => arr_5_fu_114,
        din5 => arr_4_fu_110,
        din6 => arr_2_fu_102,
        din7 => trunc_ln29_fu_316_p1,
        dout => tmp_6_fu_451_p9);

    mux_7_3_64_1_1_U45 : component fiat_25519_carry_square_mux_7_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => ap_const_lv64_0,
        din1 => ap_const_lv64_0,
        din2 => ap_const_lv64_0,
        din3 => arr_5_fu_114,
        din4 => arr_4_fu_110,
        din5 => arr_2_fu_102,
        din6 => arr_fu_94,
        din7 => trunc_ln29_fu_316_p1,
        dout => tmp_7_fu_477_p9);

    flow_control_loop_pipe_sequential_init_U : component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    arr_1_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_1_fu_98 <= arr_8_reload;
                elsif ((ap_const_boolean_1 = ap_condition_358)) then 
                    arr_1_fu_98 <= arr_6_fu_377_p2;
                end if;
            end if; 
        end if;
    end process;

    arr_2_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_2_fu_102 <= arr_4_reload;
                elsif ((ap_const_boolean_1 = ap_condition_366)) then 
                    arr_2_fu_102 <= arr_7_fu_471_p2;
                elsif ((ap_const_boolean_1 = ap_condition_361)) then 
                    arr_2_fu_102 <= arr_8_fu_497_p2;
                end if;
            end if; 
        end if;
    end process;

    arr_3_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_3_fu_106 <= arr_7_reload;
                elsif ((ap_const_boolean_1 = ap_condition_358)) then 
                    arr_3_fu_106 <= arr_7_fu_471_p2;
                elsif ((ap_const_boolean_1 = ap_condition_369)) then 
                    arr_3_fu_106 <= arr_6_fu_377_p2;
                end if;
            end if; 
        end if;
    end process;

    arr_4_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_4_fu_110 <= arr_5_reload;
                elsif ((ap_const_boolean_1 = ap_condition_366)) then 
                    arr_4_fu_110 <= arr_6_fu_377_p2;
                elsif ((ap_const_boolean_1 = ap_condition_369)) then 
                    arr_4_fu_110 <= arr_8_fu_497_p2;
                elsif ((ap_const_boolean_1 = ap_condition_361)) then 
                    arr_4_fu_110 <= arr_7_fu_471_p2;
                end if;
            end if; 
        end if;
    end process;

    arr_5_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_5_fu_114 <= arr_6_reload;
                elsif ((ap_const_boolean_1 = ap_condition_358)) then 
                    arr_5_fu_114 <= arr_8_fu_497_p2;
                elsif ((ap_const_boolean_1 = ap_condition_369)) then 
                    arr_5_fu_114 <= arr_7_fu_471_p2;
                elsif ((ap_const_boolean_1 = ap_condition_361)) then 
                    arr_5_fu_114 <= arr_6_fu_377_p2;
                end if;
            end if; 
        end if;
    end process;

    arr_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_fu_94 <= arr_3_reload;
                elsif ((ap_const_boolean_1 = ap_condition_366)) then 
                    arr_fu_94 <= arr_8_fu_497_p2;
                end if;
            end if; 
        end if;
    end process;

    i_2_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_2_fu_90 <= ap_const_lv4_3;
                elsif (((icmp_ln44_fu_292_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_2_fu_90 <= add_ln44_fu_563_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln50_cast_reg_695(31 downto 0) <= zext_ln50_cast_fu_250_p1(31 downto 0);
            end if;
        end if;
    end process;
    zext_ln50_cast_reg_695(62 downto 32) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln44_fu_563_p2 <= std_logic_vector(unsigned(i_2_fu_90) + unsigned(ap_const_lv4_3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_358_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln44_fu_292_p2, i_load_fu_289_p1)
    begin
                ap_condition_358 <= ((icmp_ln44_fu_292_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_load_fu_289_p1 = ap_const_lv4_3));
    end process;


    ap_condition_361_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln44_fu_292_p2, i_load_fu_289_p1)
    begin
                ap_condition_361 <= ((icmp_ln44_fu_292_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_load_fu_289_p1 = ap_const_lv4_5));
    end process;


    ap_condition_366_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln44_fu_292_p2, i_load_fu_289_p1)
    begin
                ap_condition_366 <= (not((i_load_fu_289_p1 = ap_const_lv4_5)) and not((i_load_fu_289_p1 = ap_const_lv4_4)) and not((i_load_fu_289_p1 = ap_const_lv4_3)) and (icmp_ln44_fu_292_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_369_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln44_fu_292_p2, i_load_fu_289_p1)
    begin
                ap_condition_369 <= ((icmp_ln44_fu_292_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_load_fu_289_p1 = ap_const_lv4_4));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln44_fu_292_p2)
    begin
        if (((icmp_ln44_fu_292_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    arr_20_out <= arr_fu_94;

    arr_20_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln44_fu_292_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln44_fu_292_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_20_out_ap_vld <= ap_const_logic_1;
        else 
            arr_20_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_21_out <= arr_2_fu_102;

    arr_21_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln44_fu_292_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln44_fu_292_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_21_out_ap_vld <= ap_const_logic_1;
        else 
            arr_21_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_22_out <= arr_4_fu_110;

    arr_22_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln44_fu_292_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln44_fu_292_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_22_out_ap_vld <= ap_const_logic_1;
        else 
            arr_22_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_23_out <= arr_5_fu_114;

    arr_23_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln44_fu_292_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln44_fu_292_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_23_out_ap_vld <= ap_const_logic_1;
        else 
            arr_23_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_24_out <= arr_3_fu_106;

    arr_24_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln44_fu_292_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln44_fu_292_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_24_out_ap_vld <= ap_const_logic_1;
        else 
            arr_24_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_25_out <= arr_1_fu_98;

    arr_25_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln44_fu_292_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln44_fu_292_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_25_out_ap_vld <= ap_const_logic_1;
        else 
            arr_25_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_6_fu_377_p2 <= std_logic_vector(unsigned(shl_ln1_fu_349_p3) + unsigned(tmp_3_fu_357_p9));
    arr_7_fu_471_p2 <= std_logic_vector(unsigned(tmp_6_fu_451_p9) + unsigned(shl_ln50_1_fu_416_p3));
    arr_8_fu_497_p2 <= std_logic_vector(unsigned(tmp_7_fu_477_p9) + unsigned(shl_ln50_2_fu_443_p3));
    i_load_fu_289_p1 <= i_2_fu_90;
    icmp_ln44_fu_292_p2 <= "1" when (unsigned(i_2_fu_90) < unsigned(ap_const_lv4_9)) else "0";
    mul_ln50_1_fu_238_p0 <= zext_ln50_cast_reg_695(32 - 1 downto 0);
    mul_ln50_1_fu_238_p1 <= mul_ln50_1_fu_238_p10(32 - 1 downto 0);
    mul_ln50_1_fu_238_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_326_p10),63));
    mul_ln50_2_fu_246_p0 <= zext_ln50_cast_reg_695(32 - 1 downto 0);
    mul_ln50_2_fu_246_p1 <= mul_ln50_2_fu_246_p10(32 - 1 downto 0);
    mul_ln50_2_fu_246_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_424_p8),63));
    mul_ln50_fu_242_p0 <= zext_ln50_cast_reg_695(32 - 1 downto 0);
    mul_ln50_fu_242_p1 <= mul_ln50_fu_242_p10(32 - 1 downto 0);
    mul_ln50_fu_242_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_395_p9),63));
    shl_ln1_fu_349_p3 <= (mul_ln50_1_fu_238_p2 & ap_const_lv1_0);
    shl_ln50_1_fu_416_p3 <= (mul_ln50_fu_242_p2 & ap_const_lv1_0);
    shl_ln50_2_fu_443_p3 <= (mul_ln50_2_fu_246_p2 & ap_const_lv1_0);
    tmp_2_fu_326_p9 <= std_logic_vector(unsigned(ap_const_lv3_2) - unsigned(trunc_ln29_fu_316_p1));
    tmp_4_fu_395_p8 <= std_logic_vector(unsigned(ap_const_lv3_1) - unsigned(trunc_ln29_fu_316_p1));
    tmp_5_fu_424_p7 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(trunc_ln29_fu_316_p1));
    trunc_ln29_fu_316_p1 <= i_2_fu_90(3 - 1 downto 0);
    zext_ln50_cast_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln50),63));
end behav;
