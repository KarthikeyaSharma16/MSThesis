-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_64_7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arr_25_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_39 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_8_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arr : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_16 : IN STD_LOGIC_VECTOR (30 downto 0);
    tmp_17 : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_7_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_5_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_4_reload : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add193_114_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add193_114_out_ap_vld : OUT STD_LOGIC;
    add176_113_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add176_113_out_ap_vld : OUT STD_LOGIC;
    add156_112_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add156_112_out_ap_vld : OUT STD_LOGIC;
    add143_111_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add143_111_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_64_7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_fu_274_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add143_111_fu_88 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln70_1_fu_480_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal add156_112_fu_92 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln71_1_fu_492_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add176_113_fu_96 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln72_1_fu_525_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add193_114_fu_100 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln73_1_fu_580_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_104 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln64_fu_586_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln70_fu_214_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln70_fu_214_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln70_1_fu_218_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln70_1_fu_218_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln72_1_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln71_fu_222_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln71_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln71_1_fu_226_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln71_1_fu_226_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln72_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln72_fu_230_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln72_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln73_fu_234_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln73_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln73_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln73_1_fu_238_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln73_1_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln72_1_fu_242_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln72_1_fu_242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln64_fu_294_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_298_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln70_2_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln70_fu_322_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln3_fu_328_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln71_fu_341_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln4_fu_347_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln72_fu_360_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln5_fu_366_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln73_fu_380_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln73_fu_383_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln6_fu_390_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_410_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln70_fu_404_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln70_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_1_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln70_fu_449_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal or_ln70_1_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal st_fu_453_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln70_1_fu_461_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln70_1_fu_218_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln70_fu_214_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln70_fu_474_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln71_1_fu_226_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln71_fu_222_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln71_fu_486_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln72_1_fu_498_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln70_3_fu_427_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln72_1_fu_506_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln72_1_fu_242_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln72_fu_230_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln72_fu_519_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln73_1_fu_531_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln73_1_fu_534_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln73_1_fu_541_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln73_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln73_1_fu_238_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln73_2_fu_560_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln73_fu_568_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln73_fu_234_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln73_fu_574_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln70_1_fu_218_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln70_fu_214_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln71_fu_222_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln72_1_fu_242_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln73_1_fu_238_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fiat_25519_carry_square_mul_32ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fiat_25519_carry_square_mul_33ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_3_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32ns_32ns_64_1_1_U79 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln70_fu_214_p0,
        din1 => mul_ln70_fu_214_p1,
        dout => mul_ln70_fu_214_p2);

    mul_32ns_32ns_64_1_1_U80 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln70_1_fu_218_p0,
        din1 => mul_ln70_1_fu_218_p1,
        dout => mul_ln70_1_fu_218_p2);

    mul_32ns_32ns_64_1_1_U81 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln71_fu_222_p0,
        din1 => mul_ln71_fu_222_p1,
        dout => mul_ln71_fu_222_p2);

    mul_32ns_32ns_64_1_1_U82 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln71_1_fu_226_p0,
        din1 => mul_ln71_1_fu_226_p1,
        dout => mul_ln71_1_fu_226_p2);

    mul_32ns_32ns_64_1_1_U83 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln72_fu_230_p0,
        din1 => mul_ln72_fu_230_p1,
        dout => mul_ln72_fu_230_p2);

    mul_32ns_32ns_64_1_1_U84 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln73_fu_234_p0,
        din1 => mul_ln73_fu_234_p1,
        dout => mul_ln73_fu_234_p2);

    mul_32ns_32ns_64_1_1_U85 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln73_1_fu_238_p0,
        din1 => mul_ln73_1_fu_238_p1,
        dout => mul_ln73_1_fu_238_p2);

    mul_33ns_32ns_64_1_1_U86 : component fiat_25519_carry_square_mul_33ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln72_1_fu_242_p0,
        din1 => mul_ln72_1_fu_242_p1,
        dout => mul_ln72_1_fu_242_p2);

    mux_3_2_32_1_1_U87 : component fiat_25519_carry_square_mux_3_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => arg1_r_reload,
        din1 => ap_const_lv32_0,
        din2 => arg1_r_2_reload,
        din3 => trunc_ln64_fu_294_p1,
        dout => tmp_s_fu_298_p5);

    mux_3_2_32_1_1_U88 : component fiat_25519_carry_square_mux_3_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => arg1_r_1_reload,
        din1 => ap_const_lv32_0,
        din2 => arg1_r_3_reload,
        din3 => trunc_ln64_fu_294_p1,
        dout => tmp_1_fu_410_p5);

    flow_control_loop_pipe_sequential_init_U : component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    add143_111_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add143_111_fu_88 <= arr;
                elsif (((tmp_fu_274_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add143_111_fu_88 <= add_ln70_1_fu_480_p2;
                end if;
            end if; 
        end if;
    end process;

    add156_112_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add156_112_fu_92 <= arr_8_reload;
                elsif (((tmp_fu_274_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add156_112_fu_92 <= add_ln71_1_fu_492_p2;
                end if;
            end if; 
        end if;
    end process;

    add176_113_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add176_113_fu_96 <= arr_39;
                elsif (((tmp_fu_274_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add176_113_fu_96 <= add_ln72_1_fu_525_p2;
                end if;
            end if; 
        end if;
    end process;

    add193_114_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add193_114_fu_100 <= arr_25_reload;
                elsif (((tmp_fu_274_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add193_114_fu_100 <= add_ln73_1_fu_580_p2;
                end if;
            end if; 
        end if;
    end process;

    i_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_104 <= ap_const_lv3_0;
                elsif (((tmp_fu_274_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_104 <= add_ln64_fu_586_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add143_111_out <= add143_111_fu_88;

    add143_111_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_274_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_274_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add143_111_out_ap_vld <= ap_const_logic_1;
        else 
            add143_111_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add156_112_out <= add156_112_fu_92;

    add156_112_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_274_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_274_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add156_112_out_ap_vld <= ap_const_logic_1;
        else 
            add156_112_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add176_113_out <= add176_113_fu_96;

    add176_113_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_274_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_274_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add176_113_out_ap_vld <= ap_const_logic_1;
        else 
            add176_113_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add193_114_out <= add193_114_fu_100;

    add193_114_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_274_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_274_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add193_114_out_ap_vld <= ap_const_logic_1;
        else 
            add193_114_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln64_fu_586_p2 <= std_logic_vector(unsigned(i_fu_104) + unsigned(ap_const_lv3_2));
    add_ln70_1_fu_480_p2 <= std_logic_vector(unsigned(add143_111_fu_88) + unsigned(add_ln70_fu_474_p2));
    add_ln70_fu_474_p2 <= std_logic_vector(unsigned(mul_ln70_1_fu_218_p2) + unsigned(mul_ln70_fu_214_p2));
    add_ln71_1_fu_492_p2 <= std_logic_vector(unsigned(add156_112_fu_92) + unsigned(add_ln71_fu_486_p2));
    add_ln71_fu_486_p2 <= std_logic_vector(unsigned(mul_ln71_1_fu_226_p2) + unsigned(mul_ln71_fu_222_p2));
    add_ln72_1_fu_525_p2 <= std_logic_vector(unsigned(add176_113_fu_96) + unsigned(add_ln72_fu_519_p2));
    add_ln72_fu_519_p2 <= std_logic_vector(unsigned(mul_ln72_1_fu_242_p2) + unsigned(mul_ln72_fu_230_p2));
    add_ln73_1_fu_580_p2 <= std_logic_vector(unsigned(add193_114_fu_100) + unsigned(add_ln73_fu_574_p2));
    add_ln73_fu_574_p2 <= std_logic_vector(unsigned(and_ln73_fu_568_p2) + unsigned(mul_ln73_fu_234_p2));
    and_ln73_fu_568_p2 <= (select_ln73_2_fu_560_p3 and mul_ln73_1_fu_238_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, tmp_fu_274_p3)
    begin
        if (((tmp_fu_274_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln70_1_fu_437_p2 <= "1" when (or_ln70_fu_404_p2 = ap_const_lv2_3) else "0";
    icmp_ln70_2_fu_316_p2 <= "1" when (trunc_ln64_fu_294_p1 = ap_const_lv2_0) else "0";
    icmp_ln70_fu_431_p2 <= "1" when (or_ln70_fu_404_p2 = ap_const_lv2_1) else "0";
    icmp_ln73_fu_554_p2 <= "0" when (or_ln70_fu_404_p2 = ap_const_lv2_3) else "1";
    mul_ln70_1_fu_218_p0 <= mul_ln70_1_fu_218_p00(32 - 1 downto 0);
    mul_ln70_1_fu_218_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln70_1_fu_461_p3),64));
    mul_ln70_1_fu_218_p1 <= zext_ln72_1_fu_420_p1(32 - 1 downto 0);
    mul_ln70_fu_214_p0 <= mul_ln70_fu_214_p00(32 - 1 downto 0);
    mul_ln70_fu_214_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_328_p3),64));
    mul_ln70_fu_214_p1 <= zext_ln70_fu_308_p1(32 - 1 downto 0);
    mul_ln71_1_fu_226_p0 <= zext_ln72_1_fu_420_p1(32 - 1 downto 0);
    mul_ln71_1_fu_226_p1 <= zext_ln72_fu_374_p1(32 - 1 downto 0);
    mul_ln71_fu_222_p0 <= mul_ln71_fu_222_p00(32 - 1 downto 0);
    mul_ln71_fu_222_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln4_fu_347_p3),64));
    mul_ln71_fu_222_p1 <= zext_ln70_fu_308_p1(32 - 1 downto 0);
    mul_ln72_1_fu_242_p0 <= mul_ln72_1_fu_242_p00(33 - 1 downto 0);
    mul_ln72_1_fu_242_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln72_1_fu_506_p3),64));
    mul_ln72_1_fu_242_p1 <= zext_ln73_fu_398_p1(32 - 1 downto 0);
    mul_ln72_fu_230_p0 <= zext_ln72_fu_374_p1(32 - 1 downto 0);
    mul_ln72_fu_230_p1 <= zext_ln70_fu_308_p1(32 - 1 downto 0);
    mul_ln73_1_fu_238_p0 <= mul_ln73_1_fu_238_p00(32 - 1 downto 0);
    mul_ln73_1_fu_238_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln73_1_fu_541_p3),64));
    mul_ln73_1_fu_238_p1 <= zext_ln72_1_fu_420_p1(32 - 1 downto 0);
    mul_ln73_fu_234_p0 <= zext_ln73_fu_398_p1(32 - 1 downto 0);
    mul_ln73_fu_234_p1 <= zext_ln70_fu_308_p1(32 - 1 downto 0);
    or_ln70_1_fu_443_p2 <= (icmp_ln70_fu_431_p2 or icmp_ln70_1_fu_437_p2);
    or_ln70_fu_404_p2 <= (trunc_ln64_fu_294_p1 or ap_const_lv2_1);
    select_ln70_1_fu_461_p3 <= 
        st_fu_453_p3 when (or_ln70_1_fu_443_p2(0) = '1') else 
        shl_ln4_fu_347_p3;
    select_ln70_fu_322_p3 <= 
        tmp_16 when (icmp_ln70_2_fu_316_p2(0) = '1') else 
        tmp_17;
    select_ln71_fu_341_p3 <= 
        arg1_r_7_cast when (icmp_ln70_2_fu_316_p2(0) = '1') else 
        arg1_r_5_cast;
    select_ln72_1_fu_506_p3 <= 
        shl_ln72_1_fu_498_p3 when (icmp_ln70_fu_431_p2(0) = '1') else 
        zext_ln70_3_fu_427_p1;
    select_ln72_fu_360_p3 <= 
        tmp_17 when (icmp_ln70_2_fu_316_p2(0) = '1') else 
        arg1_r_4_reload;
    select_ln73_1_fu_534_p3 <= 
        arg1_r_4_reload when (icmp_ln70_2_fu_316_p2(0) = '1') else 
        trunc_ln73_1_fu_531_p1;
    select_ln73_2_fu_560_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln73_fu_554_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln73_fu_383_p3 <= 
        arg1_r_5_cast when (icmp_ln70_2_fu_316_p2(0) = '1') else 
        trunc_ln73_fu_380_p1;
    shl_ln3_fu_328_p3 <= (select_ln70_fu_322_p3 & ap_const_lv1_0);
    shl_ln4_fu_347_p3 <= (select_ln71_fu_341_p3 & ap_const_lv1_0);
    shl_ln5_fu_366_p3 <= (select_ln72_fu_360_p3 & ap_const_lv1_0);
    shl_ln6_fu_390_p3 <= (select_ln73_fu_383_p3 & ap_const_lv1_0);
    shl_ln72_1_fu_498_p3 <= (tmp_1_fu_410_p5 & ap_const_lv1_0);
    shl_ln73_1_fu_541_p3 <= (select_ln73_1_fu_534_p3 & ap_const_lv1_0);
    st_fu_453_p3 <= (trunc_ln70_fu_449_p1 & ap_const_lv2_0);
    tmp_fu_274_p3 <= i_fu_104(2 downto 2);
    trunc_ln64_fu_294_p1 <= i_fu_104(2 - 1 downto 0);
    trunc_ln70_fu_449_p1 <= select_ln71_fu_341_p3(30 - 1 downto 0);
    trunc_ln73_1_fu_531_p1 <= arg1_r_2_reload(31 - 1 downto 0);
    trunc_ln73_fu_380_p1 <= arg1_r_3_reload(31 - 1 downto 0);
    zext_ln70_3_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_410_p5),33));
    zext_ln70_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_298_p5),64));
    zext_ln72_1_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_410_p5),64));
    zext_ln72_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln5_fu_366_p3),64));
    zext_ln73_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln6_fu_390_p3),64));
end behav;
