// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_64_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr_25_reload,
        arr_39,
        arr_10_reload,
        arr,
        arg1_r_reload,
        arg1_r_1_reload,
        arg1_r_2_reload,
        arg1_r_3_reload,
        arg1_r_5_cast,
        arg1_r_6_cast,
        arg1_r_7_cast,
        arg1_r_8_cast,
        arg1_r_4_cast,
        arg1_r_3_cast,
        arg1_r_2_cast,
        add19314_out,
        add19314_out_ap_vld,
        add17613_out,
        add17613_out_ap_vld,
        add15612_out,
        add15612_out_ap_vld,
        add14311_out,
        add14311_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] arr_25_reload;
input  [63:0] arr_39;
input  [63:0] arr_10_reload;
input  [63:0] arr;
input  [31:0] arg1_r_reload;
input  [31:0] arg1_r_1_reload;
input  [31:0] arg1_r_2_reload;
input  [31:0] arg1_r_3_reload;
input  [30:0] arg1_r_5_cast;
input  [30:0] arg1_r_6_cast;
input  [30:0] arg1_r_7_cast;
input  [30:0] arg1_r_8_cast;
input  [30:0] arg1_r_4_cast;
input  [30:0] arg1_r_3_cast;
input  [30:0] arg1_r_2_cast;
output  [63:0] add19314_out;
output   add19314_out_ap_vld;
output  [63:0] add17613_out;
output   add17613_out_ap_vld;
output  [63:0] add15612_out;
output   add15612_out_ap_vld;
output  [63:0] add14311_out;
output   add14311_out_ap_vld;

reg ap_idle;
reg add19314_out_ap_vld;
reg add17613_out_ap_vld;
reg add15612_out_ap_vld;
reg add14311_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln64_fu_286_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [63:0] add14311_fu_104;
wire   [63:0] add_ln70_fu_438_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [63:0] add15612_fu_108;
wire   [63:0] add_ln71_fu_475_p2;
reg   [63:0] add17613_fu_112;
wire   [63:0] add_ln72_fu_531_p2;
reg   [63:0] add19314_fu_116;
wire   [63:0] add_ln73_fu_584_p2;
reg   [2:0] i_fu_120;
wire   [2:0] add_ln64_fu_292_p2;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] mul_ln70_fu_242_p0;
wire   [31:0] mul_ln70_fu_242_p1;
wire   [63:0] zext_ln72_1_fu_356_p1;
wire   [31:0] mul_ln71_fu_246_p0;
wire   [31:0] mul_ln71_fu_246_p1;
wire   [31:0] mul_ln73_fu_250_p0;
wire   [31:0] mul_ln73_fu_250_p1;
wire   [32:0] mul_ln72_fu_254_p0;
wire   [31:0] mul_ln72_fu_254_p1;
wire   [1:0] trunc_ln64_fu_310_p1;
wire   [3:0] zext_ln64_fu_314_p1;
wire   [2:0] zext_ln64_1_fu_318_p1;
wire   [31:0] tmp_8_fu_346_p6;
wire   [3:0] tmp_9_fu_367_p10;
wire   [0:0] icmp_ln70_fu_387_p2;
wire   [0:0] icmp_ln70_1_fu_393_p2;
wire   [30:0] tmp_9_fu_367_p11;
wire   [29:0] trunc_ln70_fu_405_p1;
wire   [0:0] or_ln70_fu_399_p2;
wire   [31:0] st_fu_409_p3;
wire   [31:0] sf_fu_417_p3;
wire   [31:0] select_ln70_fu_425_p3;
wire   [63:0] mul_ln70_fu_242_p2;
wire   [2:0] tmp_s_fu_444_p9;
wire   [30:0] tmp_s_fu_444_p10;
wire   [31:0] shl_ln_fu_462_p3;
wire   [63:0] mul_ln71_fu_246_p2;
wire   [2:0] tmp_1_fu_481_p8;
wire   [30:0] tmp_1_fu_481_p9;
wire   [31:0] shl_ln1_fu_497_p3;
wire   [32:0] shl_ln72_1_fu_510_p3;
wire   [32:0] zext_ln70_1_fu_363_p1;
wire   [32:0] select_ln72_fu_518_p3;
wire   [63:0] mul_ln72_fu_254_p2;
wire   [2:0] tmp_2_fu_537_p7;
wire   [30:0] tmp_2_fu_537_p8;
wire   [31:0] shl_ln2_fu_551_p3;
wire   [0:0] icmp_ln73_fu_564_p2;
wire   [63:0] mul_ln73_fu_250_p2;
wire   [63:0] select_ln73_fu_570_p3;
wire   [63:0] and_ln73_fu_578_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [63:0] mul_ln70_fu_242_p00;
wire   [63:0] mul_ln71_fu_246_p00;
wire   [63:0] mul_ln72_fu_254_p00;
wire   [63:0] mul_ln72_fu_254_p10;
wire   [63:0] mul_ln73_fu_250_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fiat_25519_carry_square_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U70(
    .din0(mul_ln70_fu_242_p0),
    .din1(mul_ln70_fu_242_p1),
    .dout(mul_ln70_fu_242_p2)
);

fiat_25519_carry_square_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U71(
    .din0(mul_ln71_fu_246_p0),
    .din1(mul_ln71_fu_246_p1),
    .dout(mul_ln71_fu_246_p2)
);

fiat_25519_carry_square_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U72(
    .din0(mul_ln73_fu_250_p0),
    .din1(mul_ln73_fu_250_p1),
    .dout(mul_ln73_fu_250_p2)
);

fiat_25519_carry_square_mul_33ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 33 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_33ns_32ns_64_1_1_U73(
    .din0(mul_ln72_fu_254_p0),
    .din1(mul_ln72_fu_254_p1),
    .dout(mul_ln72_fu_254_p2)
);

fiat_25519_carry_square_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U74(
    .din0(arg1_r_reload),
    .din1(arg1_r_1_reload),
    .din2(arg1_r_2_reload),
    .din3(arg1_r_3_reload),
    .din4(trunc_ln64_fu_310_p1),
    .dout(tmp_8_fu_346_p6)
);

fiat_25519_carry_square_mux_9_4_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .din2_WIDTH( 31 ),
    .din3_WIDTH( 31 ),
    .din4_WIDTH( 31 ),
    .din5_WIDTH( 31 ),
    .din6_WIDTH( 31 ),
    .din7_WIDTH( 31 ),
    .din8_WIDTH( 31 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 31 ))
mux_9_4_31_1_1_U75(
    .din0(31'd0),
    .din1(31'd0),
    .din2(31'd0),
    .din3(31'd0),
    .din4(31'd0),
    .din5(arg1_r_5_cast),
    .din6(arg1_r_6_cast),
    .din7(arg1_r_7_cast),
    .din8(arg1_r_8_cast),
    .din9(tmp_9_fu_367_p10),
    .dout(tmp_9_fu_367_p11)
);

fiat_25519_carry_square_mux_8_3_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .din2_WIDTH( 31 ),
    .din3_WIDTH( 31 ),
    .din4_WIDTH( 31 ),
    .din5_WIDTH( 31 ),
    .din6_WIDTH( 31 ),
    .din7_WIDTH( 31 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 31 ))
mux_8_3_31_1_1_U76(
    .din0(31'd0),
    .din1(31'd0),
    .din2(31'd0),
    .din3(31'd0),
    .din4(arg1_r_4_cast),
    .din5(arg1_r_5_cast),
    .din6(arg1_r_6_cast),
    .din7(arg1_r_7_cast),
    .din8(tmp_s_fu_444_p9),
    .dout(tmp_s_fu_444_p10)
);

fiat_25519_carry_square_mux_7_3_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .din2_WIDTH( 31 ),
    .din3_WIDTH( 31 ),
    .din4_WIDTH( 31 ),
    .din5_WIDTH( 31 ),
    .din6_WIDTH( 31 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 31 ))
mux_7_3_31_1_1_U77(
    .din0(31'd0),
    .din1(31'd0),
    .din2(31'd0),
    .din3(arg1_r_3_cast),
    .din4(arg1_r_4_cast),
    .din5(arg1_r_5_cast),
    .din6(arg1_r_6_cast),
    .din7(tmp_1_fu_481_p8),
    .dout(tmp_1_fu_481_p9)
);

fiat_25519_carry_square_mux_6_3_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .din2_WIDTH( 31 ),
    .din3_WIDTH( 31 ),
    .din4_WIDTH( 31 ),
    .din5_WIDTH( 31 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 31 ))
mux_6_3_31_1_1_U78(
    .din0(31'd0),
    .din1(31'd0),
    .din2(arg1_r_2_cast),
    .din3(arg1_r_3_cast),
    .din4(arg1_r_4_cast),
    .din5(arg1_r_5_cast),
    .din6(tmp_2_fu_537_p7),
    .dout(tmp_2_fu_537_p8)
);

fiat_25519_carry_square_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add14311_fu_104 <= arr;
        end else if (((icmp_ln64_fu_286_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            add14311_fu_104 <= add_ln70_fu_438_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add15612_fu_108 <= arr_10_reload;
        end else if (((icmp_ln64_fu_286_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            add15612_fu_108 <= add_ln71_fu_475_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add17613_fu_112 <= arr_39;
        end else if (((icmp_ln64_fu_286_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            add17613_fu_112 <= add_ln72_fu_531_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add19314_fu_116 <= arr_25_reload;
        end else if (((icmp_ln64_fu_286_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            add19314_fu_116 <= add_ln73_fu_584_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_120 <= 3'd0;
        end else if (((icmp_ln64_fu_286_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_120 <= add_ln64_fu_292_p2;
        end
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_286_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add14311_out_ap_vld = 1'b1;
    end else begin
        add14311_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_286_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add15612_out_ap_vld = 1'b1;
    end else begin
        add15612_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_286_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add17613_out_ap_vld = 1'b1;
    end else begin
        add17613_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_286_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add19314_out_ap_vld = 1'b1;
    end else begin
        add19314_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_286_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add14311_out = add14311_fu_104;

assign add15612_out = add15612_fu_108;

assign add17613_out = add17613_fu_112;

assign add19314_out = add19314_fu_116;

assign add_ln64_fu_292_p2 = (i_fu_120 + 3'd1);

assign add_ln70_fu_438_p2 = (mul_ln70_fu_242_p2 + add14311_fu_104);

assign add_ln71_fu_475_p2 = (mul_ln71_fu_246_p2 + add15612_fu_108);

assign add_ln72_fu_531_p2 = (mul_ln72_fu_254_p2 + add17613_fu_112);

assign add_ln73_fu_584_p2 = (and_ln73_fu_578_p2 + add19314_fu_116);

assign and_ln73_fu_578_p2 = (select_ln73_fu_570_p3 & mul_ln73_fu_250_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln64_fu_286_p2 = ((i_fu_120 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln70_1_fu_393_p2 = ((i_fu_120 == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_387_p2 = ((i_fu_120 == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_564_p2 = ((i_fu_120 < 3'd3) ? 1'b1 : 1'b0);

assign mul_ln70_fu_242_p0 = mul_ln70_fu_242_p00;

assign mul_ln70_fu_242_p00 = select_ln70_fu_425_p3;

assign mul_ln70_fu_242_p1 = zext_ln72_1_fu_356_p1;

assign mul_ln71_fu_246_p0 = mul_ln71_fu_246_p00;

assign mul_ln71_fu_246_p00 = shl_ln_fu_462_p3;

assign mul_ln71_fu_246_p1 = zext_ln72_1_fu_356_p1;

assign mul_ln72_fu_254_p0 = mul_ln72_fu_254_p00;

assign mul_ln72_fu_254_p00 = select_ln72_fu_518_p3;

assign mul_ln72_fu_254_p1 = mul_ln72_fu_254_p10;

assign mul_ln72_fu_254_p10 = shl_ln1_fu_497_p3;

assign mul_ln73_fu_250_p0 = mul_ln73_fu_250_p00;

assign mul_ln73_fu_250_p00 = shl_ln2_fu_551_p3;

assign mul_ln73_fu_250_p1 = zext_ln72_1_fu_356_p1;

assign or_ln70_fu_399_p2 = (icmp_ln70_fu_387_p2 | icmp_ln70_1_fu_393_p2);

assign select_ln70_fu_425_p3 = ((or_ln70_fu_399_p2[0:0] == 1'b1) ? st_fu_409_p3 : sf_fu_417_p3);

assign select_ln72_fu_518_p3 = ((icmp_ln70_fu_387_p2[0:0] == 1'b1) ? shl_ln72_1_fu_510_p3 : zext_ln70_1_fu_363_p1);

assign select_ln73_fu_570_p3 = ((icmp_ln73_fu_564_p2[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign sf_fu_417_p3 = {{tmp_9_fu_367_p11}, {1'd0}};

assign shl_ln1_fu_497_p3 = {{tmp_1_fu_481_p9}, {1'd0}};

assign shl_ln2_fu_551_p3 = {{tmp_2_fu_537_p8}, {1'd0}};

assign shl_ln72_1_fu_510_p3 = {{tmp_8_fu_346_p6}, {1'd0}};

assign shl_ln_fu_462_p3 = {{tmp_s_fu_444_p10}, {1'd0}};

assign st_fu_409_p3 = {{trunc_ln70_fu_405_p1}, {2'd0}};

assign tmp_1_fu_481_p8 = ($signed(3'd6) - $signed(zext_ln64_1_fu_318_p1));

assign tmp_2_fu_537_p7 = ($signed(3'd5) - $signed(zext_ln64_1_fu_318_p1));

assign tmp_9_fu_367_p10 = ($signed(4'd8) - $signed(zext_ln64_fu_314_p1));

assign tmp_s_fu_444_p9 = (zext_ln64_1_fu_318_p1 ^ 3'd7);

assign trunc_ln64_fu_310_p1 = i_fu_120[1:0];

assign trunc_ln70_fu_405_p1 = tmp_9_fu_367_p11[29:0];

assign zext_ln64_1_fu_318_p1 = trunc_ln64_fu_310_p1;

assign zext_ln64_fu_314_p1 = trunc_ln64_fu_310_p1;

assign zext_ln70_1_fu_363_p1 = tmp_8_fu_346_p6;

assign zext_ln72_1_fu_356_p1 = tmp_8_fu_346_p6;

endmodule //fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_64_7
