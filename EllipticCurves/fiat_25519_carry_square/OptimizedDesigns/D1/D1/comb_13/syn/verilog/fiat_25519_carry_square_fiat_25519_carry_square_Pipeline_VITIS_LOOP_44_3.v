// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_44_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr_3,
        arr_4,
        arr_5,
        arr_6,
        arr_7,
        arr_8,
        arg1_r_2_reload,
        arg1_r_3_reload,
        arg1_r_4_reload,
        arg1_r_5_reload,
        arg1_r_6_reload,
        arg1_r_7_reload,
        zext_ln50,
        arr_15_out,
        arr_15_out_ap_vld,
        arr_14_out,
        arr_14_out_ap_vld,
        arr_13_out,
        arr_13_out_ap_vld,
        arr_12_out,
        arr_12_out_ap_vld,
        arr_11_out,
        arr_11_out_ap_vld,
        arr_10_out,
        arr_10_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] arr_3;
input  [63:0] arr_4;
input  [63:0] arr_5;
input  [63:0] arr_6;
input  [63:0] arr_7;
input  [63:0] arr_8;
input  [31:0] arg1_r_2_reload;
input  [31:0] arg1_r_3_reload;
input  [31:0] arg1_r_4_reload;
input  [31:0] arg1_r_5_reload;
input  [31:0] arg1_r_6_reload;
input  [31:0] arg1_r_7_reload;
input  [31:0] zext_ln50;
output  [63:0] arr_15_out;
output   arr_15_out_ap_vld;
output  [63:0] arr_14_out;
output   arr_14_out_ap_vld;
output  [63:0] arr_13_out;
output   arr_13_out_ap_vld;
output  [63:0] arr_12_out;
output   arr_12_out_ap_vld;
output  [63:0] arr_11_out;
output   arr_11_out_ap_vld;
output  [63:0] arr_10_out;
output   arr_10_out_ap_vld;

reg ap_idle;
reg arr_15_out_ap_vld;
reg arr_14_out_ap_vld;
reg arr_13_out_ap_vld;
reg arr_12_out_ap_vld;
reg arr_11_out_ap_vld;
reg arr_10_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln44_fu_282_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [62:0] zext_ln50_cast_fu_240_p1;
reg   [62:0] zext_ln50_cast_reg_525;
reg   [3:0] i_1_fu_88;
wire   [3:0] add_ln44_fu_405_p2;
wire    ap_loop_init;
wire   [3:0] i_load_fu_279_p1;
wire    ap_block_pp0_stage0;
reg   [63:0] arr_fu_92;
wire   [63:0] arr_12_fu_369_p2;
reg   [63:0] arr_1_fu_96;
reg   [63:0] arr_2_fu_100;
reg   [63:0] arr_9_fu_104;
reg   [63:0] arr_10_fu_108;
reg   [63:0] arr_11_fu_112;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] mul_ln50_fu_236_p0;
wire   [31:0] mul_ln50_fu_236_p1;
wire   [2:0] trunc_ln29_fu_306_p1;
wire   [2:0] tmp_fu_316_p9;
wire   [31:0] tmp_fu_316_p10;
wire   [62:0] mul_ln50_fu_236_p2;
wire   [63:0] shl_ln1_fu_337_p3;
wire   [63:0] tmp_1_fu_345_p11;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [62:0] mul_ln50_fu_236_p10;
reg    ap_condition_288;
reg    ap_condition_291;
reg    ap_condition_294;
reg    ap_condition_297;
reg    ap_condition_300;
reg    ap_condition_307;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fiat_25519_carry_square_mul_32ns_32ns_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32ns_32ns_63_1_1_U13(
    .din0(mul_ln50_fu_236_p0),
    .din1(mul_ln50_fu_236_p1),
    .dout(mul_ln50_fu_236_p2)
);

fiat_25519_carry_square_mux_8_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_8_3_32_1_1_U14(
    .din0(32'd0),
    .din1(32'd0),
    .din2(arg1_r_2_reload),
    .din3(arg1_r_3_reload),
    .din4(arg1_r_4_reload),
    .din5(arg1_r_5_reload),
    .din6(arg1_r_6_reload),
    .din7(arg1_r_7_reload),
    .din8(tmp_fu_316_p9),
    .dout(tmp_fu_316_p10)
);

fiat_25519_carry_square_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U15(
    .din0(64'd0),
    .din1(64'd0),
    .din2(64'd0),
    .din3(arr_11_fu_112),
    .din4(arr_10_fu_108),
    .din5(arr_9_fu_104),
    .din6(arr_2_fu_100),
    .din7(arr_1_fu_96),
    .din8(arr_fu_92),
    .din9(i_1_fu_88),
    .dout(tmp_1_fu_345_p11)
);

fiat_25519_carry_square_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_10_fu_108 <= arr_4;
        end else if ((1'b1 == ap_condition_288)) begin
            arr_10_fu_108 <= arr_12_fu_369_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_11_fu_112 <= arr_3;
        end else if ((1'b1 == ap_condition_291)) begin
            arr_11_fu_112 <= arr_12_fu_369_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_1_fu_96 <= arr_7;
        end else if ((1'b1 == ap_condition_294)) begin
            arr_1_fu_96 <= arr_12_fu_369_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_2_fu_100 <= arr_6;
        end else if ((1'b1 == ap_condition_297)) begin
            arr_2_fu_100 <= arr_12_fu_369_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_9_fu_104 <= arr_5;
        end else if ((1'b1 == ap_condition_300)) begin
            arr_9_fu_104 <= arr_12_fu_369_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_fu_92 <= arr_8;
        end else if ((1'b1 == ap_condition_307)) begin
            arr_fu_92 <= arr_12_fu_369_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_1_fu_88 <= 4'd3;
        end else if (((icmp_ln44_fu_282_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_1_fu_88 <= add_ln44_fu_405_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln50_cast_reg_525[31 : 0] <= zext_ln50_cast_fu_240_p1[31 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln44_fu_282_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln44_fu_282_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_10_out_ap_vld = 1'b1;
    end else begin
        arr_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln44_fu_282_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_11_out_ap_vld = 1'b1;
    end else begin
        arr_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln44_fu_282_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_12_out_ap_vld = 1'b1;
    end else begin
        arr_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln44_fu_282_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_13_out_ap_vld = 1'b1;
    end else begin
        arr_13_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln44_fu_282_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_14_out_ap_vld = 1'b1;
    end else begin
        arr_14_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln44_fu_282_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_15_out_ap_vld = 1'b1;
    end else begin
        arr_15_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln44_fu_405_p2 = (i_1_fu_88 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_288 = ((icmp_ln44_fu_282_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (i_load_fu_279_p1 == 4'd4));
end

always @ (*) begin
    ap_condition_291 = ((icmp_ln44_fu_282_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (i_load_fu_279_p1 == 4'd3));
end

always @ (*) begin
    ap_condition_294 = ((icmp_ln44_fu_282_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (i_load_fu_279_p1 == 4'd7));
end

always @ (*) begin
    ap_condition_297 = ((icmp_ln44_fu_282_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (i_load_fu_279_p1 == 4'd6));
end

always @ (*) begin
    ap_condition_300 = ((icmp_ln44_fu_282_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (i_load_fu_279_p1 == 4'd5));
end

always @ (*) begin
    ap_condition_307 = (~(i_load_fu_279_p1 == 4'd7) & ~(i_load_fu_279_p1 == 4'd6) & ~(i_load_fu_279_p1 == 4'd5) & ~(i_load_fu_279_p1 == 4'd4) & ~(i_load_fu_279_p1 == 4'd3) & (icmp_ln44_fu_282_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign arr_10_out = arr_fu_92;

assign arr_11_out = arr_1_fu_96;

assign arr_12_fu_369_p2 = (shl_ln1_fu_337_p3 + tmp_1_fu_345_p11);

assign arr_12_out = arr_2_fu_100;

assign arr_13_out = arr_9_fu_104;

assign arr_14_out = arr_10_fu_108;

assign arr_15_out = arr_11_fu_112;

assign i_load_fu_279_p1 = i_1_fu_88;

assign icmp_ln44_fu_282_p2 = ((i_1_fu_88 == 4'd9) ? 1'b1 : 1'b0);

assign mul_ln50_fu_236_p0 = zext_ln50_cast_reg_525;

assign mul_ln50_fu_236_p1 = mul_ln50_fu_236_p10;

assign mul_ln50_fu_236_p10 = tmp_fu_316_p10;

assign shl_ln1_fu_337_p3 = {{mul_ln50_fu_236_p2}, {1'd0}};

assign tmp_fu_316_p9 = (3'd2 - trunc_ln29_fu_306_p1);

assign trunc_ln29_fu_306_p1 = i_1_fu_88[2:0];

assign zext_ln50_cast_fu_240_p1 = zext_ln50;

always @ (posedge ap_clk) begin
    zext_ln50_cast_reg_525[62:32] <= 31'b0000000000000000000000000000000;
end

endmodule //fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_44_3
