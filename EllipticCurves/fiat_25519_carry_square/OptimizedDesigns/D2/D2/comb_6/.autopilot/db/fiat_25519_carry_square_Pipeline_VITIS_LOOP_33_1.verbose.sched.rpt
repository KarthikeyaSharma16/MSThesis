

================================================================
== Vitis HLS Report for 'fiat_25519_carry_square_Pipeline_VITIS_LOOP_33_1'
================================================================
* Date:           Thu May  9 15:23:02 2024

* Version:        2023.1.1 (Build 3869133 on Jun 15 2023)
* Project:        D2
* Solution:       comb_6 (Vivado IP Flow Target)
* Product family: zynquplus
* Target device:  xczu9eg-ffvb1156-2-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  6.596 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |       10|       10|  0.100 us|  0.100 us|   10|   10|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- VITIS_LOOP_33_1  |        8|        8|         1|          1|          1|     8|       yes|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 2


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 2
* Pipeline : 1
  Pipeline-0 : II = 1, D = 2, States = { 1 2 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 0.42>
ST_1 : Operation 4 [1/1] (0.00ns)   --->   "%i_1 = alloca i32 1"   --->   Operation 4 'alloca' 'i_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%arr = alloca i32 1"   --->   Operation 5 'alloca' 'arr' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%arr_1 = alloca i32 1"   --->   Operation 6 'alloca' 'arr_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%arr_3 = alloca i32 1"   --->   Operation 7 'alloca' 'arr_3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%arr_4 = alloca i32 1"   --->   Operation 8 'alloca' 'arr_4' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%arr_5 = alloca i32 1"   --->   Operation 9 'alloca' 'arr_5' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%arr_6 = alloca i32 1"   --->   Operation 10 'alloca' 'arr_6' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%arr_7 = alloca i32 1"   --->   Operation 11 'alloca' 'arr_7' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%arr_8 = alloca i32 1"   --->   Operation 12 'alloca' 'arr_8' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%arr_9 = alloca i32 1"   --->   Operation 13 'alloca' 'arr_9' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%zext_ln42_1_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %zext_ln42_1"   --->   Operation 14 'read' 'zext_ln42_1_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%zext_ln30_2_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %zext_ln30_2"   --->   Operation 15 'read' 'zext_ln30_2_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%mul_ln27_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %mul_ln27"   --->   Operation 16 'read' 'mul_ln27_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%arg1_r_9_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_9_reload"   --->   Operation 17 'read' 'arg1_r_9_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%arg1_r_8_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_8_reload"   --->   Operation 18 'read' 'arg1_r_8_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%arg1_r_7_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_7_reload"   --->   Operation 19 'read' 'arg1_r_7_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%arg1_r_6_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_6_reload"   --->   Operation 20 'read' 'arg1_r_6_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%arg1_r_5_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_5_reload"   --->   Operation 21 'read' 'arg1_r_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%arg1_r_4_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_4_reload"   --->   Operation 22 'read' 'arg1_r_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%arg1_r_3_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_3_reload"   --->   Operation 23 'read' 'arg1_r_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%arg1_r_2_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_2_reload"   --->   Operation 24 'read' 'arg1_r_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%arg1_r_1_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_1_reload"   --->   Operation 25 'read' 'arg1_r_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%arr_2_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arr_2"   --->   Operation 26 'read' 'arr_2_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%arr_11_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arr_11"   --->   Operation 27 'read' 'arr_11_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%zext_ln42_1_cast = zext i32 %zext_ln42_1_read"   --->   Operation 28 'zext' 'zext_ln42_1_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%zext_ln30_2_cast = zext i32 %zext_ln30_2_read"   --->   Operation 29 'zext' 'zext_ln30_2_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_9"   --->   Operation 30 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 31 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %arr_11_read, i64 %arr_8"   --->   Operation 31 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 32 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_7"   --->   Operation 32 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 33 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_6"   --->   Operation 33 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 34 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_5"   --->   Operation 34 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 35 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_4"   --->   Operation 35 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 36 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_3"   --->   Operation 36 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 37 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %arr_1"   --->   Operation 37 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 38 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %arr_2_read, i64 %arr"   --->   Operation 38 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 39 [1/1] (0.42ns)   --->   "%store_ln0 = store i4 1, i4 %i_1"   --->   Operation 39 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.inc87"   --->   Operation 40 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 6.59>
ST_2 : Operation 41 [1/1] (0.00ns)   --->   "%i = load i4 %i_1"   --->   Operation 41 'load' 'i' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 42 [1/1] (0.79ns)   --->   "%icmp_ln33 = icmp_eq  i4 %i, i4 9" [d2.cpp:33]   --->   Operation 42 'icmp' 'icmp_ln33' <Predicate = true> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 43 [1/1] (0.00ns)   --->   "%br_ln33 = br i1 %icmp_ln33, void %for.inc87.split, void %VITIS_LOOP_46_3.exitStub" [d2.cpp:33]   --->   Operation 43 'br' 'br_ln33' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 44 [1/1] (0.00ns)   --->   "%arr_load = load i64 %arr" [d2.cpp:41]   --->   Operation 44 'load' 'arr_load' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 45 [1/1] (0.00ns)   --->   "%arr_1_load_1 = load i64 %arr_1" [d2.cpp:40]   --->   Operation 45 'load' 'arr_1_load_1' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 46 [1/1] (0.00ns)   --->   "%arr_3_load_1 = load i64 %arr_3" [d2.cpp:40]   --->   Operation 46 'load' 'arr_3_load_1' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 47 [1/1] (0.00ns)   --->   "%arr_4_load_1 = load i64 %arr_4" [d2.cpp:40]   --->   Operation 47 'load' 'arr_4_load_1' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 48 [1/1] (0.00ns)   --->   "%arr_5_load_1 = load i64 %arr_5" [d2.cpp:40]   --->   Operation 48 'load' 'arr_5_load_1' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 49 [1/1] (0.00ns)   --->   "%arr_6_load_1 = load i64 %arr_6" [d2.cpp:40]   --->   Operation 49 'load' 'arr_6_load_1' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 50 [1/1] (0.00ns)   --->   "%arr_7_load_1 = load i64 %arr_7" [d2.cpp:40]   --->   Operation 50 'load' 'arr_7_load_1' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 51 [1/1] (0.00ns)   --->   "%arr_8_load_1 = load i64 %arr_8" [d2.cpp:40]   --->   Operation 51 'load' 'arr_8_load_1' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 52 [1/1] (0.00ns)   --->   "%arr_9_load_1 = load i64 %arr_9" [d2.cpp:40]   --->   Operation 52 'load' 'arr_9_load_1' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 53 [1/1] (0.00ns)   --->   "%specpipeline_ln35 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty" [d2.cpp:35]   --->   Operation 53 'specpipeline' 'specpipeline_ln35' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 54 [1/1] (0.00ns)   --->   "%speclooptripcount_ln14 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 8, i64 8, i64 8" [d2.cpp:14]   --->   Operation 54 'speclooptripcount' 'speclooptripcount_ln14' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 55 [1/1] (0.00ns)   --->   "%specloopname_ln33 = specloopname void @_ssdm_op_SpecLoopName, void @empty_10" [d2.cpp:33]   --->   Operation 55 'specloopname' 'specloopname_ln33' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 56 [1/1] (0.79ns)   --->   "%sub_ln36 = sub i4 9, i4 %i" [d2.cpp:36]   --->   Operation 56 'sub' 'sub_ln36' <Predicate = (!icmp_ln33)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 57 [1/1] (0.00ns)   --->   "%empty = trunc i4 %i"   --->   Operation 57 'trunc' 'empty' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 58 [1/1] (0.77ns)   --->   "%tmp = mux i32 @_ssdm_op_Mux.ap_auto.9i32.i4, i32 0, i32 %arg1_r_1_reload_read, i32 %arg1_r_2_reload_read, i32 %arg1_r_3_reload_read, i32 %arg1_r_4_reload_read, i32 %arg1_r_5_reload_read, i32 %arg1_r_6_reload_read, i32 %arg1_r_7_reload_read, i32 %arg1_r_8_reload_read, i4 %sub_ln36" [d2.cpp:40]   --->   Operation 58 'mux' 'tmp' <Predicate = (!icmp_ln33)> <Delay = 0.77> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 59 [1/1] (0.00ns)   --->   "%zext_ln40 = zext i32 %tmp" [d2.cpp:40]   --->   Operation 59 'zext' 'zext_ln40' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 60 [1/1] (0.77ns)   --->   "%tmp_1 = mux i64 @_ssdm_op_Mux.ap_auto.9i64.i4, i64 0, i64 %arr_9_load_1, i64 %arr_8_load_1, i64 %arr_7_load_1, i64 %arr_6_load_1, i64 %arr_5_load_1, i64 %arr_4_load_1, i64 %arr_3_load_1, i64 %arr_1_load_1, i4 %i" [d2.cpp:40]   --->   Operation 60 'mux' 'tmp_1' <Predicate = (!icmp_ln33)> <Delay = 0.77> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 61 [1/1] (0.00ns)   --->   "%shl_ln41 = shl i32 %tmp, i32 1" [d2.cpp:41]   --->   Operation 61 'shl' 'shl_ln41' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 62 [1/1] (0.00ns)   --->   "%zext_ln41 = zext i32 %shl_ln41" [d2.cpp:41]   --->   Operation 62 'zext' 'zext_ln41' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 63 [1/1] (0.79ns)   --->   "%icmp_ln41 = icmp_ult  i4 %i, i4 5" [d2.cpp:41]   --->   Operation 63 'icmp' 'icmp_ln41' <Predicate = (!icmp_ln33)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 64 [1/1] (0.79ns)   --->   "%sub_ln42 = sub i4 10, i4 %i" [d2.cpp:42]   --->   Operation 64 'sub' 'sub_ln42' <Predicate = (!icmp_ln33)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 65 [1/1] (0.77ns)   --->   "%tmp_2 = mux i32 @_ssdm_op_Mux.ap_auto.9i32.i4, i32 0, i32 %arg1_r_1_reload_read, i32 %arg1_r_2_reload_read, i32 %arg1_r_3_reload_read, i32 %arg1_r_4_reload_read, i32 %arg1_r_5_reload_read, i32 %arg1_r_6_reload_read, i32 %arg1_r_7_reload_read, i32 %arg1_r_8_reload_read, i4 %i" [d2.cpp:41]   --->   Operation 65 'mux' 'tmp_2' <Predicate = (!icmp_ln33)> <Delay = 0.77> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 66 [1/1] (0.00ns)   --->   "%zext_ln41_1 = zext i32 %tmp_2" [d2.cpp:41]   --->   Operation 66 'zext' 'zext_ln41_1' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 67 [1/1] (0.75ns)   --->   "%tmp_3 = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 0, i32 0, i32 %arg1_r_2_reload_read, i32 %arg1_r_3_reload_read, i32 %arg1_r_4_reload_read, i32 %arg1_r_5_reload_read, i32 %arg1_r_6_reload_read, i32 %arg1_r_7_reload_read, i32 %arg1_r_8_reload_read, i32 %arg1_r_9_reload_read, i4 %sub_ln42" [d2.cpp:42]   --->   Operation 67 'mux' 'tmp_3' <Predicate = (!icmp_ln33)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 68 [1/1] (0.79ns)   --->   "%icmp_ln42 = icmp_ugt  i4 %i, i4 2" [d2.cpp:42]   --->   Operation 68 'icmp' 'icmp_ln42' <Predicate = (!icmp_ln33)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (0.79ns)   --->   Input mux for Operation 69 '%mul_ln41 = mul i64 %zext_ln41_1, i64 %zext_ln41'
ST_2 : Operation 69 [1/1] (2.62ns)   --->   "%mul_ln41 = mul i64 %zext_ln41_1, i64 %zext_ln41" [d2.cpp:41]   --->   Operation 69 'mul' 'mul_ln41' <Predicate = (!icmp_ln33)> <Delay = 2.62> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 70 [1/1] (0.00ns) (grouped into LUT with out node arr_10)   --->   "%select_ln41 = select i1 %icmp_ln41, i64 18446744073709551615, i64 0" [d2.cpp:41]   --->   Operation 70 'select' 'select_ln41' <Predicate = (!icmp_ln33)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 71 [1/1] (0.00ns) (grouped into LUT with out node arr_10)   --->   "%and_ln41 = and i64 %mul_ln41, i64 %select_ln41" [d2.cpp:41]   --->   Operation 71 'and' 'and_ln41' <Predicate = (!icmp_ln33)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 72 [1/1] (1.08ns) (out node of the LUT)   --->   "%arr_10 = add i64 %and_ln41, i64 %arr_load" [d2.cpp:41]   --->   Operation 72 'add' 'arr_10' <Predicate = (!icmp_ln33)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 73 [1/1] (0.00ns)   --->   "%shl_ln2 = bitconcatenate i33 @_ssdm_op_BitConcatenate.i33.i32.i1, i32 %mul_ln27_read, i1 0" [d2.cpp:42]   --->   Operation 73 'bitconcatenate' 'shl_ln2' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 74 [1/1] (0.43ns)   --->   "%select_ln42 = select i1 %empty, i33 %zext_ln30_2_cast, i33 %shl_ln2" [d2.cpp:42]   --->   Operation 74 'select' 'select_ln42' <Predicate = (!icmp_ln33)> <Delay = 0.43> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.43> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 75 [1/1] (0.00ns)   --->   "%zext_ln42 = zext i33 %select_ln42" [d2.cpp:42]   --->   Operation 75 'zext' 'zext_ln42' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : [1/1] (0.42ns)   --->   Input mux for Operation 76 '%mul_ln42 = mul i64 %zext_ln42, i64 %zext_ln40'
ST_2 : Operation 76 [1/1] (2.98ns)   --->   "%mul_ln42 = mul i64 %zext_ln42, i64 %zext_ln40" [d2.cpp:42]   --->   Operation 76 'mul' 'mul_ln42' <Predicate = (!icmp_ln33)> <Delay = 2.98> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.41> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 77 [1/1] (0.00ns)   --->   "%zext_ln42_2 = zext i32 %tmp_3" [d2.cpp:42]   --->   Operation 77 'zext' 'zext_ln42_2' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : [1/1] (0.57ns)   --->   Input mux for Operation 78 '%mul_ln42_1 = mul i63 %zext_ln42_1_cast, i63 %zext_ln42_2'
ST_2 : Operation 78 [1/1] (2.84ns)   --->   "%mul_ln42_1 = mul i63 %zext_ln42_1_cast, i63 %zext_ln42_2" [d2.cpp:42]   --->   Operation 78 'mul' 'mul_ln42_1' <Predicate = (!icmp_ln33)> <Delay = 2.84> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 79 [1/1] (0.00ns) (grouped into LUT with out node and_ln42)   --->   "%shl_ln42_1 = bitconcatenate i64 @_ssdm_op_BitConcatenate.i64.i63.i1, i63 %mul_ln42_1, i1 0" [d2.cpp:42]   --->   Operation 79 'bitconcatenate' 'shl_ln42_1' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 80 [1/1] (0.00ns) (grouped into LUT with out node and_ln42)   --->   "%select_ln42_1 = select i1 %icmp_ln42, i64 18446744073709551615, i64 0" [d2.cpp:42]   --->   Operation 80 'select' 'select_ln42_1' <Predicate = (!icmp_ln33)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 81 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln42 = and i64 %shl_ln42_1, i64 %select_ln42_1" [d2.cpp:42]   --->   Operation 81 'and' 'and_ln42' <Predicate = (!icmp_ln33)> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 82 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln42 = add i64 %tmp_1, i64 %and_ln42" [d2.cpp:42]   --->   Operation 82 'add' 'add_ln42' <Predicate = (!icmp_ln33)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 83 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%arr_12 = add i64 %add_ln42, i64 %mul_ln42" [d2.cpp:42]   --->   Operation 83 'add' 'arr_12' <Predicate = (!icmp_ln33)> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 84 [1/1] (0.74ns)   --->   "%switch_ln40 = switch i4 %i, void %arrayidx50.case.842, i4 1, void %for.inc87.split.arrayidx50.exit34_crit_edge17, i4 2, void %arrayidx50.case.236, i4 3, void %arrayidx50.case.337, i4 4, void %arrayidx50.case.438, i4 5, void %arrayidx50.case.539, i4 6, void %arrayidx50.case.640, i4 7, void %for.inc87.split.arrayidx50.exit34_crit_edge" [d2.cpp:40]   --->   Operation 84 'switch' 'switch_ln40' <Predicate = (!icmp_ln33)> <Delay = 0.74>
ST_2 : Operation 85 [1/1] (0.42ns)   --->   "%store_ln40 = store i64 %arr_12, i64 %arr_3" [d2.cpp:40]   --->   Operation 85 'store' 'store_ln40' <Predicate = (!icmp_ln33 & i == 7)> <Delay = 0.42>
ST_2 : Operation 86 [1/1] (0.00ns)   --->   "%br_ln40 = br void %arrayidx50.exit34" [d2.cpp:40]   --->   Operation 86 'br' 'br_ln40' <Predicate = (!icmp_ln33 & i == 7)> <Delay = 0.00>
ST_2 : Operation 87 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr_12, i64 %arr_4" [d2.cpp:42]   --->   Operation 87 'store' 'store_ln42' <Predicate = (!icmp_ln33 & i == 6)> <Delay = 0.42>
ST_2 : Operation 88 [1/1] (0.00ns)   --->   "%br_ln42 = br void %arrayidx50.exit34" [d2.cpp:42]   --->   Operation 88 'br' 'br_ln42' <Predicate = (!icmp_ln33 & i == 6)> <Delay = 0.00>
ST_2 : Operation 89 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr_12, i64 %arr_5" [d2.cpp:42]   --->   Operation 89 'store' 'store_ln42' <Predicate = (!icmp_ln33 & i == 5)> <Delay = 0.42>
ST_2 : Operation 90 [1/1] (0.00ns)   --->   "%br_ln42 = br void %arrayidx50.exit34" [d2.cpp:42]   --->   Operation 90 'br' 'br_ln42' <Predicate = (!icmp_ln33 & i == 5)> <Delay = 0.00>
ST_2 : Operation 91 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr_12, i64 %arr_6" [d2.cpp:42]   --->   Operation 91 'store' 'store_ln42' <Predicate = (!icmp_ln33 & i == 4)> <Delay = 0.42>
ST_2 : Operation 92 [1/1] (0.00ns)   --->   "%br_ln42 = br void %arrayidx50.exit34" [d2.cpp:42]   --->   Operation 92 'br' 'br_ln42' <Predicate = (!icmp_ln33 & i == 4)> <Delay = 0.00>
ST_2 : Operation 93 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr_12, i64 %arr_7" [d2.cpp:42]   --->   Operation 93 'store' 'store_ln42' <Predicate = (!icmp_ln33 & i == 3)> <Delay = 0.42>
ST_2 : Operation 94 [1/1] (0.00ns)   --->   "%br_ln42 = br void %arrayidx50.exit34" [d2.cpp:42]   --->   Operation 94 'br' 'br_ln42' <Predicate = (!icmp_ln33 & i == 3)> <Delay = 0.00>
ST_2 : Operation 95 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr_12, i64 %arr_8" [d2.cpp:42]   --->   Operation 95 'store' 'store_ln42' <Predicate = (!icmp_ln33 & i == 2)> <Delay = 0.42>
ST_2 : Operation 96 [1/1] (0.00ns)   --->   "%br_ln42 = br void %arrayidx50.exit34" [d2.cpp:42]   --->   Operation 96 'br' 'br_ln42' <Predicate = (!icmp_ln33 & i == 2)> <Delay = 0.00>
ST_2 : Operation 97 [1/1] (0.42ns)   --->   "%store_ln40 = store i64 %arr_12, i64 %arr_9" [d2.cpp:40]   --->   Operation 97 'store' 'store_ln40' <Predicate = (!icmp_ln33 & i == 1)> <Delay = 0.42>
ST_2 : Operation 98 [1/1] (0.00ns)   --->   "%br_ln40 = br void %arrayidx50.exit34" [d2.cpp:40]   --->   Operation 98 'br' 'br_ln40' <Predicate = (!icmp_ln33 & i == 1)> <Delay = 0.00>
ST_2 : Operation 99 [1/1] (0.42ns)   --->   "%store_ln42 = store i64 %arr_12, i64 %arr_1" [d2.cpp:42]   --->   Operation 99 'store' 'store_ln42' <Predicate = (!icmp_ln33 & i != 1 & i != 2 & i != 3 & i != 4 & i != 5 & i != 6 & i != 7)> <Delay = 0.42>
ST_2 : Operation 100 [1/1] (0.00ns)   --->   "%br_ln42 = br void %arrayidx50.exit34" [d2.cpp:42]   --->   Operation 100 'br' 'br_ln42' <Predicate = (!icmp_ln33 & i != 1 & i != 2 & i != 3 & i != 4 & i != 5 & i != 6 & i != 7)> <Delay = 0.00>
ST_2 : Operation 101 [1/1] (0.79ns)   --->   "%add_ln33 = add i4 %i, i4 1" [d2.cpp:33]   --->   Operation 101 'add' 'add_ln33' <Predicate = (!icmp_ln33)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 102 [1/1] (0.42ns)   --->   "%store_ln33 = store i64 %arr_10, i64 %arr" [d2.cpp:33]   --->   Operation 102 'store' 'store_ln33' <Predicate = (!icmp_ln33)> <Delay = 0.42>
ST_2 : Operation 103 [1/1] (0.42ns)   --->   "%store_ln33 = store i4 %add_ln33, i4 %i_1" [d2.cpp:33]   --->   Operation 103 'store' 'store_ln33' <Predicate = (!icmp_ln33)> <Delay = 0.42>
ST_2 : Operation 104 [1/1] (0.00ns)   --->   "%br_ln33 = br void %for.inc87" [d2.cpp:33]   --->   Operation 104 'br' 'br_ln33' <Predicate = (!icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 105 [1/1] (0.00ns)   --->   "%arr_load_1 = load i64 %arr"   --->   Operation 105 'load' 'arr_load_1' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 106 [1/1] (0.00ns)   --->   "%arr_1_load = load i64 %arr_1"   --->   Operation 106 'load' 'arr_1_load' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 107 [1/1] (0.00ns)   --->   "%arr_3_load = load i64 %arr_3"   --->   Operation 107 'load' 'arr_3_load' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 108 [1/1] (0.00ns)   --->   "%arr_4_load = load i64 %arr_4"   --->   Operation 108 'load' 'arr_4_load' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 109 [1/1] (0.00ns)   --->   "%arr_5_load = load i64 %arr_5"   --->   Operation 109 'load' 'arr_5_load' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 110 [1/1] (0.00ns)   --->   "%arr_6_load = load i64 %arr_6"   --->   Operation 110 'load' 'arr_6_load' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 111 [1/1] (0.00ns)   --->   "%arr_7_load = load i64 %arr_7"   --->   Operation 111 'load' 'arr_7_load' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 112 [1/1] (0.00ns)   --->   "%arr_8_load = load i64 %arr_8"   --->   Operation 112 'load' 'arr_8_load' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 113 [1/1] (0.00ns)   --->   "%arr_9_load = load i64 %arr_9"   --->   Operation 113 'load' 'arr_9_load' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 114 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %arr_10_out, i64 %arr_9_load"   --->   Operation 114 'write' 'write_ln0' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 115 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %arr_9_out, i64 %arr_8_load"   --->   Operation 115 'write' 'write_ln0' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 116 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %arr_8_out, i64 %arr_7_load"   --->   Operation 116 'write' 'write_ln0' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 117 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %arr_7_out, i64 %arr_6_load"   --->   Operation 117 'write' 'write_ln0' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 118 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %arr_6_out, i64 %arr_5_load"   --->   Operation 118 'write' 'write_ln0' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 119 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %arr_5_out, i64 %arr_4_load"   --->   Operation 119 'write' 'write_ln0' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 120 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %arr_4_out, i64 %arr_3_load"   --->   Operation 120 'write' 'write_ln0' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 121 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %arr_3_out, i64 %arr_1_load"   --->   Operation 121 'write' 'write_ln0' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 122 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %arr_out, i64 %arr_load_1"   --->   Operation 122 'write' 'write_ln0' <Predicate = (icmp_ln33)> <Delay = 0.00>
ST_2 : Operation 123 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 123 'ret' 'ret_ln0' <Predicate = (icmp_ln33)> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 0.427ns
The critical path consists of the following:
	'alloca' operation ('arr') [33]  (0.000 ns)
	'store' operation ('store_ln0') of constant 0 on local variable 'arr' [50]  (0.427 ns)

 <State 2>: 6.596ns
The critical path consists of the following:
	'load' operation ('i') on local variable 'i' [62]  (0.000 ns)
	'sub' operation ('sub_ln42', d2.cpp:42) [86]  (0.797 ns)
	'mux' operation ('tmp_3', d2.cpp:42) [89]  (0.754 ns)
	multiplexor before operation 'mul' with delay (0.574 ns)
'mul' operation ('mul_ln42_1', d2.cpp:42) [100]  (2.846 ns)
	'and' operation ('and_ln42', d2.cpp:42) [103]  (0.379 ns)
	'add' operation ('add_ln42', d2.cpp:42) [104]  (0.000 ns)
	'add' operation ('arr', d2.cpp:42) [105]  (0.819 ns)
	'store' operation ('store_ln42', d2.cpp:42) of variable 'arr', d2.cpp:42 on local variable 'arr' [117]  (0.427 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
