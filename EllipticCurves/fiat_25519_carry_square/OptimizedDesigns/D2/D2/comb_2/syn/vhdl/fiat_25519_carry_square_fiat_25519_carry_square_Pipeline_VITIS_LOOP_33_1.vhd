-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_33_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arr_23 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_2 : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_4_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_5_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_6_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_7_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_8_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_9_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln27 : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln30_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln42_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    arr_12_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_12_out_ap_vld : OUT STD_LOGIC;
    arr_11_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_11_out_ap_vld : OUT STD_LOGIC;
    arr_10_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_10_out_ap_vld : OUT STD_LOGIC;
    arr_9_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_9_out_ap_vld : OUT STD_LOGIC;
    arr_8_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_8_out_ap_vld : OUT STD_LOGIC;
    arr_7_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_7_out_ap_vld : OUT STD_LOGIC;
    arr_6_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_6_out_ap_vld : OUT STD_LOGIC;
    arr_5_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_5_out_ap_vld : OUT STD_LOGIC;
    arr_4_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_4_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_33_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln33_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln42_1_cast_fu_305_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln42_1_cast_reg_836 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln30_2_cast_fu_309_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln30_2_cast_reg_841 : STD_LOGIC_VECTOR (32 downto 0);
    signal i_fu_106 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln33_fu_640_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_1_load_fu_363_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal arr_fu_110 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_10_fu_536_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_1_fu_114 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_11_fu_594_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_3_fu_118 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_4_fu_122 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_5_fu_126 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_6_fu_130 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_7_fu_134 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_8_fu_138 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_9_fu_142 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln42_1_fu_293_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_1_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_fu_297_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_fu_301_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln42_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_409_p10 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_409_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln41_fu_454_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_477_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_498_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln41_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln41_fu_297_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln41_fu_522_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln41_fu_530_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_405_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_542_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln42_fu_549_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_3_fu_498_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_1_fu_293_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_ln42_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln42_1_fu_566_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln42_1_fu_574_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_430_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln42_fu_582_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln42_fu_588_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln42_fu_301_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln41_fu_297_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln41_fu_297_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln42_1_fu_293_p10 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln42_fu_301_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln42_fu_301_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_condition_447 : BOOLEAN;
    signal ap_condition_451 : BOOLEAN;
    signal ap_condition_454 : BOOLEAN;
    signal ap_condition_457 : BOOLEAN;
    signal ap_condition_460 : BOOLEAN;
    signal ap_condition_463 : BOOLEAN;
    signal ap_condition_466 : BOOLEAN;
    signal ap_condition_469 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component fiat_25519_carry_square_mul_32ns_32ns_63_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component fiat_25519_carry_square_mul_32ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fiat_25519_carry_square_mul_33ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_9_4_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_9_4_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        din9 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_10_4_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32ns_32ns_63_1_1_U13 : component fiat_25519_carry_square_mul_32ns_32ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => mul_ln42_1_fu_293_p0,
        din1 => mul_ln42_1_fu_293_p1,
        dout => mul_ln42_1_fu_293_p2);

    mul_32ns_32ns_64_1_1_U14 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln41_fu_297_p0,
        din1 => mul_ln41_fu_297_p1,
        dout => mul_ln41_fu_297_p2);

    mul_33ns_32ns_64_1_1_U15 : component fiat_25519_carry_square_mul_33ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 33,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln42_fu_301_p0,
        din1 => mul_ln42_fu_301_p1,
        dout => mul_ln42_fu_301_p2);

    mux_9_4_32_1_1_U16 : component fiat_25519_carry_square_mux_9_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => arg1_r_1_reload,
        din2 => arg1_r_2_reload,
        din3 => arg1_r_3_reload,
        din4 => arg1_r_4_reload,
        din5 => arg1_r_5_reload,
        din6 => arg1_r_6_reload,
        din7 => arg1_r_7_reload,
        din8 => arg1_r_8_reload,
        din9 => tmp_fu_409_p10,
        dout => tmp_fu_409_p11);

    mux_9_4_64_1_1_U17 : component fiat_25519_carry_square_mux_9_4_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => ap_const_lv64_0,
        din1 => arr_9_fu_142,
        din2 => arr_8_fu_138,
        din3 => arr_7_fu_134,
        din4 => arr_6_fu_130,
        din5 => arr_5_fu_126,
        din6 => arr_4_fu_122,
        din7 => arr_3_fu_118,
        din8 => arr_1_fu_114,
        din9 => i_fu_106,
        dout => tmp_1_fu_430_p11);

    mux_9_4_32_1_1_U18 : component fiat_25519_carry_square_mux_9_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => arg1_r_1_reload,
        din2 => arg1_r_2_reload,
        din3 => arg1_r_3_reload,
        din4 => arg1_r_4_reload,
        din5 => arg1_r_5_reload,
        din6 => arg1_r_6_reload,
        din7 => arg1_r_7_reload,
        din8 => arg1_r_8_reload,
        din9 => i_fu_106,
        dout => tmp_2_fu_477_p11);

    mux_10_4_32_1_1_U19 : component fiat_25519_carry_square_mux_10_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => arg1_r_2_reload,
        din3 => arg1_r_3_reload,
        din4 => arg1_r_4_reload,
        din5 => arg1_r_5_reload,
        din6 => arg1_r_6_reload,
        din7 => arg1_r_7_reload,
        din8 => arg1_r_8_reload,
        din9 => arg1_r_9_reload,
        din10 => tmp_3_fu_498_p11,
        dout => tmp_3_fu_498_p12);

    flow_control_loop_pipe_sequential_init_U : component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    arr_1_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_1_fu_114 <= ap_const_lv64_0;
                elsif ((ap_const_boolean_1 = ap_condition_447)) then 
                    arr_1_fu_114 <= arr_11_fu_594_p2;
                end if;
            end if; 
        end if;
    end process;

    arr_3_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_3_fu_118 <= ap_const_lv64_0;
                elsif ((ap_const_boolean_1 = ap_condition_451)) then 
                    arr_3_fu_118 <= arr_11_fu_594_p2;
                end if;
            end if; 
        end if;
    end process;

    arr_4_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_4_fu_122 <= ap_const_lv64_0;
                elsif ((ap_const_boolean_1 = ap_condition_454)) then 
                    arr_4_fu_122 <= arr_11_fu_594_p2;
                end if;
            end if; 
        end if;
    end process;

    arr_5_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_5_fu_126 <= ap_const_lv64_0;
                elsif ((ap_const_boolean_1 = ap_condition_457)) then 
                    arr_5_fu_126 <= arr_11_fu_594_p2;
                end if;
            end if; 
        end if;
    end process;

    arr_6_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_6_fu_130 <= ap_const_lv64_0;
                elsif ((ap_const_boolean_1 = ap_condition_460)) then 
                    arr_6_fu_130 <= arr_11_fu_594_p2;
                end if;
            end if; 
        end if;
    end process;

    arr_7_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_7_fu_134 <= ap_const_lv64_0;
                elsif ((ap_const_boolean_1 = ap_condition_463)) then 
                    arr_7_fu_134 <= arr_11_fu_594_p2;
                end if;
            end if; 
        end if;
    end process;

    arr_8_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_8_fu_138 <= arr_23;
                elsif ((ap_const_boolean_1 = ap_condition_466)) then 
                    arr_8_fu_138 <= arr_11_fu_594_p2;
                end if;
            end if; 
        end if;
    end process;

    arr_9_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_9_fu_142 <= ap_const_lv64_0;
                elsif ((ap_const_boolean_1 = ap_condition_469)) then 
                    arr_9_fu_142 <= arr_11_fu_594_p2;
                end if;
            end if; 
        end if;
    end process;

    arr_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_fu_110 <= arr_2;
                elsif (((icmp_ln33_fu_366_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    arr_fu_110 <= arr_10_fu_536_p2;
                end if;
            end if; 
        end if;
    end process;

    i_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_106 <= ap_const_lv4_1;
                elsif (((icmp_ln33_fu_366_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_106 <= add_ln33_fu_640_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln30_2_cast_reg_841(31 downto 0) <= zext_ln30_2_cast_fu_309_p1(31 downto 0);
                    zext_ln42_1_cast_reg_836(31 downto 0) <= zext_ln42_1_cast_fu_305_p1(31 downto 0);
            end if;
        end if;
    end process;
    zext_ln42_1_cast_reg_836(62 downto 32) <= "0000000000000000000000000000000";
    zext_ln30_2_cast_reg_841(32) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln33_fu_640_p2 <= std_logic_vector(unsigned(i_fu_106) + unsigned(ap_const_lv4_1));
    add_ln42_fu_588_p2 <= std_logic_vector(unsigned(tmp_1_fu_430_p11) + unsigned(and_ln42_fu_582_p2));
    and_ln41_fu_530_p2 <= (select_ln41_fu_522_p3 and mul_ln41_fu_297_p2);
    and_ln42_fu_582_p2 <= (shl_ln42_1_fu_566_p3 and select_ln42_1_fu_574_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_447_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln33_fu_366_p2, i_1_load_fu_363_p1)
    begin
                ap_condition_447 <= (not((i_1_load_fu_363_p1 = ap_const_lv4_7)) and not((i_1_load_fu_363_p1 = ap_const_lv4_6)) and not((i_1_load_fu_363_p1 = ap_const_lv4_5)) and not((i_1_load_fu_363_p1 = ap_const_lv4_4)) and not((i_1_load_fu_363_p1 = ap_const_lv4_3)) and not((i_1_load_fu_363_p1 = ap_const_lv4_2)) and not((i_1_load_fu_363_p1 = ap_const_lv4_1)) and (icmp_ln33_fu_366_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_451_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln33_fu_366_p2, i_1_load_fu_363_p1)
    begin
                ap_condition_451 <= ((icmp_ln33_fu_366_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_1_load_fu_363_p1 = ap_const_lv4_7));
    end process;


    ap_condition_454_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln33_fu_366_p2, i_1_load_fu_363_p1)
    begin
                ap_condition_454 <= ((icmp_ln33_fu_366_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_1_load_fu_363_p1 = ap_const_lv4_6));
    end process;


    ap_condition_457_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln33_fu_366_p2, i_1_load_fu_363_p1)
    begin
                ap_condition_457 <= ((icmp_ln33_fu_366_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_1_load_fu_363_p1 = ap_const_lv4_5));
    end process;


    ap_condition_460_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln33_fu_366_p2, i_1_load_fu_363_p1)
    begin
                ap_condition_460 <= ((icmp_ln33_fu_366_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_1_load_fu_363_p1 = ap_const_lv4_4));
    end process;


    ap_condition_463_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln33_fu_366_p2, i_1_load_fu_363_p1)
    begin
                ap_condition_463 <= ((icmp_ln33_fu_366_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_1_load_fu_363_p1 = ap_const_lv4_3));
    end process;


    ap_condition_466_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln33_fu_366_p2, i_1_load_fu_363_p1)
    begin
                ap_condition_466 <= ((icmp_ln33_fu_366_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_1_load_fu_363_p1 = ap_const_lv4_2));
    end process;


    ap_condition_469_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln33_fu_366_p2, i_1_load_fu_363_p1)
    begin
                ap_condition_469 <= ((icmp_ln33_fu_366_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_1_load_fu_363_p1 = ap_const_lv4_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln33_fu_366_p2)
    begin
        if (((icmp_ln33_fu_366_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    arr_10_fu_536_p2 <= std_logic_vector(unsigned(and_ln41_fu_530_p2) + unsigned(arr_fu_110));
    arr_10_out <= arr_7_fu_134;

    arr_10_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_366_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_366_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_10_out_ap_vld <= ap_const_logic_1;
        else 
            arr_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_11_fu_594_p2 <= std_logic_vector(unsigned(add_ln42_fu_588_p2) + unsigned(mul_ln42_fu_301_p2));
    arr_11_out <= arr_8_fu_138;

    arr_11_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_366_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_366_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_11_out_ap_vld <= ap_const_logic_1;
        else 
            arr_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_12_out <= arr_9_fu_142;

    arr_12_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_366_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_366_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_12_out_ap_vld <= ap_const_logic_1;
        else 
            arr_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_4_out <= arr_fu_110;

    arr_4_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_366_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_366_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_4_out_ap_vld <= ap_const_logic_1;
        else 
            arr_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_5_out <= arr_1_fu_114;

    arr_5_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_366_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_366_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_5_out_ap_vld <= ap_const_logic_1;
        else 
            arr_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_6_out <= arr_3_fu_118;

    arr_6_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_366_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_366_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_6_out_ap_vld <= ap_const_logic_1;
        else 
            arr_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_7_out <= arr_4_fu_122;

    arr_7_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_366_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_366_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_7_out_ap_vld <= ap_const_logic_1;
        else 
            arr_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_8_out <= arr_5_fu_126;

    arr_8_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_366_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_366_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_8_out_ap_vld <= ap_const_logic_1;
        else 
            arr_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_9_out <= arr_6_fu_130;

    arr_9_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_366_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_366_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_9_out_ap_vld <= ap_const_logic_1;
        else 
            arr_9_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_405_p1 <= i_fu_106(1 - 1 downto 0);
    i_1_load_fu_363_p1 <= i_fu_106;
    icmp_ln33_fu_366_p2 <= "1" when (i_fu_106 = ap_const_lv4_9) else "0";
    icmp_ln41_fu_465_p2 <= "1" when (unsigned(i_fu_106) < unsigned(ap_const_lv4_5)) else "0";
    icmp_ln42_fu_516_p2 <= "1" when (unsigned(i_fu_106) > unsigned(ap_const_lv4_2)) else "0";
    mul_ln41_fu_297_p0 <= mul_ln41_fu_297_p00(32 - 1 downto 0);
    mul_ln41_fu_297_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_477_p11),64));
    mul_ln41_fu_297_p1 <= mul_ln41_fu_297_p10(32 - 1 downto 0);
    mul_ln41_fu_297_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln41_fu_454_p2),64));
    mul_ln42_1_fu_293_p0 <= zext_ln42_1_cast_reg_836(32 - 1 downto 0);
    mul_ln42_1_fu_293_p1 <= mul_ln42_1_fu_293_p10(32 - 1 downto 0);
    mul_ln42_1_fu_293_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_498_p12),63));
    mul_ln42_fu_301_p0 <= mul_ln42_fu_301_p00(33 - 1 downto 0);
    mul_ln42_fu_301_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln42_fu_549_p3),64));
    mul_ln42_fu_301_p1 <= mul_ln42_fu_301_p10(32 - 1 downto 0);
    mul_ln42_fu_301_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_409_p11),64));
    select_ln41_fu_522_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln41_fu_465_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln42_1_fu_574_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln42_fu_516_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln42_fu_549_p3 <= 
        zext_ln30_2_cast_reg_841 when (empty_fu_405_p1(0) = '1') else 
        shl_ln_fu_542_p3;
    shl_ln41_fu_454_p2 <= std_logic_vector(shift_left(unsigned(tmp_fu_409_p11),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln42_1_fu_566_p3 <= (mul_ln42_1_fu_293_p2 & ap_const_lv1_0);
    shl_ln_fu_542_p3 <= (mul_ln27 & ap_const_lv1_0);
    tmp_3_fu_498_p11 <= std_logic_vector(signed(ap_const_lv4_A) - signed(i_fu_106));
    tmp_fu_409_p10 <= std_logic_vector(signed(ap_const_lv4_9) - signed(i_fu_106));
    zext_ln30_2_cast_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln30_2),33));
    zext_ln42_1_cast_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_1),63));
end behav;
