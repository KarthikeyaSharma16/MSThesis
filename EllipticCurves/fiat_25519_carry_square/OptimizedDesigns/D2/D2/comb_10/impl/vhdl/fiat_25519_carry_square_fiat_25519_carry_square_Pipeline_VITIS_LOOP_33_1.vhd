-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_33_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arr_12 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_2 : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_4_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_5_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_6_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_7_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_8_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_9_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_3_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_4_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_5_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_6_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_7_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_2_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    arg1_r_1_cast : IN STD_LOGIC_VECTOR (30 downto 0);
    zext_ln27 : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln42 : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln42_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    arr_11_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_11_out_ap_vld : OUT STD_LOGIC;
    arr_10_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_10_out_ap_vld : OUT STD_LOGIC;
    arr_9_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_9_out_ap_vld : OUT STD_LOGIC;
    arr_8_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_8_out_ap_vld : OUT STD_LOGIC;
    arr_7_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_7_out_ap_vld : OUT STD_LOGIC;
    arr_6_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_6_out_ap_vld : OUT STD_LOGIC;
    arr_5_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_5_out_ap_vld : OUT STD_LOGIC;
    arr_4_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_4_out_ap_vld : OUT STD_LOGIC;
    arr_3_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    arr_3_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fiat_25519_carry_square_fiat_25519_carry_square_Pipeline_VITIS_LOOP_33_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln33_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln42_2_cast_fu_417_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln42_2_cast_reg_1544 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln42_cast_fu_421_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln42_cast_reg_1550 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln27_cast_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_cast_reg_1558 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln41_fu_1252_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln41_reg_1570 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln41_1_fu_1258_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln41_1_reg_1575 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_fu_140 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln33_fu_1264_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_load_fu_479_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal arr_1_fu_144 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_15_fu_1282_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_3_fu_148 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_14_fu_1146_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_4_fu_152 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_fu_1035_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_5_fu_156 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_13_fu_1108_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_10_fu_160 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_11_fu_1088_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_6_fu_164 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_9_fu_168 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_7_fu_172 : STD_LOGIC_VECTOR (63 downto 0);
    signal arr_8_fu_176 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln42_1_fu_369_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_1_fu_369_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_2_fu_373_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_2_fu_373_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln42_3_fu_1041_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln42_3_fu_377_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_3_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_5_fu_381_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_5_fu_381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_6_fu_385_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_6_fu_385_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_7_fu_389_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_7_fu_389_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_fu_393_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_fu_393_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_1_fu_397_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_1_fu_397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_2_fu_401_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_2_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_3_fu_405_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_3_fu_405_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_fu_409_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_fu_409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_4_fu_413_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_4_fu_413_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_fu_516_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_522_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln33_fu_512_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln41_fu_564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln39_fu_593_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln39_1_fu_617_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln39_2_fu_635_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_707_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_725_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_746_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_763_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_781_p8 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_781_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_801_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_819_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_fu_832_p11 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln41_1_fu_851_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_864_p11 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln41_2_fu_883_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln41_2_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln41_fu_393_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln41_fu_896_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_910_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_928_p11 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln41_3_fu_947_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln41_3_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln41_1_fu_397_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln41_1_fu_960_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln41_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln41_2_fu_401_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln41_2_fu_974_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln41_1_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln41_3_fu_405_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln41_3_fu_988_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_725_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_1_fu_369_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_ln42_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln2_fu_1007_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln42_fu_1015_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_546_p8 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln42_fu_1023_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln42_fu_1029_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln42_fu_409_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_746_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_2_fu_373_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln42_3_fu_377_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_ln42_1_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln42_2_fu_1060_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln42_1_fu_1068_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_653_p8 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln42_1_fu_1047_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln42_2_fu_1082_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln42_1_fu_1076_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln42_5_fu_381_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_3_fu_671_p8 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln42_4_fu_413_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln42_4_fu_1102_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln42_3_fu_1094_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_819_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_6_fu_385_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln42_7_fu_389_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_4_fu_689_p8 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln42_4_fu_1119_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln42_6_fu_1140_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln42_5_fu_1132_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln41_2_fu_982_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln41_3_fu_996_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln41_1_fu_968_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln41_fu_904_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln41_2_fu_1278_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln41_1_fu_397_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln41_1_fu_397_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln41_2_fu_401_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln41_2_fu_401_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln41_3_fu_405_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln41_3_fu_405_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln41_fu_393_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln41_fu_393_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln42_1_fu_369_p10 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln42_3_fu_377_p10 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln42_4_fu_413_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln42_6_fu_385_p10 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln42_7_fu_389_p10 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln42_fu_409_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_condition_807 : BOOLEAN;
    signal ap_condition_810 : BOOLEAN;
    signal ap_condition_816 : BOOLEAN;
    signal ap_condition_819 : BOOLEAN;
    signal ap_condition_822 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component fiat_25519_carry_square_mul_32ns_32ns_63_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component fiat_25519_carry_square_mul_32ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_9_4_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_6_3_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_6_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_10_4_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_8_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_7_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_square_mux_9_4_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        din3 : IN STD_LOGIC_VECTOR (30 downto 0);
        din4 : IN STD_LOGIC_VECTOR (30 downto 0);
        din5 : IN STD_LOGIC_VECTOR (30 downto 0);
        din6 : IN STD_LOGIC_VECTOR (30 downto 0);
        din7 : IN STD_LOGIC_VECTOR (30 downto 0);
        din8 : IN STD_LOGIC_VECTOR (30 downto 0);
        din9 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32ns_32ns_63_1_1_U13 : component fiat_25519_carry_square_mul_32ns_32ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => mul_ln42_1_fu_369_p0,
        din1 => mul_ln42_1_fu_369_p1,
        dout => mul_ln42_1_fu_369_p2);

    mul_32ns_32ns_63_1_1_U14 : component fiat_25519_carry_square_mul_32ns_32ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => mul_ln42_2_fu_373_p0,
        din1 => mul_ln42_2_fu_373_p1,
        dout => mul_ln42_2_fu_373_p2);

    mul_32ns_32ns_63_1_1_U15 : component fiat_25519_carry_square_mul_32ns_32ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => mul_ln42_3_fu_377_p0,
        din1 => mul_ln42_3_fu_377_p1,
        dout => mul_ln42_3_fu_377_p2);

    mul_32ns_32ns_63_1_1_U16 : component fiat_25519_carry_square_mul_32ns_32ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => mul_ln42_5_fu_381_p0,
        din1 => mul_ln42_5_fu_381_p1,
        dout => mul_ln42_5_fu_381_p2);

    mul_32ns_32ns_63_1_1_U17 : component fiat_25519_carry_square_mul_32ns_32ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => mul_ln42_6_fu_385_p0,
        din1 => mul_ln42_6_fu_385_p1,
        dout => mul_ln42_6_fu_385_p2);

    mul_32ns_32ns_63_1_1_U18 : component fiat_25519_carry_square_mul_32ns_32ns_63_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        din0 => mul_ln42_7_fu_389_p0,
        din1 => mul_ln42_7_fu_389_p1,
        dout => mul_ln42_7_fu_389_p2);

    mul_32ns_32ns_64_1_1_U19 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln41_fu_393_p0,
        din1 => mul_ln41_fu_393_p1,
        dout => mul_ln41_fu_393_p2);

    mul_32ns_32ns_64_1_1_U20 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln41_1_fu_397_p0,
        din1 => mul_ln41_1_fu_397_p1,
        dout => mul_ln41_1_fu_397_p2);

    mul_32ns_32ns_64_1_1_U21 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln41_2_fu_401_p0,
        din1 => mul_ln41_2_fu_401_p1,
        dout => mul_ln41_2_fu_401_p2);

    mul_32ns_32ns_64_1_1_U22 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln41_3_fu_405_p0,
        din1 => mul_ln41_3_fu_405_p1,
        dout => mul_ln41_3_fu_405_p2);

    mul_32ns_32ns_64_1_1_U23 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln42_fu_409_p0,
        din1 => mul_ln42_fu_409_p1,
        dout => mul_ln42_fu_409_p2);

    mul_32ns_32ns_64_1_1_U24 : component fiat_25519_carry_square_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln42_4_fu_413_p0,
        din1 => mul_ln42_4_fu_413_p1,
        dout => mul_ln42_4_fu_413_p2);

    mux_9_4_32_1_1_U25 : component fiat_25519_carry_square_mux_9_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => ap_const_lv32_0,
        din3 => ap_const_lv32_0,
        din4 => arg1_r_4_reload,
        din5 => arg1_r_5_reload,
        din6 => arg1_r_6_reload,
        din7 => arg1_r_7_reload,
        din8 => arg1_r_8_reload,
        din9 => sub_ln36_fu_516_p2,
        dout => tmp_fu_522_p11);

    mux_6_3_64_1_1_U26 : component fiat_25519_carry_square_mux_6_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => ap_const_lv64_0,
        din1 => arr_4_fu_152,
        din2 => arr_10_fu_160,
        din3 => arr_9_fu_168,
        din4 => arr_8_fu_176,
        din5 => arr_7_fu_172,
        din6 => trunc_ln33_fu_512_p1,
        dout => tmp_1_fu_546_p8);

    mux_6_3_64_1_1_U27 : component fiat_25519_carry_square_mux_6_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => ap_const_lv64_0,
        din1 => arr_10_fu_160,
        din2 => arr_9_fu_168,
        din3 => arr_8_fu_176,
        din4 => arr_7_fu_172,
        din5 => arr_6_fu_164,
        din6 => trunc_ln33_fu_512_p1,
        dout => tmp_2_fu_653_p8);

    mux_6_3_64_1_1_U28 : component fiat_25519_carry_square_mux_6_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => ap_const_lv64_0,
        din1 => arr_9_fu_168,
        din2 => arr_8_fu_176,
        din3 => arr_7_fu_172,
        din4 => arr_6_fu_164,
        din5 => arr_5_fu_156,
        din6 => trunc_ln33_fu_512_p1,
        dout => tmp_3_fu_671_p8);

    mux_6_3_64_1_1_U29 : component fiat_25519_carry_square_mux_6_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => ap_const_lv64_0,
        din1 => arr_8_fu_176,
        din2 => arr_7_fu_172,
        din3 => arr_6_fu_164,
        din4 => arr_5_fu_156,
        din5 => arr_3_fu_148,
        din6 => trunc_ln33_fu_512_p1,
        dout => tmp_4_fu_689_p8);

    mux_6_3_32_1_1_U30 : component fiat_25519_carry_square_mux_6_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => arg1_r_1_reload,
        din2 => arg1_r_2_reload,
        din3 => arg1_r_3_reload,
        din4 => arg1_r_4_reload,
        din5 => arg1_r_5_reload,
        din6 => trunc_ln33_fu_512_p1,
        dout => tmp_5_fu_707_p8);

    mux_10_4_32_1_1_U31 : component fiat_25519_carry_square_mux_10_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => ap_const_lv32_0,
        din3 => ap_const_lv32_0,
        din4 => ap_const_lv32_0,
        din5 => arg1_r_5_reload,
        din6 => arg1_r_6_reload,
        din7 => arg1_r_7_reload,
        din8 => arg1_r_8_reload,
        din9 => arg1_r_9_reload,
        din10 => tmp_6_fu_725_p11,
        dout => tmp_6_fu_725_p12);

    mux_8_3_32_1_1_U32 : component fiat_25519_carry_square_mux_8_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => ap_const_lv32_0,
        din3 => arg1_r_3_reload,
        din4 => arg1_r_4_reload,
        din5 => arg1_r_5_reload,
        din6 => arg1_r_6_reload,
        din7 => arg1_r_7_reload,
        din8 => tmp_7_fu_746_p9,
        dout => tmp_7_fu_746_p10);

    mux_6_3_32_1_1_U33 : component fiat_25519_carry_square_mux_6_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => arg1_r_2_reload,
        din2 => arg1_r_3_reload,
        din3 => arg1_r_4_reload,
        din4 => arg1_r_5_reload,
        din5 => arg1_r_6_reload,
        din6 => trunc_ln33_fu_512_p1,
        dout => tmp_8_fu_763_p8);

    mux_7_3_32_1_1_U34 : component fiat_25519_carry_square_mux_7_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => arg1_r_2_reload,
        din3 => arg1_r_3_reload,
        din4 => arg1_r_4_reload,
        din5 => arg1_r_5_reload,
        din6 => arg1_r_6_reload,
        din7 => tmp_9_fu_781_p8,
        dout => tmp_9_fu_781_p9);

    mux_6_3_32_1_1_U35 : component fiat_25519_carry_square_mux_6_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => arg1_r_3_reload,
        din2 => arg1_r_4_reload,
        din3 => arg1_r_5_reload,
        din4 => arg1_r_6_reload,
        din5 => arg1_r_7_reload,
        din6 => trunc_ln33_fu_512_p1,
        dout => tmp_s_fu_801_p8);

    mux_6_3_32_1_1_U36 : component fiat_25519_carry_square_mux_6_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => arg1_r_1_reload,
        din2 => arg1_r_2_reload,
        din3 => arg1_r_3_reload,
        din4 => arg1_r_4_reload,
        din5 => arg1_r_5_reload,
        din6 => tmp_10_fu_819_p7,
        dout => tmp_10_fu_819_p8);

    mux_9_4_31_1_1_U37 : component fiat_25519_carry_square_mux_9_4_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        din2_WIDTH => 31,
        din3_WIDTH => 31,
        din4_WIDTH => 31,
        din5_WIDTH => 31,
        din6_WIDTH => 31,
        din7_WIDTH => 31,
        din8_WIDTH => 31,
        din9_WIDTH => 4,
        dout_WIDTH => 31)
    port map (
        din0 => ap_const_lv31_0,
        din1 => ap_const_lv31_0,
        din2 => ap_const_lv31_0,
        din3 => ap_const_lv31_0,
        din4 => arg1_r_3_cast,
        din5 => arg1_r_4_cast,
        din6 => arg1_r_5_cast,
        din7 => arg1_r_6_cast,
        din8 => arg1_r_7_cast,
        din9 => sub_ln36_fu_516_p2,
        dout => tmp_11_fu_832_p11);

    mux_9_4_31_1_1_U38 : component fiat_25519_carry_square_mux_9_4_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        din2_WIDTH => 31,
        din3_WIDTH => 31,
        din4_WIDTH => 31,
        din5_WIDTH => 31,
        din6_WIDTH => 31,
        din7_WIDTH => 31,
        din8_WIDTH => 31,
        din9_WIDTH => 4,
        dout_WIDTH => 31)
    port map (
        din0 => ap_const_lv31_0,
        din1 => ap_const_lv31_0,
        din2 => ap_const_lv31_0,
        din3 => ap_const_lv31_0,
        din4 => arg1_r_2_cast,
        din5 => arg1_r_3_cast,
        din6 => arg1_r_4_cast,
        din7 => arg1_r_5_cast,
        din8 => arg1_r_6_cast,
        din9 => sub_ln36_fu_516_p2,
        dout => tmp_12_fu_864_p11);

    mux_6_3_32_1_1_U39 : component fiat_25519_carry_square_mux_6_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => arg1_r_4_reload,
        din2 => arg1_r_5_reload,
        din3 => arg1_r_6_reload,
        din4 => arg1_r_7_reload,
        din5 => arg1_r_8_reload,
        din6 => trunc_ln33_fu_512_p1,
        dout => tmp_13_fu_910_p8);

    mux_9_4_31_1_1_U40 : component fiat_25519_carry_square_mux_9_4_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        din2_WIDTH => 31,
        din3_WIDTH => 31,
        din4_WIDTH => 31,
        din5_WIDTH => 31,
        din6_WIDTH => 31,
        din7_WIDTH => 31,
        din8_WIDTH => 31,
        din9_WIDTH => 4,
        dout_WIDTH => 31)
    port map (
        din0 => ap_const_lv31_0,
        din1 => ap_const_lv31_0,
        din2 => ap_const_lv31_0,
        din3 => ap_const_lv31_0,
        din4 => arg1_r_1_cast,
        din5 => arg1_r_2_cast,
        din6 => arg1_r_3_cast,
        din7 => arg1_r_4_cast,
        din8 => arg1_r_5_cast,
        din9 => sub_ln36_fu_516_p2,
        dout => tmp_14_fu_928_p11);

    flow_control_loop_pipe_sequential_init_U : component fiat_25519_carry_square_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    arr_10_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_10_fu_160 <= arr_12;
                elsif ((ap_const_boolean_1 = ap_condition_810)) then 
                    arr_10_fu_160 <= arr_11_fu_1088_p2;
                elsif ((ap_const_boolean_1 = ap_condition_807)) then 
                    arr_10_fu_160 <= arr_fu_1035_p2;
                end if;
            end if; 
        end if;
    end process;

    arr_1_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    arr_1_fu_144 <= arr_2;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    arr_1_fu_144 <= arr_15_fu_1282_p2;
                end if;
            end if; 
        end if;
    end process;

    arr_3_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_3_fu_148 <= ap_const_lv64_0;
                elsif ((ap_const_boolean_1 = ap_condition_816)) then 
                    arr_3_fu_148 <= arr_14_fu_1146_p2;
                end if;
            end if; 
        end if;
    end process;

    arr_4_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_4_fu_152 <= ap_const_lv64_0;
                elsif ((ap_const_boolean_1 = ap_condition_810)) then 
                    arr_4_fu_152 <= arr_fu_1035_p2;
                end if;
            end if; 
        end if;
    end process;

    arr_5_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_5_fu_156 <= ap_const_lv64_0;
                elsif ((ap_const_boolean_1 = ap_condition_816)) then 
                    arr_5_fu_156 <= arr_13_fu_1108_p2;
                elsif ((ap_const_boolean_1 = ap_condition_819)) then 
                    arr_5_fu_156 <= arr_14_fu_1146_p2;
                end if;
            end if; 
        end if;
    end process;

    arr_6_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_6_fu_164 <= ap_const_lv64_0;
                elsif ((ap_const_boolean_1 = ap_condition_816)) then 
                    arr_6_fu_164 <= arr_11_fu_1088_p2;
                elsif ((ap_const_boolean_1 = ap_condition_822)) then 
                    arr_6_fu_164 <= arr_14_fu_1146_p2;
                elsif ((ap_const_boolean_1 = ap_condition_819)) then 
                    arr_6_fu_164 <= arr_13_fu_1108_p2;
                end if;
            end if; 
        end if;
    end process;

    arr_7_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_7_fu_172 <= ap_const_lv64_0;
                elsif ((ap_const_boolean_1 = ap_condition_816)) then 
                    arr_7_fu_172 <= arr_fu_1035_p2;
                elsif ((ap_const_boolean_1 = ap_condition_807)) then 
                    arr_7_fu_172 <= arr_14_fu_1146_p2;
                elsif ((ap_const_boolean_1 = ap_condition_822)) then 
                    arr_7_fu_172 <= arr_13_fu_1108_p2;
                elsif ((ap_const_boolean_1 = ap_condition_819)) then 
                    arr_7_fu_172 <= arr_11_fu_1088_p2;
                end if;
            end if; 
        end if;
    end process;

    arr_8_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_8_fu_176 <= ap_const_lv64_0;
                elsif ((ap_const_boolean_1 = ap_condition_810)) then 
                    arr_8_fu_176 <= arr_14_fu_1146_p2;
                elsif ((ap_const_boolean_1 = ap_condition_807)) then 
                    arr_8_fu_176 <= arr_13_fu_1108_p2;
                elsif ((ap_const_boolean_1 = ap_condition_822)) then 
                    arr_8_fu_176 <= arr_11_fu_1088_p2;
                elsif ((ap_const_boolean_1 = ap_condition_819)) then 
                    arr_8_fu_176 <= arr_fu_1035_p2;
                end if;
            end if; 
        end if;
    end process;

    arr_9_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    arr_9_fu_168 <= ap_const_lv64_0;
                elsif ((ap_const_boolean_1 = ap_condition_810)) then 
                    arr_9_fu_168 <= arr_13_fu_1108_p2;
                elsif ((ap_const_boolean_1 = ap_condition_807)) then 
                    arr_9_fu_168 <= arr_11_fu_1088_p2;
                elsif ((ap_const_boolean_1 = ap_condition_822)) then 
                    arr_9_fu_168 <= arr_fu_1035_p2;
                end if;
            end if; 
        end if;
    end process;

    i_1_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_140 <= ap_const_lv4_1;
                elsif (((icmp_ln33_fu_482_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_1_fu_140 <= add_ln33_fu_1264_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_482_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln41_1_reg_1575 <= add_ln41_1_fu_1258_p2;
                add_ln41_reg_1570 <= add_ln41_fu_1252_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln27_cast_reg_1558(31 downto 0) <= zext_ln27_cast_fu_425_p1(31 downto 0);
                    zext_ln42_2_cast_reg_1544(31 downto 0) <= zext_ln42_2_cast_fu_417_p1(31 downto 0);
                    zext_ln42_cast_reg_1550(31 downto 0) <= zext_ln42_cast_fu_421_p1(31 downto 0);
            end if;
        end if;
    end process;
    zext_ln42_2_cast_reg_1544(62 downto 32) <= "0000000000000000000000000000000";
    zext_ln42_cast_reg_1550(62 downto 32) <= "0000000000000000000000000000000";
    zext_ln27_cast_reg_1558(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln33_fu_1264_p2 <= std_logic_vector(unsigned(i_1_fu_140) + unsigned(ap_const_lv4_4));
    add_ln39_1_fu_617_p2 <= std_logic_vector(unsigned(trunc_ln33_fu_512_p1) + unsigned(ap_const_lv3_2));
    add_ln39_2_fu_635_p2 <= std_logic_vector(unsigned(i_1_fu_140) + unsigned(ap_const_lv4_3));
    add_ln39_fu_593_p2 <= std_logic_vector(unsigned(trunc_ln33_fu_512_p1) + unsigned(ap_const_lv3_1));
    add_ln41_1_fu_1258_p2 <= std_logic_vector(unsigned(and_ln41_1_fu_968_p2) + unsigned(and_ln41_fu_904_p2));
    add_ln41_2_fu_1278_p2 <= std_logic_vector(unsigned(add_ln41_1_reg_1575) + unsigned(add_ln41_reg_1570));
    add_ln41_fu_1252_p2 <= std_logic_vector(unsigned(and_ln41_2_fu_982_p2) + unsigned(and_ln41_3_fu_996_p2));
    add_ln42_2_fu_1082_p2 <= std_logic_vector(unsigned(tmp_2_fu_653_p8) + unsigned(shl_ln42_1_fu_1047_p3));
    add_ln42_4_fu_1102_p2 <= std_logic_vector(unsigned(tmp_3_fu_671_p8) + unsigned(mul_ln42_4_fu_413_p2));
    add_ln42_6_fu_1140_p2 <= std_logic_vector(unsigned(tmp_4_fu_689_p8) + unsigned(shl_ln42_4_fu_1119_p3));
    add_ln42_fu_1029_p2 <= std_logic_vector(unsigned(tmp_1_fu_546_p8) + unsigned(and_ln42_fu_1023_p2));
    and_ln41_1_fu_968_p2 <= (select_ln41_1_fu_960_p3 and mul_ln41_1_fu_397_p2);
    and_ln41_2_fu_982_p2 <= (select_ln41_2_fu_974_p3 and mul_ln41_2_fu_401_p2);
    and_ln41_3_fu_996_p2 <= (select_ln41_3_fu_988_p3 and mul_ln41_3_fu_405_p2);
    and_ln41_fu_904_p2 <= (select_ln41_fu_896_p3 and mul_ln41_fu_393_p2);
    and_ln42_1_fu_1076_p2 <= (shl_ln42_2_fu_1060_p3 and select_ln42_1_fu_1068_p3);
    and_ln42_fu_1023_p2 <= (shl_ln2_fu_1007_p3 and select_ln42_fu_1015_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_807_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln33_fu_482_p2, i_load_fu_479_p1)
    begin
                ap_condition_807 <= ((icmp_ln33_fu_482_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_load_fu_479_p1 = ap_const_lv4_2));
    end process;


    ap_condition_810_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln33_fu_482_p2, i_load_fu_479_p1)
    begin
                ap_condition_810 <= ((icmp_ln33_fu_482_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_load_fu_479_p1 = ap_const_lv4_1));
    end process;


    ap_condition_816_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln33_fu_482_p2, i_load_fu_479_p1)
    begin
                ap_condition_816 <= (not((i_load_fu_479_p1 = ap_const_lv4_4)) and not((i_load_fu_479_p1 = ap_const_lv4_3)) and not((i_load_fu_479_p1 = ap_const_lv4_2)) and not((i_load_fu_479_p1 = ap_const_lv4_1)) and (icmp_ln33_fu_482_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_819_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln33_fu_482_p2, i_load_fu_479_p1)
    begin
                ap_condition_819 <= ((icmp_ln33_fu_482_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_load_fu_479_p1 = ap_const_lv4_4));
    end process;


    ap_condition_822_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln33_fu_482_p2, i_load_fu_479_p1)
    begin
                ap_condition_822 <= ((icmp_ln33_fu_482_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_load_fu_479_p1 = ap_const_lv4_3));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln33_fu_482_p2)
    begin
        if (((icmp_ln33_fu_482_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    arr_10_out <= arr_10_fu_160;

    arr_10_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_482_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_482_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_10_out_ap_vld <= ap_const_logic_1;
        else 
            arr_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_11_fu_1088_p2 <= std_logic_vector(unsigned(add_ln42_2_fu_1082_p2) + unsigned(and_ln42_1_fu_1076_p2));
    arr_11_out <= arr_4_fu_152;

    arr_11_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_482_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_482_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_11_out_ap_vld <= ap_const_logic_1;
        else 
            arr_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_13_fu_1108_p2 <= std_logic_vector(unsigned(add_ln42_4_fu_1102_p2) + unsigned(shl_ln42_3_fu_1094_p3));
    arr_14_fu_1146_p2 <= std_logic_vector(unsigned(add_ln42_6_fu_1140_p2) + unsigned(shl_ln42_5_fu_1132_p3));
    arr_15_fu_1282_p2 <= std_logic_vector(unsigned(add_ln41_2_fu_1278_p2) + unsigned(arr_1_fu_144));
    arr_3_out <= arr_1_fu_144;

    arr_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_482_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_482_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_3_out_ap_vld <= ap_const_logic_1;
        else 
            arr_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_4_out <= arr_3_fu_148;

    arr_4_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_482_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_482_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_4_out_ap_vld <= ap_const_logic_1;
        else 
            arr_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_5_out <= arr_5_fu_156;

    arr_5_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_482_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_482_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_5_out_ap_vld <= ap_const_logic_1;
        else 
            arr_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_6_out <= arr_6_fu_164;

    arr_6_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_482_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_482_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_6_out_ap_vld <= ap_const_logic_1;
        else 
            arr_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_7_out <= arr_7_fu_172;

    arr_7_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_482_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_482_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_7_out_ap_vld <= ap_const_logic_1;
        else 
            arr_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_8_out <= arr_8_fu_176;

    arr_8_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_482_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_482_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_8_out_ap_vld <= ap_const_logic_1;
        else 
            arr_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_9_out <= arr_9_fu_168;

    arr_9_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_fu_482_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_fu_482_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_9_out_ap_vld <= ap_const_logic_1;
        else 
            arr_9_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    arr_fu_1035_p2 <= std_logic_vector(unsigned(add_ln42_fu_1029_p2) + unsigned(mul_ln42_fu_409_p2));
    i_load_fu_479_p1 <= i_1_fu_140;
    icmp_ln33_fu_482_p2 <= "1" when (unsigned(i_1_fu_140) < unsigned(ap_const_lv4_9)) else "0";
    icmp_ln41_1_fu_605_p2 <= "1" when (unsigned(add_ln39_fu_593_p2) < unsigned(ap_const_lv3_5)) else "0";
    icmp_ln41_2_fu_629_p2 <= "1" when (unsigned(add_ln39_1_fu_617_p2) < unsigned(ap_const_lv3_5)) else "0";
    icmp_ln41_3_fu_647_p2 <= "1" when (unsigned(add_ln39_2_fu_635_p2) < unsigned(ap_const_lv4_5)) else "0";
    icmp_ln41_fu_575_p2 <= "1" when (unsigned(i_1_fu_140) < unsigned(ap_const_lv4_5)) else "0";
    icmp_ln42_1_fu_611_p2 <= "1" when (unsigned(add_ln39_fu_593_p2) > unsigned(ap_const_lv3_2)) else "0";
    icmp_ln42_fu_587_p2 <= "1" when (unsigned(i_1_fu_140) > unsigned(ap_const_lv4_2)) else "0";
    mul_ln41_1_fu_397_p0 <= mul_ln41_1_fu_397_p00(32 - 1 downto 0);
    mul_ln41_1_fu_397_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln41_3_fu_947_p3),64));
    mul_ln41_1_fu_397_p1 <= mul_ln41_1_fu_397_p10(32 - 1 downto 0);
    mul_ln41_1_fu_397_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_910_p8),64));
    mul_ln41_2_fu_401_p0 <= mul_ln41_2_fu_401_p00(32 - 1 downto 0);
    mul_ln41_2_fu_401_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_707_p8),64));
    mul_ln41_2_fu_401_p1 <= mul_ln41_2_fu_401_p10(32 - 1 downto 0);
    mul_ln41_2_fu_401_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln41_fu_564_p2),64));
    mul_ln41_3_fu_405_p0 <= mul_ln41_3_fu_405_p00(32 - 1 downto 0);
    mul_ln41_3_fu_405_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln41_1_fu_851_p3),64));
    mul_ln41_3_fu_405_p1 <= mul_ln41_3_fu_405_p10(32 - 1 downto 0);
    mul_ln41_3_fu_405_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_763_p8),64));
    mul_ln41_fu_393_p0 <= mul_ln41_fu_393_p00(32 - 1 downto 0);
    mul_ln41_fu_393_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln41_2_fu_883_p3),64));
    mul_ln41_fu_393_p1 <= mul_ln41_fu_393_p10(32 - 1 downto 0);
    mul_ln41_fu_393_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_801_p8),64));
    mul_ln42_1_fu_369_p0 <= zext_ln42_cast_reg_1550(32 - 1 downto 0);
    mul_ln42_1_fu_369_p1 <= mul_ln42_1_fu_369_p10(32 - 1 downto 0);
    mul_ln42_1_fu_369_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_725_p12),63));
    mul_ln42_2_fu_373_p0 <= zext_ln42_2_cast_reg_1544(32 - 1 downto 0);
    mul_ln42_2_fu_373_p1 <= zext_ln42_3_fu_1041_p1(32 - 1 downto 0);
    mul_ln42_3_fu_377_p0 <= zext_ln42_cast_reg_1550(32 - 1 downto 0);
    mul_ln42_3_fu_377_p1 <= mul_ln42_3_fu_377_p10(32 - 1 downto 0);
    mul_ln42_3_fu_377_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_522_p11),63));
    mul_ln42_4_fu_413_p0 <= mul_ln42_4_fu_413_p00(32 - 1 downto 0);
    mul_ln42_4_fu_413_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_781_p9),64));
    mul_ln42_4_fu_413_p1 <= zext_ln27_cast_reg_1558(32 - 1 downto 0);
    mul_ln42_5_fu_381_p0 <= zext_ln42_cast_reg_1550(32 - 1 downto 0);
    mul_ln42_5_fu_381_p1 <= zext_ln42_3_fu_1041_p1(32 - 1 downto 0);
    mul_ln42_6_fu_385_p0 <= zext_ln42_2_cast_reg_1544(32 - 1 downto 0);
    mul_ln42_6_fu_385_p1 <= mul_ln42_6_fu_385_p10(32 - 1 downto 0);
    mul_ln42_6_fu_385_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_819_p8),63));
    mul_ln42_7_fu_389_p0 <= zext_ln42_cast_reg_1550(32 - 1 downto 0);
    mul_ln42_7_fu_389_p1 <= mul_ln42_7_fu_389_p10(32 - 1 downto 0);
    mul_ln42_7_fu_389_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_781_p9),63));
    mul_ln42_fu_409_p0 <= mul_ln42_fu_409_p00(32 - 1 downto 0);
    mul_ln42_fu_409_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_522_p11),64));
    mul_ln42_fu_409_p1 <= zext_ln27_cast_reg_1558(32 - 1 downto 0);
    select_ln41_1_fu_960_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln41_3_fu_647_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln41_2_fu_974_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln41_fu_575_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln41_3_fu_988_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln41_1_fu_605_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln41_fu_896_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln41_2_fu_629_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln42_1_fu_1068_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln42_1_fu_611_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln42_fu_1015_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln42_fu_587_p2(0) = '1') else 
        ap_const_lv64_0;
    shl_ln2_fu_1007_p3 <= (mul_ln42_1_fu_369_p2 & ap_const_lv1_0);
    shl_ln41_1_fu_851_p3 <= (tmp_11_fu_832_p11 & ap_const_lv1_0);
    shl_ln41_2_fu_883_p3 <= (tmp_12_fu_864_p11 & ap_const_lv1_0);
    shl_ln41_3_fu_947_p3 <= (tmp_14_fu_928_p11 & ap_const_lv1_0);
    shl_ln41_fu_564_p2 <= std_logic_vector(shift_left(unsigned(tmp_fu_522_p11),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln42_1_fu_1047_p3 <= (mul_ln42_2_fu_373_p2 & ap_const_lv1_0);
    shl_ln42_2_fu_1060_p3 <= (mul_ln42_3_fu_377_p2 & ap_const_lv1_0);
    shl_ln42_3_fu_1094_p3 <= (mul_ln42_5_fu_381_p2 & ap_const_lv1_0);
    shl_ln42_4_fu_1119_p3 <= (mul_ln42_6_fu_385_p2 & ap_const_lv1_0);
    shl_ln42_5_fu_1132_p3 <= (mul_ln42_7_fu_389_p2 & ap_const_lv1_0);
    sub_ln36_fu_516_p2 <= std_logic_vector(signed(ap_const_lv4_9) - signed(i_1_fu_140));
    tmp_10_fu_819_p7 <= std_logic_vector(signed(ap_const_lv3_6) - signed(trunc_ln33_fu_512_p1));
    tmp_6_fu_725_p11 <= std_logic_vector(signed(ap_const_lv4_A) - signed(i_1_fu_140));
    tmp_7_fu_746_p9 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(trunc_ln33_fu_512_p1));
    tmp_9_fu_781_p8 <= (trunc_ln33_fu_512_p1 xor ap_const_lv3_7);
    trunc_ln33_fu_512_p1 <= i_1_fu_140(3 - 1 downto 0);
    zext_ln27_cast_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln27),64));
    zext_ln42_2_cast_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42_2),63));
    zext_ln42_3_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_746_p10),63));
    zext_ln42_cast_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln42),63));
end behav;
