-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fiat_25519_carry_mul_fiat_25519_carry_mul_Pipeline_VITIS_LOOP_55_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arr_8 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_7 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_6 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_5 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_4 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_3 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_2 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_4_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_6_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_8_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_5_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_7_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_9_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_4_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_6_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_8_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_5_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_7_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_9_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add129_4_128337_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add129_4_128337_out_ap_vld : OUT STD_LOGIC;
    add129_4336_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add129_4336_out_ap_vld : OUT STD_LOGIC;
    add129_3_146335_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add129_3_146335_out_ap_vld : OUT STD_LOGIC;
    add129_3334_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add129_3334_out_ap_vld : OUT STD_LOGIC;
    add129_2_164333_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add129_2_164333_out_ap_vld : OUT STD_LOGIC;
    add129_2332_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add129_2332_out_ap_vld : OUT STD_LOGIC;
    add129_1_182331_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add129_1_182331_out_ap_vld : OUT STD_LOGIC;
    add129_1330_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add129_1330_out_ap_vld : OUT STD_LOGIC;
    add129_1124329_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add129_1124329_out_ap_vld : OUT STD_LOGIC;
    add129328_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add129328_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fiat_25519_carry_mul_fiat_25519_carry_mul_Pipeline_VITIS_LOOP_55_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln67_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add129328_fu_160 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_1_fu_764_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal add129_1124329_fu_164 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_3_fu_845_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add129_1330_fu_168 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_6_fu_922_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add129_1_182331_fu_172 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_8_fu_1006_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add129_2332_fu_176 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_11_fu_1080_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add129_2_164333_fu_180 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_13_fu_1161_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add129_3334_fu_184 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_16_fu_1232_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add129_3_146335_fu_188 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_18_fu_1307_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add129_4336_fu_192 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_22_fu_1380_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add129_4_128337_fu_196 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_20_fu_1356_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i1_fu_200 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln67_fu_770_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln68_fu_448_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_fu_448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_fu_649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_1_fu_452_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_3_fu_745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_1_fu_452_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_2_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_2_fu_456_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_2_fu_456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_3_fu_460_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_3_fu_460_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_4_fu_464_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_4_fu_464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_5_fu_468_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_6_fu_884_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_5_fu_468_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_6_fu_472_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_6_fu_472_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_7_fu_476_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_7_fu_476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_8_fu_480_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_8_fu_480_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_9_fu_484_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_9_fu_1042_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_9_fu_484_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_10_fu_488_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_10_fu_488_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_11_fu_492_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_11_fu_492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_12_fu_496_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_12_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_13_fu_500_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_12_fu_1194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_13_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_14_fu_504_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_14_fu_504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_15_fu_508_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_15_fu_508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_16_fu_512_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_15_fu_1330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_16_fu_512_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_17_fu_516_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_17_fu_516_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_18_fu_520_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_18_fu_520_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_630_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_669_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_669_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_701_p10 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_701_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_726_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_1_fu_452_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_fu_448_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_fu_758_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln55_1_fu_626_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_788_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_788_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln67_1_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln68_fu_806_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_fu_812_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_3_fu_460_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_6_fu_825_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_fu_833_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_2_fu_456_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_2_fu_839_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_868_p8 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_868_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_4_fu_856_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln68_4_fu_464_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln68_fu_890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln68_5_fu_468_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_7_fu_902_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_2_fu_910_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_1_fu_896_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_5_fu_916_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln67_1_fu_928_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_946_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_946_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln67_2_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln68_1_fu_961_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_1_fu_967_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_6_fu_472_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_7_fu_476_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_8_fu_986_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_4_fu_994_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_3_fu_980_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_7_fu_1000_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_1029_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_1029_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_9_fu_1017_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln68_8_fu_480_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln68_1_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln68_9_fu_484_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_9_fu_1060_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_6_fu_1068_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_5_fu_1054_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_10_fu_1074_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln67_2_fu_1086_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln55_fu_622_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_1104_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_1104_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln67_3_fu_1092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln68_2_fu_1116_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_2_fu_1122_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_10_fu_488_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_11_fu_492_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_10_fu_1141_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_8_fu_1149_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_7_fu_1135_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_12_fu_1155_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_fu_618_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_1184_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_1184_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_14_fu_1172_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln68_12_fu_496_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln68_2_fu_1200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln68_13_fu_500_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_11_fu_1212_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_10_fu_1220_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_9_fu_1206_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_15_fu_1226_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln67_3_fu_1238_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln68_4_fu_1250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln68_3_fu_1256_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln67_4_fu_1244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln68_3_fu_1262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_4_fu_1268_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_14_fu_504_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_15_fu_508_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_12_fu_1287_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_12_fu_1295_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_11_fu_1281_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_17_fu_1301_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_5_fu_1324_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_19_fu_1318_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln68_3_fu_1336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln68_16_fu_512_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_13_fu_1342_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_13_fu_1350_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_17_fu_516_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_18_fu_520_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_15_fu_1368_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_14_fu_1362_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_21_fu_1374_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln68_11_fu_492_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_12_fu_496_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_15_fu_508_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_17_fu_516_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_3_fu_460_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_4_fu_464_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_7_fu_476_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_8_fu_480_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_fu_448_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_9_4_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_10_4_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_8_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_7_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_6_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_5_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_4_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_3_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32ns_32ns_64_1_1_U25 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_fu_448_p0,
        din1 => mul_ln68_fu_448_p1,
        dout => mul_ln68_fu_448_p2);

    mul_32ns_32ns_64_1_1_U26 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_1_fu_452_p0,
        din1 => mul_ln68_1_fu_452_p1,
        dout => mul_ln68_1_fu_452_p2);

    mul_32ns_32ns_64_1_1_U27 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_2_fu_456_p0,
        din1 => mul_ln68_2_fu_456_p1,
        dout => mul_ln68_2_fu_456_p2);

    mul_32ns_32ns_64_1_1_U28 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_3_fu_460_p0,
        din1 => mul_ln68_3_fu_460_p1,
        dout => mul_ln68_3_fu_460_p2);

    mul_32ns_32ns_64_1_1_U29 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_4_fu_464_p0,
        din1 => mul_ln68_4_fu_464_p1,
        dout => mul_ln68_4_fu_464_p2);

    mul_32ns_32ns_64_1_1_U30 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_5_fu_468_p0,
        din1 => mul_ln68_5_fu_468_p1,
        dout => mul_ln68_5_fu_468_p2);

    mul_32ns_32ns_64_1_1_U31 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_6_fu_472_p0,
        din1 => mul_ln68_6_fu_472_p1,
        dout => mul_ln68_6_fu_472_p2);

    mul_32ns_32ns_64_1_1_U32 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_7_fu_476_p0,
        din1 => mul_ln68_7_fu_476_p1,
        dout => mul_ln68_7_fu_476_p2);

    mul_32ns_32ns_64_1_1_U33 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_8_fu_480_p0,
        din1 => mul_ln68_8_fu_480_p1,
        dout => mul_ln68_8_fu_480_p2);

    mul_32ns_32ns_64_1_1_U34 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_9_fu_484_p0,
        din1 => mul_ln68_9_fu_484_p1,
        dout => mul_ln68_9_fu_484_p2);

    mul_32ns_32ns_64_1_1_U35 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_10_fu_488_p0,
        din1 => mul_ln68_10_fu_488_p1,
        dout => mul_ln68_10_fu_488_p2);

    mul_32ns_32ns_64_1_1_U36 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_11_fu_492_p0,
        din1 => mul_ln68_11_fu_492_p1,
        dout => mul_ln68_11_fu_492_p2);

    mul_32ns_32ns_64_1_1_U37 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_12_fu_496_p0,
        din1 => mul_ln68_12_fu_496_p1,
        dout => mul_ln68_12_fu_496_p2);

    mul_32ns_32ns_64_1_1_U38 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_13_fu_500_p0,
        din1 => mul_ln68_13_fu_500_p1,
        dout => mul_ln68_13_fu_500_p2);

    mul_32ns_32ns_64_1_1_U39 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_14_fu_504_p0,
        din1 => mul_ln68_14_fu_504_p1,
        dout => mul_ln68_14_fu_504_p2);

    mul_32ns_32ns_64_1_1_U40 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_15_fu_508_p0,
        din1 => mul_ln68_15_fu_508_p1,
        dout => mul_ln68_15_fu_508_p2);

    mul_32ns_32ns_64_1_1_U41 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_16_fu_512_p0,
        din1 => mul_ln68_16_fu_512_p1,
        dout => mul_ln68_16_fu_512_p2);

    mul_32ns_32ns_64_1_1_U42 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_17_fu_516_p0,
        din1 => mul_ln68_17_fu_516_p1,
        dout => mul_ln68_17_fu_516_p2);

    mul_32ns_32ns_64_1_1_U43 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_18_fu_520_p0,
        din1 => mul_ln68_18_fu_520_p1,
        dout => mul_ln68_18_fu_520_p2);

    mux_9_4_32_1_1_U44 : component fiat_25519_carry_mul_mux_9_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => arg1_r_reload,
        din1 => ap_const_lv32_0,
        din2 => arg1_r_2_reload,
        din3 => ap_const_lv32_0,
        din4 => arg1_r_4_reload,
        din5 => ap_const_lv32_0,
        din6 => arg1_r_6_reload,
        din7 => ap_const_lv32_0,
        din8 => arg1_r_8_reload,
        din9 => i1_fu_200,
        dout => tmp_fu_630_p11);

    mux_10_4_32_1_1_U45 : component fiat_25519_carry_mul_mux_10_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => arg2_r_1_reload,
        din2 => ap_const_lv32_0,
        din3 => arg2_r_3_reload,
        din4 => ap_const_lv32_0,
        din5 => arg2_r_5_reload,
        din6 => ap_const_lv32_0,
        din7 => arg2_r_7_reload,
        din8 => ap_const_lv32_0,
        din9 => arg2_r_9_reload,
        din10 => tmp_1_fu_669_p11,
        dout => tmp_1_fu_669_p12);

    mux_9_4_32_1_1_U46 : component fiat_25519_carry_mul_mux_9_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => arg2_r_reload,
        din1 => ap_const_lv32_0,
        din2 => arg2_r_2_reload,
        din3 => ap_const_lv32_0,
        din4 => arg2_r_4_reload,
        din5 => ap_const_lv32_0,
        din6 => arg2_r_6_reload,
        din7 => ap_const_lv32_0,
        din8 => arg2_r_8_reload,
        din9 => tmp_2_fu_701_p10,
        dout => tmp_2_fu_701_p11);

    mux_9_4_32_1_1_U47 : component fiat_25519_carry_mul_mux_9_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => arg1_r_1_reload,
        din1 => ap_const_lv32_0,
        din2 => arg1_r_3_reload,
        din3 => ap_const_lv32_0,
        din4 => arg1_r_5_reload,
        din5 => ap_const_lv32_0,
        din6 => arg1_r_7_reload,
        din7 => ap_const_lv32_0,
        din8 => arg1_r_9_reload,
        din9 => i1_fu_200,
        dout => tmp_3_fu_726_p11);

    mux_8_3_32_1_1_U48 : component fiat_25519_carry_mul_mux_8_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => arg2_r_1_reload,
        din2 => ap_const_lv32_0,
        din3 => arg2_r_3_reload,
        din4 => ap_const_lv32_0,
        din5 => arg2_r_5_reload,
        din6 => ap_const_lv32_0,
        din7 => arg2_r_7_reload,
        din8 => tmp_4_fu_788_p9,
        dout => tmp_4_fu_788_p10);

    mux_7_3_32_1_1_U49 : component fiat_25519_carry_mul_mux_7_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => arg2_r_reload,
        din1 => ap_const_lv32_0,
        din2 => arg2_r_2_reload,
        din3 => ap_const_lv32_0,
        din4 => arg2_r_4_reload,
        din5 => ap_const_lv32_0,
        din6 => arg2_r_6_reload,
        din7 => tmp_5_fu_868_p8,
        dout => tmp_5_fu_868_p9);

    mux_6_3_32_1_1_U50 : component fiat_25519_carry_mul_mux_6_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => arg2_r_1_reload,
        din2 => ap_const_lv32_0,
        din3 => arg2_r_3_reload,
        din4 => ap_const_lv32_0,
        din5 => arg2_r_5_reload,
        din6 => tmp_6_fu_946_p7,
        dout => tmp_6_fu_946_p8);

    mux_5_3_32_1_1_U51 : component fiat_25519_carry_mul_mux_5_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => arg2_r_reload,
        din1 => ap_const_lv32_0,
        din2 => arg2_r_2_reload,
        din3 => ap_const_lv32_0,
        din4 => arg2_r_4_reload,
        din5 => tmp_7_fu_1029_p6,
        dout => tmp_7_fu_1029_p7);

    mux_4_2_32_1_1_U52 : component fiat_25519_carry_mul_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => arg2_r_1_reload,
        din2 => ap_const_lv32_0,
        din3 => arg2_r_3_reload,
        din4 => tmp_8_fu_1104_p5,
        dout => tmp_8_fu_1104_p6);

    mux_3_2_32_1_1_U53 : component fiat_25519_carry_mul_mux_3_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => arg2_r_reload,
        din1 => ap_const_lv32_0,
        din2 => arg2_r_2_reload,
        din3 => tmp_9_fu_1184_p4,
        dout => tmp_9_fu_1184_p5);

    flow_control_loop_pipe_sequential_init_U : component fiat_25519_carry_mul_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    add129328_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add129328_fu_160 <= ap_const_lv64_0;
                elsif (((icmp_ln67_fu_582_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add129328_fu_160 <= add_ln68_1_fu_764_p2;
                end if;
            end if; 
        end if;
    end process;

    add129_1124329_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add129_1124329_fu_164 <= arr;
                elsif (((icmp_ln67_fu_582_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add129_1124329_fu_164 <= add_ln68_3_fu_845_p2;
                end if;
            end if; 
        end if;
    end process;

    add129_1330_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add129_1330_fu_168 <= arr_1;
                elsif (((icmp_ln67_fu_582_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add129_1330_fu_168 <= add_ln68_6_fu_922_p2;
                end if;
            end if; 
        end if;
    end process;

    add129_1_182331_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add129_1_182331_fu_172 <= arr_2;
                elsif (((icmp_ln67_fu_582_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add129_1_182331_fu_172 <= add_ln68_8_fu_1006_p2;
                end if;
            end if; 
        end if;
    end process;

    add129_2332_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add129_2332_fu_176 <= arr_3;
                elsif (((icmp_ln67_fu_582_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add129_2332_fu_176 <= add_ln68_11_fu_1080_p2;
                end if;
            end if; 
        end if;
    end process;

    add129_2_164333_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add129_2_164333_fu_180 <= arr_4;
                elsif (((icmp_ln67_fu_582_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add129_2_164333_fu_180 <= add_ln68_13_fu_1161_p2;
                end if;
            end if; 
        end if;
    end process;

    add129_3334_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add129_3334_fu_184 <= arr_5;
                elsif (((icmp_ln67_fu_582_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add129_3334_fu_184 <= add_ln68_16_fu_1232_p2;
                end if;
            end if; 
        end if;
    end process;

    add129_3_146335_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add129_3_146335_fu_188 <= arr_6;
                elsif (((icmp_ln67_fu_582_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add129_3_146335_fu_188 <= add_ln68_18_fu_1307_p2;
                end if;
            end if; 
        end if;
    end process;

    add129_4336_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add129_4336_fu_192 <= arr_7;
                elsif (((icmp_ln67_fu_582_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add129_4336_fu_192 <= add_ln68_22_fu_1380_p2;
                end if;
            end if; 
        end if;
    end process;

    add129_4_128337_fu_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add129_4_128337_fu_196 <= arr_8;
                elsif (((icmp_ln67_fu_582_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add129_4_128337_fu_196 <= add_ln68_20_fu_1356_p2;
                end if;
            end if; 
        end if;
    end process;

    i1_fu_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i1_fu_200 <= ap_const_lv4_0;
                elsif (((icmp_ln67_fu_582_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i1_fu_200 <= add_ln67_fu_770_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add129328_out <= add129328_fu_160;

    add129328_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln67_fu_582_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln67_fu_582_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add129328_out_ap_vld <= ap_const_logic_1;
        else 
            add129328_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add129_1124329_out <= add129_1124329_fu_164;

    add129_1124329_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln67_fu_582_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln67_fu_582_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add129_1124329_out_ap_vld <= ap_const_logic_1;
        else 
            add129_1124329_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add129_1330_out <= add129_1330_fu_168;

    add129_1330_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln67_fu_582_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln67_fu_582_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add129_1330_out_ap_vld <= ap_const_logic_1;
        else 
            add129_1330_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add129_1_182331_out <= add129_1_182331_fu_172;

    add129_1_182331_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln67_fu_582_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln67_fu_582_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add129_1_182331_out_ap_vld <= ap_const_logic_1;
        else 
            add129_1_182331_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add129_2332_out <= add129_2332_fu_176;

    add129_2332_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln67_fu_582_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln67_fu_582_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add129_2332_out_ap_vld <= ap_const_logic_1;
        else 
            add129_2332_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add129_2_164333_out <= add129_2_164333_fu_180;

    add129_2_164333_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln67_fu_582_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln67_fu_582_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add129_2_164333_out_ap_vld <= ap_const_logic_1;
        else 
            add129_2_164333_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add129_3334_out <= add129_3334_fu_184;

    add129_3334_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln67_fu_582_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln67_fu_582_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add129_3334_out_ap_vld <= ap_const_logic_1;
        else 
            add129_3334_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add129_3_146335_out <= add129_3_146335_fu_188;

    add129_3_146335_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln67_fu_582_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln67_fu_582_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add129_3_146335_out_ap_vld <= ap_const_logic_1;
        else 
            add129_3_146335_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add129_4336_out <= add129_4336_fu_192;

    add129_4336_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln67_fu_582_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln67_fu_582_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add129_4336_out_ap_vld <= ap_const_logic_1;
        else 
            add129_4336_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add129_4_128337_out <= add129_4_128337_fu_196;

    add129_4_128337_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln67_fu_582_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln67_fu_582_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add129_4_128337_out_ap_vld <= ap_const_logic_1;
        else 
            add129_4_128337_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln67_1_fu_928_p2 <= std_logic_vector(unsigned(i1_fu_200) + unsigned(ap_const_lv4_4));
    add_ln67_2_fu_1086_p2 <= std_logic_vector(unsigned(i1_fu_200) + unsigned(ap_const_lv4_6));
    add_ln67_3_fu_1238_p2 <= std_logic_vector(unsigned(zext_ln67_fu_618_p1) + unsigned(ap_const_lv5_8));
    add_ln67_fu_770_p2 <= std_logic_vector(unsigned(i1_fu_200) + unsigned(ap_const_lv4_2));
    add_ln68_10_fu_1074_p2 <= std_logic_vector(unsigned(and_ln68_6_fu_1068_p2) + unsigned(and_ln68_5_fu_1054_p2));
    add_ln68_11_fu_1080_p2 <= std_logic_vector(unsigned(add129_2332_fu_176) + unsigned(add_ln68_10_fu_1074_p2));
    add_ln68_12_fu_1155_p2 <= std_logic_vector(unsigned(and_ln68_8_fu_1149_p2) + unsigned(and_ln68_7_fu_1135_p2));
    add_ln68_13_fu_1161_p2 <= std_logic_vector(unsigned(add129_2_164333_fu_180) + unsigned(add_ln68_12_fu_1155_p2));
    add_ln68_14_fu_1172_p2 <= std_logic_vector(unsigned(zext_ln67_fu_618_p1) + unsigned(ap_const_lv5_7));
    add_ln68_15_fu_1226_p2 <= std_logic_vector(unsigned(and_ln68_10_fu_1220_p2) + unsigned(and_ln68_9_fu_1206_p2));
    add_ln68_16_fu_1232_p2 <= std_logic_vector(unsigned(add129_3334_fu_184) + unsigned(add_ln68_15_fu_1226_p2));
    add_ln68_17_fu_1301_p2 <= std_logic_vector(unsigned(and_ln68_12_fu_1295_p2) + unsigned(and_ln68_11_fu_1281_p2));
    add_ln68_18_fu_1307_p2 <= std_logic_vector(unsigned(add129_3_146335_fu_188) + unsigned(add_ln68_17_fu_1301_p2));
    add_ln68_19_fu_1318_p2 <= std_logic_vector(unsigned(zext_ln67_fu_618_p1) + unsigned(ap_const_lv5_9));
    add_ln68_1_fu_764_p2 <= std_logic_vector(unsigned(add129328_fu_160) + unsigned(add_ln68_fu_758_p2));
    add_ln68_20_fu_1356_p2 <= std_logic_vector(unsigned(and_ln68_13_fu_1350_p2) + unsigned(add129_4_128337_fu_196));
    add_ln68_21_fu_1374_p2 <= std_logic_vector(unsigned(and_ln68_15_fu_1368_p2) + unsigned(and_ln68_14_fu_1362_p2));
    add_ln68_22_fu_1380_p2 <= std_logic_vector(unsigned(add129_4336_fu_192) + unsigned(add_ln68_21_fu_1374_p2));
    add_ln68_2_fu_839_p2 <= std_logic_vector(unsigned(and_ln68_fu_833_p2) + unsigned(mul_ln68_2_fu_456_p2));
    add_ln68_3_fu_845_p2 <= std_logic_vector(unsigned(add129_1124329_fu_164) + unsigned(add_ln68_2_fu_839_p2));
    add_ln68_4_fu_856_p2 <= std_logic_vector(unsigned(i1_fu_200) + unsigned(ap_const_lv4_3));
    add_ln68_5_fu_916_p2 <= std_logic_vector(unsigned(and_ln68_2_fu_910_p2) + unsigned(and_ln68_1_fu_896_p2));
    add_ln68_6_fu_922_p2 <= std_logic_vector(unsigned(add129_1330_fu_168) + unsigned(add_ln68_5_fu_916_p2));
    add_ln68_7_fu_1000_p2 <= std_logic_vector(unsigned(and_ln68_4_fu_994_p2) + unsigned(and_ln68_3_fu_980_p2));
    add_ln68_8_fu_1006_p2 <= std_logic_vector(unsigned(add129_1_182331_fu_172) + unsigned(add_ln68_7_fu_1000_p2));
    add_ln68_9_fu_1017_p2 <= std_logic_vector(unsigned(i1_fu_200) + unsigned(ap_const_lv4_5));
    add_ln68_fu_758_p2 <= std_logic_vector(unsigned(mul_ln68_1_fu_452_p2) + unsigned(mul_ln68_fu_448_p2));
    and_ln68_10_fu_1220_p2 <= (select_ln68_11_fu_1212_p3 and mul_ln68_13_fu_500_p2);
    and_ln68_11_fu_1281_p2 <= (select_ln68_11_fu_1212_p3 and mul_ln68_14_fu_504_p2);
    and_ln68_12_fu_1295_p2 <= (select_ln68_12_fu_1287_p3 and mul_ln68_15_fu_508_p2);
    and_ln68_13_fu_1350_p2 <= (select_ln68_13_fu_1342_p3 and mul_ln68_16_fu_512_p2);
    and_ln68_14_fu_1362_p2 <= (select_ln68_12_fu_1287_p3 and mul_ln68_17_fu_516_p2);
    and_ln68_15_fu_1368_p2 <= (select_ln68_13_fu_1342_p3 and mul_ln68_18_fu_520_p2);
    and_ln68_1_fu_896_p2 <= (select_ln68_6_fu_825_p3 and mul_ln68_4_fu_464_p2);
    and_ln68_2_fu_910_p2 <= (select_ln68_7_fu_902_p3 and mul_ln68_5_fu_468_p2);
    and_ln68_3_fu_980_p2 <= (select_ln68_7_fu_902_p3 and mul_ln68_6_fu_472_p2);
    and_ln68_4_fu_994_p2 <= (select_ln68_8_fu_986_p3 and mul_ln68_7_fu_476_p2);
    and_ln68_5_fu_1054_p2 <= (select_ln68_8_fu_986_p3 and mul_ln68_8_fu_480_p2);
    and_ln68_6_fu_1068_p2 <= (select_ln68_9_fu_1060_p3 and mul_ln68_9_fu_484_p2);
    and_ln68_7_fu_1135_p2 <= (select_ln68_9_fu_1060_p3 and mul_ln68_10_fu_488_p2);
    and_ln68_8_fu_1149_p2 <= (select_ln68_10_fu_1141_p3 and mul_ln68_11_fu_492_p2);
    and_ln68_9_fu_1206_p2 <= (select_ln68_10_fu_1141_p3 and mul_ln68_12_fu_496_p2);
    and_ln68_fu_833_p2 <= (select_ln68_6_fu_825_p3 and mul_ln68_3_fu_460_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln67_fu_582_p2)
    begin
        if (((icmp_ln67_fu_582_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln67_1_fu_776_p2 <= "1" when (unsigned(add_ln67_fu_770_p2) < unsigned(ap_const_lv4_A)) else "0";
    icmp_ln67_2_fu_934_p2 <= "1" when (unsigned(add_ln67_1_fu_928_p2) < unsigned(ap_const_lv4_A)) else "0";
    icmp_ln67_3_fu_1092_p2 <= "1" when (unsigned(add_ln67_2_fu_1086_p2) < unsigned(ap_const_lv4_A)) else "0";
    icmp_ln67_4_fu_1244_p2 <= "1" when (unsigned(add_ln67_3_fu_1238_p2) < unsigned(ap_const_lv5_A)) else "0";
    icmp_ln67_fu_582_p2 <= "1" when (unsigned(i1_fu_200) < unsigned(ap_const_lv4_A)) else "0";
    icmp_ln68_1_fu_1048_p2 <= "1" when (unsigned(add_ln68_9_fu_1017_p2) < unsigned(ap_const_lv4_A)) else "0";
    icmp_ln68_2_fu_1200_p2 <= "1" when (unsigned(add_ln68_14_fu_1172_p2) < unsigned(ap_const_lv5_A)) else "0";
    icmp_ln68_3_fu_1336_p2 <= "1" when (unsigned(add_ln68_19_fu_1318_p2) < unsigned(ap_const_lv5_A)) else "0";
    icmp_ln68_4_fu_1250_p2 <= "1" when (i1_fu_200 = ap_const_lv4_8) else "0";
    icmp_ln68_fu_890_p2 <= "1" when (unsigned(add_ln68_4_fu_856_p2) < unsigned(ap_const_lv4_A)) else "0";
    mul_ln68_10_fu_488_p0 <= zext_ln68_9_fu_1042_p1(32 - 1 downto 0);
    mul_ln68_10_fu_488_p1 <= zext_ln68_fu_649_p1(32 - 1 downto 0);
    mul_ln68_11_fu_492_p0 <= mul_ln68_11_fu_492_p00(32 - 1 downto 0);
    mul_ln68_11_fu_492_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_2_fu_1122_p3),64));
    mul_ln68_11_fu_492_p1 <= zext_ln68_3_fu_745_p1(32 - 1 downto 0);
    mul_ln68_12_fu_496_p0 <= mul_ln68_12_fu_496_p00(32 - 1 downto 0);
    mul_ln68_12_fu_496_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_1104_p6),64));
    mul_ln68_12_fu_496_p1 <= zext_ln68_fu_649_p1(32 - 1 downto 0);
    mul_ln68_13_fu_500_p0 <= zext_ln68_12_fu_1194_p1(32 - 1 downto 0);
    mul_ln68_13_fu_500_p1 <= zext_ln68_3_fu_745_p1(32 - 1 downto 0);
    mul_ln68_14_fu_504_p0 <= zext_ln68_12_fu_1194_p1(32 - 1 downto 0);
    mul_ln68_14_fu_504_p1 <= zext_ln68_fu_649_p1(32 - 1 downto 0);
    mul_ln68_15_fu_508_p0 <= mul_ln68_15_fu_508_p00(32 - 1 downto 0);
    mul_ln68_15_fu_508_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_4_fu_1268_p3),64));
    mul_ln68_15_fu_508_p1 <= zext_ln68_3_fu_745_p1(32 - 1 downto 0);
    mul_ln68_16_fu_512_p0 <= zext_ln68_15_fu_1330_p1(32 - 1 downto 0);
    mul_ln68_16_fu_512_p1 <= zext_ln68_fu_649_p1(32 - 1 downto 0);
    mul_ln68_17_fu_516_p0 <= mul_ln68_17_fu_516_p00(32 - 1 downto 0);
    mul_ln68_17_fu_516_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_3_fu_1256_p3),64));
    mul_ln68_17_fu_516_p1 <= zext_ln68_fu_649_p1(32 - 1 downto 0);
    mul_ln68_18_fu_520_p0 <= zext_ln68_15_fu_1330_p1(32 - 1 downto 0);
    mul_ln68_18_fu_520_p1 <= zext_ln68_3_fu_745_p1(32 - 1 downto 0);
    mul_ln68_1_fu_452_p0 <= zext_ln68_3_fu_745_p1(32 - 1 downto 0);
    mul_ln68_1_fu_452_p1 <= zext_ln68_2_fu_720_p1(32 - 1 downto 0);
    mul_ln68_2_fu_456_p0 <= zext_ln68_2_fu_720_p1(32 - 1 downto 0);
    mul_ln68_2_fu_456_p1 <= zext_ln68_fu_649_p1(32 - 1 downto 0);
    mul_ln68_3_fu_460_p0 <= mul_ln68_3_fu_460_p00(32 - 1 downto 0);
    mul_ln68_3_fu_460_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_fu_812_p3),64));
    mul_ln68_3_fu_460_p1 <= zext_ln68_3_fu_745_p1(32 - 1 downto 0);
    mul_ln68_4_fu_464_p0 <= mul_ln68_4_fu_464_p00(32 - 1 downto 0);
    mul_ln68_4_fu_464_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_788_p10),64));
    mul_ln68_4_fu_464_p1 <= zext_ln68_fu_649_p1(32 - 1 downto 0);
    mul_ln68_5_fu_468_p0 <= zext_ln68_6_fu_884_p1(32 - 1 downto 0);
    mul_ln68_5_fu_468_p1 <= zext_ln68_3_fu_745_p1(32 - 1 downto 0);
    mul_ln68_6_fu_472_p0 <= zext_ln68_6_fu_884_p1(32 - 1 downto 0);
    mul_ln68_6_fu_472_p1 <= zext_ln68_fu_649_p1(32 - 1 downto 0);
    mul_ln68_7_fu_476_p0 <= mul_ln68_7_fu_476_p00(32 - 1 downto 0);
    mul_ln68_7_fu_476_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_1_fu_967_p3),64));
    mul_ln68_7_fu_476_p1 <= zext_ln68_3_fu_745_p1(32 - 1 downto 0);
    mul_ln68_8_fu_480_p0 <= mul_ln68_8_fu_480_p00(32 - 1 downto 0);
    mul_ln68_8_fu_480_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_946_p8),64));
    mul_ln68_8_fu_480_p1 <= zext_ln68_fu_649_p1(32 - 1 downto 0);
    mul_ln68_9_fu_484_p0 <= zext_ln68_9_fu_1042_p1(32 - 1 downto 0);
    mul_ln68_9_fu_484_p1 <= zext_ln68_3_fu_745_p1(32 - 1 downto 0);
    mul_ln68_fu_448_p0 <= mul_ln68_fu_448_p00(32 - 1 downto 0);
    mul_ln68_fu_448_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_669_p12),64));
    mul_ln68_fu_448_p1 <= zext_ln68_fu_649_p1(32 - 1 downto 0);
    select_ln68_10_fu_1141_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln67_3_fu_1092_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_11_fu_1212_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln68_2_fu_1200_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_12_fu_1287_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln67_4_fu_1244_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_13_fu_1342_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln68_3_fu_1336_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_1_fu_967_p3 <= 
        shl_ln68_1_fu_961_p2 when (icmp_ln67_2_fu_934_p2(0) = '1') else 
        tmp_6_fu_946_p8;
    select_ln68_2_fu_1122_p3 <= 
        shl_ln68_2_fu_1116_p2 when (icmp_ln67_3_fu_1092_p2(0) = '1') else 
        tmp_8_fu_1104_p6;
    select_ln68_3_fu_1256_p3 <= 
        arg2_r_9_reload when (icmp_ln68_4_fu_1250_p2(0) = '1') else 
        arg2_r_1_reload;
    select_ln68_4_fu_1268_p3 <= 
        shl_ln68_3_fu_1262_p2 when (icmp_ln67_4_fu_1244_p2(0) = '1') else 
        select_ln68_3_fu_1256_p3;
    select_ln68_5_fu_1324_p3 <= 
        arg2_r_8_reload when (icmp_ln68_4_fu_1250_p2(0) = '1') else 
        arg2_r_reload;
    select_ln68_6_fu_825_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln67_1_fu_776_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_7_fu_902_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln68_fu_890_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_8_fu_986_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln67_2_fu_934_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_9_fu_1060_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln68_1_fu_1048_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_fu_812_p3 <= 
        shl_ln68_fu_806_p2 when (icmp_ln67_1_fu_776_p2(0) = '1') else 
        tmp_4_fu_788_p10;
    shl_ln68_1_fu_961_p2 <= std_logic_vector(shift_left(unsigned(tmp_6_fu_946_p8),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln68_2_fu_1116_p2 <= std_logic_vector(shift_left(unsigned(tmp_8_fu_1104_p6),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln68_3_fu_1262_p2 <= std_logic_vector(shift_left(unsigned(select_ln68_3_fu_1256_p3),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln68_fu_806_p2 <= std_logic_vector(shift_left(unsigned(tmp_4_fu_788_p10),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_1_fu_669_p11 <= std_logic_vector(signed(ap_const_lv4_9) - signed(i1_fu_200));
    tmp_2_fu_701_p10 <= std_logic_vector(signed(ap_const_lv4_8) - signed(i1_fu_200));
    tmp_4_fu_788_p9 <= (trunc_ln55_1_fu_626_p1 xor ap_const_lv3_7);
    tmp_5_fu_868_p8 <= std_logic_vector(signed(ap_const_lv3_6) - signed(trunc_ln55_1_fu_626_p1));
    tmp_6_fu_946_p7 <= std_logic_vector(signed(ap_const_lv3_5) - signed(trunc_ln55_1_fu_626_p1));
    tmp_7_fu_1029_p6 <= std_logic_vector(signed(ap_const_lv3_4) - signed(trunc_ln55_1_fu_626_p1));
    tmp_8_fu_1104_p5 <= (trunc_ln55_fu_622_p1 xor ap_const_lv2_3);
    tmp_9_fu_1184_p4 <= std_logic_vector(signed(ap_const_lv2_2) - signed(trunc_ln55_fu_622_p1));
    trunc_ln55_1_fu_626_p1 <= i1_fu_200(3 - 1 downto 0);
    trunc_ln55_fu_622_p1 <= i1_fu_200(2 - 1 downto 0);
    zext_ln67_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_fu_200),5));
    zext_ln68_12_fu_1194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_1184_p5),64));
    zext_ln68_15_fu_1330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_5_fu_1324_p3),64));
    zext_ln68_2_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_701_p11),64));
    zext_ln68_3_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_726_p11),64));
    zext_ln68_6_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_868_p9),64));
    zext_ln68_9_fu_1042_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_1029_p7),64));
    zext_ln68_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_630_p11),64));
end behav;
