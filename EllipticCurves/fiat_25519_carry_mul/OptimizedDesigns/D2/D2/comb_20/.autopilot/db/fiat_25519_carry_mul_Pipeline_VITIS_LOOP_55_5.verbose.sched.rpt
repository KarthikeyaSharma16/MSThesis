

================================================================
== Vitis HLS Report for 'fiat_25519_carry_mul_Pipeline_VITIS_LOOP_55_5'
================================================================
* Date:           Thu May  9 14:14:15 2024

* Version:        2023.1.1 (Build 3869133 on Jun 15 2023)
* Project:        D2
* Solution:       comb_20 (Vivado IP Flow Target)
* Product family: zynquplus
* Target device:  xczu9eg-ffvb1156-2-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  6.975 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |       12|       12|  0.120 us|  0.120 us|   12|   12|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- VITIS_LOOP_55_5  |       10|       10|         1|          1|          1|    10|       yes|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 2


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 2
* Pipeline : 1
  Pipeline-0 : II = 1, D = 2, States = { 1 2 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 0.42>
ST_1 : Operation 4 [1/1] (0.00ns)   --->   "%add12948 = alloca i32 1"   --->   Operation 4 'alloca' 'add12948' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%add129_149 = alloca i32 1"   --->   Operation 5 'alloca' 'add129_149' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%add129_250 = alloca i32 1"   --->   Operation 6 'alloca' 'add129_250' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%add129_351 = alloca i32 1"   --->   Operation 7 'alloca' 'add129_351' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%add129_452 = alloca i32 1"   --->   Operation 8 'alloca' 'add129_452' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%add129_553 = alloca i32 1"   --->   Operation 9 'alloca' 'add129_553' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%add129_654 = alloca i32 1"   --->   Operation 10 'alloca' 'add129_654' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%add129_755 = alloca i32 1"   --->   Operation 11 'alloca' 'add129_755' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%add129_856 = alloca i32 1"   --->   Operation 12 'alloca' 'add129_856' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%add129_957 = alloca i32 1"   --->   Operation 13 'alloca' 'add129_957' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%i1 = alloca i32 1"   --->   Operation 14 'alloca' 'i1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%arg2_r_9_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_9_reload"   --->   Operation 15 'read' 'arg2_r_9_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%arg2_r_8_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_8_reload"   --->   Operation 16 'read' 'arg2_r_8_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%arg2_r_7_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_7_reload"   --->   Operation 17 'read' 'arg2_r_7_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%arg2_r_6_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_6_reload"   --->   Operation 18 'read' 'arg2_r_6_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%arg2_r_5_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_5_reload"   --->   Operation 19 'read' 'arg2_r_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%arg2_r_4_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_4_reload"   --->   Operation 20 'read' 'arg2_r_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%arg2_r_3_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_3_reload"   --->   Operation 21 'read' 'arg2_r_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%arg2_r_2_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_2_reload"   --->   Operation 22 'read' 'arg2_r_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%arg2_r_1_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_1_reload"   --->   Operation 23 'read' 'arg2_r_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%arg2_r_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_reload"   --->   Operation 24 'read' 'arg2_r_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%arg1_r_9_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_9_reload"   --->   Operation 25 'read' 'arg1_r_9_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%arg1_r_8_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_8_reload"   --->   Operation 26 'read' 'arg1_r_8_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%arg1_r_7_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_7_reload"   --->   Operation 27 'read' 'arg1_r_7_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%arg1_r_6_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_6_reload"   --->   Operation 28 'read' 'arg1_r_6_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%arg1_r_5_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_5_reload"   --->   Operation 29 'read' 'arg1_r_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%arg1_r_4_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_4_reload"   --->   Operation 30 'read' 'arg1_r_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%arg1_r_3_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_3_reload"   --->   Operation 31 'read' 'arg1_r_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%arg1_r_2_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_2_reload"   --->   Operation 32 'read' 'arg1_r_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%arg1_r_1_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_1_reload"   --->   Operation 33 'read' 'arg1_r_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%arg1_r_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_reload"   --->   Operation 34 'read' 'arg1_r_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%add59_12859_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add59_12859_reload"   --->   Operation 35 'read' 'add59_12859_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%add59_24660_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add59_24660_reload"   --->   Operation 36 'read' 'add59_24660_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%add59_361_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add59_361_reload"   --->   Operation 37 'read' 'add59_361_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%add59_462_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add59_462_reload"   --->   Operation 38 'read' 'add59_462_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "%add59_563_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add59_563_reload"   --->   Operation 39 'read' 'add59_563_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "%add59_664_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add59_664_reload"   --->   Operation 40 'read' 'add59_664_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.00ns)   --->   "%add59_765_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add59_765_reload"   --->   Operation 41 'read' 'add59_765_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 42 [1/1] (0.00ns)   --->   "%add59_866_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add59_866_reload"   --->   Operation 42 'read' 'add59_866_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (0.00ns)   --->   "%add59_967_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add59_967_reload"   --->   Operation 43 'read' 'add59_967_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 44 [1/1] (0.42ns)   --->   "%store_ln0 = store i4 0, i4 %i1"   --->   Operation 44 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 45 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add59_967_reload_read, i64 %add129_957"   --->   Operation 45 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 46 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add59_866_reload_read, i64 %add129_856"   --->   Operation 46 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 47 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add59_765_reload_read, i64 %add129_755"   --->   Operation 47 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 48 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add59_664_reload_read, i64 %add129_654"   --->   Operation 48 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 49 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add59_563_reload_read, i64 %add129_553"   --->   Operation 49 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 50 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add59_462_reload_read, i64 %add129_452"   --->   Operation 50 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 51 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add59_361_reload_read, i64 %add129_351"   --->   Operation 51 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 52 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add59_24660_reload_read, i64 %add129_250"   --->   Operation 52 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 53 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add59_12859_reload_read, i64 %add129_149"   --->   Operation 53 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 54 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %add12948"   --->   Operation 54 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 55 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.body91"   --->   Operation 55 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 6.97>
ST_2 : Operation 56 [1/1] (0.00ns)   --->   "%i1_1 = load i4 %i1"   --->   Operation 56 'load' 'i1_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 57 [1/1] (0.79ns)   --->   "%icmp_ln67 = icmp_eq  i4 %i1_1, i4 10" [d2.cpp:67]   --->   Operation 57 'icmp' 'icmp_ln67' <Predicate = true> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 58 [1/1] (0.79ns)   --->   "%add_ln67 = add i4 %i1_1, i4 1" [d2.cpp:67]   --->   Operation 58 'add' 'add_ln67' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 59 [1/1] (0.00ns)   --->   "%br_ln55 = br i1 %icmp_ln67, void %for.body91.split, void %for.end141.exitStub" [d2.cpp:55]   --->   Operation 59 'br' 'br_ln55' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 60 [1/1] (0.00ns)   --->   "%add12948_load = load i64 %add12948" [d2.cpp:68]   --->   Operation 60 'load' 'add12948_load' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 61 [1/1] (0.00ns)   --->   "%add129_149_load = load i64 %add129_149" [d2.cpp:68]   --->   Operation 61 'load' 'add129_149_load' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 62 [1/1] (0.00ns)   --->   "%add129_250_load = load i64 %add129_250" [d2.cpp:68]   --->   Operation 62 'load' 'add129_250_load' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 63 [1/1] (0.00ns)   --->   "%add129_351_load = load i64 %add129_351" [d2.cpp:68]   --->   Operation 63 'load' 'add129_351_load' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 64 [1/1] (0.00ns)   --->   "%add129_452_load = load i64 %add129_452" [d2.cpp:68]   --->   Operation 64 'load' 'add129_452_load' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 65 [1/1] (0.00ns)   --->   "%add129_553_load = load i64 %add129_553" [d2.cpp:68]   --->   Operation 65 'load' 'add129_553_load' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 66 [1/1] (0.00ns)   --->   "%add129_654_load = load i64 %add129_654" [d2.cpp:68]   --->   Operation 66 'load' 'add129_654_load' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 67 [1/1] (0.00ns)   --->   "%add129_755_load = load i64 %add129_755" [d2.cpp:68]   --->   Operation 67 'load' 'add129_755_load' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 68 [1/1] (0.00ns)   --->   "%add129_856_load = load i64 %add129_856" [d2.cpp:68]   --->   Operation 68 'load' 'add129_856_load' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 69 [1/1] (0.00ns)   --->   "%add129_957_load = load i64 %add129_957" [d2.cpp:68]   --->   Operation 69 'load' 'add129_957_load' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 70 [1/1] (0.00ns)   --->   "%zext_ln67 = zext i4 %i1_1" [d2.cpp:67]   --->   Operation 70 'zext' 'zext_ln67' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 71 [1/1] (0.00ns)   --->   "%specpipeline_ln57 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty_2" [d2.cpp:57]   --->   Operation 71 'specpipeline' 'specpipeline_ln57' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 72 [1/1] (0.00ns)   --->   "%speclooptripcount_ln55 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 10, i64 10, i64 10" [d2.cpp:55]   --->   Operation 72 'speclooptripcount' 'speclooptripcount_ln55' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 73 [1/1] (0.00ns)   --->   "%specloopname_ln55 = specloopname void @_ssdm_op_SpecLoopName, void @empty_7" [d2.cpp:55]   --->   Operation 73 'specloopname' 'specloopname_ln55' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 74 [1/1] (0.00ns)   --->   "%trunc_ln55 = trunc i4 %i1_1" [d2.cpp:55]   --->   Operation 74 'trunc' 'trunc_ln55' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 75 [1/1] (0.00ns)   --->   "%trunc_ln55_1 = trunc i4 %i1_1" [d2.cpp:55]   --->   Operation 75 'trunc' 'trunc_ln55_1' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 76 [1/1] (0.00ns)   --->   "%empty = trunc i4 %i1_1"   --->   Operation 76 'trunc' 'empty' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 77 [1/1] (0.75ns)   --->   "%tmp_2 = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 %arg1_r_reload_read, i32 %arg1_r_1_reload_read, i32 %arg1_r_2_reload_read, i32 %arg1_r_3_reload_read, i32 %arg1_r_4_reload_read, i32 %arg1_r_5_reload_read, i32 %arg1_r_6_reload_read, i32 %arg1_r_7_reload_read, i32 %arg1_r_8_reload_read, i32 %arg1_r_9_reload_read, i4 %i1_1" [d2.cpp:68]   --->   Operation 77 'mux' 'tmp_2' <Predicate = (!icmp_ln67)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 78 [1/1] (0.00ns)   --->   "%zext_ln68 = zext i32 %tmp_2" [d2.cpp:68]   --->   Operation 78 'zext' 'zext_ln68' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 79 [1/1] (0.79ns)   --->   "%sub_ln68 = sub i4 9, i4 %i1_1" [d2.cpp:68]   --->   Operation 79 'sub' 'sub_ln68' <Predicate = (!icmp_ln67)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 80 [1/1] (0.75ns)   --->   "%tmp_s = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i4 %sub_ln68" [d2.cpp:68]   --->   Operation 80 'mux' 'tmp_s' <Predicate = (!icmp_ln67)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 81 [1/1] (0.00ns)   --->   "%zext_ln68_1 = zext i32 %tmp_s" [d2.cpp:68]   --->   Operation 81 'zext' 'zext_ln68_1' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : [1/1] (0.80ns)   --->   Input mux for Operation 82 '%mul_ln68 = mul i64 %zext_ln68_1, i64 %zext_ln68'
ST_2 : Operation 82 [1/1] (2.61ns)   --->   "%mul_ln68 = mul i64 %zext_ln68_1, i64 %zext_ln68" [d2.cpp:68]   --->   Operation 82 'mul' 'mul_ln68' <Predicate = (!icmp_ln67)> <Delay = 2.61> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 83 [1/1] (1.08ns)   --->   "%add_ln68 = add i64 %mul_ln68, i64 %add12948_load" [d2.cpp:68]   --->   Operation 83 'add' 'add_ln68' <Predicate = (!icmp_ln67)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 84 [1/1] (0.79ns)   --->   "%icmp_ln67_1 = icmp_ult  i4 %add_ln67, i4 10" [d2.cpp:67]   --->   Operation 84 'icmp' 'icmp_ln67_1' <Predicate = (!icmp_ln67)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 85 [1/1] (0.00ns) (grouped into LUT with out node select_ln68)   --->   "%and_ln67 = and i1 %empty, i1 %icmp_ln67_1" [d2.cpp:67]   --->   Operation 85 'and' 'and_ln67' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 86 [1/1] (0.79ns)   --->   "%sub_ln68_1 = sub i4 8, i4 %i1_1" [d2.cpp:68]   --->   Operation 86 'sub' 'sub_ln68_1' <Predicate = (!icmp_ln67)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 87 [1/1] (0.77ns)   --->   "%tmp_1 = mux i32 @_ssdm_op_Mux.ap_auto.9i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i4 %sub_ln68_1" [d2.cpp:68]   --->   Operation 87 'mux' 'tmp_1' <Predicate = (!icmp_ln67)> <Delay = 0.77> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 88 [1/1] (0.00ns) (grouped into LUT with out node select_ln68)   --->   "%shl_ln68 = shl i32 %tmp_1, i32 1" [d2.cpp:68]   --->   Operation 88 'shl' 'shl_ln68' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 89 [1/1] (0.44ns) (out node of the LUT)   --->   "%select_ln68 = select i1 %and_ln67, i32 %shl_ln68, i32 %tmp_1" [d2.cpp:68]   --->   Operation 89 'select' 'select_ln68' <Predicate = (!icmp_ln67)> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 90 [1/1] (0.00ns)   --->   "%zext_ln68_2 = zext i32 %select_ln68" [d2.cpp:68]   --->   Operation 90 'zext' 'zext_ln68_2' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : [1/1] (0.80ns)   --->   Input mux for Operation 91 '%mul_ln68_1 = mul i64 %zext_ln68_2, i64 %zext_ln68'
ST_2 : Operation 91 [1/1] (2.61ns)   --->   "%mul_ln68_1 = mul i64 %zext_ln68_2, i64 %zext_ln68" [d2.cpp:68]   --->   Operation 91 'mul' 'mul_ln68_1' <Predicate = (!icmp_ln67)> <Delay = 2.61> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 92 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_1)   --->   "%select_ln68_5 = select i1 %icmp_ln67_1, i64 18446744073709551615, i64 0" [d2.cpp:68]   --->   Operation 92 'select' 'select_ln68_5' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 93 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_1)   --->   "%and_ln68 = and i64 %mul_ln68_1, i64 %select_ln68_5" [d2.cpp:68]   --->   Operation 93 'and' 'and_ln68' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 94 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln68_1 = add i64 %and_ln68, i64 %add129_149_load" [d2.cpp:68]   --->   Operation 94 'add' 'add_ln68_1' <Predicate = (!icmp_ln67)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 95 [1/1] (0.79ns)   --->   "%add_ln68_2 = add i4 %i1_1, i4 2" [d2.cpp:68]   --->   Operation 95 'add' 'add_ln68_2' <Predicate = (!icmp_ln67)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 96 [1/1] (0.12ns)   --->   "%xor_ln68 = xor i3 %trunc_ln55_1, i3 7" [d2.cpp:68]   --->   Operation 96 'xor' 'xor_ln68' <Predicate = (!icmp_ln67)> <Delay = 0.12> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.12> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 97 [1/1] (0.72ns)   --->   "%tmp_3 = mux i32 @_ssdm_op_Mux.ap_auto.8i32.i3, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i3 %xor_ln68" [d2.cpp:68]   --->   Operation 97 'mux' 'tmp_3' <Predicate = (!icmp_ln67)> <Delay = 0.72> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.72> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 98 [1/1] (0.00ns)   --->   "%zext_ln68_3 = zext i32 %tmp_3" [d2.cpp:68]   --->   Operation 98 'zext' 'zext_ln68_3' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 99 [1/1] (0.79ns)   --->   "%icmp_ln68 = icmp_ult  i4 %add_ln68_2, i4 10" [d2.cpp:68]   --->   Operation 99 'icmp' 'icmp_ln68' <Predicate = (!icmp_ln67)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (0.80ns)   --->   Input mux for Operation 100 '%mul_ln68_2 = mul i64 %zext_ln68_3, i64 %zext_ln68'
ST_2 : Operation 100 [1/1] (2.61ns)   --->   "%mul_ln68_2 = mul i64 %zext_ln68_3, i64 %zext_ln68" [d2.cpp:68]   --->   Operation 100 'mul' 'mul_ln68_2' <Predicate = (!icmp_ln67)> <Delay = 2.61> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 101 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_3)   --->   "%select_ln68_6 = select i1 %icmp_ln68, i64 18446744073709551615, i64 0" [d2.cpp:68]   --->   Operation 101 'select' 'select_ln68_6' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 102 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_3)   --->   "%and_ln68_1 = and i64 %mul_ln68_2, i64 %select_ln68_6" [d2.cpp:68]   --->   Operation 102 'and' 'and_ln68_1' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 103 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln68_3 = add i64 %and_ln68_1, i64 %add129_250_load" [d2.cpp:68]   --->   Operation 103 'add' 'add_ln68_3' <Predicate = (!icmp_ln67)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 104 [1/1] (0.79ns)   --->   "%add_ln67_1 = add i4 %i1_1, i4 3" [d2.cpp:67]   --->   Operation 104 'add' 'add_ln67_1' <Predicate = (!icmp_ln67)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 105 [1/1] (0.79ns)   --->   "%icmp_ln67_2 = icmp_ult  i4 %add_ln67_1, i4 10" [d2.cpp:67]   --->   Operation 105 'icmp' 'icmp_ln67_2' <Predicate = (!icmp_ln67)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 106 [1/1] (0.00ns) (grouped into LUT with out node select_ln68_1)   --->   "%and_ln67_1 = and i1 %empty, i1 %icmp_ln67_2" [d2.cpp:67]   --->   Operation 106 'and' 'and_ln67_1' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 107 [1/1] (0.67ns)   --->   "%sub_ln68_2 = sub i3 6, i3 %trunc_ln55_1" [d2.cpp:68]   --->   Operation 107 'sub' 'sub_ln68_2' <Predicate = (!icmp_ln67)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 108 [1/1] (0.67ns)   --->   "%tmp_4 = mux i32 @_ssdm_op_Mux.ap_auto.7i32.i3, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i3 %sub_ln68_2" [d2.cpp:68]   --->   Operation 108 'mux' 'tmp_4' <Predicate = (!icmp_ln67)> <Delay = 0.67> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 109 [1/1] (0.00ns) (grouped into LUT with out node select_ln68_1)   --->   "%shl_ln68_1 = shl i32 %tmp_4, i32 1" [d2.cpp:68]   --->   Operation 109 'shl' 'shl_ln68_1' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 110 [1/1] (0.44ns) (out node of the LUT)   --->   "%select_ln68_1 = select i1 %and_ln67_1, i32 %shl_ln68_1, i32 %tmp_4" [d2.cpp:68]   --->   Operation 110 'select' 'select_ln68_1' <Predicate = (!icmp_ln67)> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 111 [1/1] (0.00ns)   --->   "%zext_ln68_4 = zext i32 %select_ln68_1" [d2.cpp:68]   --->   Operation 111 'zext' 'zext_ln68_4' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : [1/1] (0.80ns)   --->   Input mux for Operation 112 '%mul_ln68_3 = mul i64 %zext_ln68_4, i64 %zext_ln68'
ST_2 : Operation 112 [1/1] (2.61ns)   --->   "%mul_ln68_3 = mul i64 %zext_ln68_4, i64 %zext_ln68" [d2.cpp:68]   --->   Operation 112 'mul' 'mul_ln68_3' <Predicate = (!icmp_ln67)> <Delay = 2.61> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 113 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_4)   --->   "%select_ln68_7 = select i1 %icmp_ln67_2, i64 18446744073709551615, i64 0" [d2.cpp:68]   --->   Operation 113 'select' 'select_ln68_7' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 114 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_4)   --->   "%and_ln68_2 = and i64 %mul_ln68_3, i64 %select_ln68_7" [d2.cpp:68]   --->   Operation 114 'and' 'and_ln68_2' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 115 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln68_4 = add i64 %and_ln68_2, i64 %add129_351_load" [d2.cpp:68]   --->   Operation 115 'add' 'add_ln68_4' <Predicate = (!icmp_ln67)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 116 [1/1] (0.79ns)   --->   "%add_ln68_5 = add i4 %i1_1, i4 4" [d2.cpp:68]   --->   Operation 116 'add' 'add_ln68_5' <Predicate = (!icmp_ln67)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 117 [1/1] (0.67ns)   --->   "%sub_ln68_3 = sub i3 5, i3 %trunc_ln55_1" [d2.cpp:68]   --->   Operation 117 'sub' 'sub_ln68_3' <Predicate = (!icmp_ln67)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 118 [1/1] (0.62ns)   --->   "%tmp_5 = mux i32 @_ssdm_op_Mux.ap_auto.6i32.i3, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i3 %sub_ln68_3" [d2.cpp:68]   --->   Operation 118 'mux' 'tmp_5' <Predicate = (!icmp_ln67)> <Delay = 0.62> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.62> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 119 [1/1] (0.00ns)   --->   "%zext_ln68_5 = zext i32 %tmp_5" [d2.cpp:68]   --->   Operation 119 'zext' 'zext_ln68_5' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 120 [1/1] (0.79ns)   --->   "%icmp_ln68_1 = icmp_ult  i4 %add_ln68_5, i4 10" [d2.cpp:68]   --->   Operation 120 'icmp' 'icmp_ln68_1' <Predicate = (!icmp_ln67)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (0.80ns)   --->   Input mux for Operation 121 '%mul_ln68_4 = mul i64 %zext_ln68_5, i64 %zext_ln68'
ST_2 : Operation 121 [1/1] (2.61ns)   --->   "%mul_ln68_4 = mul i64 %zext_ln68_5, i64 %zext_ln68" [d2.cpp:68]   --->   Operation 121 'mul' 'mul_ln68_4' <Predicate = (!icmp_ln67)> <Delay = 2.61> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 122 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_6)   --->   "%select_ln68_8 = select i1 %icmp_ln68_1, i64 18446744073709551615, i64 0" [d2.cpp:68]   --->   Operation 122 'select' 'select_ln68_8' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 123 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_6)   --->   "%and_ln68_3 = and i64 %mul_ln68_4, i64 %select_ln68_8" [d2.cpp:68]   --->   Operation 123 'and' 'and_ln68_3' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 124 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln68_6 = add i64 %and_ln68_3, i64 %add129_452_load" [d2.cpp:68]   --->   Operation 124 'add' 'add_ln68_6' <Predicate = (!icmp_ln67)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 125 [1/1] (0.79ns)   --->   "%add_ln67_2 = add i4 %i1_1, i4 5" [d2.cpp:67]   --->   Operation 125 'add' 'add_ln67_2' <Predicate = (!icmp_ln67)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 126 [1/1] (0.79ns)   --->   "%icmp_ln67_3 = icmp_ult  i4 %add_ln67_2, i4 10" [d2.cpp:67]   --->   Operation 126 'icmp' 'icmp_ln67_3' <Predicate = (!icmp_ln67)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 127 [1/1] (0.00ns) (grouped into LUT with out node select_ln68_2)   --->   "%and_ln67_2 = and i1 %empty, i1 %icmp_ln67_3" [d2.cpp:67]   --->   Operation 127 'and' 'and_ln67_2' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 128 [1/1] (0.67ns)   --->   "%sub_ln68_4 = sub i3 4, i3 %trunc_ln55_1" [d2.cpp:68]   --->   Operation 128 'sub' 'sub_ln68_4' <Predicate = (!icmp_ln67)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 129 [1/1] (0.57ns)   --->   "%tmp_6 = mux i32 @_ssdm_op_Mux.ap_auto.5i32.i3, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i3 %sub_ln68_4" [d2.cpp:68]   --->   Operation 129 'mux' 'tmp_6' <Predicate = (!icmp_ln67)> <Delay = 0.57> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.57> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 130 [1/1] (0.00ns) (grouped into LUT with out node select_ln68_2)   --->   "%shl_ln68_2 = shl i32 %tmp_6, i32 1" [d2.cpp:68]   --->   Operation 130 'shl' 'shl_ln68_2' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 131 [1/1] (0.44ns) (out node of the LUT)   --->   "%select_ln68_2 = select i1 %and_ln67_2, i32 %shl_ln68_2, i32 %tmp_6" [d2.cpp:68]   --->   Operation 131 'select' 'select_ln68_2' <Predicate = (!icmp_ln67)> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 132 [1/1] (0.00ns)   --->   "%zext_ln68_6 = zext i32 %select_ln68_2" [d2.cpp:68]   --->   Operation 132 'zext' 'zext_ln68_6' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : [1/1] (0.80ns)   --->   Input mux for Operation 133 '%mul_ln68_5 = mul i64 %zext_ln68_6, i64 %zext_ln68'
ST_2 : Operation 133 [1/1] (2.61ns)   --->   "%mul_ln68_5 = mul i64 %zext_ln68_6, i64 %zext_ln68" [d2.cpp:68]   --->   Operation 133 'mul' 'mul_ln68_5' <Predicate = (!icmp_ln67)> <Delay = 2.61> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 134 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_7)   --->   "%select_ln68_9 = select i1 %icmp_ln67_3, i64 18446744073709551615, i64 0" [d2.cpp:68]   --->   Operation 134 'select' 'select_ln68_9' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 135 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_7)   --->   "%and_ln68_4 = and i64 %mul_ln68_5, i64 %select_ln68_9" [d2.cpp:68]   --->   Operation 135 'and' 'and_ln68_4' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 136 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln68_7 = add i64 %and_ln68_4, i64 %add129_553_load" [d2.cpp:68]   --->   Operation 136 'add' 'add_ln68_7' <Predicate = (!icmp_ln67)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 137 [1/1] (0.79ns)   --->   "%add_ln68_8 = add i4 %i1_1, i4 6" [d2.cpp:68]   --->   Operation 137 'add' 'add_ln68_8' <Predicate = (!icmp_ln67)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 138 [1/1] (0.28ns)   --->   "%xor_ln68_1 = xor i2 %trunc_ln55, i2 3" [d2.cpp:68]   --->   Operation 138 'xor' 'xor_ln68_1' <Predicate = (!icmp_ln67)> <Delay = 0.28> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 139 [1/1] (0.52ns)   --->   "%tmp_7 = mux i32 @_ssdm_op_Mux.ap_auto.4i32.i2, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i2 %xor_ln68_1" [d2.cpp:68]   --->   Operation 139 'mux' 'tmp_7' <Predicate = (!icmp_ln67)> <Delay = 0.52> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.52> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 140 [1/1] (0.00ns)   --->   "%zext_ln68_7 = zext i32 %tmp_7" [d2.cpp:68]   --->   Operation 140 'zext' 'zext_ln68_7' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 141 [1/1] (0.79ns)   --->   "%icmp_ln68_2 = icmp_ult  i4 %add_ln68_8, i4 10" [d2.cpp:68]   --->   Operation 141 'icmp' 'icmp_ln68_2' <Predicate = (!icmp_ln67)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (0.80ns)   --->   Input mux for Operation 142 '%mul_ln68_6 = mul i64 %zext_ln68_7, i64 %zext_ln68'
ST_2 : Operation 142 [1/1] (2.61ns)   --->   "%mul_ln68_6 = mul i64 %zext_ln68_7, i64 %zext_ln68" [d2.cpp:68]   --->   Operation 142 'mul' 'mul_ln68_6' <Predicate = (!icmp_ln67)> <Delay = 2.61> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 143 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_9)   --->   "%select_ln68_10 = select i1 %icmp_ln68_2, i64 18446744073709551615, i64 0" [d2.cpp:68]   --->   Operation 143 'select' 'select_ln68_10' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 144 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_9)   --->   "%and_ln68_5 = and i64 %mul_ln68_6, i64 %select_ln68_10" [d2.cpp:68]   --->   Operation 144 'and' 'and_ln68_5' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 145 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln68_9 = add i64 %and_ln68_5, i64 %add129_654_load" [d2.cpp:68]   --->   Operation 145 'add' 'add_ln68_9' <Predicate = (!icmp_ln67)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 146 [1/1] (0.79ns)   --->   "%add_ln67_3 = add i5 %zext_ln67, i5 7" [d2.cpp:67]   --->   Operation 146 'add' 'add_ln67_3' <Predicate = (!icmp_ln67)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 147 [1/1] (0.78ns)   --->   "%icmp_ln67_4 = icmp_ult  i5 %add_ln67_3, i5 10" [d2.cpp:67]   --->   Operation 147 'icmp' 'icmp_ln67_4' <Predicate = (!icmp_ln67)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 148 [1/1] (0.00ns) (grouped into LUT with out node select_ln68_3)   --->   "%and_ln67_3 = and i1 %empty, i1 %icmp_ln67_4" [d2.cpp:67]   --->   Operation 148 'and' 'and_ln67_3' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 149 [1/1] (0.79ns)   --->   "%sub_ln68_5 = sub i4 2, i4 %i1_1" [d2.cpp:68]   --->   Operation 149 'sub' 'sub_ln68_5' <Predicate = (!icmp_ln67)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 150 [1/1] (0.75ns)   --->   "%tmp_8 = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_9_reload_read, i4 %sub_ln68_5" [d2.cpp:68]   --->   Operation 150 'mux' 'tmp_8' <Predicate = (!icmp_ln67)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 151 [1/1] (0.00ns) (grouped into LUT with out node select_ln68_3)   --->   "%shl_ln68_3 = shl i32 %tmp_8, i32 1" [d2.cpp:68]   --->   Operation 151 'shl' 'shl_ln68_3' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 152 [1/1] (0.44ns) (out node of the LUT)   --->   "%select_ln68_3 = select i1 %and_ln67_3, i32 %shl_ln68_3, i32 %tmp_8" [d2.cpp:68]   --->   Operation 152 'select' 'select_ln68_3' <Predicate = (!icmp_ln67)> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 153 [1/1] (0.00ns)   --->   "%zext_ln68_8 = zext i32 %select_ln68_3" [d2.cpp:68]   --->   Operation 153 'zext' 'zext_ln68_8' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : [1/1] (0.80ns)   --->   Input mux for Operation 154 '%mul_ln68_7 = mul i64 %zext_ln68_8, i64 %zext_ln68'
ST_2 : Operation 154 [1/1] (2.61ns)   --->   "%mul_ln68_7 = mul i64 %zext_ln68_8, i64 %zext_ln68" [d2.cpp:68]   --->   Operation 154 'mul' 'mul_ln68_7' <Predicate = (!icmp_ln67)> <Delay = 2.61> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 155 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_10)   --->   "%select_ln68_11 = select i1 %icmp_ln67_4, i64 18446744073709551615, i64 0" [d2.cpp:68]   --->   Operation 155 'select' 'select_ln68_11' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 156 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_10)   --->   "%and_ln68_6 = and i64 %mul_ln68_7, i64 %select_ln68_11" [d2.cpp:68]   --->   Operation 156 'and' 'and_ln68_6' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 157 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln68_10 = add i64 %and_ln68_6, i64 %add129_755_load" [d2.cpp:68]   --->   Operation 157 'add' 'add_ln68_10' <Predicate = (!icmp_ln67)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 158 [1/1] (0.78ns)   --->   "%add_ln68_11 = add i5 %zext_ln67, i5 8" [d2.cpp:68]   --->   Operation 158 'add' 'add_ln68_11' <Predicate = (!icmp_ln67)> <Delay = 0.78> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 159 [1/1] (0.79ns)   --->   "%sub_ln68_6 = sub i4 1, i4 %i1_1" [d2.cpp:68]   --->   Operation 159 'sub' 'sub_ln68_6' <Predicate = (!icmp_ln67)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 160 [1/1] (0.75ns)   --->   "%tmp_9 = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i4 %sub_ln68_6" [d2.cpp:68]   --->   Operation 160 'mux' 'tmp_9' <Predicate = (!icmp_ln67)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 161 [1/1] (0.00ns)   --->   "%zext_ln68_9 = zext i32 %tmp_9" [d2.cpp:68]   --->   Operation 161 'zext' 'zext_ln68_9' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 162 [1/1] (0.78ns)   --->   "%icmp_ln68_3 = icmp_ult  i5 %add_ln68_11, i5 10" [d2.cpp:68]   --->   Operation 162 'icmp' 'icmp_ln68_3' <Predicate = (!icmp_ln67)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (0.80ns)   --->   Input mux for Operation 163 '%mul_ln68_8 = mul i64 %zext_ln68_9, i64 %zext_ln68'
ST_2 : Operation 163 [1/1] (2.61ns)   --->   "%mul_ln68_8 = mul i64 %zext_ln68_9, i64 %zext_ln68" [d2.cpp:68]   --->   Operation 163 'mul' 'mul_ln68_8' <Predicate = (!icmp_ln67)> <Delay = 2.61> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 164 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_12)   --->   "%select_ln68_12 = select i1 %icmp_ln68_3, i64 18446744073709551615, i64 0" [d2.cpp:68]   --->   Operation 164 'select' 'select_ln68_12' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 165 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_12)   --->   "%and_ln68_7 = and i64 %mul_ln68_8, i64 %select_ln68_12" [d2.cpp:68]   --->   Operation 165 'and' 'and_ln68_7' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 166 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln68_12 = add i64 %and_ln68_7, i64 %add129_856_load" [d2.cpp:68]   --->   Operation 166 'add' 'add_ln68_12' <Predicate = (!icmp_ln67)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 167 [1/1] (0.78ns)   --->   "%add_ln67_4 = add i5 %zext_ln67, i5 9" [d2.cpp:67]   --->   Operation 167 'add' 'add_ln67_4' <Predicate = (!icmp_ln67)> <Delay = 0.78> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 168 [1/1] (0.78ns)   --->   "%icmp_ln67_5 = icmp_ult  i5 %add_ln67_4, i5 10" [d2.cpp:67]   --->   Operation 168 'icmp' 'icmp_ln67_5' <Predicate = (!icmp_ln67)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 169 [1/1] (0.00ns) (grouped into LUT with out node select_ln68_4)   --->   "%and_ln67_4 = and i1 %empty, i1 %icmp_ln67_5" [d2.cpp:67]   --->   Operation 169 'and' 'and_ln67_4' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 170 [1/1] (0.79ns)   --->   "%sub_ln68_7 = sub i4 0, i4 %i1_1" [d2.cpp:68]   --->   Operation 170 'sub' 'sub_ln68_7' <Predicate = (!icmp_ln67)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 171 [1/1] (0.75ns)   --->   "%tmp_10 = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 %arg2_r_reload_read, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i4 %sub_ln68_7" [d2.cpp:68]   --->   Operation 171 'mux' 'tmp_10' <Predicate = (!icmp_ln67)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 172 [1/1] (0.00ns) (grouped into LUT with out node select_ln68_4)   --->   "%shl_ln68_4 = shl i32 %tmp_10, i32 1" [d2.cpp:68]   --->   Operation 172 'shl' 'shl_ln68_4' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 173 [1/1] (0.44ns) (out node of the LUT)   --->   "%select_ln68_4 = select i1 %and_ln67_4, i32 %shl_ln68_4, i32 %tmp_10" [d2.cpp:68]   --->   Operation 173 'select' 'select_ln68_4' <Predicate = (!icmp_ln67)> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 174 [1/1] (0.00ns)   --->   "%zext_ln68_10 = zext i32 %select_ln68_4" [d2.cpp:68]   --->   Operation 174 'zext' 'zext_ln68_10' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : [1/1] (0.80ns)   --->   Input mux for Operation 175 '%mul_ln68_9 = mul i64 %zext_ln68_10, i64 %zext_ln68'
ST_2 : Operation 175 [1/1] (2.61ns)   --->   "%mul_ln68_9 = mul i64 %zext_ln68_10, i64 %zext_ln68" [d2.cpp:68]   --->   Operation 175 'mul' 'mul_ln68_9' <Predicate = (!icmp_ln67)> <Delay = 2.61> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 176 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_13)   --->   "%select_ln68_13 = select i1 %icmp_ln67_5, i64 18446744073709551615, i64 0" [d2.cpp:68]   --->   Operation 176 'select' 'select_ln68_13' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 177 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_13)   --->   "%and_ln68_8 = and i64 %mul_ln68_9, i64 %select_ln68_13" [d2.cpp:68]   --->   Operation 177 'and' 'and_ln68_8' <Predicate = (!icmp_ln67)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 178 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln68_13 = add i64 %and_ln68_8, i64 %add129_957_load" [d2.cpp:68]   --->   Operation 178 'add' 'add_ln68_13' <Predicate = (!icmp_ln67)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 179 [1/1] (0.42ns)   --->   "%store_ln55 = store i4 %add_ln67, i4 %i1" [d2.cpp:55]   --->   Operation 179 'store' 'store_ln55' <Predicate = (!icmp_ln67)> <Delay = 0.42>
ST_2 : Operation 180 [1/1] (0.42ns)   --->   "%store_ln55 = store i64 %add_ln68_13, i64 %add129_957" [d2.cpp:55]   --->   Operation 180 'store' 'store_ln55' <Predicate = (!icmp_ln67)> <Delay = 0.42>
ST_2 : Operation 181 [1/1] (0.42ns)   --->   "%store_ln55 = store i64 %add_ln68_12, i64 %add129_856" [d2.cpp:55]   --->   Operation 181 'store' 'store_ln55' <Predicate = (!icmp_ln67)> <Delay = 0.42>
ST_2 : Operation 182 [1/1] (0.42ns)   --->   "%store_ln55 = store i64 %add_ln68_10, i64 %add129_755" [d2.cpp:55]   --->   Operation 182 'store' 'store_ln55' <Predicate = (!icmp_ln67)> <Delay = 0.42>
ST_2 : Operation 183 [1/1] (0.42ns)   --->   "%store_ln55 = store i64 %add_ln68_9, i64 %add129_654" [d2.cpp:55]   --->   Operation 183 'store' 'store_ln55' <Predicate = (!icmp_ln67)> <Delay = 0.42>
ST_2 : Operation 184 [1/1] (0.42ns)   --->   "%store_ln55 = store i64 %add_ln68_7, i64 %add129_553" [d2.cpp:55]   --->   Operation 184 'store' 'store_ln55' <Predicate = (!icmp_ln67)> <Delay = 0.42>
ST_2 : Operation 185 [1/1] (0.42ns)   --->   "%store_ln55 = store i64 %add_ln68_6, i64 %add129_452" [d2.cpp:55]   --->   Operation 185 'store' 'store_ln55' <Predicate = (!icmp_ln67)> <Delay = 0.42>
ST_2 : Operation 186 [1/1] (0.42ns)   --->   "%store_ln55 = store i64 %add_ln68_4, i64 %add129_351" [d2.cpp:55]   --->   Operation 186 'store' 'store_ln55' <Predicate = (!icmp_ln67)> <Delay = 0.42>
ST_2 : Operation 187 [1/1] (0.42ns)   --->   "%store_ln55 = store i64 %add_ln68_3, i64 %add129_250" [d2.cpp:55]   --->   Operation 187 'store' 'store_ln55' <Predicate = (!icmp_ln67)> <Delay = 0.42>
ST_2 : Operation 188 [1/1] (0.42ns)   --->   "%store_ln55 = store i64 %add_ln68_1, i64 %add129_149" [d2.cpp:55]   --->   Operation 188 'store' 'store_ln55' <Predicate = (!icmp_ln67)> <Delay = 0.42>
ST_2 : Operation 189 [1/1] (0.42ns)   --->   "%store_ln55 = store i64 %add_ln68, i64 %add12948" [d2.cpp:55]   --->   Operation 189 'store' 'store_ln55' <Predicate = (!icmp_ln67)> <Delay = 0.42>
ST_2 : Operation 190 [1/1] (0.00ns)   --->   "%br_ln55 = br void %for.body91" [d2.cpp:55]   --->   Operation 190 'br' 'br_ln55' <Predicate = (!icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 191 [1/1] (0.00ns)   --->   "%add12948_load_1 = load i64 %add12948"   --->   Operation 191 'load' 'add12948_load_1' <Predicate = (icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 192 [1/1] (0.00ns)   --->   "%add129_149_load_1 = load i64 %add129_149"   --->   Operation 192 'load' 'add129_149_load_1' <Predicate = (icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 193 [1/1] (0.00ns)   --->   "%add129_250_load_1 = load i64 %add129_250"   --->   Operation 193 'load' 'add129_250_load_1' <Predicate = (icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 194 [1/1] (0.00ns)   --->   "%add129_351_load_1 = load i64 %add129_351"   --->   Operation 194 'load' 'add129_351_load_1' <Predicate = (icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 195 [1/1] (0.00ns)   --->   "%add129_452_load_1 = load i64 %add129_452"   --->   Operation 195 'load' 'add129_452_load_1' <Predicate = (icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 196 [1/1] (0.00ns)   --->   "%add129_553_load_1 = load i64 %add129_553"   --->   Operation 196 'load' 'add129_553_load_1' <Predicate = (icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 197 [1/1] (0.00ns)   --->   "%add129_654_load_1 = load i64 %add129_654"   --->   Operation 197 'load' 'add129_654_load_1' <Predicate = (icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 198 [1/1] (0.00ns)   --->   "%add129_755_load_1 = load i64 %add129_755"   --->   Operation 198 'load' 'add129_755_load_1' <Predicate = (icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 199 [1/1] (0.00ns)   --->   "%add129_856_load_1 = load i64 %add129_856"   --->   Operation 199 'load' 'add129_856_load_1' <Predicate = (icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 200 [1/1] (0.00ns)   --->   "%add129_957_load_1 = load i64 %add129_957"   --->   Operation 200 'load' 'add129_957_load_1' <Predicate = (icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 201 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add129_957_out, i64 %add129_957_load_1"   --->   Operation 201 'write' 'write_ln0' <Predicate = (icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 202 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add129_856_out, i64 %add129_856_load_1"   --->   Operation 202 'write' 'write_ln0' <Predicate = (icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 203 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add129_755_out, i64 %add129_755_load_1"   --->   Operation 203 'write' 'write_ln0' <Predicate = (icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 204 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add129_654_out, i64 %add129_654_load_1"   --->   Operation 204 'write' 'write_ln0' <Predicate = (icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 205 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add129_553_out, i64 %add129_553_load_1"   --->   Operation 205 'write' 'write_ln0' <Predicate = (icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 206 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add129_452_out, i64 %add129_452_load_1"   --->   Operation 206 'write' 'write_ln0' <Predicate = (icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 207 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add129_351_out, i64 %add129_351_load_1"   --->   Operation 207 'write' 'write_ln0' <Predicate = (icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 208 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add129_250_out, i64 %add129_250_load_1"   --->   Operation 208 'write' 'write_ln0' <Predicate = (icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 209 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add129_149_out, i64 %add129_149_load_1"   --->   Operation 209 'write' 'write_ln0' <Predicate = (icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 210 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add12948_out, i64 %add12948_load_1"   --->   Operation 210 'write' 'write_ln0' <Predicate = (icmp_ln67)> <Delay = 0.00>
ST_2 : Operation 211 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 211 'ret' 'ret_ln0' <Predicate = (icmp_ln67)> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 0.427ns
The critical path consists of the following:
	'alloca' operation ('i1') [50]  (0.000 ns)
	'store' operation ('store_ln0') of constant 0 on local variable 'i1' [80]  (0.427 ns)

 <State 2>: 6.975ns
The critical path consists of the following:
	'load' operation ('i1') on local variable 'i1' [93]  (0.000 ns)
	'add' operation ('add_ln67_2', d2.cpp:67) [163]  (0.797 ns)
	'icmp' operation ('icmp_ln67_3', d2.cpp:67) [164]  (0.797 ns)
	'and' operation ('and_ln67_2', d2.cpp:67) [165]  (0.000 ns)
	'select' operation ('select_ln68_2', d2.cpp:68) [169]  (0.449 ns)
	multiplexor before operation 'mul' with delay (0.803 ns)
'mul' operation ('mul_ln68_5', d2.cpp:68) [171]  (2.617 ns)
	'and' operation ('and_ln68_4', d2.cpp:68) [173]  (0.000 ns)
	'add' operation ('add_ln68_7', d2.cpp:68) [174]  (1.085 ns)
	'store' operation ('store_ln55', d2.cpp:55) of variable 'add_ln68_7', d2.cpp:68 on local variable 'add129_553' [222]  (0.427 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
