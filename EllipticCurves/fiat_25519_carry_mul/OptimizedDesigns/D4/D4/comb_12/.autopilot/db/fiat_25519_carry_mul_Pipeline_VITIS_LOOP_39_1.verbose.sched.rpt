

================================================================
== Vitis HLS Report for 'fiat_25519_carry_mul_Pipeline_VITIS_LOOP_39_1'
================================================================
* Date:           Thu May  9 14:31:54 2024

* Version:        2023.1.1 (Build 3869133 on Jun 15 2023)
* Project:        D4
* Solution:       comb_12 (Vivado IP Flow Target)
* Product family: zynquplus
* Target device:  xczu9eg-ffvb1156-2-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  7.072 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |       12|       12|  0.120 us|  0.120 us|   12|   12|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- VITIS_LOOP_39_1  |       10|       10|         2|          1|          1|    10|       yes|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 2


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 2
* Pipeline : 1
  Pipeline-0 : II = 1, D = 2, States = { 1 2 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 5.35>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%add6569 = alloca i32 1"   --->   Operation 5 'alloca' 'add6569' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%add65_12970 = alloca i32 1"   --->   Operation 6 'alloca' 'add65_12970' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%add65_171 = alloca i32 1"   --->   Operation 7 'alloca' 'add65_171' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%add65_1_172 = alloca i32 1"   --->   Operation 8 'alloca' 'add65_1_172' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%add65_273 = alloca i32 1"   --->   Operation 9 'alloca' 'add65_273' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%add65_2_174 = alloca i32 1"   --->   Operation 10 'alloca' 'add65_2_174' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%add65_375 = alloca i32 1"   --->   Operation 11 'alloca' 'add65_375' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%add65_3_176 = alloca i32 1"   --->   Operation 12 'alloca' 'add65_3_176' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%add65_477 = alloca i32 1"   --->   Operation 13 'alloca' 'add65_477' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%add65_4_178 = alloca i32 1"   --->   Operation 14 'alloca' 'add65_4_178' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%i1 = alloca i32 1"   --->   Operation 15 'alloca' 'i1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%arg2_r_9_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_9_reload"   --->   Operation 16 'read' 'arg2_r_9_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%arg2_r_8_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_8_reload"   --->   Operation 17 'read' 'arg2_r_8_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%arg2_r_7_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_7_reload"   --->   Operation 18 'read' 'arg2_r_7_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%arg2_r_6_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_6_reload"   --->   Operation 19 'read' 'arg2_r_6_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%arg2_r_5_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_5_reload"   --->   Operation 20 'read' 'arg2_r_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%arg2_r_4_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_4_reload"   --->   Operation 21 'read' 'arg2_r_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%arg2_r_3_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_3_reload"   --->   Operation 22 'read' 'arg2_r_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%arg2_r_2_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_2_reload"   --->   Operation 23 'read' 'arg2_r_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%arg2_r_1_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_1_reload"   --->   Operation 24 'read' 'arg2_r_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%arg2_r_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_reload"   --->   Operation 25 'read' 'arg2_r_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%arg1_r_9_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_9_reload"   --->   Operation 26 'read' 'arg1_r_9_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%arg1_r_8_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_8_reload"   --->   Operation 27 'read' 'arg1_r_8_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%arg1_r_7_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_7_reload"   --->   Operation 28 'read' 'arg1_r_7_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%arg1_r_6_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_6_reload"   --->   Operation 29 'read' 'arg1_r_6_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%arg1_r_5_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_5_reload"   --->   Operation 30 'read' 'arg1_r_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%arg1_r_4_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_4_reload"   --->   Operation 31 'read' 'arg1_r_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%arg1_r_3_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_3_reload"   --->   Operation 32 'read' 'arg1_r_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%arg1_r_2_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_2_reload"   --->   Operation 33 'read' 'arg1_r_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%arg1_r_1_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_1_reload"   --->   Operation 34 'read' 'arg1_r_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%arg1_r_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_reload"   --->   Operation 35 'read' 'arg1_r_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.42ns)   --->   "%store_ln0 = store i5 9, i5 %i1"   --->   Operation 36 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 37 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %add65_4_178"   --->   Operation 37 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 38 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %add65_477"   --->   Operation 38 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 39 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %add65_3_176"   --->   Operation 39 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 40 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %add65_375"   --->   Operation 40 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 41 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %add65_2_174"   --->   Operation 41 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 42 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %add65_273"   --->   Operation 42 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 43 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %add65_1_172"   --->   Operation 43 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 44 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %add65_171"   --->   Operation 44 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 45 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %add65_12970"   --->   Operation 45 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 46 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %add6569"   --->   Operation 46 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 47 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.body31"   --->   Operation 47 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 48 [1/1] (0.00ns)   --->   "%i1_1 = load i5 %i1"   --->   Operation 48 'load' 'i1_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 49 [1/1] (0.00ns)   --->   "%tmp_16 = bitselect i1 @_ssdm_op_BitSelect.i1.i5.i32, i5 %i1_1, i32 4" [d4.cpp:39]   --->   Operation 49 'bitselect' 'tmp_16' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 50 [1/1] (0.00ns)   --->   "%br_ln39 = br i1 %tmp_16, void %for.body31.split, void %for.end116.exitStub" [d4.cpp:39]   --->   Operation 50 'br' 'br_ln39' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 51 [1/1] (0.00ns)   --->   "%trunc_ln39 = trunc i5 %i1_1" [d4.cpp:39]   --->   Operation 51 'trunc' 'trunc_ln39' <Predicate = (!tmp_16)> <Delay = 0.00>
ST_1 : Operation 52 [1/1] (0.00ns)   --->   "%empty = trunc i5 %i1_1"   --->   Operation 52 'trunc' 'empty' <Predicate = (!tmp_16)> <Delay = 0.00>
ST_1 : Operation 53 [1/1] (0.75ns)   --->   "%tmp = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 %arg1_r_reload_read, i32 %arg1_r_1_reload_read, i32 %arg1_r_2_reload_read, i32 %arg1_r_3_reload_read, i32 %arg1_r_4_reload_read, i32 %arg1_r_5_reload_read, i32 %arg1_r_6_reload_read, i32 %arg1_r_7_reload_read, i32 %arg1_r_8_reload_read, i32 %arg1_r_9_reload_read, i4 %trunc_ln39" [d4.cpp:52]   --->   Operation 53 'mux' 'tmp' <Predicate = (!tmp_16)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 54 [1/1] (0.78ns)   --->   "%add_ln51 = add i5 %i1_1, i5 1" [d4.cpp:51]   --->   Operation 54 'add' 'add_ln51' <Predicate = (!tmp_16)> <Delay = 0.78> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 55 [1/1] (0.78ns)   --->   "%icmp_ln51 = icmp_sgt  i5 %add_ln51, i5 9" [d4.cpp:51]   --->   Operation 55 'icmp' 'icmp_ln51' <Predicate = (!tmp_16)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 56 [1/1] (0.00ns) (grouped into LUT with out node select_ln52)   --->   "%and_ln51 = and i1 %empty, i1 %icmp_ln51" [d4.cpp:51]   --->   Operation 56 'and' 'and_ln51' <Predicate = (!tmp_16)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 57 [1/1] (0.36ns) (out node of the LUT)   --->   "%select_ln52 = select i1 %and_ln51, i32 38, i32 19" [d4.cpp:52]   --->   Operation 57 'select' 'select_ln52' <Predicate = (!tmp_16)> <Delay = 0.36> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.36> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 58 [1/1] (0.79ns)   --->   "%sub_ln52 = sub i4 2, i4 %trunc_ln39" [d4.cpp:52]   --->   Operation 58 'sub' 'sub_ln52' <Predicate = (!tmp_16)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 59 [1/1] (0.75ns)   --->   "%tmp_2 = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_9_reload_read, i4 %sub_ln52" [d4.cpp:54]   --->   Operation 59 'mux' 'tmp_2' <Predicate = (!tmp_16)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : [1/1] (0.57ns)   --->   Input mux for Operation 60 '%mul_ln52 = mul i32 %tmp_2, i32 %select_ln52'
ST_1 : Operation 60 [1/1] (2.84ns)   --->   "%mul_ln52 = mul i32 %tmp_2, i32 %select_ln52" [d4.cpp:52]   --->   Operation 60 'mul' 'mul_ln52' <Predicate = (!tmp_16)> <Delay = 2.84> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 61 [1/1] (0.78ns)   --->   "%icmp_ln53 = icmp_slt  i5 %add_ln51, i5 10" [d4.cpp:53]   --->   Operation 61 'icmp' 'icmp_ln53' <Predicate = (!tmp_16)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 62 [1/1] (0.79ns)   --->   "%sub_ln52_1 = sub i4 1, i4 %trunc_ln39" [d4.cpp:52]   --->   Operation 62 'sub' 'sub_ln52_1' <Predicate = (!tmp_16)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 63 [1/1] (0.75ns)   --->   "%tmp_4 = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i4 %sub_ln52_1" [d4.cpp:52]   --->   Operation 63 'mux' 'tmp_4' <Predicate = (!tmp_16)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : [1/1] (0.52ns)   --->   Input mux for Operation 64 '%mul_ln52_1 = mul i32 %tmp_4, i32 19'
ST_1 : Operation 64 [1/1] (2.89ns)   --->   "%mul_ln52_1 = mul i32 %tmp_4, i32 19" [d4.cpp:52]   --->   Operation 64 'mul' 'mul_ln52_1' <Predicate = (!tmp_16)> <Delay = 2.89> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 65 [1/1] (0.78ns)   --->   "%add_ln51_1 = add i5 %i1_1, i5 3" [d4.cpp:51]   --->   Operation 65 'add' 'add_ln51_1' <Predicate = (!tmp_16)> <Delay = 0.78> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 66 [1/1] (0.78ns)   --->   "%icmp_ln51_1 = icmp_sgt  i5 %add_ln51_1, i5 9" [d4.cpp:51]   --->   Operation 66 'icmp' 'icmp_ln51_1' <Predicate = (!tmp_16)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 67 [1/1] (0.00ns) (grouped into LUT with out node select_ln52_1)   --->   "%and_ln51_1 = and i1 %empty, i1 %icmp_ln51_1" [d4.cpp:51]   --->   Operation 67 'and' 'and_ln51_1' <Predicate = (!tmp_16)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 68 [1/1] (0.36ns) (out node of the LUT)   --->   "%select_ln52_1 = select i1 %and_ln51_1, i32 38, i32 19" [d4.cpp:52]   --->   Operation 68 'select' 'select_ln52_1' <Predicate = (!tmp_16)> <Delay = 0.36> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.36> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 69 [1/1] (0.79ns)   --->   "%sub_ln52_2 = sub i4 0, i4 %trunc_ln39" [d4.cpp:52]   --->   Operation 69 'sub' 'sub_ln52_2' <Predicate = (!tmp_16)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 70 [1/1] (0.75ns)   --->   "%tmp_6 = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 %arg2_r_reload_read, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i4 %sub_ln52_2" [d4.cpp:54]   --->   Operation 70 'mux' 'tmp_6' <Predicate = (!tmp_16)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : [1/1] (0.57ns)   --->   Input mux for Operation 71 '%mul_ln52_2 = mul i32 %tmp_6, i32 %select_ln52_1'
ST_1 : Operation 71 [1/1] (2.84ns)   --->   "%mul_ln52_2 = mul i32 %tmp_6, i32 %select_ln52_1" [d4.cpp:52]   --->   Operation 71 'mul' 'mul_ln52_2' <Predicate = (!tmp_16)> <Delay = 2.84> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 72 [1/1] (0.78ns)   --->   "%icmp_ln53_1 = icmp_slt  i5 %add_ln51_1, i5 10" [d4.cpp:53]   --->   Operation 72 'icmp' 'icmp_ln53_1' <Predicate = (!tmp_16)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 73 [1/1] (0.35ns)   --->   "%xor_ln52 = xor i4 %trunc_ln39, i4 15" [d4.cpp:52]   --->   Operation 73 'xor' 'xor_ln52' <Predicate = (!tmp_16)> <Delay = 0.35> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.35> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 74 [1/1] (0.75ns)   --->   "%tmp_8 = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i4 %xor_ln52" [d4.cpp:52]   --->   Operation 74 'mux' 'tmp_8' <Predicate = (!tmp_16)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : [1/1] (0.52ns)   --->   Input mux for Operation 75 '%mul_ln52_3 = mul i32 %tmp_8, i32 19'
ST_1 : Operation 75 [1/1] (2.89ns)   --->   "%mul_ln52_3 = mul i32 %tmp_8, i32 19" [d4.cpp:52]   --->   Operation 75 'mul' 'mul_ln52_3' <Predicate = (!tmp_16)> <Delay = 2.89> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 76 [1/1] (0.78ns)   --->   "%add_ln51_2 = add i5 %i1_1, i5 5" [d4.cpp:51]   --->   Operation 76 'add' 'add_ln51_2' <Predicate = (!tmp_16)> <Delay = 0.78> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 77 [1/1] (0.78ns)   --->   "%icmp_ln51_2 = icmp_sgt  i5 %add_ln51_2, i5 9" [d4.cpp:51]   --->   Operation 77 'icmp' 'icmp_ln51_2' <Predicate = (!tmp_16)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 78 [1/1] (0.00ns) (grouped into LUT with out node select_ln52_2)   --->   "%and_ln51_2 = and i1 %empty, i1 %icmp_ln51_2" [d4.cpp:51]   --->   Operation 78 'and' 'and_ln51_2' <Predicate = (!tmp_16)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 79 [1/1] (0.36ns) (out node of the LUT)   --->   "%select_ln52_2 = select i1 %and_ln51_2, i32 38, i32 19" [d4.cpp:52]   --->   Operation 79 'select' 'select_ln52_2' <Predicate = (!tmp_16)> <Delay = 0.36> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.36> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 80 [1/1] (0.79ns)   --->   "%sub_ln52_3 = sub i4 14, i4 %trunc_ln39" [d4.cpp:52]   --->   Operation 80 'sub' 'sub_ln52_3' <Predicate = (!tmp_16)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 81 [1/1] (0.75ns)   --->   "%tmp_s = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i4 %sub_ln52_3" [d4.cpp:52]   --->   Operation 81 'mux' 'tmp_s' <Predicate = (!tmp_16)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : [1/1] (0.57ns)   --->   Input mux for Operation 82 '%mul_ln52_4 = mul i32 %tmp_s, i32 %select_ln52_2'
ST_1 : Operation 82 [1/1] (2.84ns)   --->   "%mul_ln52_4 = mul i32 %tmp_s, i32 %select_ln52_2" [d4.cpp:52]   --->   Operation 82 'mul' 'mul_ln52_4' <Predicate = (!tmp_16)> <Delay = 2.84> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 83 [1/1] (0.78ns)   --->   "%icmp_ln53_2 = icmp_slt  i5 %add_ln51_2, i5 10" [d4.cpp:53]   --->   Operation 83 'icmp' 'icmp_ln53_2' <Predicate = (!tmp_16)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 84 [1/1] (0.79ns)   --->   "%sub_ln52_4 = sub i4 13, i4 %trunc_ln39" [d4.cpp:52]   --->   Operation 84 'sub' 'sub_ln52_4' <Predicate = (!tmp_16)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 85 [1/1] (0.75ns)   --->   "%tmp_11 = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i4 %sub_ln52_4" [d4.cpp:52]   --->   Operation 85 'mux' 'tmp_11' <Predicate = (!tmp_16)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : [1/1] (0.52ns)   --->   Input mux for Operation 86 '%mul_ln52_5 = mul i32 %tmp_11, i32 19'
ST_1 : Operation 86 [1/1] (2.89ns)   --->   "%mul_ln52_5 = mul i32 %tmp_11, i32 19" [d4.cpp:52]   --->   Operation 86 'mul' 'mul_ln52_5' <Predicate = (!tmp_16)> <Delay = 2.89> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 87 [1/1] (0.78ns)   --->   "%add_ln51_3 = add i5 %i1_1, i5 7" [d4.cpp:51]   --->   Operation 87 'add' 'add_ln51_3' <Predicate = (!tmp_16)> <Delay = 0.78> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 88 [1/1] (0.78ns)   --->   "%icmp_ln51_3 = icmp_ugt  i5 %add_ln51_3, i5 9" [d4.cpp:51]   --->   Operation 88 'icmp' 'icmp_ln51_3' <Predicate = (!tmp_16)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 89 [1/1] (0.00ns) (grouped into LUT with out node select_ln52_3)   --->   "%and_ln51_3 = and i1 %empty, i1 %icmp_ln51_3" [d4.cpp:51]   --->   Operation 89 'and' 'and_ln51_3' <Predicate = (!tmp_16)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 90 [1/1] (0.36ns) (out node of the LUT)   --->   "%select_ln52_3 = select i1 %and_ln51_3, i32 38, i32 19" [d4.cpp:52]   --->   Operation 90 'select' 'select_ln52_3' <Predicate = (!tmp_16)> <Delay = 0.36> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.36> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 91 [1/1] (0.79ns)   --->   "%sub_ln52_5 = sub i4 12, i4 %trunc_ln39" [d4.cpp:52]   --->   Operation 91 'sub' 'sub_ln52_5' <Predicate = (!tmp_16)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 92 [1/1] (0.75ns)   --->   "%tmp_13 = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 0, i32 0, i32 0, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i4 %sub_ln52_5" [d4.cpp:52]   --->   Operation 92 'mux' 'tmp_13' <Predicate = (!tmp_16)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : [1/1] (0.57ns)   --->   Input mux for Operation 93 '%mul_ln52_6 = mul i32 %tmp_13, i32 %select_ln52_3'
ST_1 : Operation 93 [1/1] (2.84ns)   --->   "%mul_ln52_6 = mul i32 %tmp_13, i32 %select_ln52_3" [d4.cpp:52]   --->   Operation 93 'mul' 'mul_ln52_6' <Predicate = (!tmp_16)> <Delay = 2.84> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 94 [1/1] (0.78ns)   --->   "%icmp_ln53_3 = icmp_ult  i5 %add_ln51_3, i5 10" [d4.cpp:53]   --->   Operation 94 'icmp' 'icmp_ln53_3' <Predicate = (!tmp_16)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 95 [1/1] (0.79ns)   --->   "%sub_ln52_6 = sub i4 11, i4 %trunc_ln39" [d4.cpp:52]   --->   Operation 95 'sub' 'sub_ln52_6' <Predicate = (!tmp_16)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 96 [1/1] (0.75ns)   --->   "%tmp_14 = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 0, i32 0, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i4 %sub_ln52_6" [d4.cpp:52]   --->   Operation 96 'mux' 'tmp_14' <Predicate = (!tmp_16)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : [1/1] (0.52ns)   --->   Input mux for Operation 97 '%mul_ln52_7 = mul i32 %tmp_14, i32 19'
ST_1 : Operation 97 [1/1] (2.89ns)   --->   "%mul_ln52_7 = mul i32 %tmp_14, i32 19" [d4.cpp:52]   --->   Operation 97 'mul' 'mul_ln52_7' <Predicate = (!tmp_16)> <Delay = 2.89> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 98 [1/1] (0.78ns)   --->   "%icmp_ln51_4 = icmp_sgt  i5 %i1_1, i5 0" [d4.cpp:51]   --->   Operation 98 'icmp' 'icmp_ln51_4' <Predicate = (!tmp_16)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 99 [1/1] (0.00ns) (grouped into LUT with out node select_ln52_4)   --->   "%and_ln51_4 = and i1 %empty, i1 %icmp_ln51_4" [d4.cpp:51]   --->   Operation 99 'and' 'and_ln51_4' <Predicate = (!tmp_16)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 100 [1/1] (0.36ns) (out node of the LUT)   --->   "%select_ln52_4 = select i1 %and_ln51_4, i32 38, i32 19" [d4.cpp:52]   --->   Operation 100 'select' 'select_ln52_4' <Predicate = (!tmp_16)> <Delay = 0.36> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.36> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 101 [1/1] (0.79ns)   --->   "%sub_ln52_7 = sub i4 10, i4 %trunc_ln39" [d4.cpp:52]   --->   Operation 101 'sub' 'sub_ln52_7' <Predicate = (!tmp_16)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 102 [1/1] (0.75ns)   --->   "%tmp_15 = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 0, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i4 %sub_ln52_7" [d4.cpp:52]   --->   Operation 102 'mux' 'tmp_15' <Predicate = (!tmp_16)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : [1/1] (0.57ns)   --->   Input mux for Operation 103 '%mul_ln52_8 = mul i32 %tmp_15, i32 %select_ln52_4'
ST_1 : Operation 103 [1/1] (2.84ns)   --->   "%mul_ln52_8 = mul i32 %tmp_15, i32 %select_ln52_4" [d4.cpp:52]   --->   Operation 103 'mul' 'mul_ln52_8' <Predicate = (!tmp_16)> <Delay = 2.84> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 104 [1/1] (0.78ns)   --->   "%add_ln39 = add i5 %i1_1, i5 31" [d4.cpp:39]   --->   Operation 104 'add' 'add_ln39' <Predicate = (!tmp_16)> <Delay = 0.78> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 105 [1/1] (0.42ns)   --->   "%store_ln39 = store i5 %add_ln39, i5 %i1" [d4.cpp:39]   --->   Operation 105 'store' 'store_ln39' <Predicate = (!tmp_16)> <Delay = 0.42>
ST_1 : Operation 269 [1/1] (0.00ns)   --->   "%add6569_load_1 = load i64 %add6569"   --->   Operation 269 'load' 'add6569_load_1' <Predicate = (tmp_16)> <Delay = 0.00>
ST_1 : Operation 270 [1/1] (0.00ns)   --->   "%add65_12970_load_1 = load i64 %add65_12970"   --->   Operation 270 'load' 'add65_12970_load_1' <Predicate = (tmp_16)> <Delay = 0.00>
ST_1 : Operation 271 [1/1] (0.00ns)   --->   "%add65_171_load_1 = load i64 %add65_171"   --->   Operation 271 'load' 'add65_171_load_1' <Predicate = (tmp_16)> <Delay = 0.00>
ST_1 : Operation 272 [1/1] (0.00ns)   --->   "%add65_1_172_load_1 = load i64 %add65_1_172"   --->   Operation 272 'load' 'add65_1_172_load_1' <Predicate = (tmp_16)> <Delay = 0.00>
ST_1 : Operation 273 [1/1] (0.00ns)   --->   "%add65_273_load_1 = load i64 %add65_273"   --->   Operation 273 'load' 'add65_273_load_1' <Predicate = (tmp_16)> <Delay = 0.00>
ST_1 : Operation 274 [1/1] (0.00ns)   --->   "%add65_2_174_load_1 = load i64 %add65_2_174"   --->   Operation 274 'load' 'add65_2_174_load_1' <Predicate = (tmp_16)> <Delay = 0.00>
ST_1 : Operation 275 [1/1] (0.00ns)   --->   "%add65_375_load_1 = load i64 %add65_375"   --->   Operation 275 'load' 'add65_375_load_1' <Predicate = (tmp_16)> <Delay = 0.00>
ST_1 : Operation 276 [1/1] (0.00ns)   --->   "%add65_3_176_load_1 = load i64 %add65_3_176"   --->   Operation 276 'load' 'add65_3_176_load_1' <Predicate = (tmp_16)> <Delay = 0.00>
ST_1 : Operation 277 [1/1] (0.00ns)   --->   "%add65_477_load_1 = load i64 %add65_477"   --->   Operation 277 'load' 'add65_477_load_1' <Predicate = (tmp_16)> <Delay = 0.00>
ST_1 : Operation 278 [1/1] (0.00ns)   --->   "%add65_4_178_load_1 = load i64 %add65_4_178"   --->   Operation 278 'load' 'add65_4_178_load_1' <Predicate = (tmp_16)> <Delay = 0.00>
ST_1 : Operation 279 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add65_4_178_out, i64 %add65_4_178_load_1"   --->   Operation 279 'write' 'write_ln0' <Predicate = (tmp_16)> <Delay = 0.00>
ST_1 : Operation 280 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add65_477_out, i64 %add65_477_load_1"   --->   Operation 280 'write' 'write_ln0' <Predicate = (tmp_16)> <Delay = 0.00>
ST_1 : Operation 281 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add65_3_176_out, i64 %add65_3_176_load_1"   --->   Operation 281 'write' 'write_ln0' <Predicate = (tmp_16)> <Delay = 0.00>
ST_1 : Operation 282 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add65_375_out, i64 %add65_375_load_1"   --->   Operation 282 'write' 'write_ln0' <Predicate = (tmp_16)> <Delay = 0.00>
ST_1 : Operation 283 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add65_2_174_out, i64 %add65_2_174_load_1"   --->   Operation 283 'write' 'write_ln0' <Predicate = (tmp_16)> <Delay = 0.00>
ST_1 : Operation 284 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add65_273_out, i64 %add65_273_load_1"   --->   Operation 284 'write' 'write_ln0' <Predicate = (tmp_16)> <Delay = 0.00>
ST_1 : Operation 285 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add65_1_172_out, i64 %add65_1_172_load_1"   --->   Operation 285 'write' 'write_ln0' <Predicate = (tmp_16)> <Delay = 0.00>
ST_1 : Operation 286 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add65_171_out, i64 %add65_171_load_1"   --->   Operation 286 'write' 'write_ln0' <Predicate = (tmp_16)> <Delay = 0.00>
ST_1 : Operation 287 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add65_12970_out, i64 %add65_12970_load_1"   --->   Operation 287 'write' 'write_ln0' <Predicate = (tmp_16)> <Delay = 0.00>
ST_1 : Operation 288 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add6569_out, i64 %add6569_load_1"   --->   Operation 288 'write' 'write_ln0' <Predicate = (tmp_16)> <Delay = 0.00>
ST_1 : Operation 289 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 289 'ret' 'ret_ln0' <Predicate = (tmp_16)> <Delay = 0.00>

State 2 <SV = 1> <Delay = 7.07>
ST_2 : Operation 106 [1/1] (0.00ns)   --->   "%add6569_load = load i64 %add6569" [d4.cpp:54]   --->   Operation 106 'load' 'add6569_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 107 [1/1] (0.00ns)   --->   "%add65_12970_load = load i64 %add65_12970" [d4.cpp:54]   --->   Operation 107 'load' 'add65_12970_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 108 [1/1] (0.00ns)   --->   "%add65_171_load = load i64 %add65_171" [d4.cpp:54]   --->   Operation 108 'load' 'add65_171_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 109 [1/1] (0.00ns)   --->   "%add65_1_172_load = load i64 %add65_1_172" [d4.cpp:54]   --->   Operation 109 'load' 'add65_1_172_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 110 [1/1] (0.00ns)   --->   "%add65_273_load = load i64 %add65_273" [d4.cpp:54]   --->   Operation 110 'load' 'add65_273_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 111 [1/1] (0.00ns)   --->   "%add65_2_174_load = load i64 %add65_2_174" [d4.cpp:54]   --->   Operation 111 'load' 'add65_2_174_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 112 [1/1] (0.00ns)   --->   "%add65_375_load = load i64 %add65_375" [d4.cpp:54]   --->   Operation 112 'load' 'add65_375_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 113 [1/1] (0.00ns)   --->   "%add65_3_176_load = load i64 %add65_3_176" [d4.cpp:54]   --->   Operation 113 'load' 'add65_3_176_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 114 [1/1] (0.00ns)   --->   "%add65_477_load = load i64 %add65_477" [d4.cpp:54]   --->   Operation 114 'load' 'add65_477_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 115 [1/1] (0.00ns)   --->   "%add65_4_178_load = load i64 %add65_4_178" [d4.cpp:54]   --->   Operation 115 'load' 'add65_4_178_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 116 [1/1] (0.00ns)   --->   "%specpipeline_ln41 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty_14" [d4.cpp:41]   --->   Operation 116 'specpipeline' 'specpipeline_ln41' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 117 [1/1] (0.00ns)   --->   "%speclooptripcount_ln39 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 10, i64 10, i64 10" [d4.cpp:39]   --->   Operation 117 'speclooptripcount' 'speclooptripcount_ln39' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 118 [1/1] (0.00ns)   --->   "%specloopname_ln39 = specloopname void @_ssdm_op_SpecLoopName, void @empty_11" [d4.cpp:39]   --->   Operation 118 'specloopname' 'specloopname_ln39' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 119 [1/1] (0.00ns)   --->   "%trunc_ln39_1 = trunc i5 %i1_1" [d4.cpp:39]   --->   Operation 119 'trunc' 'trunc_ln39_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 120 [1/1] (0.00ns)   --->   "%trunc_ln39_2 = trunc i5 %i1_1" [d4.cpp:39]   --->   Operation 120 'trunc' 'trunc_ln39_2' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 121 [1/1] (0.00ns)   --->   "%zext_ln52 = zext i32 %tmp" [d4.cpp:52]   --->   Operation 121 'zext' 'zext_ln52' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 122 [1/1] (0.79ns)   --->   "%sub_ln54 = sub i4 9, i4 %trunc_ln39" [d4.cpp:54]   --->   Operation 122 'sub' 'sub_ln54' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 123 [1/1] (0.75ns)   --->   "%tmp_1 = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i4 %sub_ln54" [d4.cpp:54]   --->   Operation 123 'mux' 'tmp_1' <Predicate = true> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 124 [1/1] (0.00ns)   --->   "%zext_ln54 = zext i32 %tmp_1" [d4.cpp:54]   --->   Operation 124 'zext' 'zext_ln54' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.71ns)   --->   Input mux for Operation 125 '%mul_ln54 = mul i64 %zext_ln54, i64 %zext_ln52'
ST_2 : Operation 125 [1/1] (2.71ns)   --->   "%mul_ln54 = mul i64 %zext_ln54, i64 %zext_ln52" [d4.cpp:54]   --->   Operation 125 'mul' 'mul_ln54' <Predicate = true> <Delay = 2.71> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 126 [1/1] (1.08ns)   --->   "%add_ln54 = add i64 %mul_ln54, i64 %add6569_load" [d4.cpp:54]   --->   Operation 126 'add' 'add_ln54' <Predicate = true> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 127 [1/1] (0.00ns)   --->   "%zext_ln52_1 = zext i32 %mul_ln52" [d4.cpp:52]   --->   Operation 127 'zext' 'zext_ln52_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 128 [1/1] (0.00ns) (grouped into LUT with out node select_ln54)   --->   "%and_ln53 = and i1 %empty, i1 %icmp_ln53" [d4.cpp:53]   --->   Operation 128 'and' 'and_ln53' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 129 [1/1] (0.79ns)   --->   "%sub_ln54_1 = sub i4 8, i4 %trunc_ln39" [d4.cpp:54]   --->   Operation 129 'sub' 'sub_ln54_1' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 130 [1/1] (0.77ns)   --->   "%tmp_3 = mux i32 @_ssdm_op_Mux.ap_auto.9i32.i4, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i4 %sub_ln54_1" [d4.cpp:54]   --->   Operation 130 'mux' 'tmp_3' <Predicate = true> <Delay = 0.77> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 131 [1/1] (0.00ns) (grouped into LUT with out node select_ln54)   --->   "%shl_ln54 = shl i32 %tmp_3, i32 1" [d4.cpp:54]   --->   Operation 131 'shl' 'shl_ln54' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 132 [1/1] (0.44ns) (out node of the LUT)   --->   "%select_ln54 = select i1 %and_ln53, i32 %shl_ln54, i32 %tmp_3" [d4.cpp:54]   --->   Operation 132 'select' 'select_ln54' <Predicate = true> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 133 [1/1] (0.00ns)   --->   "%zext_ln54_1 = zext i32 %select_ln54" [d4.cpp:54]   --->   Operation 133 'zext' 'zext_ln54_1' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.71ns)   --->   Input mux for Operation 134 '%mul_ln54_1 = mul i64 %zext_ln52_1, i64 %zext_ln52'
ST_2 : Operation 134 [1/1] (2.71ns)   --->   "%mul_ln54_1 = mul i64 %zext_ln52_1, i64 %zext_ln52" [d4.cpp:54]   --->   Operation 134 'mul' 'mul_ln54_1' <Predicate = true> <Delay = 2.71> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 135 [1/1] (0.00ns) (grouped into LUT with out node and_ln54)   --->   "%select_ln54_5 = select i1 %icmp_ln51, i64 18446744073709551615, i64 0" [d4.cpp:54]   --->   Operation 135 'select' 'select_ln54_5' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 136 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln54 = and i64 %mul_ln54_1, i64 %select_ln54_5" [d4.cpp:54]   --->   Operation 136 'and' 'and_ln54' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (0.71ns)   --->   Input mux for Operation 137 '%mul_ln54_2 = mul i64 %zext_ln54_1, i64 %zext_ln52'
ST_2 : Operation 137 [1/1] (2.71ns)   --->   "%mul_ln54_2 = mul i64 %zext_ln54_1, i64 %zext_ln52" [d4.cpp:54]   --->   Operation 137 'mul' 'mul_ln54_2' <Predicate = true> <Delay = 2.71> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 138 [1/1] (0.00ns) (grouped into LUT with out node and_ln54_1)   --->   "%select_ln54_6 = select i1 %icmp_ln53, i64 18446744073709551615, i64 0" [d4.cpp:54]   --->   Operation 138 'select' 'select_ln54_6' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 139 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln54_1 = and i64 %mul_ln54_2, i64 %select_ln54_6" [d4.cpp:54]   --->   Operation 139 'and' 'and_ln54_1' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 140 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln54_1 = add i64 %and_ln54_1, i64 %and_ln54" [d4.cpp:54]   --->   Operation 140 'add' 'add_ln54_1' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 141 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln54_2 = add i64 %add65_12970_load, i64 %add_ln54_1" [d4.cpp:54]   --->   Operation 141 'add' 'add_ln54_2' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 142 [1/1] (0.78ns)   --->   "%empty_22 = add i5 %i1_1, i5 2"   --->   Operation 142 'add' 'empty_22' <Predicate = true> <Delay = 0.78> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 143 [1/1] (0.00ns)   --->   "%zext_ln52_2 = zext i32 %mul_ln52_1" [d4.cpp:52]   --->   Operation 143 'zext' 'zext_ln52_2' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 144 [1/1] (0.78ns)   --->   "%icmp_ln52 = icmp_sgt  i5 %empty_22, i5 9" [d4.cpp:52]   --->   Operation 144 'icmp' 'icmp_ln52' <Predicate = true> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 145 [1/1] (0.12ns)   --->   "%xor_ln54 = xor i3 %trunc_ln39_2, i3 7" [d4.cpp:54]   --->   Operation 145 'xor' 'xor_ln54' <Predicate = true> <Delay = 0.12> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.12> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 146 [1/1] (0.72ns)   --->   "%tmp_5 = mux i32 @_ssdm_op_Mux.ap_auto.8i32.i3, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i3 %xor_ln54" [d4.cpp:54]   --->   Operation 146 'mux' 'tmp_5' <Predicate = true> <Delay = 0.72> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.72> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 147 [1/1] (0.00ns)   --->   "%zext_ln54_2 = zext i32 %tmp_5" [d4.cpp:54]   --->   Operation 147 'zext' 'zext_ln54_2' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 148 [1/1] (0.78ns)   --->   "%icmp_ln54 = icmp_slt  i5 %empty_22, i5 10" [d4.cpp:54]   --->   Operation 148 'icmp' 'icmp_ln54' <Predicate = true> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (0.71ns)   --->   Input mux for Operation 149 '%mul_ln54_3 = mul i64 %zext_ln52_2, i64 %zext_ln52'
ST_2 : Operation 149 [1/1] (2.71ns)   --->   "%mul_ln54_3 = mul i64 %zext_ln52_2, i64 %zext_ln52" [d4.cpp:54]   --->   Operation 149 'mul' 'mul_ln54_3' <Predicate = true> <Delay = 2.71> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 150 [1/1] (0.00ns) (grouped into LUT with out node and_ln54_2)   --->   "%select_ln54_7 = select i1 %icmp_ln52, i64 18446744073709551615, i64 0" [d4.cpp:54]   --->   Operation 150 'select' 'select_ln54_7' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 151 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln54_2 = and i64 %mul_ln54_3, i64 %select_ln54_7" [d4.cpp:54]   --->   Operation 151 'and' 'and_ln54_2' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (0.71ns)   --->   Input mux for Operation 152 '%mul_ln54_4 = mul i64 %zext_ln54_2, i64 %zext_ln52'
ST_2 : Operation 152 [1/1] (2.71ns)   --->   "%mul_ln54_4 = mul i64 %zext_ln54_2, i64 %zext_ln52" [d4.cpp:54]   --->   Operation 152 'mul' 'mul_ln54_4' <Predicate = true> <Delay = 2.71> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 153 [1/1] (0.00ns) (grouped into LUT with out node and_ln54_3)   --->   "%select_ln54_8 = select i1 %icmp_ln54, i64 18446744073709551615, i64 0" [d4.cpp:54]   --->   Operation 153 'select' 'select_ln54_8' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 154 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln54_3 = and i64 %mul_ln54_4, i64 %select_ln54_8" [d4.cpp:54]   --->   Operation 154 'and' 'and_ln54_3' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 155 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln54_3 = add i64 %and_ln54_3, i64 %and_ln54_2" [d4.cpp:54]   --->   Operation 155 'add' 'add_ln54_3' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 156 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln54_4 = add i64 %add65_171_load, i64 %add_ln54_3" [d4.cpp:54]   --->   Operation 156 'add' 'add_ln54_4' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 157 [1/1] (0.00ns)   --->   "%zext_ln52_3 = zext i32 %mul_ln52_2" [d4.cpp:52]   --->   Operation 157 'zext' 'zext_ln52_3' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 158 [1/1] (0.00ns) (grouped into LUT with out node select_ln54_1)   --->   "%and_ln53_1 = and i1 %empty, i1 %icmp_ln53_1" [d4.cpp:53]   --->   Operation 158 'and' 'and_ln53_1' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 159 [1/1] (0.67ns)   --->   "%sub_ln54_2 = sub i3 6, i3 %trunc_ln39_2" [d4.cpp:54]   --->   Operation 159 'sub' 'sub_ln54_2' <Predicate = true> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 160 [1/1] (0.67ns)   --->   "%tmp_7 = mux i32 @_ssdm_op_Mux.ap_auto.7i32.i3, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i3 %sub_ln54_2" [d4.cpp:54]   --->   Operation 160 'mux' 'tmp_7' <Predicate = true> <Delay = 0.67> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 161 [1/1] (0.00ns) (grouped into LUT with out node select_ln54_1)   --->   "%shl_ln54_1 = shl i32 %tmp_7, i32 1" [d4.cpp:54]   --->   Operation 161 'shl' 'shl_ln54_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 162 [1/1] (0.44ns) (out node of the LUT)   --->   "%select_ln54_1 = select i1 %and_ln53_1, i32 %shl_ln54_1, i32 %tmp_7" [d4.cpp:54]   --->   Operation 162 'select' 'select_ln54_1' <Predicate = true> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 163 [1/1] (0.00ns)   --->   "%zext_ln54_3 = zext i32 %select_ln54_1" [d4.cpp:54]   --->   Operation 163 'zext' 'zext_ln54_3' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.71ns)   --->   Input mux for Operation 164 '%mul_ln54_5 = mul i64 %zext_ln52_3, i64 %zext_ln52'
ST_2 : Operation 164 [1/1] (2.71ns)   --->   "%mul_ln54_5 = mul i64 %zext_ln52_3, i64 %zext_ln52" [d4.cpp:54]   --->   Operation 164 'mul' 'mul_ln54_5' <Predicate = true> <Delay = 2.71> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 165 [1/1] (0.00ns) (grouped into LUT with out node and_ln54_4)   --->   "%select_ln54_9 = select i1 %icmp_ln51_1, i64 18446744073709551615, i64 0" [d4.cpp:54]   --->   Operation 165 'select' 'select_ln54_9' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 166 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln54_4 = and i64 %mul_ln54_5, i64 %select_ln54_9" [d4.cpp:54]   --->   Operation 166 'and' 'and_ln54_4' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (0.71ns)   --->   Input mux for Operation 167 '%mul_ln54_6 = mul i64 %zext_ln54_3, i64 %zext_ln52'
ST_2 : Operation 167 [1/1] (2.71ns)   --->   "%mul_ln54_6 = mul i64 %zext_ln54_3, i64 %zext_ln52" [d4.cpp:54]   --->   Operation 167 'mul' 'mul_ln54_6' <Predicate = true> <Delay = 2.71> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 168 [1/1] (0.00ns) (grouped into LUT with out node and_ln54_5)   --->   "%select_ln54_10 = select i1 %icmp_ln53_1, i64 18446744073709551615, i64 0" [d4.cpp:54]   --->   Operation 168 'select' 'select_ln54_10' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 169 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln54_5 = and i64 %mul_ln54_6, i64 %select_ln54_10" [d4.cpp:54]   --->   Operation 169 'and' 'and_ln54_5' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 170 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln54_5 = add i64 %and_ln54_5, i64 %and_ln54_4" [d4.cpp:54]   --->   Operation 170 'add' 'add_ln54_5' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 171 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln54_6 = add i64 %add65_1_172_load, i64 %add_ln54_5" [d4.cpp:54]   --->   Operation 171 'add' 'add_ln54_6' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 172 [1/1] (0.78ns)   --->   "%empty_23 = add i5 %i1_1, i5 4"   --->   Operation 172 'add' 'empty_23' <Predicate = true> <Delay = 0.78> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 173 [1/1] (0.00ns)   --->   "%zext_ln52_4 = zext i32 %mul_ln52_3" [d4.cpp:52]   --->   Operation 173 'zext' 'zext_ln52_4' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 174 [1/1] (0.78ns)   --->   "%icmp_ln52_1 = icmp_sgt  i5 %empty_23, i5 9" [d4.cpp:52]   --->   Operation 174 'icmp' 'icmp_ln52_1' <Predicate = true> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 175 [1/1] (0.67ns)   --->   "%sub_ln54_3 = sub i3 5, i3 %trunc_ln39_2" [d4.cpp:54]   --->   Operation 175 'sub' 'sub_ln54_3' <Predicate = true> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 176 [1/1] (0.62ns)   --->   "%tmp_9 = mux i32 @_ssdm_op_Mux.ap_auto.6i32.i3, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i3 %sub_ln54_3" [d4.cpp:54]   --->   Operation 176 'mux' 'tmp_9' <Predicate = true> <Delay = 0.62> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.62> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 177 [1/1] (0.00ns)   --->   "%zext_ln54_4 = zext i32 %tmp_9" [d4.cpp:54]   --->   Operation 177 'zext' 'zext_ln54_4' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 178 [1/1] (0.78ns)   --->   "%icmp_ln54_1 = icmp_slt  i5 %empty_23, i5 10" [d4.cpp:54]   --->   Operation 178 'icmp' 'icmp_ln54_1' <Predicate = true> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (0.71ns)   --->   Input mux for Operation 179 '%mul_ln54_7 = mul i64 %zext_ln52_4, i64 %zext_ln52'
ST_2 : Operation 179 [1/1] (2.71ns)   --->   "%mul_ln54_7 = mul i64 %zext_ln52_4, i64 %zext_ln52" [d4.cpp:54]   --->   Operation 179 'mul' 'mul_ln54_7' <Predicate = true> <Delay = 2.71> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 180 [1/1] (0.00ns) (grouped into LUT with out node and_ln54_6)   --->   "%select_ln54_11 = select i1 %icmp_ln52_1, i64 18446744073709551615, i64 0" [d4.cpp:54]   --->   Operation 180 'select' 'select_ln54_11' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 181 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln54_6 = and i64 %mul_ln54_7, i64 %select_ln54_11" [d4.cpp:54]   --->   Operation 181 'and' 'and_ln54_6' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (0.71ns)   --->   Input mux for Operation 182 '%mul_ln54_8 = mul i64 %zext_ln54_4, i64 %zext_ln52'
ST_2 : Operation 182 [1/1] (2.71ns)   --->   "%mul_ln54_8 = mul i64 %zext_ln54_4, i64 %zext_ln52" [d4.cpp:54]   --->   Operation 182 'mul' 'mul_ln54_8' <Predicate = true> <Delay = 2.71> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 183 [1/1] (0.00ns) (grouped into LUT with out node and_ln54_7)   --->   "%select_ln54_12 = select i1 %icmp_ln54_1, i64 18446744073709551615, i64 0" [d4.cpp:54]   --->   Operation 183 'select' 'select_ln54_12' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 184 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln54_7 = and i64 %mul_ln54_8, i64 %select_ln54_12" [d4.cpp:54]   --->   Operation 184 'and' 'and_ln54_7' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 185 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln54_7 = add i64 %and_ln54_7, i64 %and_ln54_6" [d4.cpp:54]   --->   Operation 185 'add' 'add_ln54_7' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 186 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln54_8 = add i64 %add65_273_load, i64 %add_ln54_7" [d4.cpp:54]   --->   Operation 186 'add' 'add_ln54_8' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 187 [1/1] (0.00ns)   --->   "%zext_ln52_5 = zext i32 %mul_ln52_4" [d4.cpp:52]   --->   Operation 187 'zext' 'zext_ln52_5' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 188 [1/1] (0.00ns) (grouped into LUT with out node select_ln54_2)   --->   "%and_ln53_2 = and i1 %empty, i1 %icmp_ln53_2" [d4.cpp:53]   --->   Operation 188 'and' 'and_ln53_2' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 189 [1/1] (0.67ns)   --->   "%sub_ln54_4 = sub i3 4, i3 %trunc_ln39_2" [d4.cpp:54]   --->   Operation 189 'sub' 'sub_ln54_4' <Predicate = true> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 190 [1/1] (0.57ns)   --->   "%tmp_10 = mux i32 @_ssdm_op_Mux.ap_auto.5i32.i3, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i3 %sub_ln54_4" [d4.cpp:54]   --->   Operation 190 'mux' 'tmp_10' <Predicate = true> <Delay = 0.57> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.57> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 191 [1/1] (0.00ns) (grouped into LUT with out node select_ln54_2)   --->   "%shl_ln54_2 = shl i32 %tmp_10, i32 1" [d4.cpp:54]   --->   Operation 191 'shl' 'shl_ln54_2' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 192 [1/1] (0.44ns) (out node of the LUT)   --->   "%select_ln54_2 = select i1 %and_ln53_2, i32 %shl_ln54_2, i32 %tmp_10" [d4.cpp:54]   --->   Operation 192 'select' 'select_ln54_2' <Predicate = true> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 193 [1/1] (0.00ns)   --->   "%zext_ln54_5 = zext i32 %select_ln54_2" [d4.cpp:54]   --->   Operation 193 'zext' 'zext_ln54_5' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.71ns)   --->   Input mux for Operation 194 '%mul_ln54_9 = mul i64 %zext_ln52_5, i64 %zext_ln52'
ST_2 : Operation 194 [1/1] (2.71ns)   --->   "%mul_ln54_9 = mul i64 %zext_ln52_5, i64 %zext_ln52" [d4.cpp:54]   --->   Operation 194 'mul' 'mul_ln54_9' <Predicate = true> <Delay = 2.71> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 195 [1/1] (0.00ns) (grouped into LUT with out node and_ln54_8)   --->   "%select_ln54_13 = select i1 %icmp_ln51_2, i64 18446744073709551615, i64 0" [d4.cpp:54]   --->   Operation 195 'select' 'select_ln54_13' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 196 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln54_8 = and i64 %mul_ln54_9, i64 %select_ln54_13" [d4.cpp:54]   --->   Operation 196 'and' 'and_ln54_8' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (0.71ns)   --->   Input mux for Operation 197 '%mul_ln54_10 = mul i64 %zext_ln54_5, i64 %zext_ln52'
ST_2 : Operation 197 [1/1] (2.71ns)   --->   "%mul_ln54_10 = mul i64 %zext_ln54_5, i64 %zext_ln52" [d4.cpp:54]   --->   Operation 197 'mul' 'mul_ln54_10' <Predicate = true> <Delay = 2.71> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 198 [1/1] (0.00ns) (grouped into LUT with out node and_ln54_9)   --->   "%select_ln54_14 = select i1 %icmp_ln53_2, i64 18446744073709551615, i64 0" [d4.cpp:54]   --->   Operation 198 'select' 'select_ln54_14' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 199 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln54_9 = and i64 %mul_ln54_10, i64 %select_ln54_14" [d4.cpp:54]   --->   Operation 199 'and' 'and_ln54_9' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 200 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln54_9 = add i64 %and_ln54_9, i64 %and_ln54_8" [d4.cpp:54]   --->   Operation 200 'add' 'add_ln54_9' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 201 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln54_10 = add i64 %add65_2_174_load, i64 %add_ln54_9" [d4.cpp:54]   --->   Operation 201 'add' 'add_ln54_10' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 202 [1/1] (0.78ns)   --->   "%empty_24 = add i5 %i1_1, i5 6"   --->   Operation 202 'add' 'empty_24' <Predicate = true> <Delay = 0.78> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 203 [1/1] (0.00ns)   --->   "%zext_ln52_6 = zext i32 %mul_ln52_5" [d4.cpp:52]   --->   Operation 203 'zext' 'zext_ln52_6' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 204 [1/1] (0.78ns)   --->   "%icmp_ln52_2 = icmp_sgt  i5 %empty_24, i5 9" [d4.cpp:52]   --->   Operation 204 'icmp' 'icmp_ln52_2' <Predicate = true> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 205 [1/1] (0.28ns)   --->   "%xor_ln54_1 = xor i2 %trunc_ln39_1, i2 3" [d4.cpp:54]   --->   Operation 205 'xor' 'xor_ln54_1' <Predicate = true> <Delay = 0.28> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 206 [1/1] (0.52ns)   --->   "%tmp_12 = mux i32 @_ssdm_op_Mux.ap_auto.4i32.i2, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i2 %xor_ln54_1" [d4.cpp:54]   --->   Operation 206 'mux' 'tmp_12' <Predicate = true> <Delay = 0.52> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.52> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 207 [1/1] (0.00ns)   --->   "%zext_ln54_6 = zext i32 %tmp_12" [d4.cpp:54]   --->   Operation 207 'zext' 'zext_ln54_6' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 208 [1/1] (0.78ns)   --->   "%icmp_ln54_2 = icmp_slt  i5 %empty_24, i5 10" [d4.cpp:54]   --->   Operation 208 'icmp' 'icmp_ln54_2' <Predicate = true> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (0.71ns)   --->   Input mux for Operation 209 '%mul_ln54_11 = mul i64 %zext_ln52_6, i64 %zext_ln52'
ST_2 : Operation 209 [1/1] (2.71ns)   --->   "%mul_ln54_11 = mul i64 %zext_ln52_6, i64 %zext_ln52" [d4.cpp:54]   --->   Operation 209 'mul' 'mul_ln54_11' <Predicate = true> <Delay = 2.71> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 210 [1/1] (0.00ns) (grouped into LUT with out node and_ln54_10)   --->   "%select_ln54_15 = select i1 %icmp_ln52_2, i64 18446744073709551615, i64 0" [d4.cpp:54]   --->   Operation 210 'select' 'select_ln54_15' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 211 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln54_10 = and i64 %mul_ln54_11, i64 %select_ln54_15" [d4.cpp:54]   --->   Operation 211 'and' 'and_ln54_10' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (0.71ns)   --->   Input mux for Operation 212 '%mul_ln54_12 = mul i64 %zext_ln54_6, i64 %zext_ln52'
ST_2 : Operation 212 [1/1] (2.71ns)   --->   "%mul_ln54_12 = mul i64 %zext_ln54_6, i64 %zext_ln52" [d4.cpp:54]   --->   Operation 212 'mul' 'mul_ln54_12' <Predicate = true> <Delay = 2.71> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 213 [1/1] (0.00ns) (grouped into LUT with out node and_ln54_11)   --->   "%select_ln54_16 = select i1 %icmp_ln54_2, i64 18446744073709551615, i64 0" [d4.cpp:54]   --->   Operation 213 'select' 'select_ln54_16' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 214 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln54_11 = and i64 %mul_ln54_12, i64 %select_ln54_16" [d4.cpp:54]   --->   Operation 214 'and' 'and_ln54_11' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 215 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln54_11 = add i64 %and_ln54_11, i64 %and_ln54_10" [d4.cpp:54]   --->   Operation 215 'add' 'add_ln54_11' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 216 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln54_12 = add i64 %add65_375_load, i64 %add_ln54_11" [d4.cpp:54]   --->   Operation 216 'add' 'add_ln54_12' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 217 [1/1] (0.00ns)   --->   "%zext_ln52_7 = zext i32 %mul_ln52_6" [d4.cpp:52]   --->   Operation 217 'zext' 'zext_ln52_7' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 218 [1/1] (0.00ns) (grouped into LUT with out node select_ln54_3)   --->   "%and_ln53_3 = and i1 %empty, i1 %icmp_ln53_3" [d4.cpp:53]   --->   Operation 218 'and' 'and_ln53_3' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 219 [1/1] (0.00ns) (grouped into LUT with out node select_ln54_3)   --->   "%shl_ln54_3 = shl i32 %tmp_2, i32 1" [d4.cpp:54]   --->   Operation 219 'shl' 'shl_ln54_3' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 220 [1/1] (0.44ns) (out node of the LUT)   --->   "%select_ln54_3 = select i1 %and_ln53_3, i32 %shl_ln54_3, i32 %tmp_2" [d4.cpp:54]   --->   Operation 220 'select' 'select_ln54_3' <Predicate = true> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 221 [1/1] (0.00ns)   --->   "%zext_ln54_7 = zext i32 %select_ln54_3" [d4.cpp:54]   --->   Operation 221 'zext' 'zext_ln54_7' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.71ns)   --->   Input mux for Operation 222 '%mul_ln54_13 = mul i64 %zext_ln52_7, i64 %zext_ln52'
ST_2 : Operation 222 [1/1] (2.71ns)   --->   "%mul_ln54_13 = mul i64 %zext_ln52_7, i64 %zext_ln52" [d4.cpp:54]   --->   Operation 222 'mul' 'mul_ln54_13' <Predicate = true> <Delay = 2.71> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 223 [1/1] (0.00ns) (grouped into LUT with out node and_ln54_12)   --->   "%select_ln54_17 = select i1 %icmp_ln51_3, i64 18446744073709551615, i64 0" [d4.cpp:54]   --->   Operation 223 'select' 'select_ln54_17' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 224 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln54_12 = and i64 %mul_ln54_13, i64 %select_ln54_17" [d4.cpp:54]   --->   Operation 224 'and' 'and_ln54_12' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (0.71ns)   --->   Input mux for Operation 225 '%mul_ln54_14 = mul i64 %zext_ln54_7, i64 %zext_ln52'
ST_2 : Operation 225 [1/1] (2.71ns)   --->   "%mul_ln54_14 = mul i64 %zext_ln54_7, i64 %zext_ln52" [d4.cpp:54]   --->   Operation 225 'mul' 'mul_ln54_14' <Predicate = true> <Delay = 2.71> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 226 [1/1] (0.00ns) (grouped into LUT with out node and_ln54_13)   --->   "%select_ln54_18 = select i1 %icmp_ln53_3, i64 18446744073709551615, i64 0" [d4.cpp:54]   --->   Operation 226 'select' 'select_ln54_18' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 227 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln54_13 = and i64 %mul_ln54_14, i64 %select_ln54_18" [d4.cpp:54]   --->   Operation 227 'and' 'and_ln54_13' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 228 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln54_13 = add i64 %and_ln54_12, i64 %and_ln54_13" [d4.cpp:54]   --->   Operation 228 'add' 'add_ln54_13' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 229 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln54_14 = add i64 %add65_3_176_load, i64 %add_ln54_13" [d4.cpp:54]   --->   Operation 229 'add' 'add_ln54_14' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 230 [1/1] (0.78ns)   --->   "%empty_25 = add i5 %i1_1, i5 8"   --->   Operation 230 'add' 'empty_25' <Predicate = true> <Delay = 0.78> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 231 [1/1] (0.00ns)   --->   "%zext_ln52_8 = zext i32 %mul_ln52_7" [d4.cpp:52]   --->   Operation 231 'zext' 'zext_ln52_8' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 232 [1/1] (0.78ns)   --->   "%icmp_ln52_3 = icmp_ugt  i5 %empty_25, i5 9" [d4.cpp:52]   --->   Operation 232 'icmp' 'icmp_ln52_3' <Predicate = true> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 233 [1/1] (0.00ns)   --->   "%zext_ln54_8 = zext i32 %tmp_4" [d4.cpp:54]   --->   Operation 233 'zext' 'zext_ln54_8' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 234 [1/1] (0.78ns)   --->   "%icmp_ln54_3 = icmp_ult  i5 %empty_25, i5 10" [d4.cpp:54]   --->   Operation 234 'icmp' 'icmp_ln54_3' <Predicate = true> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (0.71ns)   --->   Input mux for Operation 235 '%mul_ln54_15 = mul i64 %zext_ln52_8, i64 %zext_ln52'
ST_2 : Operation 235 [1/1] (2.71ns)   --->   "%mul_ln54_15 = mul i64 %zext_ln52_8, i64 %zext_ln52" [d4.cpp:54]   --->   Operation 235 'mul' 'mul_ln54_15' <Predicate = true> <Delay = 2.71> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 236 [1/1] (0.00ns) (grouped into LUT with out node and_ln54_14)   --->   "%select_ln54_19 = select i1 %icmp_ln52_3, i64 18446744073709551615, i64 0" [d4.cpp:54]   --->   Operation 236 'select' 'select_ln54_19' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 237 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln54_14 = and i64 %mul_ln54_15, i64 %select_ln54_19" [d4.cpp:54]   --->   Operation 237 'and' 'and_ln54_14' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (0.71ns)   --->   Input mux for Operation 238 '%mul_ln54_16 = mul i64 %zext_ln54_8, i64 %zext_ln52'
ST_2 : Operation 238 [1/1] (2.71ns)   --->   "%mul_ln54_16 = mul i64 %zext_ln54_8, i64 %zext_ln52" [d4.cpp:54]   --->   Operation 238 'mul' 'mul_ln54_16' <Predicate = true> <Delay = 2.71> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 239 [1/1] (0.00ns) (grouped into LUT with out node and_ln54_15)   --->   "%select_ln54_20 = select i1 %icmp_ln54_3, i64 18446744073709551615, i64 0" [d4.cpp:54]   --->   Operation 239 'select' 'select_ln54_20' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 240 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln54_15 = and i64 %mul_ln54_16, i64 %select_ln54_20" [d4.cpp:54]   --->   Operation 240 'and' 'and_ln54_15' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 241 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln54_15 = add i64 %and_ln54_14, i64 %and_ln54_15" [d4.cpp:54]   --->   Operation 241 'add' 'add_ln54_15' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 242 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln54_16 = add i64 %add65_477_load, i64 %add_ln54_15" [d4.cpp:54]   --->   Operation 242 'add' 'add_ln54_16' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 243 [1/1] (0.78ns)   --->   "%add_ln51_4 = add i5 %i1_1, i5 9" [d4.cpp:51]   --->   Operation 243 'add' 'add_ln51_4' <Predicate = true> <Delay = 0.78> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 244 [1/1] (0.00ns)   --->   "%zext_ln52_9 = zext i32 %mul_ln52_8" [d4.cpp:52]   --->   Operation 244 'zext' 'zext_ln52_9' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 245 [1/1] (0.78ns)   --->   "%icmp_ln53_4 = icmp_ult  i5 %add_ln51_4, i5 10" [d4.cpp:53]   --->   Operation 245 'icmp' 'icmp_ln53_4' <Predicate = true> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 246 [1/1] (0.00ns) (grouped into LUT with out node select_ln54_4)   --->   "%and_ln53_4 = and i1 %empty, i1 %icmp_ln53_4" [d4.cpp:53]   --->   Operation 246 'and' 'and_ln53_4' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 247 [1/1] (0.00ns) (grouped into LUT with out node select_ln54_4)   --->   "%shl_ln54_4 = shl i32 %tmp_6, i32 1" [d4.cpp:54]   --->   Operation 247 'shl' 'shl_ln54_4' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 248 [1/1] (0.44ns) (out node of the LUT)   --->   "%select_ln54_4 = select i1 %and_ln53_4, i32 %shl_ln54_4, i32 %tmp_6" [d4.cpp:54]   --->   Operation 248 'select' 'select_ln54_4' <Predicate = true> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 249 [1/1] (0.00ns)   --->   "%zext_ln54_9 = zext i32 %select_ln54_4" [d4.cpp:54]   --->   Operation 249 'zext' 'zext_ln54_9' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.71ns)   --->   Input mux for Operation 250 '%mul_ln54_17 = mul i64 %zext_ln52_9, i64 %zext_ln52'
ST_2 : Operation 250 [1/1] (2.71ns)   --->   "%mul_ln54_17 = mul i64 %zext_ln52_9, i64 %zext_ln52" [d4.cpp:54]   --->   Operation 250 'mul' 'mul_ln54_17' <Predicate = true> <Delay = 2.71> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 251 [1/1] (0.00ns) (grouped into LUT with out node and_ln54_16)   --->   "%select_ln54_21 = select i1 %icmp_ln51_4, i64 18446744073709551615, i64 0" [d4.cpp:54]   --->   Operation 251 'select' 'select_ln54_21' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 252 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln54_16 = and i64 %mul_ln54_17, i64 %select_ln54_21" [d4.cpp:54]   --->   Operation 252 'and' 'and_ln54_16' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (0.71ns)   --->   Input mux for Operation 253 '%mul_ln54_18 = mul i64 %zext_ln54_9, i64 %zext_ln52'
ST_2 : Operation 253 [1/1] (2.71ns)   --->   "%mul_ln54_18 = mul i64 %zext_ln54_9, i64 %zext_ln52" [d4.cpp:54]   --->   Operation 253 'mul' 'mul_ln54_18' <Predicate = true> <Delay = 2.71> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 254 [1/1] (0.00ns) (grouped into LUT with out node and_ln54_17)   --->   "%select_ln54_22 = select i1 %icmp_ln53_4, i64 18446744073709551615, i64 0" [d4.cpp:54]   --->   Operation 254 'select' 'select_ln54_22' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 255 [1/1] (0.37ns) (out node of the LUT)   --->   "%and_ln54_17 = and i64 %mul_ln54_18, i64 %select_ln54_22" [d4.cpp:54]   --->   Operation 255 'and' 'and_ln54_17' <Predicate = true> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 256 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln54_17 = add i64 %and_ln54_16, i64 %and_ln54_17" [d4.cpp:54]   --->   Operation 256 'add' 'add_ln54_17' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 257 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln54_18 = add i64 %add65_4_178_load, i64 %add_ln54_17" [d4.cpp:54]   --->   Operation 257 'add' 'add_ln54_18' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 258 [1/1] (0.42ns)   --->   "%store_ln39 = store i64 %add_ln54_18, i64 %add65_4_178" [d4.cpp:39]   --->   Operation 258 'store' 'store_ln39' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 259 [1/1] (0.42ns)   --->   "%store_ln39 = store i64 %add_ln54_16, i64 %add65_477" [d4.cpp:39]   --->   Operation 259 'store' 'store_ln39' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 260 [1/1] (0.42ns)   --->   "%store_ln39 = store i64 %add_ln54_14, i64 %add65_3_176" [d4.cpp:39]   --->   Operation 260 'store' 'store_ln39' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 261 [1/1] (0.42ns)   --->   "%store_ln39 = store i64 %add_ln54_12, i64 %add65_375" [d4.cpp:39]   --->   Operation 261 'store' 'store_ln39' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 262 [1/1] (0.42ns)   --->   "%store_ln39 = store i64 %add_ln54_10, i64 %add65_2_174" [d4.cpp:39]   --->   Operation 262 'store' 'store_ln39' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 263 [1/1] (0.42ns)   --->   "%store_ln39 = store i64 %add_ln54_8, i64 %add65_273" [d4.cpp:39]   --->   Operation 263 'store' 'store_ln39' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 264 [1/1] (0.42ns)   --->   "%store_ln39 = store i64 %add_ln54_6, i64 %add65_1_172" [d4.cpp:39]   --->   Operation 264 'store' 'store_ln39' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 265 [1/1] (0.42ns)   --->   "%store_ln39 = store i64 %add_ln54_4, i64 %add65_171" [d4.cpp:39]   --->   Operation 265 'store' 'store_ln39' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 266 [1/1] (0.42ns)   --->   "%store_ln39 = store i64 %add_ln54_2, i64 %add65_12970" [d4.cpp:39]   --->   Operation 266 'store' 'store_ln39' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 267 [1/1] (0.42ns)   --->   "%store_ln39 = store i64 %add_ln54, i64 %add6569" [d4.cpp:39]   --->   Operation 267 'store' 'store_ln39' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 268 [1/1] (0.00ns)   --->   "%br_ln39 = br void %for.body31" [d4.cpp:39]   --->   Operation 268 'br' 'br_ln39' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 5.358ns
The critical path consists of the following:
	'alloca' operation ('i1') [41]  (0.000 ns)
	'load' operation ('i1') on local variable 'i1' [75]  (0.000 ns)
	'add' operation ('add_ln51', d4.cpp:51) [103]  (0.789 ns)
	'icmp' operation ('icmp_ln51', d4.cpp:51) [104]  (0.789 ns)
	'and' operation ('and_ln51', d4.cpp:51) [105]  (0.000 ns)
	'select' operation ('select_ln52', d4.cpp:52) [106]  (0.360 ns)
	multiplexor before operation 'mul' with delay (0.574 ns)
'mul' operation ('mul_ln52', d4.cpp:52) [109]  (2.846 ns)

 <State 2>: 7.072ns
The critical path consists of the following:
	'add' operation ('add_ln51_4', d4.cpp:51) [263]  (0.789 ns)
	'icmp' operation ('icmp_ln53_4', d4.cpp:53) [271]  (0.789 ns)
	'and' operation ('and_ln53_4', d4.cpp:53) [272]  (0.000 ns)
	'select' operation ('select_ln54_4', d4.cpp:54) [274]  (0.449 ns)
	multiplexor before operation 'mul' with delay (0.710 ns)
'mul' operation ('mul_ln54_18', d4.cpp:54) [279]  (2.710 ns)
	'and' operation ('and_ln54_17', d4.cpp:54) [281]  (0.379 ns)
	'add' operation ('add_ln54_17', d4.cpp:54) [282]  (0.000 ns)
	'add' operation ('add_ln54_18', d4.cpp:54) [283]  (0.819 ns)
	'store' operation ('store_ln39', d4.cpp:39) of variable 'add_ln54_18', d4.cpp:54 on local variable 'add65_4_178' [286]  (0.427 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
