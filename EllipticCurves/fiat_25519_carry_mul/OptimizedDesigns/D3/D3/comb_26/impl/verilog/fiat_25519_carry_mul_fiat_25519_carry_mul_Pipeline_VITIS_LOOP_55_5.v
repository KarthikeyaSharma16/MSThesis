// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fiat_25519_carry_mul_fiat_25519_carry_mul_Pipeline_VITIS_LOOP_55_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr,
        arr_1,
        arr_2,
        arr_3,
        arr_4,
        arr_5,
        arr_6,
        arr_7,
        arr_8,
        arg1_r_reload,
        arg1_r_1_reload,
        arg1_r_2_reload,
        arg1_r_3_reload,
        arg1_r_4_reload,
        arg1_r_5_reload,
        arg1_r_6_reload,
        arg1_r_7_reload,
        arg1_r_8_reload,
        arg1_r_9_reload,
        arg2_r_reload,
        arg2_r_7_reload,
        arg2_r_8_reload,
        arg2_r_9_reload,
        arg2_r_1_reload,
        arg2_r_2_reload,
        arg2_r_3_reload,
        arg2_r_4_reload,
        arg2_r_5_reload,
        arg2_r_6_reload,
        add120_9203_out,
        add120_9203_out_ap_vld,
        add120_8202_out,
        add120_8202_out_ap_vld,
        add120_7201_out,
        add120_7201_out_ap_vld,
        add120_6200_out,
        add120_6200_out_ap_vld,
        add120_5199_out,
        add120_5199_out_ap_vld,
        add120_4198_out,
        add120_4198_out_ap_vld,
        add120_3197_out,
        add120_3197_out_ap_vld,
        add120_2196_out,
        add120_2196_out_ap_vld,
        add120_1195_out,
        add120_1195_out_ap_vld,
        add120194_out,
        add120194_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] arr;
input  [63:0] arr_1;
input  [63:0] arr_2;
input  [63:0] arr_3;
input  [63:0] arr_4;
input  [63:0] arr_5;
input  [63:0] arr_6;
input  [63:0] arr_7;
input  [63:0] arr_8;
input  [31:0] arg1_r_reload;
input  [31:0] arg1_r_1_reload;
input  [31:0] arg1_r_2_reload;
input  [31:0] arg1_r_3_reload;
input  [31:0] arg1_r_4_reload;
input  [31:0] arg1_r_5_reload;
input  [31:0] arg1_r_6_reload;
input  [31:0] arg1_r_7_reload;
input  [31:0] arg1_r_8_reload;
input  [31:0] arg1_r_9_reload;
input  [31:0] arg2_r_reload;
input  [31:0] arg2_r_7_reload;
input  [31:0] arg2_r_8_reload;
input  [31:0] arg2_r_9_reload;
input  [31:0] arg2_r_1_reload;
input  [31:0] arg2_r_2_reload;
input  [31:0] arg2_r_3_reload;
input  [31:0] arg2_r_4_reload;
input  [31:0] arg2_r_5_reload;
input  [31:0] arg2_r_6_reload;
output  [63:0] add120_9203_out;
output   add120_9203_out_ap_vld;
output  [63:0] add120_8202_out;
output   add120_8202_out_ap_vld;
output  [63:0] add120_7201_out;
output   add120_7201_out_ap_vld;
output  [63:0] add120_6200_out;
output   add120_6200_out_ap_vld;
output  [63:0] add120_5199_out;
output   add120_5199_out_ap_vld;
output  [63:0] add120_4198_out;
output   add120_4198_out_ap_vld;
output  [63:0] add120_3197_out;
output   add120_3197_out_ap_vld;
output  [63:0] add120_2196_out;
output   add120_2196_out_ap_vld;
output  [63:0] add120_1195_out;
output   add120_1195_out_ap_vld;
output  [63:0] add120194_out;
output   add120194_out_ap_vld;

reg ap_idle;
reg add120_9203_out_ap_vld;
reg add120_8202_out_ap_vld;
reg add120_7201_out_ap_vld;
reg add120_6200_out_ap_vld;
reg add120_5199_out_ap_vld;
reg add120_4198_out_ap_vld;
reg add120_3197_out_ap_vld;
reg add120_2196_out_ap_vld;
reg add120_1195_out_ap_vld;
reg add120194_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_10_fu_552_p3;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [63:0] add120194_fu_166;
wire   [63:0] add_ln68_fu_709_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [63:0] add120_1195_fu_170;
wire   [63:0] add_ln68_1_fu_774_p2;
reg   [63:0] add120_2196_fu_174;
wire   [63:0] add_ln68_2_fu_853_p2;
reg   [63:0] add120_3197_fu_178;
wire   [63:0] add_ln68_3_fu_906_p2;
reg   [63:0] add120_4198_fu_182;
wire   [63:0] add_ln68_4_fu_974_p2;
reg   [63:0] add120_5199_fu_186;
wire   [63:0] add_ln68_5_fu_1029_p2;
reg   [63:0] add120_6200_fu_190;
wire   [63:0] add_ln68_6_fu_1099_p2;
reg   [63:0] add120_7201_fu_194;
wire   [63:0] add_ln68_7_fu_1156_p2;
reg   [63:0] add120_8202_fu_198;
wire   [63:0] add_ln68_8_fu_1228_p2;
reg   [63:0] add120_9203_fu_202;
wire   [63:0] add_ln68_9_fu_1261_p2;
reg   [4:0] i1_fu_206;
wire   [4:0] add_ln55_fu_1267_p2;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] mul_ln68_fu_454_p0;
wire   [31:0] mul_ln68_fu_454_p1;
wire   [63:0] zext_ln68_fu_628_p1;
wire   [31:0] mul_ln68_1_fu_458_p0;
wire   [31:0] mul_ln68_1_fu_458_p1;
wire   [31:0] mul_ln68_2_fu_462_p0;
wire   [31:0] mul_ln68_2_fu_462_p1;
wire   [31:0] mul_ln68_3_fu_466_p0;
wire   [31:0] mul_ln68_3_fu_466_p1;
wire   [31:0] mul_ln68_4_fu_470_p0;
wire   [31:0] mul_ln68_4_fu_470_p1;
wire   [31:0] mul_ln68_5_fu_474_p0;
wire   [31:0] mul_ln68_5_fu_474_p1;
wire   [31:0] mul_ln68_6_fu_478_p0;
wire   [31:0] mul_ln68_6_fu_478_p1;
wire   [31:0] mul_ln68_7_fu_482_p0;
wire   [31:0] mul_ln68_7_fu_482_p1;
wire   [31:0] mul_ln68_8_fu_486_p0;
wire   [31:0] mul_ln68_8_fu_486_p1;
wire   [31:0] mul_ln68_9_fu_490_p0;
wire   [31:0] mul_ln68_9_fu_490_p1;
wire   [3:0] trunc_ln55_fu_590_p1;
wire   [31:0] tmp_fu_612_p12;
wire   [3:0] tmp_1_fu_648_p11;
wire   [31:0] tmp_1_fu_648_p12;
wire   [0:0] empty_fu_602_p1;
wire   [31:0] shl_ln68_fu_670_p2;
wire   [31:0] select_ln68_fu_676_p3;
wire   [4:0] empty_22_fu_606_p2;
wire   [0:0] icmp_ln68_fu_689_p2;
wire   [63:0] mul_ln68_fu_454_p2;
wire   [63:0] select_ln68_5_fu_695_p3;
wire   [63:0] and_ln68_fu_703_p2;
wire   [3:0] tmp_2_fu_727_p11;
wire   [31:0] tmp_2_fu_727_p12;
wire   [4:0] empty_23_fu_715_p2;
wire   [0:0] icmp_ln68_1_fu_754_p2;
wire   [63:0] mul_ln68_1_fu_458_p2;
wire   [63:0] select_ln68_6_fu_760_p3;
wire   [63:0] and_ln68_1_fu_768_p2;
wire   [3:0] tmp_3_fu_792_p11;
wire   [31:0] tmp_3_fu_792_p12;
wire   [31:0] shl_ln68_1_fu_814_p2;
wire   [31:0] select_ln68_1_fu_820_p3;
wire   [4:0] empty_24_fu_780_p2;
wire   [0:0] icmp_ln68_2_fu_833_p2;
wire   [63:0] mul_ln68_2_fu_462_p2;
wire   [63:0] select_ln68_7_fu_839_p3;
wire   [63:0] and_ln68_2_fu_847_p2;
wire   [1:0] trunc_ln55_2_fu_598_p1;
wire   [1:0] tmp_4_fu_871_p5;
wire   [31:0] tmp_4_fu_871_p6;
wire   [4:0] empty_25_fu_859_p2;
wire   [0:0] icmp_ln68_3_fu_886_p2;
wire   [63:0] mul_ln68_3_fu_466_p2;
wire   [63:0] select_ln68_8_fu_892_p3;
wire   [63:0] and_ln68_3_fu_900_p2;
wire   [2:0] trunc_ln55_1_fu_594_p1;
wire   [2:0] tmp_5_fu_924_p6;
wire   [31:0] tmp_5_fu_924_p7;
wire   [31:0] shl_ln68_2_fu_935_p2;
wire   [31:0] select_ln68_2_fu_941_p3;
wire   [4:0] empty_26_fu_912_p2;
wire   [0:0] icmp_ln68_4_fu_954_p2;
wire   [63:0] mul_ln68_4_fu_470_p2;
wire   [63:0] select_ln68_9_fu_960_p3;
wire   [63:0] and_ln68_4_fu_968_p2;
wire   [2:0] tmp_6_fu_992_p7;
wire   [31:0] tmp_6_fu_992_p8;
wire   [4:0] empty_27_fu_980_p2;
wire   [0:0] icmp_ln68_5_fu_1009_p2;
wire   [63:0] mul_ln68_5_fu_474_p2;
wire   [63:0] select_ln68_10_fu_1015_p3;
wire   [63:0] and_ln68_5_fu_1023_p2;
wire   [2:0] tmp_7_fu_1047_p8;
wire   [31:0] tmp_7_fu_1047_p9;
wire   [31:0] shl_ln68_3_fu_1060_p2;
wire   [31:0] select_ln68_3_fu_1066_p3;
wire   [4:0] empty_28_fu_1035_p2;
wire   [0:0] icmp_ln68_6_fu_1079_p2;
wire   [63:0] mul_ln68_6_fu_478_p2;
wire   [63:0] select_ln68_11_fu_1085_p3;
wire   [63:0] and_ln68_6_fu_1093_p2;
wire   [2:0] tmp_8_fu_1117_p9;
wire   [31:0] tmp_8_fu_1117_p10;
wire   [4:0] empty_29_fu_1105_p2;
wire   [0:0] icmp_ln68_7_fu_1136_p2;
wire   [63:0] mul_ln68_7_fu_482_p2;
wire   [63:0] select_ln68_12_fu_1142_p3;
wire   [63:0] and_ln68_7_fu_1150_p2;
wire   [3:0] tmp_9_fu_1174_p10;
wire   [31:0] tmp_9_fu_1174_p11;
wire   [31:0] shl_ln68_4_fu_1189_p2;
wire   [31:0] select_ln68_4_fu_1195_p3;
wire   [4:0] empty_30_fu_1162_p2;
wire   [0:0] icmp_ln68_8_fu_1208_p2;
wire   [63:0] mul_ln68_8_fu_486_p2;
wire   [63:0] select_ln68_13_fu_1214_p3;
wire   [63:0] and_ln68_8_fu_1222_p2;
wire   [3:0] tmp_s_fu_1240_p11;
wire   [31:0] tmp_s_fu_1240_p12;
wire   [63:0] mul_ln68_9_fu_490_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [63:0] mul_ln68_1_fu_458_p00;
wire   [63:0] mul_ln68_2_fu_462_p00;
wire   [63:0] mul_ln68_3_fu_466_p00;
wire   [63:0] mul_ln68_4_fu_470_p00;
wire   [63:0] mul_ln68_5_fu_474_p00;
wire   [63:0] mul_ln68_6_fu_478_p00;
wire   [63:0] mul_ln68_7_fu_482_p00;
wire   [63:0] mul_ln68_8_fu_486_p00;
wire   [63:0] mul_ln68_9_fu_490_p00;
wire   [63:0] mul_ln68_fu_454_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fiat_25519_carry_mul_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U25(
    .din0(mul_ln68_fu_454_p0),
    .din1(mul_ln68_fu_454_p1),
    .dout(mul_ln68_fu_454_p2)
);

fiat_25519_carry_mul_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U26(
    .din0(mul_ln68_1_fu_458_p0),
    .din1(mul_ln68_1_fu_458_p1),
    .dout(mul_ln68_1_fu_458_p2)
);

fiat_25519_carry_mul_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U27(
    .din0(mul_ln68_2_fu_462_p0),
    .din1(mul_ln68_2_fu_462_p1),
    .dout(mul_ln68_2_fu_462_p2)
);

fiat_25519_carry_mul_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U28(
    .din0(mul_ln68_3_fu_466_p0),
    .din1(mul_ln68_3_fu_466_p1),
    .dout(mul_ln68_3_fu_466_p2)
);

fiat_25519_carry_mul_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U29(
    .din0(mul_ln68_4_fu_470_p0),
    .din1(mul_ln68_4_fu_470_p1),
    .dout(mul_ln68_4_fu_470_p2)
);

fiat_25519_carry_mul_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U30(
    .din0(mul_ln68_5_fu_474_p0),
    .din1(mul_ln68_5_fu_474_p1),
    .dout(mul_ln68_5_fu_474_p2)
);

fiat_25519_carry_mul_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U31(
    .din0(mul_ln68_6_fu_478_p0),
    .din1(mul_ln68_6_fu_478_p1),
    .dout(mul_ln68_6_fu_478_p2)
);

fiat_25519_carry_mul_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U32(
    .din0(mul_ln68_7_fu_482_p0),
    .din1(mul_ln68_7_fu_482_p1),
    .dout(mul_ln68_7_fu_482_p2)
);

fiat_25519_carry_mul_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U33(
    .din0(mul_ln68_8_fu_486_p0),
    .din1(mul_ln68_8_fu_486_p1),
    .dout(mul_ln68_8_fu_486_p2)
);

fiat_25519_carry_mul_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U34(
    .din0(mul_ln68_9_fu_490_p0),
    .din1(mul_ln68_9_fu_490_p1),
    .dout(mul_ln68_9_fu_490_p2)
);

fiat_25519_carry_mul_mux_10_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_10_4_32_1_1_U35(
    .din0(arg1_r_reload),
    .din1(arg1_r_1_reload),
    .din2(arg1_r_2_reload),
    .din3(arg1_r_3_reload),
    .din4(arg1_r_4_reload),
    .din5(arg1_r_5_reload),
    .din6(arg1_r_6_reload),
    .din7(arg1_r_7_reload),
    .din8(arg1_r_8_reload),
    .din9(arg1_r_9_reload),
    .din10(trunc_ln55_fu_590_p1),
    .dout(tmp_fu_612_p12)
);

fiat_25519_carry_mul_mux_10_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_10_4_32_1_1_U36(
    .din0(arg2_r_reload),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(arg2_r_9_reload),
    .din10(tmp_1_fu_648_p11),
    .dout(tmp_1_fu_648_p12)
);

fiat_25519_carry_mul_mux_10_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_10_4_32_1_1_U37(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(32'd0),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(arg2_r_8_reload),
    .din9(arg2_r_9_reload),
    .din10(tmp_2_fu_727_p11),
    .dout(tmp_2_fu_727_p12)
);

fiat_25519_carry_mul_mux_10_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_10_4_32_1_1_U38(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(32'd0),
    .din4(32'd0),
    .din5(32'd0),
    .din6(32'd0),
    .din7(32'd0),
    .din8(32'd0),
    .din9(arg2_r_9_reload),
    .din10(tmp_3_fu_792_p11),
    .dout(tmp_3_fu_792_p12)
);

fiat_25519_carry_mul_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U39(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(tmp_4_fu_871_p5),
    .dout(tmp_4_fu_871_p6)
);

fiat_25519_carry_mul_mux_5_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_5_3_32_1_1_U40(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(tmp_5_fu_924_p6),
    .dout(tmp_5_fu_924_p7)
);

fiat_25519_carry_mul_mux_6_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_6_3_32_1_1_U41(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(tmp_6_fu_992_p7),
    .dout(tmp_6_fu_992_p8)
);

fiat_25519_carry_mul_mux_7_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_7_3_32_1_1_U42(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(tmp_7_fu_1047_p8),
    .dout(tmp_7_fu_1047_p9)
);

fiat_25519_carry_mul_mux_8_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_8_3_32_1_1_U43(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(tmp_8_fu_1117_p9),
    .dout(tmp_8_fu_1117_p10)
);

fiat_25519_carry_mul_mux_9_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_9_4_32_1_1_U44(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(tmp_9_fu_1174_p10),
    .dout(tmp_9_fu_1174_p11)
);

fiat_25519_carry_mul_mux_10_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_10_4_32_1_1_U45(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(arg2_r_9_reload),
    .din10(tmp_s_fu_1240_p11),
    .dout(tmp_s_fu_1240_p12)
);

fiat_25519_carry_mul_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add120194_fu_166 <= arr_8;
        end else if (((tmp_10_fu_552_p3 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            add120194_fu_166 <= add_ln68_fu_709_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add120_1195_fu_170 <= arr_7;
        end else if (((tmp_10_fu_552_p3 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            add120_1195_fu_170 <= add_ln68_1_fu_774_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add120_2196_fu_174 <= arr_6;
        end else if (((tmp_10_fu_552_p3 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            add120_2196_fu_174 <= add_ln68_2_fu_853_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add120_3197_fu_178 <= arr_5;
        end else if (((tmp_10_fu_552_p3 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            add120_3197_fu_178 <= add_ln68_3_fu_906_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add120_4198_fu_182 <= arr_4;
        end else if (((tmp_10_fu_552_p3 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            add120_4198_fu_182 <= add_ln68_4_fu_974_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add120_5199_fu_186 <= arr_3;
        end else if (((tmp_10_fu_552_p3 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            add120_5199_fu_186 <= add_ln68_5_fu_1029_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add120_6200_fu_190 <= arr_2;
        end else if (((tmp_10_fu_552_p3 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            add120_6200_fu_190 <= add_ln68_6_fu_1099_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add120_7201_fu_194 <= arr_1;
        end else if (((tmp_10_fu_552_p3 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            add120_7201_fu_194 <= add_ln68_7_fu_1156_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add120_8202_fu_198 <= arr;
        end else if (((tmp_10_fu_552_p3 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            add120_8202_fu_198 <= add_ln68_8_fu_1228_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add120_9203_fu_202 <= 64'd0;
        end else if (((tmp_10_fu_552_p3 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            add120_9203_fu_202 <= add_ln68_9_fu_1261_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i1_fu_206 <= 5'd9;
        end else if (((tmp_10_fu_552_p3 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i1_fu_206 <= add_ln55_fu_1267_p2;
        end
    end
end

always @ (*) begin
    if (((tmp_10_fu_552_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add120194_out_ap_vld = 1'b1;
    end else begin
        add120194_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_10_fu_552_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add120_1195_out_ap_vld = 1'b1;
    end else begin
        add120_1195_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_10_fu_552_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add120_2196_out_ap_vld = 1'b1;
    end else begin
        add120_2196_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_10_fu_552_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add120_3197_out_ap_vld = 1'b1;
    end else begin
        add120_3197_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_10_fu_552_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add120_4198_out_ap_vld = 1'b1;
    end else begin
        add120_4198_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_10_fu_552_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add120_5199_out_ap_vld = 1'b1;
    end else begin
        add120_5199_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_10_fu_552_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add120_6200_out_ap_vld = 1'b1;
    end else begin
        add120_6200_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_10_fu_552_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add120_7201_out_ap_vld = 1'b1;
    end else begin
        add120_7201_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_10_fu_552_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add120_8202_out_ap_vld = 1'b1;
    end else begin
        add120_8202_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_10_fu_552_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add120_9203_out_ap_vld = 1'b1;
    end else begin
        add120_9203_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_10_fu_552_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add120194_out = add120194_fu_166;

assign add120_1195_out = add120_1195_fu_170;

assign add120_2196_out = add120_2196_fu_174;

assign add120_3197_out = add120_3197_fu_178;

assign add120_4198_out = add120_4198_fu_182;

assign add120_5199_out = add120_5199_fu_186;

assign add120_6200_out = add120_6200_fu_190;

assign add120_7201_out = add120_7201_fu_194;

assign add120_8202_out = add120_8202_fu_198;

assign add120_9203_out = add120_9203_fu_202;

assign add_ln55_fu_1267_p2 = ($signed(i1_fu_206) + $signed(5'd31));

assign add_ln68_1_fu_774_p2 = (and_ln68_1_fu_768_p2 + add120_1195_fu_170);

assign add_ln68_2_fu_853_p2 = (and_ln68_2_fu_847_p2 + add120_2196_fu_174);

assign add_ln68_3_fu_906_p2 = (and_ln68_3_fu_900_p2 + add120_3197_fu_178);

assign add_ln68_4_fu_974_p2 = (and_ln68_4_fu_968_p2 + add120_4198_fu_182);

assign add_ln68_5_fu_1029_p2 = (and_ln68_5_fu_1023_p2 + add120_5199_fu_186);

assign add_ln68_6_fu_1099_p2 = (and_ln68_6_fu_1093_p2 + add120_6200_fu_190);

assign add_ln68_7_fu_1156_p2 = (and_ln68_7_fu_1150_p2 + add120_7201_fu_194);

assign add_ln68_8_fu_1228_p2 = (and_ln68_8_fu_1222_p2 + add120_8202_fu_198);

assign add_ln68_9_fu_1261_p2 = (mul_ln68_9_fu_490_p2 + add120_9203_fu_202);

assign add_ln68_fu_709_p2 = (and_ln68_fu_703_p2 + add120194_fu_166);

assign and_ln68_1_fu_768_p2 = (select_ln68_6_fu_760_p3 & mul_ln68_1_fu_458_p2);

assign and_ln68_2_fu_847_p2 = (select_ln68_7_fu_839_p3 & mul_ln68_2_fu_462_p2);

assign and_ln68_3_fu_900_p2 = (select_ln68_8_fu_892_p3 & mul_ln68_3_fu_466_p2);

assign and_ln68_4_fu_968_p2 = (select_ln68_9_fu_960_p3 & mul_ln68_4_fu_470_p2);

assign and_ln68_5_fu_1023_p2 = (select_ln68_10_fu_1015_p3 & mul_ln68_5_fu_474_p2);

assign and_ln68_6_fu_1093_p2 = (select_ln68_11_fu_1085_p3 & mul_ln68_6_fu_478_p2);

assign and_ln68_7_fu_1150_p2 = (select_ln68_12_fu_1142_p3 & mul_ln68_7_fu_482_p2);

assign and_ln68_8_fu_1222_p2 = (select_ln68_13_fu_1214_p3 & mul_ln68_8_fu_486_p2);

assign and_ln68_fu_703_p2 = (select_ln68_5_fu_695_p3 & mul_ln68_fu_454_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_22_fu_606_p2 = (i1_fu_206 + 5'd9);

assign empty_23_fu_715_p2 = (i1_fu_206 + 5'd8);

assign empty_24_fu_780_p2 = (i1_fu_206 + 5'd7);

assign empty_25_fu_859_p2 = (i1_fu_206 + 5'd6);

assign empty_26_fu_912_p2 = (i1_fu_206 + 5'd5);

assign empty_27_fu_980_p2 = (i1_fu_206 + 5'd4);

assign empty_28_fu_1035_p2 = (i1_fu_206 + 5'd3);

assign empty_29_fu_1105_p2 = (i1_fu_206 + 5'd2);

assign empty_30_fu_1162_p2 = (i1_fu_206 + 5'd1);

assign empty_fu_602_p1 = i1_fu_206[0:0];

assign icmp_ln68_1_fu_754_p2 = ((empty_23_fu_715_p2 < 5'd10) ? 1'b1 : 1'b0);

assign icmp_ln68_2_fu_833_p2 = ((empty_24_fu_780_p2 < 5'd10) ? 1'b1 : 1'b0);

assign icmp_ln68_3_fu_886_p2 = (($signed(empty_25_fu_859_p2) < $signed(5'd10)) ? 1'b1 : 1'b0);

assign icmp_ln68_4_fu_954_p2 = (($signed(empty_26_fu_912_p2) < $signed(5'd10)) ? 1'b1 : 1'b0);

assign icmp_ln68_5_fu_1009_p2 = (($signed(empty_27_fu_980_p2) < $signed(5'd10)) ? 1'b1 : 1'b0);

assign icmp_ln68_6_fu_1079_p2 = (($signed(empty_28_fu_1035_p2) < $signed(5'd10)) ? 1'b1 : 1'b0);

assign icmp_ln68_7_fu_1136_p2 = (($signed(empty_29_fu_1105_p2) < $signed(5'd10)) ? 1'b1 : 1'b0);

assign icmp_ln68_8_fu_1208_p2 = (($signed(empty_30_fu_1162_p2) < $signed(5'd10)) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_689_p2 = ((empty_22_fu_606_p2 < 5'd10) ? 1'b1 : 1'b0);

assign mul_ln68_1_fu_458_p0 = mul_ln68_1_fu_458_p00;

assign mul_ln68_1_fu_458_p00 = tmp_2_fu_727_p12;

assign mul_ln68_1_fu_458_p1 = zext_ln68_fu_628_p1;

assign mul_ln68_2_fu_462_p0 = mul_ln68_2_fu_462_p00;

assign mul_ln68_2_fu_462_p00 = select_ln68_1_fu_820_p3;

assign mul_ln68_2_fu_462_p1 = zext_ln68_fu_628_p1;

assign mul_ln68_3_fu_466_p0 = mul_ln68_3_fu_466_p00;

assign mul_ln68_3_fu_466_p00 = tmp_4_fu_871_p6;

assign mul_ln68_3_fu_466_p1 = zext_ln68_fu_628_p1;

assign mul_ln68_4_fu_470_p0 = mul_ln68_4_fu_470_p00;

assign mul_ln68_4_fu_470_p00 = select_ln68_2_fu_941_p3;

assign mul_ln68_4_fu_470_p1 = zext_ln68_fu_628_p1;

assign mul_ln68_5_fu_474_p0 = mul_ln68_5_fu_474_p00;

assign mul_ln68_5_fu_474_p00 = tmp_6_fu_992_p8;

assign mul_ln68_5_fu_474_p1 = zext_ln68_fu_628_p1;

assign mul_ln68_6_fu_478_p0 = mul_ln68_6_fu_478_p00;

assign mul_ln68_6_fu_478_p00 = select_ln68_3_fu_1066_p3;

assign mul_ln68_6_fu_478_p1 = zext_ln68_fu_628_p1;

assign mul_ln68_7_fu_482_p0 = mul_ln68_7_fu_482_p00;

assign mul_ln68_7_fu_482_p00 = tmp_8_fu_1117_p10;

assign mul_ln68_7_fu_482_p1 = zext_ln68_fu_628_p1;

assign mul_ln68_8_fu_486_p0 = mul_ln68_8_fu_486_p00;

assign mul_ln68_8_fu_486_p00 = select_ln68_4_fu_1195_p3;

assign mul_ln68_8_fu_486_p1 = zext_ln68_fu_628_p1;

assign mul_ln68_9_fu_490_p0 = mul_ln68_9_fu_490_p00;

assign mul_ln68_9_fu_490_p00 = tmp_s_fu_1240_p12;

assign mul_ln68_9_fu_490_p1 = zext_ln68_fu_628_p1;

assign mul_ln68_fu_454_p0 = mul_ln68_fu_454_p00;

assign mul_ln68_fu_454_p00 = select_ln68_fu_676_p3;

assign mul_ln68_fu_454_p1 = zext_ln68_fu_628_p1;

assign select_ln68_10_fu_1015_p3 = ((icmp_ln68_5_fu_1009_p2[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln68_11_fu_1085_p3 = ((icmp_ln68_6_fu_1079_p2[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln68_12_fu_1142_p3 = ((icmp_ln68_7_fu_1136_p2[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln68_13_fu_1214_p3 = ((icmp_ln68_8_fu_1208_p2[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln68_1_fu_820_p3 = ((empty_fu_602_p1[0:0] == 1'b1) ? shl_ln68_1_fu_814_p2 : tmp_3_fu_792_p12);

assign select_ln68_2_fu_941_p3 = ((empty_fu_602_p1[0:0] == 1'b1) ? shl_ln68_2_fu_935_p2 : tmp_5_fu_924_p7);

assign select_ln68_3_fu_1066_p3 = ((empty_fu_602_p1[0:0] == 1'b1) ? shl_ln68_3_fu_1060_p2 : tmp_7_fu_1047_p9);

assign select_ln68_4_fu_1195_p3 = ((empty_fu_602_p1[0:0] == 1'b1) ? shl_ln68_4_fu_1189_p2 : tmp_9_fu_1174_p11);

assign select_ln68_5_fu_695_p3 = ((icmp_ln68_fu_689_p2[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln68_6_fu_760_p3 = ((icmp_ln68_1_fu_754_p2[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln68_7_fu_839_p3 = ((icmp_ln68_2_fu_833_p2[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln68_8_fu_892_p3 = ((icmp_ln68_3_fu_886_p2[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln68_9_fu_960_p3 = ((icmp_ln68_4_fu_954_p2[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign select_ln68_fu_676_p3 = ((empty_fu_602_p1[0:0] == 1'b1) ? shl_ln68_fu_670_p2 : tmp_1_fu_648_p12);

assign shl_ln68_1_fu_814_p2 = tmp_3_fu_792_p12 << 32'd1;

assign shl_ln68_2_fu_935_p2 = tmp_5_fu_924_p7 << 32'd1;

assign shl_ln68_3_fu_1060_p2 = tmp_7_fu_1047_p9 << 32'd1;

assign shl_ln68_4_fu_1189_p2 = tmp_9_fu_1174_p11 << 32'd1;

assign shl_ln68_fu_670_p2 = tmp_1_fu_648_p12 << 32'd1;

assign tmp_10_fu_552_p3 = i1_fu_206[32'd4];

assign tmp_1_fu_648_p11 = (4'd0 - trunc_ln55_fu_590_p1);

assign tmp_2_fu_727_p11 = (4'd1 - trunc_ln55_fu_590_p1);

assign tmp_3_fu_792_p11 = (4'd2 - trunc_ln55_fu_590_p1);

assign tmp_4_fu_871_p5 = (trunc_ln55_2_fu_598_p1 ^ 2'd3);

assign tmp_5_fu_924_p6 = ($signed(3'd4) - $signed(trunc_ln55_1_fu_594_p1));

assign tmp_6_fu_992_p7 = ($signed(3'd5) - $signed(trunc_ln55_1_fu_594_p1));

assign tmp_7_fu_1047_p8 = ($signed(3'd6) - $signed(trunc_ln55_1_fu_594_p1));

assign tmp_8_fu_1117_p9 = (trunc_ln55_1_fu_594_p1 ^ 3'd7);

assign tmp_9_fu_1174_p10 = ($signed(4'd8) - $signed(trunc_ln55_fu_590_p1));

assign tmp_s_fu_1240_p11 = ($signed(4'd9) - $signed(trunc_ln55_fu_590_p1));

assign trunc_ln55_1_fu_594_p1 = i1_fu_206[2:0];

assign trunc_ln55_2_fu_598_p1 = i1_fu_206[1:0];

assign trunc_ln55_fu_590_p1 = i1_fu_206[3:0];

assign zext_ln68_fu_628_p1 = tmp_fu_612_p12;

endmodule //fiat_25519_carry_mul_fiat_25519_carry_mul_Pipeline_VITIS_LOOP_55_5
