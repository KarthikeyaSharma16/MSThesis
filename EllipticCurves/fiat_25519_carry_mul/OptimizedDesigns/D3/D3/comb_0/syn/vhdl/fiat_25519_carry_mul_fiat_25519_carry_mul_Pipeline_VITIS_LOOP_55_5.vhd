-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fiat_25519_carry_mul_fiat_25519_carry_mul_Pipeline_VITIS_LOOP_55_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    add55_189_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    add55_290_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    add55_391_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    add55_492_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    add55_593_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    add55_694_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    add55_795_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    add55_896_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    add55_997_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_4_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_5_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_6_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_7_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_8_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_9_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_4_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_5_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_6_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_7_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_8_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln68_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_9_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add120_987_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add120_987_out_ap_vld : OUT STD_LOGIC;
    add120_886_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add120_886_out_ap_vld : OUT STD_LOGIC;
    add120_785_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add120_785_out_ap_vld : OUT STD_LOGIC;
    add120_684_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add120_684_out_ap_vld : OUT STD_LOGIC;
    add120_583_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add120_583_out_ap_vld : OUT STD_LOGIC;
    add120_47482_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add120_47482_out_ap_vld : OUT STD_LOGIC;
    add120_35881_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add120_35881_out_ap_vld : OUT STD_LOGIC;
    add120_24280_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add120_24280_out_ap_vld : OUT STD_LOGIC;
    add120_12679_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add120_12679_out_ap_vld : OUT STD_LOGIC;
    add12078_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add12078_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fiat_25519_carry_mul_fiat_25519_carry_mul_Pipeline_VITIS_LOOP_55_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_fu_693_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln68_8_cast_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_8_cast_reg_2166 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_12_fu_1485_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_12_reg_2175 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_17_fu_1523_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_17_reg_2180 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_25_fu_1601_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_25_reg_2185 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_27_fu_1613_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_27_reg_2190 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_35_fu_1686_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_35_reg_2195 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_37_fu_1698_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_37_reg_2200 : STD_LOGIC_VECTOR (63 downto 0);
    signal i1_fu_168 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_4_fu_1771_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal add12078_fu_172 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_5_fu_1335_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add120_12679_fu_176 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_7_fu_1367_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add120_24280_fu_180 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_10_fu_1411_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add120_35881_fu_184 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_14_fu_1467_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add120_47482_fu_188 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_19_fu_1835_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add120_583_fu_192 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_24_fu_1577_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add120_684_fu_196 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_29_fu_1845_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add120_785_fu_200 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_34_fu_1655_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add120_886_fu_204 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_39_fu_1855_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add120_987_fu_208 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_44_fu_1759_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i1_1_fu_212 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln55_fu_1765_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln68_fu_466_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_21_fu_1307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_1_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_1_fu_470_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_18_fu_1226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_1_fu_470_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_2_fu_474_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_2_fu_474_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_2_fu_826_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_3_fu_478_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_3_fu_478_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_3_fu_874_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_4_fu_482_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_15_fu_1146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_4_fu_482_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_5_fu_486_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_5_fu_486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_9_fu_1042_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_6_fu_490_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_6_fu_490_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_4_fu_909_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_7_fu_494_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_7_fu_494_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_8_fu_498_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_8_fu_498_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_10_fu_1048_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_9_fu_502_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_7_fu_1017_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_9_fu_502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_10_fu_506_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_10_fu_506_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_fu_765_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_11_fu_510_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_11_fu_510_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_12_fu_514_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_12_fu_514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_11_fu_1068_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_13_fu_518_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_13_fu_518_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_5_fu_959_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_14_fu_522_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_14_fu_522_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_15_fu_526_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_15_fu_526_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_16_fu_530_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_16_fu_530_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_12_fu_1074_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_17_fu_534_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_17_fu_534_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_6_fu_990_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_18_fu_538_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_18_fu_538_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_19_fu_542_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_19_fu_542_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_20_fu_546_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_20_fu_546_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_21_fu_550_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_21_fu_550_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_16_fu_1172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_22_fu_554_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_22_fu_554_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_13_fu_1094_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_23_fu_558_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_23_fu_558_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_24_fu_562_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_24_fu_562_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_25_fu_566_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_25_fu_566_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_17_fu_1200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_26_fu_570_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_26_fu_570_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_27_fu_574_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_27_fu_574_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_14_fu_1120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_28_fu_578_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_28_fu_578_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_29_fu_582_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_29_fu_582_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_30_fu_586_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_30_fu_586_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_31_fu_590_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_31_fu_590_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_32_fu_594_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_32_fu_594_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_33_fu_598_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_33_fu_598_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_34_fu_602_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_34_fu_602_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_35_fu_606_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_35_fu_606_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_36_fu_610_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_36_fu_610_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_37_fu_614_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_37_fu_614_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_38_fu_618_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_38_fu_618_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_39_fu_622_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_39_fu_622_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln55_1_fu_729_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_745_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln55_fu_725_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln68_fu_781_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_fu_786_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_fu_775_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln55_4_fu_741_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_818_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_818_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_1_fu_806_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln55_3_fu_737_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_851_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_851_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln68_1_fu_860_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_1_fu_866_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_2_fu_839_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_899_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_899_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_3_fu_887_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln55_2_fu_733_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_934_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_934_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln68_2_fu_945_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_2_fu_951_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_4_fu_922_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_978_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_978_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_997_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln68_3_fu_1028_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_3_fu_1034_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln68_4_fu_1054_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_4_fu_1060_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln68_5_fu_1080_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_5_fu_1086_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1106_p8 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_1106_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1126_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln68_6_fu_1158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_6_fu_1164_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1184_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_1184_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1206_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln68_7_fu_1239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_7_fu_1245_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_1264_p10 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_1264_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1287_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln68_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln68_fu_466_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_9_fu_1321_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_fu_1329_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_1_fu_470_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln68_1_fu_833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln68_2_fu_474_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_10_fu_1347_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_2_fu_1355_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_1_fu_1341_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_6_fu_1361_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln68_2_fu_881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln68_3_fu_478_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_11_fu_1373_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_4_fu_482_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_5_fu_486_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_5_fu_1393_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_3_fu_1381_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_8_fu_1399_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_4_fu_1387_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_9_fu_1405_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln68_3_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln68_6_fu_490_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_12_fu_1417_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_7_fu_494_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_8_fu_498_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_9_fu_502_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_9_fu_1443_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_7_fu_1431_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_8_fu_1437_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_6_fu_1425_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_12_fu_1455_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_11_fu_1449_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_13_fu_1461_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_10_fu_506_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_11_fu_510_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_12_fu_514_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln68_4_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln68_13_fu_518_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_13_fu_1491_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_14_fu_522_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_14_fu_1505_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_10_fu_1473_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_16_fu_1511_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_13_fu_1499_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_15_fu_1517_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_11_fu_1479_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_15_fu_526_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_16_fu_530_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_18_fu_538_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_19_fu_542_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_18_fu_1547_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_15_fu_1529_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_16_fu_1535_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_17_fu_534_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_21_fu_1559_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_17_fu_1541_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_22_fu_1565_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_20_fu_1553_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_23_fu_1571_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_20_fu_546_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_23_fu_558_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_24_fu_562_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_21_fu_1595_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_19_fu_1583_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_22_fu_554_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_21_fu_550_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_26_fu_1607_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_20_fu_1589_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_28_fu_578_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_29_fu_582_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_22_fu_1619_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_23_fu_1625_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_27_fu_574_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_25_fu_566_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_31_fu_1637_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_26_fu_570_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_32_fu_1643_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_30_fu_1631_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_33_fu_1649_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln68_8_fu_1661_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_8_fu_1667_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_33_fu_598_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_31_fu_590_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_24_fu_1680_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_32_fu_594_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_34_fu_602_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_36_fu_1692_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_30_fu_586_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_1710_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_fu_1710_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_35_fu_606_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_36_fu_610_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_37_fu_614_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_38_fu_618_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_41_fu_1741_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_39_fu_622_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_42_fu_1747_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_40_fu_1735_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_43_fu_1753_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_18_fu_1831_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_28_fu_1841_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_38_fu_1851_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln68_32_fu_594_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_34_fu_602_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_37_fu_614_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_38_fu_618_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_10_4_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_2_1_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_3_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_4_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_5_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_6_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_7_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_8_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_9_4_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32ns_32ns_64_1_1_U85 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_fu_466_p0,
        din1 => mul_ln68_fu_466_p1,
        dout => mul_ln68_fu_466_p2);

    mul_32ns_32ns_64_1_1_U86 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_1_fu_470_p0,
        din1 => mul_ln68_1_fu_470_p1,
        dout => mul_ln68_1_fu_470_p2);

    mul_32ns_32ns_64_1_1_U87 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_2_fu_474_p0,
        din1 => mul_ln68_2_fu_474_p1,
        dout => mul_ln68_2_fu_474_p2);

    mul_32ns_32ns_64_1_1_U88 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_3_fu_478_p0,
        din1 => mul_ln68_3_fu_478_p1,
        dout => mul_ln68_3_fu_478_p2);

    mul_32ns_32ns_64_1_1_U89 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_4_fu_482_p0,
        din1 => mul_ln68_4_fu_482_p1,
        dout => mul_ln68_4_fu_482_p2);

    mul_32ns_32ns_64_1_1_U90 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_5_fu_486_p0,
        din1 => mul_ln68_5_fu_486_p1,
        dout => mul_ln68_5_fu_486_p2);

    mul_32ns_32ns_64_1_1_U91 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_6_fu_490_p0,
        din1 => mul_ln68_6_fu_490_p1,
        dout => mul_ln68_6_fu_490_p2);

    mul_32ns_32ns_64_1_1_U92 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_7_fu_494_p0,
        din1 => mul_ln68_7_fu_494_p1,
        dout => mul_ln68_7_fu_494_p2);

    mul_32ns_32ns_64_1_1_U93 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_8_fu_498_p0,
        din1 => mul_ln68_8_fu_498_p1,
        dout => mul_ln68_8_fu_498_p2);

    mul_32ns_32ns_64_1_1_U94 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_9_fu_502_p0,
        din1 => mul_ln68_9_fu_502_p1,
        dout => mul_ln68_9_fu_502_p2);

    mul_32ns_32ns_64_1_1_U95 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_10_fu_506_p0,
        din1 => mul_ln68_10_fu_506_p1,
        dout => mul_ln68_10_fu_506_p2);

    mul_32ns_32ns_64_1_1_U96 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_11_fu_510_p0,
        din1 => mul_ln68_11_fu_510_p1,
        dout => mul_ln68_11_fu_510_p2);

    mul_32ns_32ns_64_1_1_U97 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_12_fu_514_p0,
        din1 => mul_ln68_12_fu_514_p1,
        dout => mul_ln68_12_fu_514_p2);

    mul_32ns_32ns_64_1_1_U98 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_13_fu_518_p0,
        din1 => mul_ln68_13_fu_518_p1,
        dout => mul_ln68_13_fu_518_p2);

    mul_32ns_32ns_64_1_1_U99 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_14_fu_522_p0,
        din1 => mul_ln68_14_fu_522_p1,
        dout => mul_ln68_14_fu_522_p2);

    mul_32ns_32ns_64_1_1_U100 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_15_fu_526_p0,
        din1 => mul_ln68_15_fu_526_p1,
        dout => mul_ln68_15_fu_526_p2);

    mul_32ns_32ns_64_1_1_U101 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_16_fu_530_p0,
        din1 => mul_ln68_16_fu_530_p1,
        dout => mul_ln68_16_fu_530_p2);

    mul_32ns_32ns_64_1_1_U102 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_17_fu_534_p0,
        din1 => mul_ln68_17_fu_534_p1,
        dout => mul_ln68_17_fu_534_p2);

    mul_32ns_32ns_64_1_1_U103 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_18_fu_538_p0,
        din1 => mul_ln68_18_fu_538_p1,
        dout => mul_ln68_18_fu_538_p2);

    mul_32ns_32ns_64_1_1_U104 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_19_fu_542_p0,
        din1 => mul_ln68_19_fu_542_p1,
        dout => mul_ln68_19_fu_542_p2);

    mul_32ns_32ns_64_1_1_U105 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_20_fu_546_p0,
        din1 => mul_ln68_20_fu_546_p1,
        dout => mul_ln68_20_fu_546_p2);

    mul_32ns_32ns_64_1_1_U106 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_21_fu_550_p0,
        din1 => mul_ln68_21_fu_550_p1,
        dout => mul_ln68_21_fu_550_p2);

    mul_32ns_32ns_64_1_1_U107 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_22_fu_554_p0,
        din1 => mul_ln68_22_fu_554_p1,
        dout => mul_ln68_22_fu_554_p2);

    mul_32ns_32ns_64_1_1_U108 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_23_fu_558_p0,
        din1 => mul_ln68_23_fu_558_p1,
        dout => mul_ln68_23_fu_558_p2);

    mul_32ns_32ns_64_1_1_U109 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_24_fu_562_p0,
        din1 => mul_ln68_24_fu_562_p1,
        dout => mul_ln68_24_fu_562_p2);

    mul_32ns_32ns_64_1_1_U110 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_25_fu_566_p0,
        din1 => mul_ln68_25_fu_566_p1,
        dout => mul_ln68_25_fu_566_p2);

    mul_32ns_32ns_64_1_1_U111 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_26_fu_570_p0,
        din1 => mul_ln68_26_fu_570_p1,
        dout => mul_ln68_26_fu_570_p2);

    mul_32ns_32ns_64_1_1_U112 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_27_fu_574_p0,
        din1 => mul_ln68_27_fu_574_p1,
        dout => mul_ln68_27_fu_574_p2);

    mul_32ns_32ns_64_1_1_U113 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_28_fu_578_p0,
        din1 => mul_ln68_28_fu_578_p1,
        dout => mul_ln68_28_fu_578_p2);

    mul_32ns_32ns_64_1_1_U114 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_29_fu_582_p0,
        din1 => mul_ln68_29_fu_582_p1,
        dout => mul_ln68_29_fu_582_p2);

    mul_32ns_32ns_64_1_1_U115 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_30_fu_586_p0,
        din1 => mul_ln68_30_fu_586_p1,
        dout => mul_ln68_30_fu_586_p2);

    mul_32ns_32ns_64_1_1_U116 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_31_fu_590_p0,
        din1 => mul_ln68_31_fu_590_p1,
        dout => mul_ln68_31_fu_590_p2);

    mul_32ns_32ns_64_1_1_U117 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_32_fu_594_p0,
        din1 => mul_ln68_32_fu_594_p1,
        dout => mul_ln68_32_fu_594_p2);

    mul_32ns_32ns_64_1_1_U118 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_33_fu_598_p0,
        din1 => mul_ln68_33_fu_598_p1,
        dout => mul_ln68_33_fu_598_p2);

    mul_32ns_32ns_64_1_1_U119 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_34_fu_602_p0,
        din1 => mul_ln68_34_fu_602_p1,
        dout => mul_ln68_34_fu_602_p2);

    mul_32ns_32ns_64_1_1_U120 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_35_fu_606_p0,
        din1 => mul_ln68_35_fu_606_p1,
        dout => mul_ln68_35_fu_606_p2);

    mul_32ns_32ns_64_1_1_U121 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_36_fu_610_p0,
        din1 => mul_ln68_36_fu_610_p1,
        dout => mul_ln68_36_fu_610_p2);

    mul_32ns_32ns_64_1_1_U122 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_37_fu_614_p0,
        din1 => mul_ln68_37_fu_614_p1,
        dout => mul_ln68_37_fu_614_p2);

    mul_32ns_32ns_64_1_1_U123 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_38_fu_618_p0,
        din1 => mul_ln68_38_fu_618_p1,
        dout => mul_ln68_38_fu_618_p2);

    mul_32ns_32ns_64_1_1_U124 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_39_fu_622_p0,
        din1 => mul_ln68_39_fu_622_p1,
        dout => mul_ln68_39_fu_622_p2);

    mux_10_4_32_1_1_U125 : component fiat_25519_carry_mul_mux_10_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => ap_const_lv32_0,
        din3 => ap_const_lv32_0,
        din4 => arg1_r_4_reload,
        din5 => arg1_r_5_reload,
        din6 => arg1_r_6_reload,
        din7 => arg1_r_7_reload,
        din8 => arg1_r_8_reload,
        din9 => arg1_r_9_reload,
        din10 => trunc_ln55_1_fu_729_p1,
        dout => tmp_s_fu_745_p12);

    mux_2_1_32_1_1_U126 : component fiat_25519_carry_mul_mux_2_1_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => tmp_1_fu_818_p3,
        dout => tmp_1_fu_818_p4);

    mux_3_2_32_1_1_U127 : component fiat_25519_carry_mul_mux_3_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => tmp_2_fu_851_p4,
        dout => tmp_2_fu_851_p5);

    mux_4_2_32_1_1_U128 : component fiat_25519_carry_mul_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => tmp_3_fu_899_p5,
        dout => tmp_3_fu_899_p6);

    mux_5_3_32_1_1_U129 : component fiat_25519_carry_mul_mux_5_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => tmp_4_fu_934_p6,
        dout => tmp_4_fu_934_p7);

    mux_6_3_32_1_1_U130 : component fiat_25519_carry_mul_mux_6_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => tmp_5_fu_978_p7,
        dout => tmp_5_fu_978_p8);

    mux_10_4_32_1_1_U131 : component fiat_25519_carry_mul_mux_10_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => ap_const_lv32_0,
        din3 => ap_const_lv32_0,
        din4 => arg1_r_3_reload,
        din5 => arg1_r_4_reload,
        din6 => arg1_r_5_reload,
        din7 => arg1_r_6_reload,
        din8 => arg1_r_7_reload,
        din9 => arg1_r_8_reload,
        din10 => trunc_ln55_1_fu_729_p1,
        dout => tmp_6_fu_997_p12);

    mux_7_3_32_1_1_U132 : component fiat_25519_carry_mul_mux_7_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => tmp_7_fu_1106_p8,
        dout => tmp_7_fu_1106_p9);

    mux_10_4_32_1_1_U133 : component fiat_25519_carry_mul_mux_10_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => ap_const_lv32_0,
        din3 => ap_const_lv32_0,
        din4 => arg1_r_2_reload,
        din5 => arg1_r_3_reload,
        din6 => arg1_r_4_reload,
        din7 => arg1_r_5_reload,
        din8 => arg1_r_6_reload,
        din9 => arg1_r_7_reload,
        din10 => trunc_ln55_1_fu_729_p1,
        dout => tmp_8_fu_1126_p12);

    mux_8_3_32_1_1_U134 : component fiat_25519_carry_mul_mux_8_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => arg2_r_7_reload,
        din8 => tmp_9_fu_1184_p9,
        dout => tmp_9_fu_1184_p10);

    mux_10_4_32_1_1_U135 : component fiat_25519_carry_mul_mux_10_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => ap_const_lv32_0,
        din3 => ap_const_lv32_0,
        din4 => arg1_r_1_reload,
        din5 => arg1_r_2_reload,
        din6 => arg1_r_3_reload,
        din7 => arg1_r_4_reload,
        din8 => arg1_r_5_reload,
        din9 => arg1_r_6_reload,
        din10 => trunc_ln55_1_fu_729_p1,
        dout => tmp_10_fu_1206_p12);

    mux_9_4_32_1_1_U136 : component fiat_25519_carry_mul_mux_9_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => ap_const_lv32_0,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => arg2_r_7_reload,
        din8 => arg2_r_8_reload,
        din9 => tmp_11_fu_1264_p10,
        dout => tmp_11_fu_1264_p11);

    mux_10_4_32_1_1_U137 : component fiat_25519_carry_mul_mux_10_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => ap_const_lv32_0,
        din3 => ap_const_lv32_0,
        din4 => arg1_r_reload,
        din5 => arg1_r_1_reload,
        din6 => arg1_r_2_reload,
        din7 => arg1_r_3_reload,
        din8 => arg1_r_4_reload,
        din9 => arg1_r_5_reload,
        din10 => trunc_ln55_1_fu_729_p1,
        dout => tmp_12_fu_1287_p12);

    mux_10_4_32_1_1_U138 : component fiat_25519_carry_mul_mux_10_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => ap_const_lv32_0,
        din3 => ap_const_lv32_0,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => arg2_r_7_reload,
        din8 => arg2_r_8_reload,
        din9 => arg2_r_9_reload,
        din10 => tmp_13_fu_1710_p11,
        dout => tmp_13_fu_1710_p12);

    flow_control_loop_pipe_sequential_init_U : component fiat_25519_carry_mul_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    add12078_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add12078_fu_172 <= add55_997_reload;
                elsif (((tmp_fu_693_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add12078_fu_172 <= add_ln68_5_fu_1335_p2;
                end if;
            end if; 
        end if;
    end process;

    add120_12679_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add120_12679_fu_176 <= add55_896_reload;
                elsif (((tmp_fu_693_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add120_12679_fu_176 <= add_ln68_7_fu_1367_p2;
                end if;
            end if; 
        end if;
    end process;

    add120_24280_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add120_24280_fu_180 <= add55_795_reload;
                elsif (((tmp_fu_693_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add120_24280_fu_180 <= add_ln68_10_fu_1411_p2;
                end if;
            end if; 
        end if;
    end process;

    add120_35881_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add120_35881_fu_184 <= add55_694_reload;
                elsif (((tmp_fu_693_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add120_35881_fu_184 <= add_ln68_14_fu_1467_p2;
                end if;
            end if; 
        end if;
    end process;

    add120_47482_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    add120_47482_fu_188 <= add55_593_reload;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    add120_47482_fu_188 <= add_ln68_19_fu_1835_p2;
                end if;
            end if; 
        end if;
    end process;

    add120_583_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add120_583_fu_192 <= add55_492_reload;
                elsif (((tmp_fu_693_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add120_583_fu_192 <= add_ln68_24_fu_1577_p2;
                end if;
            end if; 
        end if;
    end process;

    add120_684_fu_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    add120_684_fu_196 <= add55_391_reload;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    add120_684_fu_196 <= add_ln68_29_fu_1845_p2;
                end if;
            end if; 
        end if;
    end process;

    add120_785_fu_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add120_785_fu_200 <= add55_290_reload;
                elsif (((tmp_fu_693_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add120_785_fu_200 <= add_ln68_34_fu_1655_p2;
                end if;
            end if; 
        end if;
    end process;

    add120_886_fu_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    add120_886_fu_204 <= add55_189_reload;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    add120_886_fu_204 <= add_ln68_39_fu_1855_p2;
                end if;
            end if; 
        end if;
    end process;

    add120_987_fu_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add120_987_fu_208 <= ap_const_lv64_0;
                elsif (((tmp_fu_693_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add120_987_fu_208 <= add_ln68_44_fu_1759_p2;
                end if;
            end if; 
        end if;
    end process;

    i1_1_fu_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i1_1_fu_212 <= ap_const_lv5_9;
                elsif (((tmp_fu_693_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i1_1_fu_212 <= add_ln55_fu_1765_p2;
                end if;
            end if; 
        end if;
    end process;

    i1_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i1_fu_168 <= ap_const_lv4_9;
                elsif (((tmp_fu_693_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i1_fu_168 <= i1_4_fu_1771_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_693_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln68_17_reg_2180 <= add_ln68_17_fu_1523_p2;
                add_ln68_25_reg_2185 <= add_ln68_25_fu_1601_p2;
                add_ln68_27_reg_2190 <= add_ln68_27_fu_1613_p2;
                add_ln68_35_reg_2195 <= add_ln68_35_fu_1686_p2;
                add_ln68_37_reg_2200 <= add_ln68_37_fu_1698_p2;
                and_ln68_12_reg_2175 <= and_ln68_12_fu_1485_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln68_8_cast_reg_2166(31 downto 0) <= zext_ln68_8_cast_fu_626_p1(31 downto 0);
            end if;
        end if;
    end process;
    zext_ln68_8_cast_reg_2166(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add12078_out <= add12078_fu_172;

    add12078_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_693_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_693_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add12078_out_ap_vld <= ap_const_logic_1;
        else 
            add12078_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add120_12679_out <= add120_12679_fu_176;

    add120_12679_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_693_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_693_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add120_12679_out_ap_vld <= ap_const_logic_1;
        else 
            add120_12679_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add120_24280_out <= add120_24280_fu_180;

    add120_24280_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_693_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_693_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add120_24280_out_ap_vld <= ap_const_logic_1;
        else 
            add120_24280_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add120_35881_out <= add120_35881_fu_184;

    add120_35881_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_693_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_693_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add120_35881_out_ap_vld <= ap_const_logic_1;
        else 
            add120_35881_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add120_47482_out <= add120_47482_fu_188;

    add120_47482_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_693_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_693_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add120_47482_out_ap_vld <= ap_const_logic_1;
        else 
            add120_47482_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add120_583_out <= add120_583_fu_192;

    add120_583_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_693_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_693_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add120_583_out_ap_vld <= ap_const_logic_1;
        else 
            add120_583_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add120_684_out <= add120_684_fu_196;

    add120_684_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_693_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_693_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add120_684_out_ap_vld <= ap_const_logic_1;
        else 
            add120_684_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add120_785_out <= add120_785_fu_200;

    add120_785_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_693_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_693_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add120_785_out_ap_vld <= ap_const_logic_1;
        else 
            add120_785_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add120_886_out <= add120_886_fu_204;

    add120_886_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_693_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_693_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add120_886_out_ap_vld <= ap_const_logic_1;
        else 
            add120_886_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add120_987_out <= add120_987_fu_208;

    add120_987_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_693_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_693_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add120_987_out_ap_vld <= ap_const_logic_1;
        else 
            add120_987_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln55_fu_1765_p2 <= std_logic_vector(unsigned(i1_1_fu_212) + unsigned(ap_const_lv5_1B));
    add_ln68_10_fu_1411_p2 <= std_logic_vector(unsigned(add120_24280_fu_180) + unsigned(add_ln68_9_fu_1405_p2));
    add_ln68_11_fu_1449_p2 <= std_logic_vector(unsigned(and_ln68_9_fu_1443_p2) + unsigned(and_ln68_7_fu_1431_p2));
    add_ln68_12_fu_1455_p2 <= std_logic_vector(unsigned(and_ln68_8_fu_1437_p2) + unsigned(and_ln68_6_fu_1425_p2));
    add_ln68_13_fu_1461_p2 <= std_logic_vector(unsigned(add_ln68_12_fu_1455_p2) + unsigned(add_ln68_11_fu_1449_p2));
    add_ln68_14_fu_1467_p2 <= std_logic_vector(unsigned(add120_35881_fu_184) + unsigned(add_ln68_13_fu_1461_p2));
    add_ln68_15_fu_1517_p2 <= std_logic_vector(unsigned(add_ln68_16_fu_1511_p2) + unsigned(and_ln68_13_fu_1499_p2));
    add_ln68_16_fu_1511_p2 <= std_logic_vector(unsigned(and_ln68_14_fu_1505_p2) + unsigned(and_ln68_10_fu_1473_p2));
    add_ln68_17_fu_1523_p2 <= std_logic_vector(unsigned(add_ln68_15_fu_1517_p2) + unsigned(and_ln68_11_fu_1479_p2));
    add_ln68_18_fu_1831_p2 <= std_logic_vector(unsigned(add_ln68_17_reg_2180) + unsigned(and_ln68_12_reg_2175));
    add_ln68_19_fu_1835_p2 <= std_logic_vector(unsigned(add_ln68_18_fu_1831_p2) + unsigned(add120_47482_fu_188));
    add_ln68_1_fu_806_p2 <= std_logic_vector(unsigned(i1_1_fu_212) + unsigned(ap_const_lv5_4));
    add_ln68_20_fu_1553_p2 <= std_logic_vector(unsigned(and_ln68_18_fu_1547_p2) + unsigned(and_ln68_15_fu_1529_p2));
    add_ln68_21_fu_1559_p2 <= std_logic_vector(unsigned(and_ln68_16_fu_1535_p2) + unsigned(mul_ln68_17_fu_534_p2));
    add_ln68_22_fu_1565_p2 <= std_logic_vector(unsigned(add_ln68_21_fu_1559_p2) + unsigned(and_ln68_17_fu_1541_p2));
    add_ln68_23_fu_1571_p2 <= std_logic_vector(unsigned(add_ln68_22_fu_1565_p2) + unsigned(add_ln68_20_fu_1553_p2));
    add_ln68_24_fu_1577_p2 <= std_logic_vector(unsigned(add120_583_fu_192) + unsigned(add_ln68_23_fu_1571_p2));
    add_ln68_25_fu_1601_p2 <= std_logic_vector(unsigned(and_ln68_21_fu_1595_p2) + unsigned(and_ln68_19_fu_1583_p2));
    add_ln68_26_fu_1607_p2 <= std_logic_vector(unsigned(mul_ln68_22_fu_554_p2) + unsigned(mul_ln68_21_fu_550_p2));
    add_ln68_27_fu_1613_p2 <= std_logic_vector(unsigned(add_ln68_26_fu_1607_p2) + unsigned(and_ln68_20_fu_1589_p2));
    add_ln68_28_fu_1841_p2 <= std_logic_vector(unsigned(add_ln68_27_reg_2190) + unsigned(add_ln68_25_reg_2185));
    add_ln68_29_fu_1845_p2 <= std_logic_vector(unsigned(add120_684_fu_196) + unsigned(add_ln68_28_fu_1841_p2));
    add_ln68_2_fu_839_p2 <= std_logic_vector(unsigned(i1_1_fu_212) + unsigned(ap_const_lv5_3));
    add_ln68_30_fu_1631_p2 <= std_logic_vector(unsigned(and_ln68_22_fu_1619_p2) + unsigned(and_ln68_23_fu_1625_p2));
    add_ln68_31_fu_1637_p2 <= std_logic_vector(unsigned(mul_ln68_27_fu_574_p2) + unsigned(mul_ln68_25_fu_566_p2));
    add_ln68_32_fu_1643_p2 <= std_logic_vector(unsigned(add_ln68_31_fu_1637_p2) + unsigned(mul_ln68_26_fu_570_p2));
    add_ln68_33_fu_1649_p2 <= std_logic_vector(unsigned(add_ln68_32_fu_1643_p2) + unsigned(add_ln68_30_fu_1631_p2));
    add_ln68_34_fu_1655_p2 <= std_logic_vector(unsigned(add120_785_fu_200) + unsigned(add_ln68_33_fu_1649_p2));
    add_ln68_35_fu_1686_p2 <= std_logic_vector(unsigned(mul_ln68_31_fu_590_p2) + unsigned(and_ln68_24_fu_1680_p2));
    add_ln68_36_fu_1692_p2 <= std_logic_vector(unsigned(mul_ln68_32_fu_594_p2) + unsigned(mul_ln68_34_fu_602_p2));
    add_ln68_37_fu_1698_p2 <= std_logic_vector(unsigned(add_ln68_36_fu_1692_p2) + unsigned(mul_ln68_30_fu_586_p2));
    add_ln68_38_fu_1851_p2 <= std_logic_vector(unsigned(add_ln68_37_reg_2200) + unsigned(add_ln68_35_reg_2195));
    add_ln68_39_fu_1855_p2 <= std_logic_vector(unsigned(add120_886_fu_204) + unsigned(add_ln68_38_fu_1851_p2));
    add_ln68_3_fu_887_p2 <= std_logic_vector(unsigned(i1_1_fu_212) + unsigned(ap_const_lv5_2));
    add_ln68_40_fu_1735_p2 <= std_logic_vector(unsigned(mul_ln68_35_fu_606_p2) + unsigned(mul_ln68_36_fu_610_p2));
    add_ln68_41_fu_1741_p2 <= std_logic_vector(unsigned(mul_ln68_37_fu_614_p2) + unsigned(mul_ln68_38_fu_618_p2));
    add_ln68_42_fu_1747_p2 <= std_logic_vector(unsigned(add_ln68_41_fu_1741_p2) + unsigned(mul_ln68_39_fu_622_p2));
    add_ln68_43_fu_1753_p2 <= std_logic_vector(unsigned(add_ln68_42_fu_1747_p2) + unsigned(add_ln68_40_fu_1735_p2));
    add_ln68_44_fu_1759_p2 <= std_logic_vector(unsigned(add120_987_fu_208) + unsigned(add_ln68_43_fu_1753_p2));
    add_ln68_4_fu_922_p2 <= std_logic_vector(unsigned(i1_1_fu_212) + unsigned(ap_const_lv5_1));
    add_ln68_5_fu_1335_p2 <= std_logic_vector(unsigned(and_ln68_fu_1329_p2) + unsigned(add12078_fu_172));
    add_ln68_6_fu_1361_p2 <= std_logic_vector(unsigned(and_ln68_2_fu_1355_p2) + unsigned(and_ln68_1_fu_1341_p2));
    add_ln68_7_fu_1367_p2 <= std_logic_vector(unsigned(add120_12679_fu_176) + unsigned(add_ln68_6_fu_1361_p2));
    add_ln68_8_fu_1399_p2 <= std_logic_vector(unsigned(and_ln68_5_fu_1393_p2) + unsigned(and_ln68_3_fu_1381_p2));
    add_ln68_9_fu_1405_p2 <= std_logic_vector(unsigned(add_ln68_8_fu_1399_p2) + unsigned(and_ln68_4_fu_1387_p2));
    add_ln68_fu_775_p2 <= std_logic_vector(unsigned(i1_1_fu_212) + unsigned(ap_const_lv5_5));
    and_ln68_10_fu_1473_p2 <= (select_ln68_9_fu_1321_p3 and mul_ln68_10_fu_506_p2);
    and_ln68_11_fu_1479_p2 <= (select_ln68_10_fu_1347_p3 and mul_ln68_11_fu_510_p2);
    and_ln68_12_fu_1485_p2 <= (select_ln68_12_fu_1417_p3 and mul_ln68_12_fu_514_p2);
    and_ln68_13_fu_1499_p2 <= (select_ln68_13_fu_1491_p3 and mul_ln68_13_fu_518_p2);
    and_ln68_14_fu_1505_p2 <= (select_ln68_11_fu_1373_p3 and mul_ln68_14_fu_522_p2);
    and_ln68_15_fu_1529_p2 <= (select_ln68_11_fu_1373_p3 and mul_ln68_15_fu_526_p2);
    and_ln68_16_fu_1535_p2 <= (select_ln68_13_fu_1491_p3 and mul_ln68_16_fu_530_p2);
    and_ln68_17_fu_1541_p2 <= (select_ln68_12_fu_1417_p3 and mul_ln68_18_fu_538_p2);
    and_ln68_18_fu_1547_p2 <= (select_ln68_10_fu_1347_p3 and mul_ln68_19_fu_542_p2);
    and_ln68_19_fu_1583_p2 <= (select_ln68_12_fu_1417_p3 and mul_ln68_20_fu_546_p2);
    and_ln68_1_fu_1341_p2 <= (select_ln68_9_fu_1321_p3 and mul_ln68_1_fu_470_p2);
    and_ln68_20_fu_1589_p2 <= (select_ln68_13_fu_1491_p3 and mul_ln68_23_fu_558_p2);
    and_ln68_21_fu_1595_p2 <= (select_ln68_11_fu_1373_p3 and mul_ln68_24_fu_562_p2);
    and_ln68_22_fu_1619_p2 <= (select_ln68_12_fu_1417_p3 and mul_ln68_28_fu_578_p2);
    and_ln68_23_fu_1625_p2 <= (select_ln68_13_fu_1491_p3 and mul_ln68_29_fu_582_p2);
    and_ln68_24_fu_1680_p2 <= (select_ln68_13_fu_1491_p3 and mul_ln68_33_fu_598_p2);
    and_ln68_2_fu_1355_p2 <= (select_ln68_10_fu_1347_p3 and mul_ln68_2_fu_474_p2);
    and_ln68_3_fu_1381_p2 <= (select_ln68_11_fu_1373_p3 and mul_ln68_3_fu_478_p2);
    and_ln68_4_fu_1387_p2 <= (select_ln68_9_fu_1321_p3 and mul_ln68_4_fu_482_p2);
    and_ln68_5_fu_1393_p2 <= (select_ln68_10_fu_1347_p3 and mul_ln68_5_fu_486_p2);
    and_ln68_6_fu_1425_p2 <= (select_ln68_12_fu_1417_p3 and mul_ln68_6_fu_490_p2);
    and_ln68_7_fu_1431_p2 <= (select_ln68_10_fu_1347_p3 and mul_ln68_7_fu_494_p2);
    and_ln68_8_fu_1437_p2 <= (select_ln68_11_fu_1373_p3 and mul_ln68_8_fu_498_p2);
    and_ln68_9_fu_1443_p2 <= (select_ln68_9_fu_1321_p3 and mul_ln68_9_fu_502_p2);
    and_ln68_fu_1329_p2 <= (select_ln68_9_fu_1321_p3 and mul_ln68_fu_466_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, tmp_fu_693_p3)
    begin
        if (((tmp_fu_693_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    i1_4_fu_1771_p2 <= std_logic_vector(unsigned(i1_fu_168) + unsigned(ap_const_lv4_B));
    icmp_ln68_1_fu_833_p2 <= "1" when (signed(add_ln68_1_fu_806_p2) < signed(ap_const_lv5_A)) else "0";
    icmp_ln68_2_fu_881_p2 <= "1" when (signed(add_ln68_2_fu_839_p2) < signed(ap_const_lv5_A)) else "0";
    icmp_ln68_3_fu_916_p2 <= "1" when (signed(add_ln68_3_fu_887_p2) < signed(ap_const_lv5_A)) else "0";
    icmp_ln68_4_fu_966_p2 <= "1" when (signed(add_ln68_4_fu_922_p2) < signed(ap_const_lv5_A)) else "0";
    icmp_ln68_fu_800_p2 <= "1" when (signed(add_ln68_fu_775_p2) < signed(ap_const_lv5_A)) else "0";
    mul_ln68_10_fu_506_p0 <= zext_ln68_1_fu_793_p1(32 - 1 downto 0);
    mul_ln68_10_fu_506_p1 <= zext_ln68_fu_765_p1(32 - 1 downto 0);
    mul_ln68_11_fu_510_p0 <= zext_ln68_7_fu_1017_p1(32 - 1 downto 0);
    mul_ln68_11_fu_510_p1 <= zext_ln68_9_fu_1042_p1(32 - 1 downto 0);
    mul_ln68_12_fu_514_p0 <= zext_ln68_18_fu_1226_p1(32 - 1 downto 0);
    mul_ln68_12_fu_514_p1 <= zext_ln68_11_fu_1068_p1(32 - 1 downto 0);
    mul_ln68_13_fu_518_p0 <= zext_ln68_21_fu_1307_p1(32 - 1 downto 0);
    mul_ln68_13_fu_518_p1 <= zext_ln68_5_fu_959_p1(32 - 1 downto 0);
    mul_ln68_14_fu_522_p0 <= zext_ln68_15_fu_1146_p1(32 - 1 downto 0);
    mul_ln68_14_fu_522_p1 <= zext_ln68_3_fu_874_p1(32 - 1 downto 0);
    mul_ln68_15_fu_526_p0 <= zext_ln68_7_fu_1017_p1(32 - 1 downto 0);
    mul_ln68_15_fu_526_p1 <= zext_ln68_10_fu_1048_p1(32 - 1 downto 0);
    mul_ln68_16_fu_530_p0 <= zext_ln68_18_fu_1226_p1(32 - 1 downto 0);
    mul_ln68_16_fu_530_p1 <= zext_ln68_12_fu_1074_p1(32 - 1 downto 0);
    mul_ln68_17_fu_534_p0 <= zext_ln68_21_fu_1307_p1(32 - 1 downto 0);
    mul_ln68_17_fu_534_p1 <= zext_ln68_6_fu_990_p1(32 - 1 downto 0);
    mul_ln68_18_fu_538_p0 <= zext_ln68_15_fu_1146_p1(32 - 1 downto 0);
    mul_ln68_18_fu_538_p1 <= zext_ln68_4_fu_909_p1(32 - 1 downto 0);
    mul_ln68_19_fu_542_p0 <= zext_ln68_2_fu_826_p1(32 - 1 downto 0);
    mul_ln68_19_fu_542_p1 <= zext_ln68_fu_765_p1(32 - 1 downto 0);
    mul_ln68_1_fu_470_p0 <= zext_ln68_18_fu_1226_p1(32 - 1 downto 0);
    mul_ln68_1_fu_470_p1 <= zext_ln68_8_cast_reg_2166(32 - 1 downto 0);
    mul_ln68_20_fu_546_p0 <= zext_ln68_7_fu_1017_p1(32 - 1 downto 0);
    mul_ln68_20_fu_546_p1 <= zext_ln68_11_fu_1068_p1(32 - 1 downto 0);
    mul_ln68_21_fu_550_p0 <= zext_ln68_21_fu_1307_p1(32 - 1 downto 0);
    mul_ln68_21_fu_550_p1 <= zext_ln68_16_fu_1172_p1(32 - 1 downto 0);
    mul_ln68_22_fu_554_p0 <= zext_ln68_18_fu_1226_p1(32 - 1 downto 0);
    mul_ln68_22_fu_554_p1 <= zext_ln68_13_fu_1094_p1(32 - 1 downto 0);
    mul_ln68_23_fu_558_p0 <= zext_ln68_15_fu_1146_p1(32 - 1 downto 0);
    mul_ln68_23_fu_558_p1 <= zext_ln68_5_fu_959_p1(32 - 1 downto 0);
    mul_ln68_24_fu_562_p0 <= zext_ln68_3_fu_874_p1(32 - 1 downto 0);
    mul_ln68_24_fu_562_p1 <= zext_ln68_fu_765_p1(32 - 1 downto 0);
    mul_ln68_25_fu_566_p0 <= zext_ln68_21_fu_1307_p1(32 - 1 downto 0);
    mul_ln68_25_fu_566_p1 <= zext_ln68_17_fu_1200_p1(32 - 1 downto 0);
    mul_ln68_26_fu_570_p0 <= zext_ln68_15_fu_1146_p1(32 - 1 downto 0);
    mul_ln68_26_fu_570_p1 <= zext_ln68_6_fu_990_p1(32 - 1 downto 0);
    mul_ln68_27_fu_574_p0 <= zext_ln68_18_fu_1226_p1(32 - 1 downto 0);
    mul_ln68_27_fu_574_p1 <= zext_ln68_14_fu_1120_p1(32 - 1 downto 0);
    mul_ln68_28_fu_578_p0 <= zext_ln68_4_fu_909_p1(32 - 1 downto 0);
    mul_ln68_28_fu_578_p1 <= zext_ln68_fu_765_p1(32 - 1 downto 0);
    mul_ln68_29_fu_582_p0 <= zext_ln68_7_fu_1017_p1(32 - 1 downto 0);
    mul_ln68_29_fu_582_p1 <= zext_ln68_12_fu_1074_p1(32 - 1 downto 0);
    mul_ln68_2_fu_474_p0 <= zext_ln68_21_fu_1307_p1(32 - 1 downto 0);
    mul_ln68_2_fu_474_p1 <= zext_ln68_2_fu_826_p1(32 - 1 downto 0);
    mul_ln68_30_fu_586_p0 <= zext_ln68_16_fu_1172_p1(32 - 1 downto 0);
    mul_ln68_30_fu_586_p1 <= zext_ln68_15_fu_1146_p1(32 - 1 downto 0);
    mul_ln68_31_fu_590_p0 <= zext_ln68_7_fu_1017_p1(32 - 1 downto 0);
    mul_ln68_31_fu_590_p1 <= zext_ln68_13_fu_1094_p1(32 - 1 downto 0);
    mul_ln68_32_fu_594_p0 <= mul_ln68_32_fu_594_p00(32 - 1 downto 0);
    mul_ln68_32_fu_594_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_7_fu_1245_p3),64));
    mul_ln68_32_fu_594_p1 <= zext_ln68_18_fu_1226_p1(32 - 1 downto 0);
    mul_ln68_33_fu_598_p0 <= zext_ln68_5_fu_959_p1(32 - 1 downto 0);
    mul_ln68_33_fu_598_p1 <= zext_ln68_fu_765_p1(32 - 1 downto 0);
    mul_ln68_34_fu_602_p0 <= mul_ln68_34_fu_602_p00(32 - 1 downto 0);
    mul_ln68_34_fu_602_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_8_fu_1667_p3),64));
    mul_ln68_34_fu_602_p1 <= zext_ln68_21_fu_1307_p1(32 - 1 downto 0);
    mul_ln68_35_fu_606_p0 <= zext_ln68_6_fu_990_p1(32 - 1 downto 0);
    mul_ln68_35_fu_606_p1 <= zext_ln68_fu_765_p1(32 - 1 downto 0);
    mul_ln68_36_fu_610_p0 <= zext_ln68_14_fu_1120_p1(32 - 1 downto 0);
    mul_ln68_36_fu_610_p1 <= zext_ln68_7_fu_1017_p1(32 - 1 downto 0);
    mul_ln68_37_fu_614_p0 <= mul_ln68_37_fu_614_p00(32 - 1 downto 0);
    mul_ln68_37_fu_614_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_1264_p11),64));
    mul_ln68_37_fu_614_p1 <= zext_ln68_18_fu_1226_p1(32 - 1 downto 0);
    mul_ln68_38_fu_618_p0 <= mul_ln68_38_fu_618_p00(32 - 1 downto 0);
    mul_ln68_38_fu_618_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_1710_p12),64));
    mul_ln68_38_fu_618_p1 <= zext_ln68_21_fu_1307_p1(32 - 1 downto 0);
    mul_ln68_39_fu_622_p0 <= zext_ln68_17_fu_1200_p1(32 - 1 downto 0);
    mul_ln68_39_fu_622_p1 <= zext_ln68_15_fu_1146_p1(32 - 1 downto 0);
    mul_ln68_3_fu_478_p0 <= zext_ln68_21_fu_1307_p1(32 - 1 downto 0);
    mul_ln68_3_fu_478_p1 <= zext_ln68_3_fu_874_p1(32 - 1 downto 0);
    mul_ln68_4_fu_482_p0 <= zext_ln68_15_fu_1146_p1(32 - 1 downto 0);
    mul_ln68_4_fu_482_p1 <= zext_ln68_1_fu_793_p1(32 - 1 downto 0);
    mul_ln68_5_fu_486_p0 <= zext_ln68_18_fu_1226_p1(32 - 1 downto 0);
    mul_ln68_5_fu_486_p1 <= zext_ln68_9_fu_1042_p1(32 - 1 downto 0);
    mul_ln68_6_fu_490_p0 <= zext_ln68_21_fu_1307_p1(32 - 1 downto 0);
    mul_ln68_6_fu_490_p1 <= zext_ln68_4_fu_909_p1(32 - 1 downto 0);
    mul_ln68_7_fu_494_p0 <= zext_ln68_15_fu_1146_p1(32 - 1 downto 0);
    mul_ln68_7_fu_494_p1 <= zext_ln68_2_fu_826_p1(32 - 1 downto 0);
    mul_ln68_8_fu_498_p0 <= zext_ln68_18_fu_1226_p1(32 - 1 downto 0);
    mul_ln68_8_fu_498_p1 <= zext_ln68_10_fu_1048_p1(32 - 1 downto 0);
    mul_ln68_9_fu_502_p0 <= zext_ln68_7_fu_1017_p1(32 - 1 downto 0);
    mul_ln68_9_fu_502_p1 <= zext_ln68_8_cast_reg_2166(32 - 1 downto 0);
    mul_ln68_fu_466_p0 <= zext_ln68_21_fu_1307_p1(32 - 1 downto 0);
    mul_ln68_fu_466_p1 <= zext_ln68_1_fu_793_p1(32 - 1 downto 0);
    select_ln68_10_fu_1347_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln68_1_fu_833_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_11_fu_1373_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln68_2_fu_881_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_12_fu_1417_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln68_3_fu_916_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_13_fu_1491_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln68_4_fu_966_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_1_fu_866_p3 <= 
        shl_ln68_1_fu_860_p2 when (trunc_ln55_fu_725_p1(0) = '1') else 
        tmp_2_fu_851_p5;
    select_ln68_2_fu_951_p3 <= 
        shl_ln68_2_fu_945_p2 when (trunc_ln55_fu_725_p1(0) = '1') else 
        tmp_4_fu_934_p7;
    select_ln68_3_fu_1034_p3 <= 
        tmp_1_fu_818_p4 when (trunc_ln55_fu_725_p1(0) = '1') else 
        shl_ln68_3_fu_1028_p2;
    select_ln68_4_fu_1060_p3 <= 
        tmp_3_fu_899_p6 when (trunc_ln55_fu_725_p1(0) = '1') else 
        shl_ln68_4_fu_1054_p2;
    select_ln68_5_fu_1086_p3 <= 
        tmp_5_fu_978_p8 when (trunc_ln55_fu_725_p1(0) = '1') else 
        shl_ln68_5_fu_1080_p2;
    select_ln68_6_fu_1164_p3 <= 
        shl_ln68_6_fu_1158_p2 when (trunc_ln55_fu_725_p1(0) = '1') else 
        tmp_7_fu_1106_p9;
    select_ln68_7_fu_1245_p3 <= 
        tmp_9_fu_1184_p10 when (trunc_ln55_fu_725_p1(0) = '1') else 
        shl_ln68_7_fu_1239_p2;
    select_ln68_8_fu_1667_p3 <= 
        shl_ln68_8_fu_1661_p2 when (trunc_ln55_fu_725_p1(0) = '1') else 
        tmp_11_fu_1264_p11;
    select_ln68_9_fu_1321_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln68_fu_800_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_fu_786_p3 <= 
        shl_ln68_fu_781_p2 when (trunc_ln55_fu_725_p1(0) = '1') else 
        arg2_r_reload;
    shl_ln68_1_fu_860_p2 <= std_logic_vector(shift_left(unsigned(tmp_2_fu_851_p5),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln68_2_fu_945_p2 <= std_logic_vector(shift_left(unsigned(tmp_4_fu_934_p7),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln68_3_fu_1028_p2 <= std_logic_vector(shift_left(unsigned(tmp_1_fu_818_p4),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln68_4_fu_1054_p2 <= std_logic_vector(shift_left(unsigned(tmp_3_fu_899_p6),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln68_5_fu_1080_p2 <= std_logic_vector(shift_left(unsigned(tmp_5_fu_978_p8),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln68_6_fu_1158_p2 <= std_logic_vector(shift_left(unsigned(tmp_7_fu_1106_p9),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln68_7_fu_1239_p2 <= std_logic_vector(shift_left(unsigned(tmp_9_fu_1184_p10),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln68_8_fu_1661_p2 <= std_logic_vector(shift_left(unsigned(tmp_11_fu_1264_p11),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln68_fu_781_p2 <= std_logic_vector(shift_left(unsigned(arg2_r_reload),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_11_fu_1264_p10 <= std_logic_vector(signed(ap_const_lv4_C) - signed(trunc_ln55_1_fu_729_p1));
    tmp_13_fu_1710_p11 <= std_logic_vector(signed(ap_const_lv4_D) - signed(trunc_ln55_1_fu_729_p1));
    tmp_1_fu_818_p3 <= (trunc_ln55_4_fu_741_p1 xor ap_const_lv1_1);
    tmp_2_fu_851_p4 <= std_logic_vector(signed(ap_const_lv2_2) - signed(trunc_ln55_3_fu_737_p1));
    tmp_3_fu_899_p5 <= (trunc_ln55_3_fu_737_p1 xor ap_const_lv2_3);
    tmp_4_fu_934_p6 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(trunc_ln55_2_fu_733_p1));
    tmp_5_fu_978_p7 <= std_logic_vector(unsigned(ap_const_lv3_1) - unsigned(trunc_ln55_2_fu_733_p1));
    tmp_7_fu_1106_p8 <= std_logic_vector(unsigned(ap_const_lv3_2) - unsigned(trunc_ln55_2_fu_733_p1));
    tmp_9_fu_1184_p9 <= std_logic_vector(unsigned(ap_const_lv3_3) - unsigned(trunc_ln55_2_fu_733_p1));
    tmp_fu_693_p3 <= i1_1_fu_212(4 downto 4);
    trunc_ln55_1_fu_729_p1 <= i1_1_fu_212(4 - 1 downto 0);
    trunc_ln55_2_fu_733_p1 <= i1_1_fu_212(3 - 1 downto 0);
    trunc_ln55_3_fu_737_p1 <= i1_1_fu_212(2 - 1 downto 0);
    trunc_ln55_4_fu_741_p1 <= i1_1_fu_212(1 - 1 downto 0);
    trunc_ln55_fu_725_p1 <= i1_fu_168(1 - 1 downto 0);
    zext_ln68_10_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_851_p5),64));
    zext_ln68_11_fu_1068_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_4_fu_1060_p3),64));
    zext_ln68_12_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_934_p7),64));
    zext_ln68_13_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_5_fu_1086_p3),64));
    zext_ln68_14_fu_1120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_1106_p9),64));
    zext_ln68_15_fu_1146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_1126_p12),64));
    zext_ln68_16_fu_1172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_6_fu_1164_p3),64));
    zext_ln68_17_fu_1200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_1184_p10),64));
    zext_ln68_18_fu_1226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_1206_p12),64));
    zext_ln68_1_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_fu_786_p3),64));
    zext_ln68_21_fu_1307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_1287_p12),64));
    zext_ln68_2_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_818_p4),64));
    zext_ln68_3_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_1_fu_866_p3),64));
    zext_ln68_4_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_899_p6),64));
    zext_ln68_5_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_2_fu_951_p3),64));
    zext_ln68_6_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_978_p8),64));
    zext_ln68_7_fu_1017_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_997_p12),64));
    zext_ln68_8_cast_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln68_8),64));
    zext_ln68_9_fu_1042_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_3_fu_1034_p3),64));
    zext_ln68_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_745_p12),64));
end behav;
