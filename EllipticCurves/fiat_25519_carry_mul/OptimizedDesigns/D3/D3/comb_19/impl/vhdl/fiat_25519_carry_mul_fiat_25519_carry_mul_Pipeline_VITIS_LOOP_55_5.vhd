-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fiat_25519_carry_mul_fiat_25519_carry_mul_Pipeline_VITIS_LOOP_55_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arr : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_2 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_3 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_4 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_5 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_6 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_7 : IN STD_LOGIC_VECTOR (63 downto 0);
    arr_8 : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_4_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_5_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_6_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_7_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_8_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg1_r_9_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_7_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_8_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_9_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_4_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_5_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    arg2_r_6_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    add120_9225_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add120_9225_out_ap_vld : OUT STD_LOGIC;
    add120_8224_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add120_8224_out_ap_vld : OUT STD_LOGIC;
    add120_7223_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add120_7223_out_ap_vld : OUT STD_LOGIC;
    add120_6222_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add120_6222_out_ap_vld : OUT STD_LOGIC;
    add120_5221_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add120_5221_out_ap_vld : OUT STD_LOGIC;
    add120_4220_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add120_4220_out_ap_vld : OUT STD_LOGIC;
    add120_3219_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add120_3219_out_ap_vld : OUT STD_LOGIC;
    add120_2218_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add120_2218_out_ap_vld : OUT STD_LOGIC;
    add120_1217_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add120_1217_out_ap_vld : OUT STD_LOGIC;
    add120216_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add120216_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fiat_25519_carry_mul_fiat_25519_carry_mul_Pipeline_VITIS_LOOP_55_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_10_fu_552_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add120216_fu_166 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_fu_709_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal add120_1217_fu_170 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_1_fu_774_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add120_2218_fu_174 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_2_fu_853_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add120_3219_fu_178 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_3_fu_906_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add120_4220_fu_182 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_4_fu_974_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add120_5221_fu_186 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_5_fu_1029_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add120_6222_fu_190 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_6_fu_1099_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add120_7223_fu_194 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_7_fu_1156_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add120_8224_fu_198 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_8_fu_1228_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add120_9225_fu_202 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_9_fu_1261_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i1_fu_206 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln55_fu_1267_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln68_fu_454_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_fu_454_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_fu_628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_1_fu_458_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_1_fu_458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_2_fu_462_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_2_fu_462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_3_fu_466_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_3_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_4_fu_470_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_4_fu_470_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_5_fu_474_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_5_fu_474_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_6_fu_478_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_6_fu_478_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_7_fu_482_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_7_fu_482_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_8_fu_486_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_8_fu_486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_9_fu_490_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_9_fu_490_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln55_fu_590_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_612_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_648_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_648_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_602_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln68_fu_670_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_fu_676_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_22_fu_606_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln68_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln68_fu_454_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_5_fu_695_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_fu_703_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_727_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_727_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_23_fu_715_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln68_1_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln68_1_fu_458_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_6_fu_760_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_1_fu_768_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_792_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_792_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln68_1_fu_814_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_1_fu_820_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_24_fu_780_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln68_2_fu_833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln68_2_fu_462_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_7_fu_839_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_2_fu_847_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln55_2_fu_598_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_871_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_871_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_25_fu_859_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln68_3_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln68_3_fu_466_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_8_fu_892_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_3_fu_900_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln55_1_fu_594_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_924_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_924_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln68_2_fu_935_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_2_fu_941_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_26_fu_912_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln68_4_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln68_4_fu_470_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_9_fu_960_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_4_fu_968_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_992_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_992_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_27_fu_980_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln68_5_fu_1009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln68_5_fu_474_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_10_fu_1015_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_5_fu_1023_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_1047_p8 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_1047_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln68_3_fu_1060_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_3_fu_1066_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_28_fu_1035_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln68_6_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln68_6_fu_478_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_11_fu_1085_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_6_fu_1093_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_1117_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_1117_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_29_fu_1105_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln68_7_fu_1136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln68_7_fu_482_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_12_fu_1142_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_7_fu_1150_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_1174_p10 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_1174_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln68_4_fu_1189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_4_fu_1195_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_30_fu_1162_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln68_8_fu_1208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln68_8_fu_486_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln68_13_fu_1214_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln68_8_fu_1222_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_1240_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_1240_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_9_fu_490_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln68_1_fu_458_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_2_fu_462_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_3_fu_466_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_4_fu_470_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_5_fu_474_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_6_fu_478_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_7_fu_482_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_8_fu_486_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_9_fu_490_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln68_fu_454_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_10_4_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_4_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_5_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_6_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_7_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_8_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_mux_9_4_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fiat_25519_carry_mul_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32ns_32ns_64_1_1_U25 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_fu_454_p0,
        din1 => mul_ln68_fu_454_p1,
        dout => mul_ln68_fu_454_p2);

    mul_32ns_32ns_64_1_1_U26 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_1_fu_458_p0,
        din1 => mul_ln68_1_fu_458_p1,
        dout => mul_ln68_1_fu_458_p2);

    mul_32ns_32ns_64_1_1_U27 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_2_fu_462_p0,
        din1 => mul_ln68_2_fu_462_p1,
        dout => mul_ln68_2_fu_462_p2);

    mul_32ns_32ns_64_1_1_U28 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_3_fu_466_p0,
        din1 => mul_ln68_3_fu_466_p1,
        dout => mul_ln68_3_fu_466_p2);

    mul_32ns_32ns_64_1_1_U29 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_4_fu_470_p0,
        din1 => mul_ln68_4_fu_470_p1,
        dout => mul_ln68_4_fu_470_p2);

    mul_32ns_32ns_64_1_1_U30 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_5_fu_474_p0,
        din1 => mul_ln68_5_fu_474_p1,
        dout => mul_ln68_5_fu_474_p2);

    mul_32ns_32ns_64_1_1_U31 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_6_fu_478_p0,
        din1 => mul_ln68_6_fu_478_p1,
        dout => mul_ln68_6_fu_478_p2);

    mul_32ns_32ns_64_1_1_U32 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_7_fu_482_p0,
        din1 => mul_ln68_7_fu_482_p1,
        dout => mul_ln68_7_fu_482_p2);

    mul_32ns_32ns_64_1_1_U33 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_8_fu_486_p0,
        din1 => mul_ln68_8_fu_486_p1,
        dout => mul_ln68_8_fu_486_p2);

    mul_32ns_32ns_64_1_1_U34 : component fiat_25519_carry_mul_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln68_9_fu_490_p0,
        din1 => mul_ln68_9_fu_490_p1,
        dout => mul_ln68_9_fu_490_p2);

    mux_10_4_32_1_1_U35 : component fiat_25519_carry_mul_mux_10_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => arg1_r_reload,
        din1 => arg1_r_1_reload,
        din2 => arg1_r_2_reload,
        din3 => arg1_r_3_reload,
        din4 => arg1_r_4_reload,
        din5 => arg1_r_5_reload,
        din6 => arg1_r_6_reload,
        din7 => arg1_r_7_reload,
        din8 => arg1_r_8_reload,
        din9 => arg1_r_9_reload,
        din10 => trunc_ln55_fu_590_p1,
        dout => tmp_fu_612_p12);

    mux_10_4_32_1_1_U36 : component fiat_25519_carry_mul_mux_10_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => arg2_r_reload,
        din1 => ap_const_lv32_0,
        din2 => ap_const_lv32_0,
        din3 => ap_const_lv32_0,
        din4 => ap_const_lv32_0,
        din5 => ap_const_lv32_0,
        din6 => ap_const_lv32_0,
        din7 => arg2_r_7_reload,
        din8 => arg2_r_8_reload,
        din9 => arg2_r_9_reload,
        din10 => tmp_1_fu_648_p11,
        dout => tmp_1_fu_648_p12);

    mux_10_4_32_1_1_U37 : component fiat_25519_carry_mul_mux_10_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => ap_const_lv32_0,
        din3 => ap_const_lv32_0,
        din4 => ap_const_lv32_0,
        din5 => ap_const_lv32_0,
        din6 => ap_const_lv32_0,
        din7 => ap_const_lv32_0,
        din8 => arg2_r_8_reload,
        din9 => arg2_r_9_reload,
        din10 => tmp_2_fu_727_p11,
        dout => tmp_2_fu_727_p12);

    mux_10_4_32_1_1_U38 : component fiat_25519_carry_mul_mux_10_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => ap_const_lv32_0,
        din4 => ap_const_lv32_0,
        din5 => ap_const_lv32_0,
        din6 => ap_const_lv32_0,
        din7 => ap_const_lv32_0,
        din8 => ap_const_lv32_0,
        din9 => arg2_r_9_reload,
        din10 => tmp_3_fu_792_p11,
        dout => tmp_3_fu_792_p12);

    mux_4_2_32_1_1_U39 : component fiat_25519_carry_mul_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => tmp_4_fu_871_p5,
        dout => tmp_4_fu_871_p6);

    mux_5_3_32_1_1_U40 : component fiat_25519_carry_mul_mux_5_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => tmp_5_fu_924_p6,
        dout => tmp_5_fu_924_p7);

    mux_6_3_32_1_1_U41 : component fiat_25519_carry_mul_mux_6_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => tmp_6_fu_992_p7,
        dout => tmp_6_fu_992_p8);

    mux_7_3_32_1_1_U42 : component fiat_25519_carry_mul_mux_7_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => tmp_7_fu_1047_p8,
        dout => tmp_7_fu_1047_p9);

    mux_8_3_32_1_1_U43 : component fiat_25519_carry_mul_mux_8_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => arg2_r_7_reload,
        din8 => tmp_8_fu_1117_p9,
        dout => tmp_8_fu_1117_p10);

    mux_9_4_32_1_1_U44 : component fiat_25519_carry_mul_mux_9_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => arg2_r_7_reload,
        din8 => arg2_r_8_reload,
        din9 => tmp_9_fu_1174_p10,
        dout => tmp_9_fu_1174_p11);

    mux_10_4_32_1_1_U45 : component fiat_25519_carry_mul_mux_10_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => arg2_r_7_reload,
        din8 => arg2_r_8_reload,
        din9 => arg2_r_9_reload,
        din10 => tmp_s_fu_1240_p11,
        dout => tmp_s_fu_1240_p12);

    flow_control_loop_pipe_sequential_init_U : component fiat_25519_carry_mul_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    add120216_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add120216_fu_166 <= arr_8;
                elsif (((tmp_10_fu_552_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add120216_fu_166 <= add_ln68_fu_709_p2;
                end if;
            end if; 
        end if;
    end process;

    add120_1217_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add120_1217_fu_170 <= arr_7;
                elsif (((tmp_10_fu_552_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add120_1217_fu_170 <= add_ln68_1_fu_774_p2;
                end if;
            end if; 
        end if;
    end process;

    add120_2218_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add120_2218_fu_174 <= arr_6;
                elsif (((tmp_10_fu_552_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add120_2218_fu_174 <= add_ln68_2_fu_853_p2;
                end if;
            end if; 
        end if;
    end process;

    add120_3219_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add120_3219_fu_178 <= arr_5;
                elsif (((tmp_10_fu_552_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add120_3219_fu_178 <= add_ln68_3_fu_906_p2;
                end if;
            end if; 
        end if;
    end process;

    add120_4220_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add120_4220_fu_182 <= arr_4;
                elsif (((tmp_10_fu_552_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add120_4220_fu_182 <= add_ln68_4_fu_974_p2;
                end if;
            end if; 
        end if;
    end process;

    add120_5221_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add120_5221_fu_186 <= arr_3;
                elsif (((tmp_10_fu_552_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add120_5221_fu_186 <= add_ln68_5_fu_1029_p2;
                end if;
            end if; 
        end if;
    end process;

    add120_6222_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add120_6222_fu_190 <= arr_2;
                elsif (((tmp_10_fu_552_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add120_6222_fu_190 <= add_ln68_6_fu_1099_p2;
                end if;
            end if; 
        end if;
    end process;

    add120_7223_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add120_7223_fu_194 <= arr_1;
                elsif (((tmp_10_fu_552_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add120_7223_fu_194 <= add_ln68_7_fu_1156_p2;
                end if;
            end if; 
        end if;
    end process;

    add120_8224_fu_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add120_8224_fu_198 <= arr;
                elsif (((tmp_10_fu_552_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add120_8224_fu_198 <= add_ln68_8_fu_1228_p2;
                end if;
            end if; 
        end if;
    end process;

    add120_9225_fu_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add120_9225_fu_202 <= ap_const_lv64_0;
                elsif (((tmp_10_fu_552_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    add120_9225_fu_202 <= add_ln68_9_fu_1261_p2;
                end if;
            end if; 
        end if;
    end process;

    i1_fu_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i1_fu_206 <= ap_const_lv5_9;
                elsif (((tmp_10_fu_552_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i1_fu_206 <= add_ln55_fu_1267_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add120216_out <= add120216_fu_166;

    add120216_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_10_fu_552_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_10_fu_552_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add120216_out_ap_vld <= ap_const_logic_1;
        else 
            add120216_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add120_1217_out <= add120_1217_fu_170;

    add120_1217_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_10_fu_552_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_10_fu_552_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add120_1217_out_ap_vld <= ap_const_logic_1;
        else 
            add120_1217_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add120_2218_out <= add120_2218_fu_174;

    add120_2218_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_10_fu_552_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_10_fu_552_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add120_2218_out_ap_vld <= ap_const_logic_1;
        else 
            add120_2218_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add120_3219_out <= add120_3219_fu_178;

    add120_3219_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_10_fu_552_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_10_fu_552_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add120_3219_out_ap_vld <= ap_const_logic_1;
        else 
            add120_3219_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add120_4220_out <= add120_4220_fu_182;

    add120_4220_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_10_fu_552_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_10_fu_552_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add120_4220_out_ap_vld <= ap_const_logic_1;
        else 
            add120_4220_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add120_5221_out <= add120_5221_fu_186;

    add120_5221_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_10_fu_552_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_10_fu_552_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add120_5221_out_ap_vld <= ap_const_logic_1;
        else 
            add120_5221_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add120_6222_out <= add120_6222_fu_190;

    add120_6222_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_10_fu_552_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_10_fu_552_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add120_6222_out_ap_vld <= ap_const_logic_1;
        else 
            add120_6222_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add120_7223_out <= add120_7223_fu_194;

    add120_7223_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_10_fu_552_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_10_fu_552_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add120_7223_out_ap_vld <= ap_const_logic_1;
        else 
            add120_7223_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add120_8224_out <= add120_8224_fu_198;

    add120_8224_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_10_fu_552_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_10_fu_552_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add120_8224_out_ap_vld <= ap_const_logic_1;
        else 
            add120_8224_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add120_9225_out <= add120_9225_fu_202;

    add120_9225_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_10_fu_552_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_10_fu_552_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add120_9225_out_ap_vld <= ap_const_logic_1;
        else 
            add120_9225_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln55_fu_1267_p2 <= std_logic_vector(unsigned(i1_fu_206) + unsigned(ap_const_lv5_1F));
    add_ln68_1_fu_774_p2 <= std_logic_vector(unsigned(and_ln68_1_fu_768_p2) + unsigned(add120_1217_fu_170));
    add_ln68_2_fu_853_p2 <= std_logic_vector(unsigned(and_ln68_2_fu_847_p2) + unsigned(add120_2218_fu_174));
    add_ln68_3_fu_906_p2 <= std_logic_vector(unsigned(and_ln68_3_fu_900_p2) + unsigned(add120_3219_fu_178));
    add_ln68_4_fu_974_p2 <= std_logic_vector(unsigned(and_ln68_4_fu_968_p2) + unsigned(add120_4220_fu_182));
    add_ln68_5_fu_1029_p2 <= std_logic_vector(unsigned(and_ln68_5_fu_1023_p2) + unsigned(add120_5221_fu_186));
    add_ln68_6_fu_1099_p2 <= std_logic_vector(unsigned(and_ln68_6_fu_1093_p2) + unsigned(add120_6222_fu_190));
    add_ln68_7_fu_1156_p2 <= std_logic_vector(unsigned(and_ln68_7_fu_1150_p2) + unsigned(add120_7223_fu_194));
    add_ln68_8_fu_1228_p2 <= std_logic_vector(unsigned(and_ln68_8_fu_1222_p2) + unsigned(add120_8224_fu_198));
    add_ln68_9_fu_1261_p2 <= std_logic_vector(unsigned(mul_ln68_9_fu_490_p2) + unsigned(add120_9225_fu_202));
    add_ln68_fu_709_p2 <= std_logic_vector(unsigned(and_ln68_fu_703_p2) + unsigned(add120216_fu_166));
    and_ln68_1_fu_768_p2 <= (select_ln68_6_fu_760_p3 and mul_ln68_1_fu_458_p2);
    and_ln68_2_fu_847_p2 <= (select_ln68_7_fu_839_p3 and mul_ln68_2_fu_462_p2);
    and_ln68_3_fu_900_p2 <= (select_ln68_8_fu_892_p3 and mul_ln68_3_fu_466_p2);
    and_ln68_4_fu_968_p2 <= (select_ln68_9_fu_960_p3 and mul_ln68_4_fu_470_p2);
    and_ln68_5_fu_1023_p2 <= (select_ln68_10_fu_1015_p3 and mul_ln68_5_fu_474_p2);
    and_ln68_6_fu_1093_p2 <= (select_ln68_11_fu_1085_p3 and mul_ln68_6_fu_478_p2);
    and_ln68_7_fu_1150_p2 <= (select_ln68_12_fu_1142_p3 and mul_ln68_7_fu_482_p2);
    and_ln68_8_fu_1222_p2 <= (select_ln68_13_fu_1214_p3 and mul_ln68_8_fu_486_p2);
    and_ln68_fu_703_p2 <= (select_ln68_5_fu_695_p3 and mul_ln68_fu_454_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, tmp_10_fu_552_p3)
    begin
        if (((tmp_10_fu_552_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_22_fu_606_p2 <= std_logic_vector(unsigned(i1_fu_206) + unsigned(ap_const_lv5_9));
    empty_23_fu_715_p2 <= std_logic_vector(unsigned(i1_fu_206) + unsigned(ap_const_lv5_8));
    empty_24_fu_780_p2 <= std_logic_vector(unsigned(i1_fu_206) + unsigned(ap_const_lv5_7));
    empty_25_fu_859_p2 <= std_logic_vector(unsigned(i1_fu_206) + unsigned(ap_const_lv5_6));
    empty_26_fu_912_p2 <= std_logic_vector(unsigned(i1_fu_206) + unsigned(ap_const_lv5_5));
    empty_27_fu_980_p2 <= std_logic_vector(unsigned(i1_fu_206) + unsigned(ap_const_lv5_4));
    empty_28_fu_1035_p2 <= std_logic_vector(unsigned(i1_fu_206) + unsigned(ap_const_lv5_3));
    empty_29_fu_1105_p2 <= std_logic_vector(unsigned(i1_fu_206) + unsigned(ap_const_lv5_2));
    empty_30_fu_1162_p2 <= std_logic_vector(unsigned(i1_fu_206) + unsigned(ap_const_lv5_1));
    empty_fu_602_p1 <= i1_fu_206(1 - 1 downto 0);
    icmp_ln68_1_fu_754_p2 <= "1" when (unsigned(empty_23_fu_715_p2) < unsigned(ap_const_lv5_A)) else "0";
    icmp_ln68_2_fu_833_p2 <= "1" when (unsigned(empty_24_fu_780_p2) < unsigned(ap_const_lv5_A)) else "0";
    icmp_ln68_3_fu_886_p2 <= "1" when (signed(empty_25_fu_859_p2) < signed(ap_const_lv5_A)) else "0";
    icmp_ln68_4_fu_954_p2 <= "1" when (signed(empty_26_fu_912_p2) < signed(ap_const_lv5_A)) else "0";
    icmp_ln68_5_fu_1009_p2 <= "1" when (signed(empty_27_fu_980_p2) < signed(ap_const_lv5_A)) else "0";
    icmp_ln68_6_fu_1079_p2 <= "1" when (signed(empty_28_fu_1035_p2) < signed(ap_const_lv5_A)) else "0";
    icmp_ln68_7_fu_1136_p2 <= "1" when (signed(empty_29_fu_1105_p2) < signed(ap_const_lv5_A)) else "0";
    icmp_ln68_8_fu_1208_p2 <= "1" when (signed(empty_30_fu_1162_p2) < signed(ap_const_lv5_A)) else "0";
    icmp_ln68_fu_689_p2 <= "1" when (unsigned(empty_22_fu_606_p2) < unsigned(ap_const_lv5_A)) else "0";
    mul_ln68_1_fu_458_p0 <= mul_ln68_1_fu_458_p00(32 - 1 downto 0);
    mul_ln68_1_fu_458_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_727_p12),64));
    mul_ln68_1_fu_458_p1 <= zext_ln68_fu_628_p1(32 - 1 downto 0);
    mul_ln68_2_fu_462_p0 <= mul_ln68_2_fu_462_p00(32 - 1 downto 0);
    mul_ln68_2_fu_462_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_1_fu_820_p3),64));
    mul_ln68_2_fu_462_p1 <= zext_ln68_fu_628_p1(32 - 1 downto 0);
    mul_ln68_3_fu_466_p0 <= mul_ln68_3_fu_466_p00(32 - 1 downto 0);
    mul_ln68_3_fu_466_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_871_p6),64));
    mul_ln68_3_fu_466_p1 <= zext_ln68_fu_628_p1(32 - 1 downto 0);
    mul_ln68_4_fu_470_p0 <= mul_ln68_4_fu_470_p00(32 - 1 downto 0);
    mul_ln68_4_fu_470_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_2_fu_941_p3),64));
    mul_ln68_4_fu_470_p1 <= zext_ln68_fu_628_p1(32 - 1 downto 0);
    mul_ln68_5_fu_474_p0 <= mul_ln68_5_fu_474_p00(32 - 1 downto 0);
    mul_ln68_5_fu_474_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_992_p8),64));
    mul_ln68_5_fu_474_p1 <= zext_ln68_fu_628_p1(32 - 1 downto 0);
    mul_ln68_6_fu_478_p0 <= mul_ln68_6_fu_478_p00(32 - 1 downto 0);
    mul_ln68_6_fu_478_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_3_fu_1066_p3),64));
    mul_ln68_6_fu_478_p1 <= zext_ln68_fu_628_p1(32 - 1 downto 0);
    mul_ln68_7_fu_482_p0 <= mul_ln68_7_fu_482_p00(32 - 1 downto 0);
    mul_ln68_7_fu_482_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_1117_p10),64));
    mul_ln68_7_fu_482_p1 <= zext_ln68_fu_628_p1(32 - 1 downto 0);
    mul_ln68_8_fu_486_p0 <= mul_ln68_8_fu_486_p00(32 - 1 downto 0);
    mul_ln68_8_fu_486_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_4_fu_1195_p3),64));
    mul_ln68_8_fu_486_p1 <= zext_ln68_fu_628_p1(32 - 1 downto 0);
    mul_ln68_9_fu_490_p0 <= mul_ln68_9_fu_490_p00(32 - 1 downto 0);
    mul_ln68_9_fu_490_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_1240_p12),64));
    mul_ln68_9_fu_490_p1 <= zext_ln68_fu_628_p1(32 - 1 downto 0);
    mul_ln68_fu_454_p0 <= mul_ln68_fu_454_p00(32 - 1 downto 0);
    mul_ln68_fu_454_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_fu_676_p3),64));
    mul_ln68_fu_454_p1 <= zext_ln68_fu_628_p1(32 - 1 downto 0);
    select_ln68_10_fu_1015_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln68_5_fu_1009_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_11_fu_1085_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln68_6_fu_1079_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_12_fu_1142_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln68_7_fu_1136_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_13_fu_1214_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln68_8_fu_1208_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_1_fu_820_p3 <= 
        shl_ln68_1_fu_814_p2 when (empty_fu_602_p1(0) = '1') else 
        tmp_3_fu_792_p12;
    select_ln68_2_fu_941_p3 <= 
        shl_ln68_2_fu_935_p2 when (empty_fu_602_p1(0) = '1') else 
        tmp_5_fu_924_p7;
    select_ln68_3_fu_1066_p3 <= 
        shl_ln68_3_fu_1060_p2 when (empty_fu_602_p1(0) = '1') else 
        tmp_7_fu_1047_p9;
    select_ln68_4_fu_1195_p3 <= 
        shl_ln68_4_fu_1189_p2 when (empty_fu_602_p1(0) = '1') else 
        tmp_9_fu_1174_p11;
    select_ln68_5_fu_695_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln68_fu_689_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_6_fu_760_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln68_1_fu_754_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_7_fu_839_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln68_2_fu_833_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_8_fu_892_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln68_3_fu_886_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_9_fu_960_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (icmp_ln68_4_fu_954_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_fu_676_p3 <= 
        shl_ln68_fu_670_p2 when (empty_fu_602_p1(0) = '1') else 
        tmp_1_fu_648_p12;
    shl_ln68_1_fu_814_p2 <= std_logic_vector(shift_left(unsigned(tmp_3_fu_792_p12),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln68_2_fu_935_p2 <= std_logic_vector(shift_left(unsigned(tmp_5_fu_924_p7),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln68_3_fu_1060_p2 <= std_logic_vector(shift_left(unsigned(tmp_7_fu_1047_p9),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln68_4_fu_1189_p2 <= std_logic_vector(shift_left(unsigned(tmp_9_fu_1174_p11),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln68_fu_670_p2 <= std_logic_vector(shift_left(unsigned(tmp_1_fu_648_p12),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_10_fu_552_p3 <= i1_fu_206(4 downto 4);
    tmp_1_fu_648_p11 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(trunc_ln55_fu_590_p1));
    tmp_2_fu_727_p11 <= std_logic_vector(unsigned(ap_const_lv4_1) - unsigned(trunc_ln55_fu_590_p1));
    tmp_3_fu_792_p11 <= std_logic_vector(unsigned(ap_const_lv4_2) - unsigned(trunc_ln55_fu_590_p1));
    tmp_4_fu_871_p5 <= (trunc_ln55_2_fu_598_p1 xor ap_const_lv2_3);
    tmp_5_fu_924_p6 <= std_logic_vector(signed(ap_const_lv3_4) - signed(trunc_ln55_1_fu_594_p1));
    tmp_6_fu_992_p7 <= std_logic_vector(signed(ap_const_lv3_5) - signed(trunc_ln55_1_fu_594_p1));
    tmp_7_fu_1047_p8 <= std_logic_vector(signed(ap_const_lv3_6) - signed(trunc_ln55_1_fu_594_p1));
    tmp_8_fu_1117_p9 <= (trunc_ln55_1_fu_594_p1 xor ap_const_lv3_7);
    tmp_9_fu_1174_p10 <= std_logic_vector(signed(ap_const_lv4_8) - signed(trunc_ln55_fu_590_p1));
    tmp_s_fu_1240_p11 <= std_logic_vector(signed(ap_const_lv4_9) - signed(trunc_ln55_fu_590_p1));
    trunc_ln55_1_fu_594_p1 <= i1_fu_206(3 - 1 downto 0);
    trunc_ln55_2_fu_598_p1 <= i1_fu_206(2 - 1 downto 0);
    trunc_ln55_fu_590_p1 <= i1_fu_206(4 - 1 downto 0);
    zext_ln68_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_612_p12),64));
end behav;
