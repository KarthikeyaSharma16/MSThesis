

================================================================
== Vitis HLS Report for 'fiat_25519_carry_mul_Pipeline_VITIS_LOOP_55_5'
================================================================
* Date:           Thu May  9 14:30:56 2024

* Version:        2023.1.1 (Build 3869133 on Jun 15 2023)
* Project:        D3
* Solution:       comb_17 (Vivado IP Flow Target)
* Product family: zynquplus
* Target device:  xczu9eg-ffvb1156-2-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  7.224 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+-----------+-----------+-----+-----+---------+
    |  Latency (cycles) |   Latency (absolute)  |  Interval | Pipeline|
    |   min   |   max   |    min    |    max    | min | max |   Type  |
    +---------+---------+-----------+-----------+-----+-----+---------+
    |        4|        4|  40.000 ns|  40.000 ns|    4|    4|       no|
    +---------+---------+-----------+-----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- VITIS_LOOP_55_5  |        2|        2|         2|          1|          1|     2|       yes|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 3
* Pipeline : 1
  Pipeline-0 : II = 1, D = 3, States = { 1 2 3 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 0.42>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%i1 = alloca i32 1"   --->   Operation 5 'alloca' 'i1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%add12097 = alloca i32 1"   --->   Operation 6 'alloca' 'add12097' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%add120_12698 = alloca i32 1"   --->   Operation 7 'alloca' 'add120_12698' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%add120_24299 = alloca i32 1"   --->   Operation 8 'alloca' 'add120_24299' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%add120_358100 = alloca i32 1"   --->   Operation 9 'alloca' 'add120_358100' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%add120_474101 = alloca i32 1"   --->   Operation 10 'alloca' 'add120_474101' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%add120_5102 = alloca i32 1"   --->   Operation 11 'alloca' 'add120_5102' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%add120_6103 = alloca i32 1"   --->   Operation 12 'alloca' 'add120_6103' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%add120_7104 = alloca i32 1"   --->   Operation 13 'alloca' 'add120_7104' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%add120_8105 = alloca i32 1"   --->   Operation 14 'alloca' 'add120_8105' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%add120_9106 = alloca i32 1"   --->   Operation 15 'alloca' 'add120_9106' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%i1_1 = alloca i32 1"   --->   Operation 16 'alloca' 'i1_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%arg2_r_9_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_9_reload"   --->   Operation 17 'read' 'arg2_r_9_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%zext_ln68_8_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %zext_ln68_8"   --->   Operation 18 'read' 'zext_ln68_8_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%arg1_r_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_reload"   --->   Operation 19 'read' 'arg1_r_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%arg2_r_8_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_8_reload"   --->   Operation 20 'read' 'arg2_r_8_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%arg1_r_1_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_1_reload"   --->   Operation 21 'read' 'arg1_r_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%arg2_r_7_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_7_reload"   --->   Operation 22 'read' 'arg2_r_7_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%arg1_r_2_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_2_reload"   --->   Operation 23 'read' 'arg1_r_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%arg2_r_6_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_6_reload"   --->   Operation 24 'read' 'arg2_r_6_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%arg1_r_3_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_3_reload"   --->   Operation 25 'read' 'arg1_r_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%arg2_r_5_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_5_reload"   --->   Operation 26 'read' 'arg2_r_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%arg2_r_4_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_4_reload"   --->   Operation 27 'read' 'arg2_r_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%arg2_r_3_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_3_reload"   --->   Operation 28 'read' 'arg2_r_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%arg2_r_2_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_2_reload"   --->   Operation 29 'read' 'arg2_r_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%arg2_r_1_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_1_reload"   --->   Operation 30 'read' 'arg2_r_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%arg2_r_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg2_r_reload"   --->   Operation 31 'read' 'arg2_r_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%arg1_r_9_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_9_reload"   --->   Operation 32 'read' 'arg1_r_9_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%arg1_r_8_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_8_reload"   --->   Operation 33 'read' 'arg1_r_8_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%arg1_r_7_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_7_reload"   --->   Operation 34 'read' 'arg1_r_7_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%arg1_r_6_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_6_reload"   --->   Operation 35 'read' 'arg1_r_6_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%arg1_r_5_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_5_reload"   --->   Operation 36 'read' 'arg1_r_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%arg1_r_4_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %arg1_r_4_reload"   --->   Operation 37 'read' 'arg1_r_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%add55_4_1116_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add55_4_1116_reload"   --->   Operation 38 'read' 'add55_4_1116_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "%add55_4115_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add55_4115_reload"   --->   Operation 39 'read' 'add55_4115_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "%add55_3_1114_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add55_3_1114_reload"   --->   Operation 40 'read' 'add55_3_1114_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.00ns)   --->   "%add55_3113_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add55_3113_reload"   --->   Operation 41 'read' 'add55_3113_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 42 [1/1] (0.00ns)   --->   "%add55_2_1112_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add55_2_1112_reload"   --->   Operation 42 'read' 'add55_2_1112_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (0.00ns)   --->   "%add55_2111_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add55_2111_reload"   --->   Operation 43 'read' 'add55_2111_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 44 [1/1] (0.00ns)   --->   "%add55_1_1110_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add55_1_1110_reload"   --->   Operation 44 'read' 'add55_1_1110_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 45 [1/1] (0.00ns)   --->   "%add55_1109_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add55_1109_reload"   --->   Operation 45 'read' 'add55_1109_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 46 [1/1] (0.00ns)   --->   "%add55_189108_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %add55_189108_reload"   --->   Operation 46 'read' 'add55_189108_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 47 [1/1] (0.00ns)   --->   "%zext_ln68_8_cast = zext i32 %zext_ln68_8_read"   --->   Operation 47 'zext' 'zext_ln68_8_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 48 [1/1] (0.42ns)   --->   "%store_ln0 = store i5 9, i5 %i1_1"   --->   Operation 48 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 49 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 0, i64 %add120_9106"   --->   Operation 49 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 50 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add55_189108_reload_read, i64 %add120_8105"   --->   Operation 50 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 51 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add55_1109_reload_read, i64 %add120_7104"   --->   Operation 51 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 52 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add55_1_1110_reload_read, i64 %add120_6103"   --->   Operation 52 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 53 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add55_2111_reload_read, i64 %add120_5102"   --->   Operation 53 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 54 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add55_2_1112_reload_read, i64 %add120_474101"   --->   Operation 54 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 55 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add55_3113_reload_read, i64 %add120_358100"   --->   Operation 55 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 56 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add55_3_1114_reload_read, i64 %add120_24299"   --->   Operation 56 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 57 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add55_4115_reload_read, i64 %add120_12698"   --->   Operation 57 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 58 [1/1] (0.42ns)   --->   "%store_ln0 = store i64 %add55_4_1116_reload_read, i64 %add12097"   --->   Operation 58 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 59 [1/1] (0.42ns)   --->   "%store_ln0 = store i4 9, i4 %i1"   --->   Operation 59 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 60 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.body87"   --->   Operation 60 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 7.22>
ST_2 : Operation 61 [1/1] (0.00ns)   --->   "%i1_3 = load i5 %i1_1" [d3.cpp:55]   --->   Operation 61 'load' 'i1_3' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 62 [1/1] (0.00ns)   --->   "%tmp = bitselect i1 @_ssdm_op_BitSelect.i1.i5.i32, i5 %i1_3, i32 4" [d3.cpp:55]   --->   Operation 62 'bitselect' 'tmp' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 63 [1/1] (0.00ns)   --->   "%br_ln55 = br i1 %tmp, void %for.body87.split, void %for.end132.exitStub" [d3.cpp:55]   --->   Operation 63 'br' 'br_ln55' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 64 [1/1] (0.00ns)   --->   "%i1_load = load i4 %i1" [d3.cpp:55]   --->   Operation 64 'load' 'i1_load' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 65 [1/1] (0.00ns)   --->   "%add12097_load = load i64 %add12097" [d3.cpp:68]   --->   Operation 65 'load' 'add12097_load' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 66 [1/1] (0.00ns)   --->   "%add120_12698_load = load i64 %add120_12698" [d3.cpp:68]   --->   Operation 66 'load' 'add120_12698_load' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 67 [1/1] (0.00ns)   --->   "%add120_24299_load = load i64 %add120_24299" [d3.cpp:68]   --->   Operation 67 'load' 'add120_24299_load' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 68 [1/1] (0.00ns)   --->   "%add120_358100_load = load i64 %add120_358100" [d3.cpp:68]   --->   Operation 68 'load' 'add120_358100_load' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 69 [1/1] (0.00ns)   --->   "%add120_5102_load = load i64 %add120_5102" [d3.cpp:68]   --->   Operation 69 'load' 'add120_5102_load' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 70 [1/1] (0.00ns)   --->   "%add120_7104_load = load i64 %add120_7104" [d3.cpp:68]   --->   Operation 70 'load' 'add120_7104_load' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 71 [1/1] (0.00ns)   --->   "%add120_9106_load = load i64 %add120_9106" [d3.cpp:68]   --->   Operation 71 'load' 'add120_9106_load' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 72 [1/1] (0.00ns)   --->   "%trunc_ln55 = trunc i4 %i1_load" [d3.cpp:55]   --->   Operation 72 'trunc' 'trunc_ln55' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 73 [1/1] (0.00ns)   --->   "%trunc_ln55_1 = trunc i5 %i1_3" [d3.cpp:55]   --->   Operation 73 'trunc' 'trunc_ln55_1' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 74 [1/1] (0.00ns)   --->   "%trunc_ln55_2 = trunc i5 %i1_3" [d3.cpp:55]   --->   Operation 74 'trunc' 'trunc_ln55_2' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 75 [1/1] (0.00ns)   --->   "%trunc_ln55_3 = trunc i5 %i1_3" [d3.cpp:55]   --->   Operation 75 'trunc' 'trunc_ln55_3' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 76 [1/1] (0.00ns)   --->   "%trunc_ln55_4 = trunc i5 %i1_3" [d3.cpp:55]   --->   Operation 76 'trunc' 'trunc_ln55_4' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 77 [1/1] (0.75ns)   --->   "%tmp_s = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 0, i32 0, i32 0, i32 0, i32 %arg1_r_4_reload_read, i32 %arg1_r_5_reload_read, i32 %arg1_r_6_reload_read, i32 %arg1_r_7_reload_read, i32 %arg1_r_8_reload_read, i32 %arg1_r_9_reload_read, i4 %trunc_ln55_1" [d3.cpp:68]   --->   Operation 77 'mux' 'tmp_s' <Predicate = (!tmp)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 78 [1/1] (0.00ns)   --->   "%zext_ln68 = zext i32 %tmp_s" [d3.cpp:68]   --->   Operation 78 'zext' 'zext_ln68' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 79 [1/1] (0.78ns)   --->   "%add_ln68 = add i5 %i1_3, i5 5" [d3.cpp:68]   --->   Operation 79 'add' 'add_ln68' <Predicate = (!tmp)> <Delay = 0.78> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 80 [1/1] (0.00ns) (grouped into LUT with out node select_ln68)   --->   "%shl_ln68 = shl i32 %arg2_r_reload_read, i32 1" [d3.cpp:68]   --->   Operation 80 'shl' 'shl_ln68' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 81 [1/1] (0.44ns) (out node of the LUT)   --->   "%select_ln68 = select i1 %trunc_ln55, i32 %shl_ln68, i32 %arg2_r_reload_read" [d3.cpp:68]   --->   Operation 81 'select' 'select_ln68' <Predicate = (!tmp)> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 82 [1/1] (0.00ns)   --->   "%zext_ln68_1 = zext i32 %select_ln68" [d3.cpp:68]   --->   Operation 82 'zext' 'zext_ln68_1' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 83 [1/1] (0.78ns)   --->   "%icmp_ln68 = icmp_slt  i5 %add_ln68, i5 10" [d3.cpp:68]   --->   Operation 83 'icmp' 'icmp_ln68' <Predicate = (!tmp)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 84 [1/1] (0.78ns)   --->   "%add_ln68_1 = add i5 %i1_3, i5 4" [d3.cpp:68]   --->   Operation 84 'add' 'add_ln68_1' <Predicate = (!tmp)> <Delay = 0.78> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 85 [1/1] (0.28ns)   --->   "%xor_ln68 = xor i1 %trunc_ln55_4, i1 1" [d3.cpp:68]   --->   Operation 85 'xor' 'xor_ln68' <Predicate = (!tmp)> <Delay = 0.28> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 86 [1/1] (0.42ns)   --->   "%tmp_1 = mux i32 @_ssdm_op_Mux.ap_auto.2i32.i1, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i1 %xor_ln68" [d3.cpp:68]   --->   Operation 86 'mux' 'tmp_1' <Predicate = (!tmp)> <Delay = 0.42> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.42> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 87 [1/1] (0.00ns)   --->   "%zext_ln68_2 = zext i32 %tmp_1" [d3.cpp:68]   --->   Operation 87 'zext' 'zext_ln68_2' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 88 [1/1] (0.78ns)   --->   "%icmp_ln68_1 = icmp_slt  i5 %add_ln68_1, i5 10" [d3.cpp:68]   --->   Operation 88 'icmp' 'icmp_ln68_1' <Predicate = (!tmp)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 89 [1/1] (0.78ns)   --->   "%add_ln68_2 = add i5 %i1_3, i5 3" [d3.cpp:68]   --->   Operation 89 'add' 'add_ln68_2' <Predicate = (!tmp)> <Delay = 0.78> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 90 [1/1] (0.54ns)   --->   "%sub_ln68 = sub i2 2, i2 %trunc_ln55_3" [d3.cpp:68]   --->   Operation 90 'sub' 'sub_ln68' <Predicate = (!tmp)> <Delay = 0.54> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 91 [1/1] (0.47ns)   --->   "%tmp_2 = mux i32 @_ssdm_op_Mux.ap_auto.3i32.i2, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i2 %sub_ln68" [d3.cpp:68]   --->   Operation 91 'mux' 'tmp_2' <Predicate = (!tmp)> <Delay = 0.47> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.47> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 92 [1/1] (0.00ns) (grouped into LUT with out node select_ln68_1)   --->   "%shl_ln68_1 = shl i32 %tmp_2, i32 1" [d3.cpp:68]   --->   Operation 92 'shl' 'shl_ln68_1' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 93 [1/1] (0.44ns) (out node of the LUT)   --->   "%select_ln68_1 = select i1 %trunc_ln55, i32 %shl_ln68_1, i32 %tmp_2" [d3.cpp:68]   --->   Operation 93 'select' 'select_ln68_1' <Predicate = (!tmp)> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 94 [1/1] (0.00ns)   --->   "%zext_ln68_3 = zext i32 %select_ln68_1" [d3.cpp:68]   --->   Operation 94 'zext' 'zext_ln68_3' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 95 [1/1] (0.78ns)   --->   "%icmp_ln68_2 = icmp_slt  i5 %add_ln68_2, i5 10" [d3.cpp:68]   --->   Operation 95 'icmp' 'icmp_ln68_2' <Predicate = (!tmp)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 96 [1/1] (0.78ns)   --->   "%add_ln68_3 = add i5 %i1_3, i5 2" [d3.cpp:68]   --->   Operation 96 'add' 'add_ln68_3' <Predicate = (!tmp)> <Delay = 0.78> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 97 [1/1] (0.28ns)   --->   "%xor_ln68_1 = xor i2 %trunc_ln55_3, i2 3" [d3.cpp:68]   --->   Operation 97 'xor' 'xor_ln68_1' <Predicate = (!tmp)> <Delay = 0.28> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 98 [1/1] (0.52ns)   --->   "%tmp_3 = mux i32 @_ssdm_op_Mux.ap_auto.4i32.i2, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i2 %xor_ln68_1" [d3.cpp:68]   --->   Operation 98 'mux' 'tmp_3' <Predicate = (!tmp)> <Delay = 0.52> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.52> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 99 [1/1] (0.00ns)   --->   "%zext_ln68_4 = zext i32 %tmp_3" [d3.cpp:68]   --->   Operation 99 'zext' 'zext_ln68_4' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 100 [1/1] (0.78ns)   --->   "%icmp_ln68_3 = icmp_slt  i5 %add_ln68_3, i5 10" [d3.cpp:68]   --->   Operation 100 'icmp' 'icmp_ln68_3' <Predicate = (!tmp)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 101 [1/1] (0.78ns)   --->   "%add_ln68_4 = add i5 %i1_3, i5 1" [d3.cpp:68]   --->   Operation 101 'add' 'add_ln68_4' <Predicate = (!tmp)> <Delay = 0.78> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 102 [1/1] (0.67ns)   --->   "%sub_ln68_1 = sub i3 0, i3 %trunc_ln55_2" [d3.cpp:68]   --->   Operation 102 'sub' 'sub_ln68_1' <Predicate = (!tmp)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 103 [1/1] (0.57ns)   --->   "%tmp_4 = mux i32 @_ssdm_op_Mux.ap_auto.5i32.i3, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i3 %sub_ln68_1" [d3.cpp:68]   --->   Operation 103 'mux' 'tmp_4' <Predicate = (!tmp)> <Delay = 0.57> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.57> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 104 [1/1] (0.00ns) (grouped into LUT with out node select_ln68_2)   --->   "%shl_ln68_2 = shl i32 %tmp_4, i32 1" [d3.cpp:68]   --->   Operation 104 'shl' 'shl_ln68_2' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 105 [1/1] (0.44ns) (out node of the LUT)   --->   "%select_ln68_2 = select i1 %trunc_ln55, i32 %shl_ln68_2, i32 %tmp_4" [d3.cpp:68]   --->   Operation 105 'select' 'select_ln68_2' <Predicate = (!tmp)> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 106 [1/1] (0.00ns)   --->   "%zext_ln68_5 = zext i32 %select_ln68_2" [d3.cpp:68]   --->   Operation 106 'zext' 'zext_ln68_5' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 107 [1/1] (0.78ns)   --->   "%icmp_ln68_4 = icmp_slt  i5 %add_ln68_4, i5 10" [d3.cpp:68]   --->   Operation 107 'icmp' 'icmp_ln68_4' <Predicate = (!tmp)> <Delay = 0.78> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 108 [1/1] (0.67ns)   --->   "%sub_ln68_2 = sub i3 1, i3 %trunc_ln55_2" [d3.cpp:68]   --->   Operation 108 'sub' 'sub_ln68_2' <Predicate = (!tmp)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 109 [1/1] (0.62ns)   --->   "%tmp_5 = mux i32 @_ssdm_op_Mux.ap_auto.6i32.i3, i32 %arg2_r_reload_read, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i3 %sub_ln68_2" [d3.cpp:68]   --->   Operation 109 'mux' 'tmp_5' <Predicate = (!tmp)> <Delay = 0.62> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.62> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 110 [1/1] (0.00ns)   --->   "%zext_ln68_6 = zext i32 %tmp_5" [d3.cpp:68]   --->   Operation 110 'zext' 'zext_ln68_6' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 111 [1/1] (0.75ns)   --->   "%tmp_6 = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 0, i32 0, i32 0, i32 0, i32 %arg1_r_3_reload_read, i32 %arg1_r_4_reload_read, i32 %arg1_r_5_reload_read, i32 %arg1_r_6_reload_read, i32 %arg1_r_7_reload_read, i32 %arg1_r_8_reload_read, i4 %trunc_ln55_1" [d3.cpp:68]   --->   Operation 111 'mux' 'tmp_6' <Predicate = (!tmp)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 112 [1/1] (0.00ns)   --->   "%zext_ln68_7 = zext i32 %tmp_6" [d3.cpp:68]   --->   Operation 112 'zext' 'zext_ln68_7' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 113 [1/1] (0.00ns) (grouped into LUT with out node select_ln68_3)   --->   "%shl_ln68_3 = shl i32 %tmp_1, i32 1" [d3.cpp:68]   --->   Operation 113 'shl' 'shl_ln68_3' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 114 [1/1] (0.44ns) (out node of the LUT)   --->   "%select_ln68_3 = select i1 %trunc_ln55, i32 %tmp_1, i32 %shl_ln68_3" [d3.cpp:68]   --->   Operation 114 'select' 'select_ln68_3' <Predicate = (!tmp)> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 115 [1/1] (0.00ns)   --->   "%zext_ln68_9 = zext i32 %select_ln68_3" [d3.cpp:68]   --->   Operation 115 'zext' 'zext_ln68_9' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 116 [1/1] (0.00ns)   --->   "%zext_ln68_10 = zext i32 %tmp_2" [d3.cpp:68]   --->   Operation 116 'zext' 'zext_ln68_10' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 117 [1/1] (0.00ns) (grouped into LUT with out node select_ln68_4)   --->   "%shl_ln68_4 = shl i32 %tmp_3, i32 1" [d3.cpp:68]   --->   Operation 117 'shl' 'shl_ln68_4' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 118 [1/1] (0.44ns) (out node of the LUT)   --->   "%select_ln68_4 = select i1 %trunc_ln55, i32 %tmp_3, i32 %shl_ln68_4" [d3.cpp:68]   --->   Operation 118 'select' 'select_ln68_4' <Predicate = (!tmp)> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 119 [1/1] (0.00ns)   --->   "%zext_ln68_11 = zext i32 %select_ln68_4" [d3.cpp:68]   --->   Operation 119 'zext' 'zext_ln68_11' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 120 [1/1] (0.00ns)   --->   "%zext_ln68_12 = zext i32 %tmp_4" [d3.cpp:68]   --->   Operation 120 'zext' 'zext_ln68_12' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 121 [1/1] (0.00ns) (grouped into LUT with out node select_ln68_5)   --->   "%shl_ln68_5 = shl i32 %tmp_5, i32 1" [d3.cpp:68]   --->   Operation 121 'shl' 'shl_ln68_5' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 122 [1/1] (0.44ns) (out node of the LUT)   --->   "%select_ln68_5 = select i1 %trunc_ln55, i32 %tmp_5, i32 %shl_ln68_5" [d3.cpp:68]   --->   Operation 122 'select' 'select_ln68_5' <Predicate = (!tmp)> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 123 [1/1] (0.00ns)   --->   "%zext_ln68_13 = zext i32 %select_ln68_5" [d3.cpp:68]   --->   Operation 123 'zext' 'zext_ln68_13' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 124 [1/1] (0.67ns)   --->   "%sub_ln68_3 = sub i3 2, i3 %trunc_ln55_2" [d3.cpp:68]   --->   Operation 124 'sub' 'sub_ln68_3' <Predicate = (!tmp)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 125 [1/1] (0.67ns)   --->   "%tmp_7 = mux i32 @_ssdm_op_Mux.ap_auto.7i32.i3, i32 0, i32 %arg2_r_1_reload_read, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i3 %sub_ln68_3" [d3.cpp:68]   --->   Operation 125 'mux' 'tmp_7' <Predicate = (!tmp)> <Delay = 0.67> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 126 [1/1] (0.00ns)   --->   "%zext_ln68_14 = zext i32 %tmp_7" [d3.cpp:68]   --->   Operation 126 'zext' 'zext_ln68_14' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 127 [1/1] (0.75ns)   --->   "%tmp_8 = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 0, i32 0, i32 0, i32 0, i32 %arg1_r_2_reload_read, i32 %arg1_r_3_reload_read, i32 %arg1_r_4_reload_read, i32 %arg1_r_5_reload_read, i32 %arg1_r_6_reload_read, i32 %arg1_r_7_reload_read, i4 %trunc_ln55_1" [d3.cpp:68]   --->   Operation 127 'mux' 'tmp_8' <Predicate = (!tmp)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 128 [1/1] (0.00ns)   --->   "%zext_ln68_15 = zext i32 %tmp_8" [d3.cpp:68]   --->   Operation 128 'zext' 'zext_ln68_15' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 129 [1/1] (0.00ns) (grouped into LUT with out node select_ln68_6)   --->   "%shl_ln68_6 = shl i32 %tmp_7, i32 1" [d3.cpp:68]   --->   Operation 129 'shl' 'shl_ln68_6' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 130 [1/1] (0.44ns) (out node of the LUT)   --->   "%select_ln68_6 = select i1 %trunc_ln55, i32 %shl_ln68_6, i32 %tmp_7" [d3.cpp:68]   --->   Operation 130 'select' 'select_ln68_6' <Predicate = (!tmp)> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 131 [1/1] (0.00ns)   --->   "%zext_ln68_16 = zext i32 %select_ln68_6" [d3.cpp:68]   --->   Operation 131 'zext' 'zext_ln68_16' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 132 [1/1] (0.67ns)   --->   "%sub_ln68_4 = sub i3 3, i3 %trunc_ln55_2" [d3.cpp:68]   --->   Operation 132 'sub' 'sub_ln68_4' <Predicate = (!tmp)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 133 [1/1] (0.72ns)   --->   "%tmp_9 = mux i32 @_ssdm_op_Mux.ap_auto.8i32.i3, i32 0, i32 0, i32 %arg2_r_2_reload_read, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i3 %sub_ln68_4" [d3.cpp:68]   --->   Operation 133 'mux' 'tmp_9' <Predicate = (!tmp)> <Delay = 0.72> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.72> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 134 [1/1] (0.00ns)   --->   "%zext_ln68_17 = zext i32 %tmp_9" [d3.cpp:68]   --->   Operation 134 'zext' 'zext_ln68_17' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 135 [1/1] (0.75ns)   --->   "%tmp_10 = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 0, i32 0, i32 0, i32 0, i32 %arg1_r_1_reload_read, i32 %arg1_r_2_reload_read, i32 %arg1_r_3_reload_read, i32 %arg1_r_4_reload_read, i32 %arg1_r_5_reload_read, i32 %arg1_r_6_reload_read, i4 %trunc_ln55_1" [d3.cpp:68]   --->   Operation 135 'mux' 'tmp_10' <Predicate = (!tmp)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 136 [1/1] (0.00ns)   --->   "%zext_ln68_18 = zext i32 %tmp_10" [d3.cpp:68]   --->   Operation 136 'zext' 'zext_ln68_18' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 137 [1/1] (0.00ns) (grouped into LUT with out node select_ln68_7)   --->   "%shl_ln68_7 = shl i32 %tmp_9, i32 1" [d3.cpp:68]   --->   Operation 137 'shl' 'shl_ln68_7' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 138 [1/1] (0.44ns) (out node of the LUT)   --->   "%select_ln68_7 = select i1 %trunc_ln55, i32 %tmp_9, i32 %shl_ln68_7" [d3.cpp:68]   --->   Operation 138 'select' 'select_ln68_7' <Predicate = (!tmp)> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 139 [1/1] (0.00ns)   --->   "%zext_ln68_19 = zext i32 %select_ln68_7" [d3.cpp:68]   --->   Operation 139 'zext' 'zext_ln68_19' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 140 [1/1] (0.79ns)   --->   "%sub_ln68_5 = sub i4 12, i4 %trunc_ln55_1" [d3.cpp:68]   --->   Operation 140 'sub' 'sub_ln68_5' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 141 [1/1] (0.77ns)   --->   "%tmp_11 = mux i32 @_ssdm_op_Mux.ap_auto.9i32.i4, i32 0, i32 0, i32 0, i32 %arg2_r_3_reload_read, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i4 %sub_ln68_5" [d3.cpp:68]   --->   Operation 141 'mux' 'tmp_11' <Predicate = (!tmp)> <Delay = 0.77> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 142 [1/1] (0.00ns)   --->   "%zext_ln68_20 = zext i32 %tmp_11" [d3.cpp:68]   --->   Operation 142 'zext' 'zext_ln68_20' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 143 [1/1] (0.75ns)   --->   "%tmp_12 = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 0, i32 0, i32 0, i32 0, i32 %arg1_r_reload_read, i32 %arg1_r_1_reload_read, i32 %arg1_r_2_reload_read, i32 %arg1_r_3_reload_read, i32 %arg1_r_4_reload_read, i32 %arg1_r_5_reload_read, i4 %trunc_ln55_1" [d3.cpp:68]   --->   Operation 143 'mux' 'tmp_12' <Predicate = (!tmp)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 144 [1/1] (0.00ns)   --->   "%zext_ln68_21 = zext i32 %tmp_12" [d3.cpp:68]   --->   Operation 144 'zext' 'zext_ln68_21' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 145 '%mul_ln68 = mul i64 %zext_ln68_21, i64 %zext_ln68_1'
ST_2 : Operation 145 [1/1] (2.39ns)   --->   "%mul_ln68 = mul i64 %zext_ln68_21, i64 %zext_ln68_1" [d3.cpp:68]   --->   Operation 145 'mul' 'mul_ln68' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 146 [1/1] (0.17ns)   --->   "%select_ln68_9 = select i1 %icmp_ln68, i64 18446744073709551615, i64 0" [d3.cpp:68]   --->   Operation 146 'select' 'select_ln68_9' <Predicate = (!tmp)> <Delay = 0.17> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 147 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_5)   --->   "%and_ln68 = and i64 %mul_ln68, i64 %select_ln68_9" [d3.cpp:68]   --->   Operation 147 'and' 'and_ln68' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 148 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln68_5 = add i64 %and_ln68, i64 %add12097_load" [d3.cpp:68]   --->   Operation 148 'add' 'add_ln68_5' <Predicate = (!tmp)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 149 '%mul_ln68_1 = mul i64 %zext_ln68_18, i64 %zext_ln68_8_cast'
ST_2 : Operation 149 [1/1] (2.39ns)   --->   "%mul_ln68_1 = mul i64 %zext_ln68_18, i64 %zext_ln68_8_cast" [d3.cpp:68]   --->   Operation 149 'mul' 'mul_ln68_1' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 150 [1/1] (0.37ns)   --->   "%and_ln68_1 = and i64 %mul_ln68_1, i64 %select_ln68_9" [d3.cpp:68]   --->   Operation 150 'and' 'and_ln68_1' <Predicate = (!tmp)> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 151 '%mul_ln68_2 = mul i64 %zext_ln68_21, i64 %zext_ln68_2'
ST_2 : Operation 151 [1/1] (2.39ns)   --->   "%mul_ln68_2 = mul i64 %zext_ln68_21, i64 %zext_ln68_2" [d3.cpp:68]   --->   Operation 151 'mul' 'mul_ln68_2' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 152 [1/1] (0.17ns)   --->   "%select_ln68_10 = select i1 %icmp_ln68_1, i64 18446744073709551615, i64 0" [d3.cpp:68]   --->   Operation 152 'select' 'select_ln68_10' <Predicate = (!tmp)> <Delay = 0.17> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 153 [1/1] (0.37ns)   --->   "%and_ln68_2 = and i64 %mul_ln68_2, i64 %select_ln68_10" [d3.cpp:68]   --->   Operation 153 'and' 'and_ln68_2' <Predicate = (!tmp)> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 154 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln68_6 = add i64 %and_ln68_2, i64 %and_ln68_1" [d3.cpp:68]   --->   Operation 154 'add' 'add_ln68_6' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 155 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln68_7 = add i64 %add120_12698_load, i64 %add_ln68_6" [d3.cpp:68]   --->   Operation 155 'add' 'add_ln68_7' <Predicate = (!tmp)> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 156 '%mul_ln68_3 = mul i64 %zext_ln68_21, i64 %zext_ln68_3'
ST_2 : Operation 156 [1/1] (2.39ns)   --->   "%mul_ln68_3 = mul i64 %zext_ln68_21, i64 %zext_ln68_3" [d3.cpp:68]   --->   Operation 156 'mul' 'mul_ln68_3' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 157 '%mul_ln68_4 = mul i64 %zext_ln68_15, i64 %zext_ln68_1'
ST_2 : Operation 157 [1/1] (2.39ns)   --->   "%mul_ln68_4 = mul i64 %zext_ln68_15, i64 %zext_ln68_1" [d3.cpp:68]   --->   Operation 157 'mul' 'mul_ln68_4' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 158 '%mul_ln68_5 = mul i64 %zext_ln68_18, i64 %zext_ln68_9'
ST_2 : Operation 158 [1/1] (2.39ns)   --->   "%mul_ln68_5 = mul i64 %zext_ln68_18, i64 %zext_ln68_9" [d3.cpp:68]   --->   Operation 158 'mul' 'mul_ln68_5' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 159 [1/1] (0.17ns)   --->   "%select_ln68_11 = select i1 %icmp_ln68_2, i64 18446744073709551615, i64 0" [d3.cpp:68]   --->   Operation 159 'select' 'select_ln68_11' <Predicate = (!tmp)> <Delay = 0.17> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 160 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_8)   --->   "%and_ln68_3 = and i64 %mul_ln68_3, i64 %select_ln68_11" [d3.cpp:68]   --->   Operation 160 'and' 'and_ln68_3' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 161 [1/1] (0.37ns)   --->   "%and_ln68_4 = and i64 %mul_ln68_4, i64 %select_ln68_9" [d3.cpp:68]   --->   Operation 161 'and' 'and_ln68_4' <Predicate = (!tmp)> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 162 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_8)   --->   "%and_ln68_5 = and i64 %mul_ln68_5, i64 %select_ln68_10" [d3.cpp:68]   --->   Operation 162 'and' 'and_ln68_5' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 163 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln68_8 = add i64 %and_ln68_5, i64 %and_ln68_3" [d3.cpp:68]   --->   Operation 163 'add' 'add_ln68_8' <Predicate = (!tmp)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 164 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln68_9 = add i64 %add_ln68_8, i64 %and_ln68_4" [d3.cpp:68]   --->   Operation 164 'add' 'add_ln68_9' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 165 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln68_10 = add i64 %add120_24299_load, i64 %add_ln68_9" [d3.cpp:68]   --->   Operation 165 'add' 'add_ln68_10' <Predicate = (!tmp)> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 166 '%mul_ln68_6 = mul i64 %zext_ln68_21, i64 %zext_ln68_4'
ST_2 : Operation 166 [1/1] (2.39ns)   --->   "%mul_ln68_6 = mul i64 %zext_ln68_21, i64 %zext_ln68_4" [d3.cpp:68]   --->   Operation 166 'mul' 'mul_ln68_6' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 167 [1/1] (0.17ns)   --->   "%select_ln68_12 = select i1 %icmp_ln68_3, i64 18446744073709551615, i64 0" [d3.cpp:68]   --->   Operation 167 'select' 'select_ln68_12' <Predicate = (!tmp)> <Delay = 0.17> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 168 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_12)   --->   "%and_ln68_6 = and i64 %mul_ln68_6, i64 %select_ln68_12" [d3.cpp:68]   --->   Operation 168 'and' 'and_ln68_6' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 169 '%mul_ln68_7 = mul i64 %zext_ln68_15, i64 %zext_ln68_2'
ST_2 : Operation 169 [1/1] (2.39ns)   --->   "%mul_ln68_7 = mul i64 %zext_ln68_15, i64 %zext_ln68_2" [d3.cpp:68]   --->   Operation 169 'mul' 'mul_ln68_7' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 170 '%mul_ln68_8 = mul i64 %zext_ln68_18, i64 %zext_ln68_10'
ST_2 : Operation 170 [1/1] (2.39ns)   --->   "%mul_ln68_8 = mul i64 %zext_ln68_18, i64 %zext_ln68_10" [d3.cpp:68]   --->   Operation 170 'mul' 'mul_ln68_8' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 171 '%mul_ln68_9 = mul i64 %zext_ln68_7, i64 %zext_ln68_8_cast'
ST_2 : Operation 171 [1/1] (2.39ns)   --->   "%mul_ln68_9 = mul i64 %zext_ln68_7, i64 %zext_ln68_8_cast" [d3.cpp:68]   --->   Operation 171 'mul' 'mul_ln68_9' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 172 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_11)   --->   "%and_ln68_7 = and i64 %mul_ln68_7, i64 %select_ln68_10" [d3.cpp:68]   --->   Operation 172 'and' 'and_ln68_7' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 173 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_12)   --->   "%and_ln68_8 = and i64 %mul_ln68_8, i64 %select_ln68_11" [d3.cpp:68]   --->   Operation 173 'and' 'and_ln68_8' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 174 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_11)   --->   "%and_ln68_9 = and i64 %mul_ln68_9, i64 %select_ln68_9" [d3.cpp:68]   --->   Operation 174 'and' 'and_ln68_9' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 175 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln68_11 = add i64 %and_ln68_9, i64 %and_ln68_7" [d3.cpp:68]   --->   Operation 175 'add' 'add_ln68_11' <Predicate = (!tmp)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 176 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln68_12 = add i64 %and_ln68_8, i64 %and_ln68_6" [d3.cpp:68]   --->   Operation 176 'add' 'add_ln68_12' <Predicate = (!tmp)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 177 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln68_13 = add i64 %add_ln68_12, i64 %add_ln68_11" [d3.cpp:68]   --->   Operation 177 'add' 'add_ln68_13' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 178 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln68_14 = add i64 %add120_358100_load, i64 %add_ln68_13" [d3.cpp:68]   --->   Operation 178 'add' 'add_ln68_14' <Predicate = (!tmp)> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 179 '%mul_ln68_10 = mul i64 %zext_ln68_1, i64 %zext_ln68'
ST_2 : Operation 179 [1/1] (2.39ns)   --->   "%mul_ln68_10 = mul i64 %zext_ln68_1, i64 %zext_ln68" [d3.cpp:68]   --->   Operation 179 'mul' 'mul_ln68_10' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 180 '%mul_ln68_11 = mul i64 %zext_ln68_7, i64 %zext_ln68_9'
ST_2 : Operation 180 [1/1] (2.39ns)   --->   "%mul_ln68_11 = mul i64 %zext_ln68_7, i64 %zext_ln68_9" [d3.cpp:68]   --->   Operation 180 'mul' 'mul_ln68_11' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 181 '%mul_ln68_12 = mul i64 %zext_ln68_18, i64 %zext_ln68_11'
ST_2 : Operation 181 [1/1] (2.39ns)   --->   "%mul_ln68_12 = mul i64 %zext_ln68_18, i64 %zext_ln68_11" [d3.cpp:68]   --->   Operation 181 'mul' 'mul_ln68_12' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 182 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_16)   --->   "%and_ln68_10 = and i64 %mul_ln68_10, i64 %select_ln68_9" [d3.cpp:68]   --->   Operation 182 'and' 'and_ln68_10' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 183 [1/1] (0.37ns)   --->   "%and_ln68_11 = and i64 %mul_ln68_11, i64 %select_ln68_10" [d3.cpp:68]   --->   Operation 183 'and' 'and_ln68_11' <Predicate = (!tmp)> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 184 [1/1] (0.37ns)   --->   "%and_ln68_12 = and i64 %mul_ln68_12, i64 %select_ln68_12" [d3.cpp:68]   --->   Operation 184 'and' 'and_ln68_12' <Predicate = (!tmp)> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 185 '%mul_ln68_13 = mul i64 %zext_ln68_21, i64 %zext_ln68_5'
ST_2 : Operation 185 [1/1] (2.39ns)   --->   "%mul_ln68_13 = mul i64 %zext_ln68_21, i64 %zext_ln68_5" [d3.cpp:68]   --->   Operation 185 'mul' 'mul_ln68_13' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 186 '%mul_ln68_14 = mul i64 %zext_ln68_15, i64 %zext_ln68_3'
ST_2 : Operation 186 [1/1] (2.39ns)   --->   "%mul_ln68_14 = mul i64 %zext_ln68_15, i64 %zext_ln68_3" [d3.cpp:68]   --->   Operation 186 'mul' 'mul_ln68_14' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 187 [1/1] (0.17ns)   --->   "%select_ln68_13 = select i1 %icmp_ln68_4, i64 18446744073709551615, i64 0" [d3.cpp:68]   --->   Operation 187 'select' 'select_ln68_13' <Predicate = (!tmp)> <Delay = 0.17> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 188 [1/1] (0.37ns)   --->   "%and_ln68_13 = and i64 %mul_ln68_13, i64 %select_ln68_13" [d3.cpp:68]   --->   Operation 188 'and' 'and_ln68_13' <Predicate = (!tmp)> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 189 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_16)   --->   "%and_ln68_14 = and i64 %mul_ln68_14, i64 %select_ln68_11" [d3.cpp:68]   --->   Operation 189 'and' 'and_ln68_14' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 190 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln68_16 = add i64 %and_ln68_14, i64 %and_ln68_10" [d3.cpp:68]   --->   Operation 190 'add' 'add_ln68_16' <Predicate = (!tmp)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 191 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln68_15 = add i64 %add_ln68_16, i64 %and_ln68_13" [d3.cpp:68]   --->   Operation 191 'add' 'add_ln68_15' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 192 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln68_17 = add i64 %add_ln68_15, i64 %and_ln68_11" [d3.cpp:68]   --->   Operation 192 'add' 'add_ln68_17' <Predicate = (!tmp)> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 193 '%mul_ln68_15 = mul i64 %zext_ln68_7, i64 %zext_ln68_10'
ST_2 : Operation 193 [1/1] (2.39ns)   --->   "%mul_ln68_15 = mul i64 %zext_ln68_7, i64 %zext_ln68_10" [d3.cpp:68]   --->   Operation 193 'mul' 'mul_ln68_15' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 194 '%mul_ln68_16 = mul i64 %zext_ln68_18, i64 %zext_ln68_12'
ST_2 : Operation 194 [1/1] (2.39ns)   --->   "%mul_ln68_16 = mul i64 %zext_ln68_18, i64 %zext_ln68_12" [d3.cpp:68]   --->   Operation 194 'mul' 'mul_ln68_16' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 195 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_20)   --->   "%and_ln68_15 = and i64 %mul_ln68_15, i64 %select_ln68_11" [d3.cpp:68]   --->   Operation 195 'and' 'and_ln68_15' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 196 [1/1] (0.37ns)   --->   "%and_ln68_16 = and i64 %mul_ln68_16, i64 %select_ln68_13" [d3.cpp:68]   --->   Operation 196 'and' 'and_ln68_16' <Predicate = (!tmp)> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 197 '%mul_ln68_17 = mul i64 %zext_ln68_21, i64 %zext_ln68_6'
ST_2 : Operation 197 [1/1] (2.39ns)   --->   "%mul_ln68_17 = mul i64 %zext_ln68_21, i64 %zext_ln68_6" [d3.cpp:68]   --->   Operation 197 'mul' 'mul_ln68_17' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 198 '%mul_ln68_18 = mul i64 %zext_ln68_15, i64 %zext_ln68_4'
ST_2 : Operation 198 [1/1] (2.39ns)   --->   "%mul_ln68_18 = mul i64 %zext_ln68_15, i64 %zext_ln68_4" [d3.cpp:68]   --->   Operation 198 'mul' 'mul_ln68_18' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 199 '%mul_ln68_19 = mul i64 %zext_ln68_2, i64 %zext_ln68'
ST_2 : Operation 199 [1/1] (2.39ns)   --->   "%mul_ln68_19 = mul i64 %zext_ln68_2, i64 %zext_ln68" [d3.cpp:68]   --->   Operation 199 'mul' 'mul_ln68_19' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 200 [1/1] (0.37ns)   --->   "%and_ln68_17 = and i64 %mul_ln68_18, i64 %select_ln68_12" [d3.cpp:68]   --->   Operation 200 'and' 'and_ln68_17' <Predicate = (!tmp)> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 201 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_20)   --->   "%and_ln68_18 = and i64 %mul_ln68_19, i64 %select_ln68_10" [d3.cpp:68]   --->   Operation 201 'and' 'and_ln68_18' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 202 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln68_20 = add i64 %and_ln68_18, i64 %and_ln68_15" [d3.cpp:68]   --->   Operation 202 'add' 'add_ln68_20' <Predicate = (!tmp)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 203 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln68_21 = add i64 %and_ln68_16, i64 %mul_ln68_17" [d3.cpp:68]   --->   Operation 203 'add' 'add_ln68_21' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 204 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln68_22 = add i64 %add_ln68_21, i64 %and_ln68_17" [d3.cpp:68]   --->   Operation 204 'add' 'add_ln68_22' <Predicate = (!tmp)> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 205 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln68_23 = add i64 %add_ln68_22, i64 %add_ln68_20" [d3.cpp:68]   --->   Operation 205 'add' 'add_ln68_23' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 206 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln68_24 = add i64 %add120_5102_load, i64 %add_ln68_23" [d3.cpp:68]   --->   Operation 206 'add' 'add_ln68_24' <Predicate = (!tmp)> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 207 '%mul_ln68_20 = mul i64 %zext_ln68_7, i64 %zext_ln68_11'
ST_2 : Operation 207 [1/1] (2.39ns)   --->   "%mul_ln68_20 = mul i64 %zext_ln68_7, i64 %zext_ln68_11" [d3.cpp:68]   --->   Operation 207 'mul' 'mul_ln68_20' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 208 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_25)   --->   "%and_ln68_19 = and i64 %mul_ln68_20, i64 %select_ln68_12" [d3.cpp:68]   --->   Operation 208 'and' 'and_ln68_19' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 209 '%mul_ln68_21 = mul i64 %zext_ln68_21, i64 %zext_ln68_16'
ST_2 : Operation 209 [1/1] (2.39ns)   --->   "%mul_ln68_21 = mul i64 %zext_ln68_21, i64 %zext_ln68_16" [d3.cpp:68]   --->   Operation 209 'mul' 'mul_ln68_21' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 210 '%mul_ln68_22 = mul i64 %zext_ln68_18, i64 %zext_ln68_13'
ST_2 : Operation 210 [1/1] (2.39ns)   --->   "%mul_ln68_22 = mul i64 %zext_ln68_18, i64 %zext_ln68_13" [d3.cpp:68]   --->   Operation 210 'mul' 'mul_ln68_22' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 211 '%mul_ln68_23 = mul i64 %zext_ln68_15, i64 %zext_ln68_5'
ST_2 : Operation 211 [1/1] (2.39ns)   --->   "%mul_ln68_23 = mul i64 %zext_ln68_15, i64 %zext_ln68_5" [d3.cpp:68]   --->   Operation 211 'mul' 'mul_ln68_23' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 212 '%mul_ln68_24 = mul i64 %zext_ln68_3, i64 %zext_ln68'
ST_2 : Operation 212 [1/1] (2.39ns)   --->   "%mul_ln68_24 = mul i64 %zext_ln68_3, i64 %zext_ln68" [d3.cpp:68]   --->   Operation 212 'mul' 'mul_ln68_24' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 213 [1/1] (0.37ns)   --->   "%and_ln68_20 = and i64 %mul_ln68_23, i64 %select_ln68_13" [d3.cpp:68]   --->   Operation 213 'and' 'and_ln68_20' <Predicate = (!tmp)> <Delay = 0.37> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 214 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_25)   --->   "%and_ln68_21 = and i64 %mul_ln68_24, i64 %select_ln68_11" [d3.cpp:68]   --->   Operation 214 'and' 'and_ln68_21' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 215 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln68_25 = add i64 %and_ln68_21, i64 %and_ln68_19" [d3.cpp:68]   --->   Operation 215 'add' 'add_ln68_25' <Predicate = (!tmp)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 216 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln68_26 = add i64 %mul_ln68_22, i64 %mul_ln68_21" [d3.cpp:68]   --->   Operation 216 'add' 'add_ln68_26' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 217 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln68_27 = add i64 %add_ln68_26, i64 %and_ln68_20" [d3.cpp:68]   --->   Operation 217 'add' 'add_ln68_27' <Predicate = (!tmp)> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 218 '%mul_ln68_25 = mul i64 %zext_ln68_21, i64 %zext_ln68_17'
ST_2 : Operation 218 [1/1] (2.39ns)   --->   "%mul_ln68_25 = mul i64 %zext_ln68_21, i64 %zext_ln68_17" [d3.cpp:68]   --->   Operation 218 'mul' 'mul_ln68_25' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 219 '%mul_ln68_26 = mul i64 %zext_ln68_15, i64 %zext_ln68_6'
ST_2 : Operation 219 [1/1] (2.39ns)   --->   "%mul_ln68_26 = mul i64 %zext_ln68_15, i64 %zext_ln68_6" [d3.cpp:68]   --->   Operation 219 'mul' 'mul_ln68_26' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 220 '%mul_ln68_27 = mul i64 %zext_ln68_18, i64 %zext_ln68_14'
ST_2 : Operation 220 [1/1] (2.39ns)   --->   "%mul_ln68_27 = mul i64 %zext_ln68_18, i64 %zext_ln68_14" [d3.cpp:68]   --->   Operation 220 'mul' 'mul_ln68_27' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 221 '%mul_ln68_28 = mul i64 %zext_ln68_4, i64 %zext_ln68'
ST_2 : Operation 221 [1/1] (2.39ns)   --->   "%mul_ln68_28 = mul i64 %zext_ln68_4, i64 %zext_ln68" [d3.cpp:68]   --->   Operation 221 'mul' 'mul_ln68_28' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 222 '%mul_ln68_29 = mul i64 %zext_ln68_7, i64 %zext_ln68_12'
ST_2 : Operation 222 [1/1] (2.39ns)   --->   "%mul_ln68_29 = mul i64 %zext_ln68_7, i64 %zext_ln68_12" [d3.cpp:68]   --->   Operation 222 'mul' 'mul_ln68_29' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 223 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_30)   --->   "%and_ln68_22 = and i64 %mul_ln68_28, i64 %select_ln68_12" [d3.cpp:68]   --->   Operation 223 'and' 'and_ln68_22' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 224 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_30)   --->   "%and_ln68_23 = and i64 %mul_ln68_29, i64 %select_ln68_13" [d3.cpp:68]   --->   Operation 224 'and' 'and_ln68_23' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 225 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln68_30 = add i64 %and_ln68_22, i64 %and_ln68_23" [d3.cpp:68]   --->   Operation 225 'add' 'add_ln68_30' <Predicate = (!tmp)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 226 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln68_31 = add i64 %mul_ln68_27, i64 %mul_ln68_25" [d3.cpp:68]   --->   Operation 226 'add' 'add_ln68_31' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 227 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln68_32 = add i64 %add_ln68_31, i64 %mul_ln68_26" [d3.cpp:68]   --->   Operation 227 'add' 'add_ln68_32' <Predicate = (!tmp)> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 228 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln68_33 = add i64 %add_ln68_32, i64 %add_ln68_30" [d3.cpp:68]   --->   Operation 228 'add' 'add_ln68_33' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 229 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln68_34 = add i64 %add120_7104_load, i64 %add_ln68_33" [d3.cpp:68]   --->   Operation 229 'add' 'add_ln68_34' <Predicate = (!tmp)> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 230 [1/1] (0.00ns) (grouped into LUT with out node select_ln68_8)   --->   "%shl_ln68_8 = shl i32 %tmp_11, i32 1" [d3.cpp:68]   --->   Operation 230 'shl' 'shl_ln68_8' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : Operation 231 [1/1] (0.44ns) (out node of the LUT)   --->   "%select_ln68_8 = select i1 %trunc_ln55, i32 %shl_ln68_8, i32 %tmp_11" [d3.cpp:68]   --->   Operation 231 'select' 'select_ln68_8' <Predicate = (!tmp)> <Delay = 0.44> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 232 [1/1] (0.00ns)   --->   "%zext_ln68_22 = zext i32 %select_ln68_8" [d3.cpp:68]   --->   Operation 232 'zext' 'zext_ln68_22' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 233 '%mul_ln68_30 = mul i64 %zext_ln68_16, i64 %zext_ln68_15'
ST_2 : Operation 233 [1/1] (2.39ns)   --->   "%mul_ln68_30 = mul i64 %zext_ln68_16, i64 %zext_ln68_15" [d3.cpp:68]   --->   Operation 233 'mul' 'mul_ln68_30' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 234 '%mul_ln68_31 = mul i64 %zext_ln68_7, i64 %zext_ln68_13'
ST_2 : Operation 234 [1/1] (2.39ns)   --->   "%mul_ln68_31 = mul i64 %zext_ln68_7, i64 %zext_ln68_13" [d3.cpp:68]   --->   Operation 234 'mul' 'mul_ln68_31' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 235 '%mul_ln68_32 = mul i64 %zext_ln68_19, i64 %zext_ln68_18'
ST_2 : Operation 235 [1/1] (2.39ns)   --->   "%mul_ln68_32 = mul i64 %zext_ln68_19, i64 %zext_ln68_18" [d3.cpp:68]   --->   Operation 235 'mul' 'mul_ln68_32' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 236 '%mul_ln68_33 = mul i64 %zext_ln68_5, i64 %zext_ln68'
ST_2 : Operation 236 [1/1] (2.39ns)   --->   "%mul_ln68_33 = mul i64 %zext_ln68_5, i64 %zext_ln68" [d3.cpp:68]   --->   Operation 236 'mul' 'mul_ln68_33' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 237 [1/1] (0.00ns) (grouped into LUT with out node add_ln68_35)   --->   "%and_ln68_24 = and i64 %mul_ln68_33, i64 %select_ln68_13" [d3.cpp:68]   --->   Operation 237 'and' 'and_ln68_24' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 238 '%mul_ln68_34 = mul i64 %zext_ln68_22, i64 %zext_ln68_21'
ST_2 : Operation 238 [1/1] (2.39ns)   --->   "%mul_ln68_34 = mul i64 %zext_ln68_22, i64 %zext_ln68_21" [d3.cpp:68]   --->   Operation 238 'mul' 'mul_ln68_34' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 239 [1/1] (1.08ns) (out node of the LUT)   --->   "%add_ln68_35 = add i64 %mul_ln68_31, i64 %and_ln68_24" [d3.cpp:68]   --->   Operation 239 'add' 'add_ln68_35' <Predicate = (!tmp)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 240 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln68_36 = add i64 %mul_ln68_32, i64 %mul_ln68_34" [d3.cpp:68]   --->   Operation 240 'add' 'add_ln68_36' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 241 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln68_37 = add i64 %add_ln68_36, i64 %mul_ln68_30" [d3.cpp:68]   --->   Operation 241 'add' 'add_ln68_37' <Predicate = (!tmp)> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 242 [1/1] (0.79ns)   --->   "%sub_ln68_6 = sub i4 13, i4 %trunc_ln55_1" [d3.cpp:68]   --->   Operation 242 'sub' 'sub_ln68_6' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 243 [1/1] (0.75ns)   --->   "%tmp_13 = mux i32 @_ssdm_op_Mux.ap_auto.10i32.i4, i32 0, i32 0, i32 0, i32 0, i32 %arg2_r_4_reload_read, i32 %arg2_r_5_reload_read, i32 %arg2_r_6_reload_read, i32 %arg2_r_7_reload_read, i32 %arg2_r_8_reload_read, i32 %arg2_r_9_reload_read, i4 %sub_ln68_6" [d3.cpp:68]   --->   Operation 243 'mux' 'tmp_13' <Predicate = (!tmp)> <Delay = 0.75> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 244 [1/1] (0.00ns)   --->   "%zext_ln68_23 = zext i32 %tmp_13" [d3.cpp:68]   --->   Operation 244 'zext' 'zext_ln68_23' <Predicate = (!tmp)> <Delay = 0.00>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 245 '%mul_ln68_35 = mul i64 %zext_ln68_6, i64 %zext_ln68'
ST_2 : Operation 245 [1/1] (2.39ns)   --->   "%mul_ln68_35 = mul i64 %zext_ln68_6, i64 %zext_ln68" [d3.cpp:68]   --->   Operation 245 'mul' 'mul_ln68_35' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 246 '%mul_ln68_36 = mul i64 %zext_ln68_14, i64 %zext_ln68_7'
ST_2 : Operation 246 [1/1] (2.39ns)   --->   "%mul_ln68_36 = mul i64 %zext_ln68_14, i64 %zext_ln68_7" [d3.cpp:68]   --->   Operation 246 'mul' 'mul_ln68_36' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 247 '%mul_ln68_37 = mul i64 %zext_ln68_20, i64 %zext_ln68_18'
ST_2 : Operation 247 [1/1] (2.39ns)   --->   "%mul_ln68_37 = mul i64 %zext_ln68_20, i64 %zext_ln68_18" [d3.cpp:68]   --->   Operation 247 'mul' 'mul_ln68_37' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 248 '%mul_ln68_38 = mul i64 %zext_ln68_23, i64 %zext_ln68_21'
ST_2 : Operation 248 [1/1] (2.39ns)   --->   "%mul_ln68_38 = mul i64 %zext_ln68_23, i64 %zext_ln68_21" [d3.cpp:68]   --->   Operation 248 'mul' 'mul_ln68_38' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : [1/1] (1.02ns)   --->   Input mux for Operation 249 '%mul_ln68_39 = mul i64 %zext_ln68_17, i64 %zext_ln68_15'
ST_2 : Operation 249 [1/1] (2.39ns)   --->   "%mul_ln68_39 = mul i64 %zext_ln68_17, i64 %zext_ln68_15" [d3.cpp:68]   --->   Operation 249 'mul' 'mul_ln68_39' <Predicate = (!tmp)> <Delay = 2.39> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 250 [1/1] (1.08ns)   --->   "%add_ln68_40 = add i64 %mul_ln68_35, i64 %mul_ln68_36" [d3.cpp:68]   --->   Operation 250 'add' 'add_ln68_40' <Predicate = (!tmp)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 251 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln68_41 = add i64 %mul_ln68_37, i64 %mul_ln68_38" [d3.cpp:68]   --->   Operation 251 'add' 'add_ln68_41' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 252 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln68_42 = add i64 %add_ln68_41, i64 %mul_ln68_39" [d3.cpp:68]   --->   Operation 252 'add' 'add_ln68_42' <Predicate = (!tmp)> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 253 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln68_43 = add i64 %add_ln68_42, i64 %add_ln68_40" [d3.cpp:68]   --->   Operation 253 'add' 'add_ln68_43' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 254 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln68_44 = add i64 %add120_9106_load, i64 %add_ln68_43" [d3.cpp:68]   --->   Operation 254 'add' 'add_ln68_44' <Predicate = (!tmp)> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 255 [1/1] (0.78ns)   --->   "%add_ln55 = add i5 %i1_3, i5 27" [d3.cpp:55]   --->   Operation 255 'add' 'add_ln55' <Predicate = (!tmp)> <Delay = 0.78> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.78> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 256 [1/1] (0.79ns)   --->   "%i1_4 = add i4 %i1_load, i4 11" [d3.cpp:55]   --->   Operation 256 'add' 'i1_4' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 257 [1/1] (0.42ns)   --->   "%store_ln55 = store i5 %add_ln55, i5 %i1_1" [d3.cpp:55]   --->   Operation 257 'store' 'store_ln55' <Predicate = (!tmp)> <Delay = 0.42>
ST_2 : Operation 258 [1/1] (0.42ns)   --->   "%store_ln55 = store i64 %add_ln68_44, i64 %add120_9106" [d3.cpp:55]   --->   Operation 258 'store' 'store_ln55' <Predicate = (!tmp)> <Delay = 0.42>
ST_2 : Operation 259 [1/1] (0.42ns)   --->   "%store_ln55 = store i64 %add_ln68_34, i64 %add120_7104" [d3.cpp:55]   --->   Operation 259 'store' 'store_ln55' <Predicate = (!tmp)> <Delay = 0.42>
ST_2 : Operation 260 [1/1] (0.42ns)   --->   "%store_ln55 = store i64 %add_ln68_24, i64 %add120_5102" [d3.cpp:55]   --->   Operation 260 'store' 'store_ln55' <Predicate = (!tmp)> <Delay = 0.42>
ST_2 : Operation 261 [1/1] (0.42ns)   --->   "%store_ln55 = store i64 %add_ln68_14, i64 %add120_358100" [d3.cpp:55]   --->   Operation 261 'store' 'store_ln55' <Predicate = (!tmp)> <Delay = 0.42>
ST_2 : Operation 262 [1/1] (0.42ns)   --->   "%store_ln55 = store i64 %add_ln68_10, i64 %add120_24299" [d3.cpp:55]   --->   Operation 262 'store' 'store_ln55' <Predicate = (!tmp)> <Delay = 0.42>
ST_2 : Operation 263 [1/1] (0.42ns)   --->   "%store_ln55 = store i64 %add_ln68_7, i64 %add120_12698" [d3.cpp:55]   --->   Operation 263 'store' 'store_ln55' <Predicate = (!tmp)> <Delay = 0.42>
ST_2 : Operation 264 [1/1] (0.42ns)   --->   "%store_ln55 = store i64 %add_ln68_5, i64 %add12097" [d3.cpp:55]   --->   Operation 264 'store' 'store_ln55' <Predicate = (!tmp)> <Delay = 0.42>
ST_2 : Operation 265 [1/1] (0.42ns)   --->   "%store_ln55 = store i4 %i1_4, i4 %i1" [d3.cpp:55]   --->   Operation 265 'store' 'store_ln55' <Predicate = (!tmp)> <Delay = 0.42>
ST_2 : Operation 282 [1/1] (0.00ns)   --->   "%add12097_load_1 = load i64 %add12097"   --->   Operation 282 'load' 'add12097_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 283 [1/1] (0.00ns)   --->   "%add120_12698_load_1 = load i64 %add120_12698"   --->   Operation 283 'load' 'add120_12698_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 284 [1/1] (0.00ns)   --->   "%add120_24299_load_1 = load i64 %add120_24299"   --->   Operation 284 'load' 'add120_24299_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 285 [1/1] (0.00ns)   --->   "%add120_358100_load_1 = load i64 %add120_358100"   --->   Operation 285 'load' 'add120_358100_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 286 [1/1] (0.00ns)   --->   "%add120_474101_load_1 = load i64 %add120_474101"   --->   Operation 286 'load' 'add120_474101_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 287 [1/1] (0.00ns)   --->   "%add120_5102_load_1 = load i64 %add120_5102"   --->   Operation 287 'load' 'add120_5102_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 288 [1/1] (0.00ns)   --->   "%add120_6103_load_1 = load i64 %add120_6103"   --->   Operation 288 'load' 'add120_6103_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 289 [1/1] (0.00ns)   --->   "%add120_7104_load_1 = load i64 %add120_7104"   --->   Operation 289 'load' 'add120_7104_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 290 [1/1] (0.00ns)   --->   "%add120_8105_load_1 = load i64 %add120_8105"   --->   Operation 290 'load' 'add120_8105_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 291 [1/1] (0.00ns)   --->   "%add120_9106_load_1 = load i64 %add120_9106"   --->   Operation 291 'load' 'add120_9106_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 292 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add120_9106_out, i64 %add120_9106_load_1"   --->   Operation 292 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 293 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add120_8105_out, i64 %add120_8105_load_1"   --->   Operation 293 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 294 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add120_7104_out, i64 %add120_7104_load_1"   --->   Operation 294 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 295 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add120_6103_out, i64 %add120_6103_load_1"   --->   Operation 295 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 296 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add120_5102_out, i64 %add120_5102_load_1"   --->   Operation 296 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 297 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add120_474101_out, i64 %add120_474101_load_1"   --->   Operation 297 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 298 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add120_358100_out, i64 %add120_358100_load_1"   --->   Operation 298 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 299 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add120_24299_out, i64 %add120_24299_load_1"   --->   Operation 299 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 300 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add120_12698_out, i64 %add120_12698_load_1"   --->   Operation 300 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 301 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %add12097_out, i64 %add12097_load_1"   --->   Operation 301 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 302 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 302 'ret' 'ret_ln0' <Predicate = (tmp)> <Delay = 0.00>

State 3 <SV = 2> <Delay = 1.24>
ST_3 : Operation 266 [1/1] (0.00ns)   --->   "%add120_474101_load = load i64 %add120_474101" [d3.cpp:68]   --->   Operation 266 'load' 'add120_474101_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 267 [1/1] (0.00ns)   --->   "%add120_6103_load = load i64 %add120_6103" [d3.cpp:68]   --->   Operation 267 'load' 'add120_6103_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 268 [1/1] (0.00ns)   --->   "%add120_8105_load = load i64 %add120_8105" [d3.cpp:68]   --->   Operation 268 'load' 'add120_8105_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 269 [1/1] (0.00ns)   --->   "%specpipeline_ln57 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty_2" [d3.cpp:57]   --->   Operation 269 'specpipeline' 'specpipeline_ln57' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 270 [1/1] (0.00ns)   --->   "%speclooptripcount_ln55 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 2, i64 2, i64 2" [d3.cpp:55]   --->   Operation 270 'speclooptripcount' 'speclooptripcount_ln55' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 271 [1/1] (0.00ns)   --->   "%specloopname_ln55 = specloopname void @_ssdm_op_SpecLoopName, void @empty_7" [d3.cpp:55]   --->   Operation 271 'specloopname' 'specloopname_ln55' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 272 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln68_18 = add i64 %add_ln68_17, i64 %and_ln68_12" [d3.cpp:68]   --->   Operation 272 'add' 'add_ln68_18' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 273 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln68_19 = add i64 %add_ln68_18, i64 %add120_474101_load" [d3.cpp:68]   --->   Operation 273 'add' 'add_ln68_19' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 274 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln68_28 = add i64 %add_ln68_27, i64 %add_ln68_25" [d3.cpp:68]   --->   Operation 274 'add' 'add_ln68_28' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 275 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln68_29 = add i64 %add120_6103_load, i64 %add_ln68_28" [d3.cpp:68]   --->   Operation 275 'add' 'add_ln68_29' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 276 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln68_38 = add i64 %add_ln68_37, i64 %add_ln68_35" [d3.cpp:68]   --->   Operation 276 'add' 'add_ln68_38' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 277 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln68_39 = add i64 %add120_8105_load, i64 %add_ln68_38" [d3.cpp:68]   --->   Operation 277 'add' 'add_ln68_39' <Predicate = true> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.40> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 278 [1/1] (0.42ns)   --->   "%store_ln55 = store i64 %add_ln68_39, i64 %add120_8105" [d3.cpp:55]   --->   Operation 278 'store' 'store_ln55' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 279 [1/1] (0.42ns)   --->   "%store_ln55 = store i64 %add_ln68_29, i64 %add120_6103" [d3.cpp:55]   --->   Operation 279 'store' 'store_ln55' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 280 [1/1] (0.42ns)   --->   "%store_ln55 = store i64 %add_ln68_19, i64 %add120_474101" [d3.cpp:55]   --->   Operation 280 'store' 'store_ln55' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 281 [1/1] (0.00ns)   --->   "%br_ln55 = br void %for.body87" [d3.cpp:55]   --->   Operation 281 'br' 'br_ln55' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 0.427ns
The critical path consists of the following:
	'alloca' operation ('i1') [52]  (0.000 ns)
	'store' operation ('store_ln0') of constant 9 on local variable 'i1' [84]  (0.427 ns)

 <State 2>: 7.224ns
The critical path consists of the following:
	'load' operation ('i1', d3.cpp:55) on local variable 'i1' [98]  (0.000 ns)
	'sub' operation ('sub_ln68', d3.cpp:68) [134]  (0.548 ns)
	'mux' operation ('tmp_2', d3.cpp:68) [135]  (0.476 ns)
	'select' operation ('select_ln68_1', d3.cpp:68) [137]  (0.449 ns)
	multiplexor before operation 'mul' with delay (1.025 ns)
'mul' operation ('mul_ln68_3', d3.cpp:68) [200]  (2.395 ns)
	'and' operation ('and_ln68_3', d3.cpp:68) [204]  (0.000 ns)
	'add' operation ('add_ln68_8', d3.cpp:68) [207]  (1.085 ns)
	'add' operation ('add_ln68_9', d3.cpp:68) [208]  (0.000 ns)
	'add' operation ('add_ln68_10', d3.cpp:68) [209]  (0.819 ns)
	'store' operation ('store_ln55', d3.cpp:55) of variable 'add_ln68_10', d3.cpp:68 on local variable 'add120_24299' [315]  (0.427 ns)

 <State 3>: 1.246ns
The critical path consists of the following:
	'load' operation ('add120_8105_load', d3.cpp:68) on local variable 'add120_8105' [111]  (0.000 ns)
	'add' operation ('add_ln68_39', d3.cpp:68) [291]  (0.819 ns)
	'store' operation ('store_ln55', d3.cpp:55) of variable 'add_ln68_39', d3.cpp:68 on local variable 'add120_8105' [309]  (0.427 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
