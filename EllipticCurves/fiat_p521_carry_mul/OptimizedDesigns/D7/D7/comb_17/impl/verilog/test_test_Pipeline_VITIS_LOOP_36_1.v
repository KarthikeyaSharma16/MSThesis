// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_36_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arg1_r_2_reload,
        arg1_r_4_reload,
        arg1_r_6_reload,
        arg1_r_8_reload,
        conv34,
        arg2_r_7_cast,
        arg2_r_8_cast,
        arg2_r_6_cast,
        arg2_r_5_cast,
        arg2_r_4_cast,
        arg2_r_3_cast,
        arg2_r_2_cast,
        arg2_r_1_cast,
        arg1_r_1_reload,
        arg1_r_3_reload,
        arg1_r_5_reload,
        arg1_r_7_reload,
        add_3_1366_out,
        add_3_1366_out_ap_vld,
        add_3365_out,
        add_3365_out_ap_vld,
        add_2_1364_out,
        add_2_1364_out_ap_vld,
        add_2363_out,
        add_2363_out_ap_vld,
        add_1258_1362_out,
        add_1258_1362_out_ap_vld,
        add_1258361_out,
        add_1258361_out_ap_vld,
        add_1274360_out,
        add_1274360_out_ap_vld,
        add359_out,
        add359_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] arg1_r_2_reload;
input  [63:0] arg1_r_4_reload;
input  [63:0] arg1_r_6_reload;
input  [63:0] arg1_r_8_reload;
input  [63:0] conv34;
input  [62:0] arg2_r_7_cast;
input  [62:0] arg2_r_8_cast;
input  [62:0] arg2_r_6_cast;
input  [62:0] arg2_r_5_cast;
input  [62:0] arg2_r_4_cast;
input  [62:0] arg2_r_3_cast;
input  [62:0] arg2_r_2_cast;
input  [62:0] arg2_r_1_cast;
input  [63:0] arg1_r_1_reload;
input  [63:0] arg1_r_3_reload;
input  [63:0] arg1_r_5_reload;
input  [63:0] arg1_r_7_reload;
output  [127:0] add_3_1366_out;
output   add_3_1366_out_ap_vld;
output  [127:0] add_3365_out;
output   add_3365_out_ap_vld;
output  [127:0] add_2_1364_out;
output   add_2_1364_out_ap_vld;
output  [127:0] add_2363_out;
output   add_2363_out_ap_vld;
output  [127:0] add_1258_1362_out;
output   add_1258_1362_out_ap_vld;
output  [127:0] add_1258361_out;
output   add_1258361_out_ap_vld;
output  [127:0] add_1274360_out;
output   add_1274360_out_ap_vld;
output  [127:0] add359_out;
output   add359_out_ap_vld;

reg ap_idle;
reg add_3_1366_out_ap_vld;
reg add_3365_out_ap_vld;
reg add_2_1364_out_ap_vld;
reg add_2363_out_ap_vld;
reg add_1258_1362_out_ap_vld;
reg add_1258361_out_ap_vld;
reg add_1274360_out_ap_vld;
reg add359_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln36_fu_429_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [127:0] conv34_cast_fu_376_p1;
reg   [127:0] conv34_cast_reg_1623;
wire   [127:0] zext_ln49_fu_459_p1;
reg   [127:0] zext_ln49_reg_1631;
reg   [0:0] tmp_12_reg_1642;
wire   [127:0] mul_ln49_fu_316_p2;
reg   [127:0] mul_ln49_reg_1647;
wire   [0:0] tmp_13_fu_472_p3;
reg   [0:0] tmp_13_reg_1652;
wire   [0:0] icmp_ln49_fu_488_p2;
reg   [0:0] icmp_ln49_reg_1657;
wire   [3:0] sub_ln34_6_fu_498_p2;
reg   [3:0] sub_ln34_6_reg_1662;
wire   [0:0] icmp_ln49_1_fu_504_p2;
reg   [0:0] icmp_ln49_1_reg_1667;
wire   [3:0] sub_ln34_7_fu_514_p2;
reg   [3:0] sub_ln34_7_reg_1672;
wire   [0:0] icmp_ln49_2_fu_520_p2;
reg   [0:0] icmp_ln49_2_reg_1677;
wire   [3:0] sub_ln34_fu_530_p2;
reg   [3:0] sub_ln34_reg_1682;
wire   [0:0] icmp_ln49_3_fu_546_p2;
reg   [0:0] icmp_ln49_3_reg_1687;
wire   [3:0] sub_ln34_1_fu_556_p2;
reg   [3:0] sub_ln34_1_reg_1692;
wire   [0:0] icmp_ln49_4_fu_562_p2;
reg   [0:0] icmp_ln49_4_reg_1697;
wire   [3:0] sub_ln34_2_fu_572_p2;
reg   [3:0] sub_ln34_2_reg_1702;
wire   [63:0] tmp_8_fu_584_p11;
reg   [63:0] tmp_8_reg_1708;
wire   [0:0] icmp_ln49_5_fu_608_p2;
reg   [0:0] icmp_ln49_5_reg_1713;
wire   [0:0] icmp_ln49_6_fu_622_p2;
reg   [0:0] icmp_ln49_6_reg_1719;
wire   [3:0] sub_ln34_8_fu_632_p2;
reg   [3:0] sub_ln34_8_reg_1724;
wire   [0:0] icmp_ln49_7_fu_638_p2;
reg   [0:0] icmp_ln49_7_reg_1729;
wire   [3:0] sub_ln34_9_fu_648_p2;
reg   [3:0] sub_ln34_9_reg_1734;
wire   [0:0] icmp_ln49_8_fu_664_p2;
reg   [0:0] icmp_ln49_8_reg_1739;
wire   [3:0] sub_ln34_3_fu_674_p2;
reg   [3:0] sub_ln34_3_reg_1744;
wire   [0:0] icmp_ln49_9_fu_680_p2;
reg   [0:0] icmp_ln49_9_reg_1749;
wire   [3:0] sub_ln34_4_fu_690_p2;
reg   [3:0] sub_ln34_4_reg_1754;
wire   [0:0] icmp_ln49_10_fu_706_p2;
reg   [0:0] icmp_ln49_10_reg_1759;
wire   [3:0] sub_ln34_5_fu_716_p2;
reg   [3:0] sub_ln34_5_reg_1764;
reg   [127:0] add359_fu_122;
wire   [127:0] add_ln49_fu_769_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [127:0] add_1274360_fu_126;
wire   [127:0] add_ln49_2_fu_1019_p2;
reg   [127:0] add_1258361_fu_130;
wire   [127:0] add_ln49_4_fu_1075_p2;
reg   [127:0] add_1258_1362_fu_134;
wire   [127:0] add_ln49_6_fu_1146_p2;
reg   [127:0] add_2363_fu_138;
wire   [127:0] add_ln49_8_fu_1216_p2;
reg   [127:0] add_2_1364_fu_142;
wire   [127:0] add_ln49_10_fu_1285_p2;
reg   [127:0] add_3365_fu_146;
wire   [127:0] add_ln49_12_fu_1340_p2;
reg   [127:0] add_3_1366_fu_150;
wire   [127:0] add_ln49_14_fu_1381_p2;
reg   [3:0] i_fu_154;
wire   [3:0] add_ln36_fu_722_p2;
reg   [3:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] mul_ln49_fu_316_p0;
wire   [63:0] mul_ln49_fu_316_p1;
wire   [63:0] mul_ln49_1_fu_320_p0;
wire   [63:0] mul_ln49_1_fu_320_p1;
wire   [63:0] mul_ln49_2_fu_324_p0;
wire   [127:0] zext_ln49_8_fu_977_p1;
wire   [63:0] mul_ln49_2_fu_324_p1;
wire   [63:0] mul_ln49_3_fu_328_p0;
wire   [63:0] mul_ln49_3_fu_328_p1;
wire   [63:0] mul_ln49_4_fu_332_p0;
wire   [63:0] mul_ln49_4_fu_332_p1;
wire   [63:0] mul_ln49_5_fu_336_p0;
wire   [63:0] mul_ln49_5_fu_336_p1;
wire   [63:0] mul_ln49_6_fu_340_p0;
wire   [63:0] mul_ln49_6_fu_340_p1;
wire   [63:0] mul_ln49_7_fu_344_p0;
wire   [63:0] mul_ln49_7_fu_344_p1;
wire   [63:0] mul_ln49_8_fu_348_p0;
wire   [63:0] mul_ln49_8_fu_348_p1;
wire   [63:0] mul_ln49_9_fu_352_p0;
wire   [63:0] mul_ln49_9_fu_352_p1;
wire   [63:0] mul_ln49_10_fu_356_p0;
wire   [63:0] mul_ln49_10_fu_356_p1;
wire   [63:0] mul_ln49_11_fu_360_p0;
wire   [63:0] mul_ln49_11_fu_360_p1;
wire   [63:0] mul_ln49_12_fu_364_p0;
wire   [63:0] mul_ln49_12_fu_364_p1;
wire   [63:0] mul_ln49_13_fu_368_p0;
wire   [63:0] mul_ln49_13_fu_368_p1;
wire   [63:0] mul_ln49_14_fu_372_p0;
wire   [63:0] mul_ln49_14_fu_372_p1;
wire   [63:0] tmp_fu_435_p11;
wire   [3:0] select_ln34_fu_480_p3;
wire   [3:0] zext_ln50_fu_494_p1;
wire   [3:0] zext_ln50_1_fu_510_p1;
wire   [3:0] zext_ln50_2_fu_526_p1;
wire   [1:0] tmp_14_fu_536_p4;
wire   [3:0] zext_ln50_3_fu_552_p1;
wire   [3:0] zext_ln50_4_fu_568_p1;
wire   [3:0] empty_fu_578_p2;
wire   [3:0] select_ln34_1_fu_614_p3;
wire   [3:0] zext_ln50_5_fu_628_p1;
wire   [3:0] zext_ln50_6_fu_644_p1;
wire   [1:0] tmp_15_fu_654_p4;
wire   [3:0] zext_ln50_7_fu_670_p1;
wire   [3:0] zext_ln50_8_fu_686_p1;
wire   [2:0] tmp_16_fu_696_p4;
wire   [3:0] zext_ln50_9_fu_712_p1;
wire   [127:0] select_ln49_2_fu_757_p3;
wire   [127:0] and_ln49_fu_764_p2;
wire   [62:0] select_ln49_fu_775_p3;
wire   [63:0] shl_ln_fu_780_p3;
wire   [62:0] tmp_2_fu_793_p11;
wire   [63:0] shl_ln49_1_fu_813_p3;
wire   [62:0] tmp_3_fu_826_p11;
wire   [63:0] shl_ln49_2_fu_845_p3;
wire   [62:0] tmp_4_fu_858_p11;
wire   [63:0] shl_ln49_3_fu_876_p3;
wire   [62:0] tmp_5_fu_889_p11;
wire   [63:0] shl_ln49_4_fu_906_p3;
wire   [62:0] tmp_6_fu_919_p11;
wire   [63:0] shl_ln49_5_fu_935_p3;
wire   [62:0] tmp_7_fu_948_p11;
wire   [63:0] shl_ln49_6_fu_964_p3;
wire   [127:0] mul_ln49_1_fu_320_p2;
wire   [127:0] select_ln49_3_fu_987_p3;
wire   [127:0] mul_ln49_2_fu_324_p2;
wire   [127:0] select_ln49_4_fu_1000_p3;
wire   [127:0] and_ln49_2_fu_1007_p2;
wire   [127:0] and_ln49_1_fu_994_p2;
wire   [127:0] add_ln49_1_fu_1013_p2;
wire   [62:0] select_ln49_1_fu_1025_p3;
wire   [63:0] shl_ln49_7_fu_1030_p3;
wire   [127:0] mul_ln49_3_fu_328_p2;
wire   [127:0] select_ln49_5_fu_1043_p3;
wire   [127:0] mul_ln49_4_fu_332_p2;
wire   [127:0] select_ln49_6_fu_1056_p3;
wire   [127:0] and_ln49_4_fu_1063_p2;
wire   [127:0] and_ln49_3_fu_1050_p2;
wire   [127:0] add_ln49_3_fu_1069_p2;
wire   [62:0] tmp_s_fu_1081_p11;
wire   [63:0] shl_ln49_8_fu_1101_p3;
wire   [127:0] mul_ln49_5_fu_336_p2;
wire   [127:0] select_ln49_7_fu_1114_p3;
wire   [127:0] mul_ln49_6_fu_340_p2;
wire   [127:0] select_ln49_8_fu_1127_p3;
wire   [127:0] and_ln49_6_fu_1134_p2;
wire   [127:0] and_ln49_5_fu_1121_p2;
wire   [127:0] add_ln49_5_fu_1140_p2;
wire   [62:0] tmp_1_fu_1152_p11;
wire   [63:0] shl_ln49_9_fu_1171_p3;
wire   [127:0] mul_ln49_7_fu_344_p2;
wire   [127:0] select_ln49_9_fu_1184_p3;
wire   [127:0] mul_ln49_8_fu_348_p2;
wire   [127:0] select_ln49_10_fu_1197_p3;
wire   [127:0] and_ln49_8_fu_1204_p2;
wire   [127:0] and_ln49_7_fu_1191_p2;
wire   [127:0] add_ln49_7_fu_1210_p2;
wire   [62:0] tmp_9_fu_1222_p11;
wire   [63:0] shl_ln49_s_fu_1240_p3;
wire   [127:0] mul_ln49_9_fu_352_p2;
wire   [127:0] select_ln49_11_fu_1253_p3;
wire   [127:0] mul_ln49_10_fu_356_p2;
wire   [127:0] select_ln49_12_fu_1266_p3;
wire   [127:0] and_ln49_10_fu_1273_p2;
wire   [127:0] and_ln49_9_fu_1260_p2;
wire   [127:0] add_ln49_9_fu_1279_p2;
wire   [62:0] tmp_10_fu_1291_p11;
wire   [63:0] shl_ln49_10_fu_1308_p3;
wire   [127:0] mul_ln49_12_fu_364_p2;
wire   [127:0] select_ln49_13_fu_1321_p3;
wire   [127:0] and_ln49_11_fu_1328_p2;
wire   [127:0] mul_ln49_11_fu_360_p2;
wire   [127:0] add_ln49_11_fu_1334_p2;
wire   [62:0] tmp_11_fu_1346_p11;
wire   [63:0] shl_ln49_11_fu_1362_p3;
wire   [127:0] mul_ln49_14_fu_372_p2;
wire   [127:0] mul_ln49_13_fu_368_p2;
wire   [127:0] add_ln49_13_fu_1375_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [127:0] mul_ln49_10_fu_356_p00;
wire   [127:0] mul_ln49_11_fu_360_p00;
wire   [127:0] mul_ln49_12_fu_364_p00;
wire   [127:0] mul_ln49_13_fu_368_p00;
wire   [127:0] mul_ln49_14_fu_372_p00;
wire   [127:0] mul_ln49_1_fu_320_p00;
wire   [127:0] mul_ln49_3_fu_328_p00;
wire   [127:0] mul_ln49_4_fu_332_p00;
wire   [127:0] mul_ln49_5_fu_336_p00;
wire   [127:0] mul_ln49_6_fu_340_p00;
wire   [127:0] mul_ln49_7_fu_344_p00;
wire   [127:0] mul_ln49_8_fu_348_p00;
wire   [127:0] mul_ln49_9_fu_352_p00;
wire   [127:0] mul_ln49_fu_316_p00;
wire   [127:0] mul_ln49_fu_316_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U23(
    .din0(mul_ln49_fu_316_p0),
    .din1(mul_ln49_fu_316_p1),
    .dout(mul_ln49_fu_316_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U24(
    .din0(mul_ln49_1_fu_320_p0),
    .din1(mul_ln49_1_fu_320_p1),
    .dout(mul_ln49_1_fu_320_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U25(
    .din0(mul_ln49_2_fu_324_p0),
    .din1(mul_ln49_2_fu_324_p1),
    .dout(mul_ln49_2_fu_324_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U26(
    .din0(mul_ln49_3_fu_328_p0),
    .din1(mul_ln49_3_fu_328_p1),
    .dout(mul_ln49_3_fu_328_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U27(
    .din0(mul_ln49_4_fu_332_p0),
    .din1(mul_ln49_4_fu_332_p1),
    .dout(mul_ln49_4_fu_332_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U28(
    .din0(mul_ln49_5_fu_336_p0),
    .din1(mul_ln49_5_fu_336_p1),
    .dout(mul_ln49_5_fu_336_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U29(
    .din0(mul_ln49_6_fu_340_p0),
    .din1(mul_ln49_6_fu_340_p1),
    .dout(mul_ln49_6_fu_340_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U30(
    .din0(mul_ln49_7_fu_344_p0),
    .din1(mul_ln49_7_fu_344_p1),
    .dout(mul_ln49_7_fu_344_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U31(
    .din0(mul_ln49_8_fu_348_p0),
    .din1(mul_ln49_8_fu_348_p1),
    .dout(mul_ln49_8_fu_348_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U32(
    .din0(mul_ln49_9_fu_352_p0),
    .din1(mul_ln49_9_fu_352_p1),
    .dout(mul_ln49_9_fu_352_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U33(
    .din0(mul_ln49_10_fu_356_p0),
    .din1(mul_ln49_10_fu_356_p1),
    .dout(mul_ln49_10_fu_356_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U34(
    .din0(mul_ln49_11_fu_360_p0),
    .din1(mul_ln49_11_fu_360_p1),
    .dout(mul_ln49_11_fu_360_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U35(
    .din0(mul_ln49_12_fu_364_p0),
    .din1(mul_ln49_12_fu_364_p1),
    .dout(mul_ln49_12_fu_364_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U36(
    .din0(mul_ln49_13_fu_368_p0),
    .din1(mul_ln49_13_fu_368_p1),
    .dout(mul_ln49_13_fu_368_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U37(
    .din0(mul_ln49_14_fu_372_p0),
    .din1(mul_ln49_14_fu_372_p1),
    .dout(mul_ln49_14_fu_372_p2)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U38(
    .din0(64'd0),
    .din1(64'd0),
    .din2(arg1_r_2_reload),
    .din3(64'd0),
    .din4(arg1_r_4_reload),
    .din5(64'd0),
    .din6(arg1_r_6_reload),
    .din7(64'd0),
    .din8(arg1_r_8_reload),
    .din9(ap_sig_allocacmp_i_1),
    .dout(tmp_fu_435_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U39(
    .din0(64'd0),
    .din1(64'd0),
    .din2(arg1_r_1_reload),
    .din3(64'd0),
    .din4(arg1_r_3_reload),
    .din5(64'd0),
    .din6(arg1_r_5_reload),
    .din7(64'd0),
    .din8(arg1_r_7_reload),
    .din9(ap_sig_allocacmp_i_1),
    .dout(tmp_8_fu_584_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U40(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(63'd0),
    .din5(63'd0),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_6_reg_1662),
    .dout(tmp_2_fu_793_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U41(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(63'd0),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_7_reg_1672),
    .dout(tmp_3_fu_826_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U42(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_reg_1682),
    .dout(tmp_4_fu_858_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U43(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(arg2_r_3_cast),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_1_reg_1692),
    .dout(tmp_5_fu_889_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U44(
    .din0(63'd0),
    .din1(63'd0),
    .din2(arg2_r_2_cast),
    .din3(arg2_r_3_cast),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_2_reg_1702),
    .dout(tmp_6_fu_919_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U45(
    .din0(63'd0),
    .din1(63'd0),
    .din2(arg2_r_1_cast),
    .din3(arg2_r_2_cast),
    .din4(arg2_r_3_cast),
    .din5(arg2_r_4_cast),
    .din6(arg2_r_5_cast),
    .din7(arg2_r_6_cast),
    .din8(arg2_r_7_cast),
    .din9(sub_ln34_2_reg_1702),
    .dout(tmp_7_fu_948_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U46(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(63'd0),
    .din5(63'd0),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_8_reg_1724),
    .dout(tmp_s_fu_1081_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U47(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(63'd0),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_9_reg_1734),
    .dout(tmp_1_fu_1152_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U48(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_3_reg_1744),
    .dout(tmp_9_fu_1222_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U49(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(arg2_r_3_cast),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_4_reg_1754),
    .dout(tmp_10_fu_1291_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U50(
    .din0(63'd0),
    .din1(63'd0),
    .din2(arg2_r_2_cast),
    .din3(arg2_r_3_cast),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_5_reg_1764),
    .dout(tmp_11_fu_1346_p11)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add359_fu_122 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add359_fu_122 <= add_ln49_fu_769_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add_1258361_fu_130 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add_1258361_fu_130 <= add_ln49_4_fu_1075_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add_1258_1362_fu_134 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add_1258_1362_fu_134 <= add_ln49_6_fu_1146_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add_1274360_fu_126 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add_1274360_fu_126 <= add_ln49_2_fu_1019_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add_2363_fu_138 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add_2363_fu_138 <= add_ln49_8_fu_1216_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add_2_1364_fu_142 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add_2_1364_fu_142 <= add_ln49_10_fu_1285_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add_3365_fu_146 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add_3365_fu_146 <= add_ln49_12_fu_1340_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add_3_1366_fu_150 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add_3_1366_fu_150 <= add_ln49_14_fu_1381_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln36_fu_429_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_154 <= add_ln36_fu_722_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_154 <= 4'd8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv34_cast_reg_1623[63 : 0] <= conv34_cast_fu_376_p1[63 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_429_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln49_10_reg_1759 <= icmp_ln49_10_fu_706_p2;
        icmp_ln49_1_reg_1667 <= icmp_ln49_1_fu_504_p2;
        icmp_ln49_2_reg_1677 <= icmp_ln49_2_fu_520_p2;
        icmp_ln49_3_reg_1687 <= icmp_ln49_3_fu_546_p2;
        icmp_ln49_4_reg_1697 <= icmp_ln49_4_fu_562_p2;
        icmp_ln49_5_reg_1713 <= icmp_ln49_5_fu_608_p2;
        icmp_ln49_6_reg_1719 <= icmp_ln49_6_fu_622_p2;
        icmp_ln49_7_reg_1729 <= icmp_ln49_7_fu_638_p2;
        icmp_ln49_8_reg_1739 <= icmp_ln49_8_fu_664_p2;
        icmp_ln49_9_reg_1749 <= icmp_ln49_9_fu_680_p2;
        icmp_ln49_reg_1657 <= icmp_ln49_fu_488_p2;
        mul_ln49_reg_1647 <= mul_ln49_fu_316_p2;
        sub_ln34_1_reg_1692 <= sub_ln34_1_fu_556_p2;
        sub_ln34_2_reg_1702 <= sub_ln34_2_fu_572_p2;
        sub_ln34_3_reg_1744 <= sub_ln34_3_fu_674_p2;
        sub_ln34_4_reg_1754 <= sub_ln34_4_fu_690_p2;
        sub_ln34_5_reg_1764 <= sub_ln34_5_fu_716_p2;
        sub_ln34_6_reg_1662 <= sub_ln34_6_fu_498_p2;
        sub_ln34_7_reg_1672 <= sub_ln34_7_fu_514_p2;
        sub_ln34_8_reg_1724 <= sub_ln34_8_fu_632_p2;
        sub_ln34_9_reg_1734 <= sub_ln34_9_fu_648_p2;
        sub_ln34_reg_1682 <= sub_ln34_fu_530_p2;
        tmp_12_reg_1642 <= ap_sig_allocacmp_i_1[32'd3];
        tmp_13_reg_1652 <= ap_sig_allocacmp_i_1[32'd3];
        tmp_8_reg_1708 <= tmp_8_fu_584_p11;
        zext_ln49_reg_1631[63 : 0] <= zext_ln49_fu_459_p1[63 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_429_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add359_out_ap_vld = 1'b1;
    end else begin
        add359_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_429_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_1258361_out_ap_vld = 1'b1;
    end else begin
        add_1258361_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_429_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_1258_1362_out_ap_vld = 1'b1;
    end else begin
        add_1258_1362_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_429_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_1274360_out_ap_vld = 1'b1;
    end else begin
        add_1274360_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_429_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_2363_out_ap_vld = 1'b1;
    end else begin
        add_2363_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_429_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_2_1364_out_ap_vld = 1'b1;
    end else begin
        add_2_1364_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_429_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_3365_out_ap_vld = 1'b1;
    end else begin
        add_3365_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_429_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_3_1366_out_ap_vld = 1'b1;
    end else begin
        add_3_1366_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_429_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 4'd8;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_154;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add359_out = add359_fu_122;

assign add_1258361_out = add_1258361_fu_130;

assign add_1258_1362_out = add_1258_1362_fu_134;

assign add_1274360_out = add_1274360_fu_126;

assign add_2363_out = add_2363_fu_138;

assign add_2_1364_out = add_2_1364_fu_142;

assign add_3365_out = add_3365_fu_146;

assign add_3_1366_out = add_3_1366_fu_150;

assign add_ln36_fu_722_p2 = ($signed(ap_sig_allocacmp_i_1) + $signed(4'd14));

assign add_ln49_10_fu_1285_p2 = (add_2_1364_fu_142 + add_ln49_9_fu_1279_p2);

assign add_ln49_11_fu_1334_p2 = (and_ln49_11_fu_1328_p2 + mul_ln49_11_fu_360_p2);

assign add_ln49_12_fu_1340_p2 = (add_3365_fu_146 + add_ln49_11_fu_1334_p2);

assign add_ln49_13_fu_1375_p2 = (mul_ln49_14_fu_372_p2 + mul_ln49_13_fu_368_p2);

assign add_ln49_14_fu_1381_p2 = (add_3_1366_fu_150 + add_ln49_13_fu_1375_p2);

assign add_ln49_1_fu_1013_p2 = (and_ln49_2_fu_1007_p2 + and_ln49_1_fu_994_p2);

assign add_ln49_2_fu_1019_p2 = (add_1274360_fu_126 + add_ln49_1_fu_1013_p2);

assign add_ln49_3_fu_1069_p2 = (and_ln49_4_fu_1063_p2 + and_ln49_3_fu_1050_p2);

assign add_ln49_4_fu_1075_p2 = (add_1258361_fu_130 + add_ln49_3_fu_1069_p2);

assign add_ln49_5_fu_1140_p2 = (and_ln49_6_fu_1134_p2 + and_ln49_5_fu_1121_p2);

assign add_ln49_6_fu_1146_p2 = (add_1258_1362_fu_134 + add_ln49_5_fu_1140_p2);

assign add_ln49_7_fu_1210_p2 = (and_ln49_8_fu_1204_p2 + and_ln49_7_fu_1191_p2);

assign add_ln49_8_fu_1216_p2 = (add_2363_fu_138 + add_ln49_7_fu_1210_p2);

assign add_ln49_9_fu_1279_p2 = (and_ln49_10_fu_1273_p2 + and_ln49_9_fu_1260_p2);

assign add_ln49_fu_769_p2 = (and_ln49_fu_764_p2 + add359_fu_122);

assign and_ln49_10_fu_1273_p2 = (select_ln49_12_fu_1266_p3 & mul_ln49_10_fu_356_p2);

assign and_ln49_11_fu_1328_p2 = (select_ln49_13_fu_1321_p3 & mul_ln49_12_fu_364_p2);

assign and_ln49_1_fu_994_p2 = (select_ln49_3_fu_987_p3 & mul_ln49_1_fu_320_p2);

assign and_ln49_2_fu_1007_p2 = (select_ln49_4_fu_1000_p3 & mul_ln49_2_fu_324_p2);

assign and_ln49_3_fu_1050_p2 = (select_ln49_5_fu_1043_p3 & mul_ln49_3_fu_328_p2);

assign and_ln49_4_fu_1063_p2 = (select_ln49_6_fu_1056_p3 & mul_ln49_4_fu_332_p2);

assign and_ln49_5_fu_1121_p2 = (select_ln49_7_fu_1114_p3 & mul_ln49_5_fu_336_p2);

assign and_ln49_6_fu_1134_p2 = (select_ln49_8_fu_1127_p3 & mul_ln49_6_fu_340_p2);

assign and_ln49_7_fu_1191_p2 = (select_ln49_9_fu_1184_p3 & mul_ln49_7_fu_344_p2);

assign and_ln49_8_fu_1204_p2 = (select_ln49_10_fu_1197_p3 & mul_ln49_8_fu_348_p2);

assign and_ln49_9_fu_1260_p2 = (select_ln49_11_fu_1253_p3 & mul_ln49_9_fu_352_p2);

assign and_ln49_fu_764_p2 = (select_ln49_2_fu_757_p3 & mul_ln49_reg_1647);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv34_cast_fu_376_p1 = conv34;

assign empty_fu_578_p2 = ($signed(ap_sig_allocacmp_i_1) + $signed(4'd15));

assign icmp_ln36_fu_429_p2 = ((ap_sig_allocacmp_i_1 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_10_fu_706_p2 = (($signed(tmp_16_fu_696_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln49_1_fu_504_p2 = ((ap_sig_allocacmp_i_1 > 4'd5) ? 1'b1 : 1'b0);

assign icmp_ln49_2_fu_520_p2 = ((ap_sig_allocacmp_i_1 > 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln49_3_fu_546_p2 = ((tmp_14_fu_536_p4 != 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_4_fu_562_p2 = ((ap_sig_allocacmp_i_1 > 4'd2) ? 1'b1 : 1'b0);

assign icmp_ln49_5_fu_608_p2 = ((empty_fu_578_p2 == 4'd7) ? 1'b1 : 1'b0);

assign icmp_ln49_6_fu_622_p2 = (($signed(empty_fu_578_p2) > $signed(4'd5)) ? 1'b1 : 1'b0);

assign icmp_ln49_7_fu_638_p2 = (($signed(empty_fu_578_p2) > $signed(4'd4)) ? 1'b1 : 1'b0);

assign icmp_ln49_8_fu_664_p2 = ((tmp_15_fu_654_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln49_9_fu_680_p2 = (($signed(empty_fu_578_p2) > $signed(4'd2)) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_488_p2 = ((ap_sig_allocacmp_i_1 > 4'd6) ? 1'b1 : 1'b0);

assign mul_ln49_10_fu_356_p0 = mul_ln49_10_fu_356_p00;

assign mul_ln49_10_fu_356_p00 = shl_ln49_s_fu_1240_p3;

assign mul_ln49_10_fu_356_p1 = zext_ln49_8_fu_977_p1;

assign mul_ln49_11_fu_360_p0 = mul_ln49_11_fu_360_p00;

assign mul_ln49_11_fu_360_p00 = shl_ln49_5_fu_935_p3;

assign mul_ln49_11_fu_360_p1 = zext_ln49_reg_1631;

assign mul_ln49_12_fu_364_p0 = mul_ln49_12_fu_364_p00;

assign mul_ln49_12_fu_364_p00 = shl_ln49_10_fu_1308_p3;

assign mul_ln49_12_fu_364_p1 = zext_ln49_8_fu_977_p1;

assign mul_ln49_13_fu_368_p0 = mul_ln49_13_fu_368_p00;

assign mul_ln49_13_fu_368_p00 = shl_ln49_6_fu_964_p3;

assign mul_ln49_13_fu_368_p1 = zext_ln49_reg_1631;

assign mul_ln49_14_fu_372_p0 = mul_ln49_14_fu_372_p00;

assign mul_ln49_14_fu_372_p00 = shl_ln49_11_fu_1362_p3;

assign mul_ln49_14_fu_372_p1 = zext_ln49_8_fu_977_p1;

assign mul_ln49_1_fu_320_p0 = mul_ln49_1_fu_320_p00;

assign mul_ln49_1_fu_320_p00 = shl_ln_fu_780_p3;

assign mul_ln49_1_fu_320_p1 = zext_ln49_reg_1631;

assign mul_ln49_2_fu_324_p0 = zext_ln49_8_fu_977_p1;

assign mul_ln49_2_fu_324_p1 = conv34_cast_reg_1623;

assign mul_ln49_3_fu_328_p0 = mul_ln49_3_fu_328_p00;

assign mul_ln49_3_fu_328_p00 = shl_ln49_1_fu_813_p3;

assign mul_ln49_3_fu_328_p1 = zext_ln49_reg_1631;

assign mul_ln49_4_fu_332_p0 = mul_ln49_4_fu_332_p00;

assign mul_ln49_4_fu_332_p00 = shl_ln49_7_fu_1030_p3;

assign mul_ln49_4_fu_332_p1 = zext_ln49_8_fu_977_p1;

assign mul_ln49_5_fu_336_p0 = mul_ln49_5_fu_336_p00;

assign mul_ln49_5_fu_336_p00 = shl_ln49_2_fu_845_p3;

assign mul_ln49_5_fu_336_p1 = zext_ln49_reg_1631;

assign mul_ln49_6_fu_340_p0 = mul_ln49_6_fu_340_p00;

assign mul_ln49_6_fu_340_p00 = shl_ln49_8_fu_1101_p3;

assign mul_ln49_6_fu_340_p1 = zext_ln49_8_fu_977_p1;

assign mul_ln49_7_fu_344_p0 = mul_ln49_7_fu_344_p00;

assign mul_ln49_7_fu_344_p00 = shl_ln49_3_fu_876_p3;

assign mul_ln49_7_fu_344_p1 = zext_ln49_reg_1631;

assign mul_ln49_8_fu_348_p0 = mul_ln49_8_fu_348_p00;

assign mul_ln49_8_fu_348_p00 = shl_ln49_9_fu_1171_p3;

assign mul_ln49_8_fu_348_p1 = zext_ln49_8_fu_977_p1;

assign mul_ln49_9_fu_352_p0 = mul_ln49_9_fu_352_p00;

assign mul_ln49_9_fu_352_p00 = shl_ln49_4_fu_906_p3;

assign mul_ln49_9_fu_352_p1 = zext_ln49_reg_1631;

assign mul_ln49_fu_316_p0 = mul_ln49_fu_316_p00;

assign mul_ln49_fu_316_p00 = tmp_fu_435_p11;

assign mul_ln49_fu_316_p1 = mul_ln49_fu_316_p10;

assign mul_ln49_fu_316_p10 = conv34;

assign select_ln34_1_fu_614_p3 = ((icmp_ln49_5_fu_608_p2[0:0] == 1'b1) ? 4'd7 : 4'd8);

assign select_ln34_fu_480_p3 = ((tmp_13_fu_472_p3[0:0] == 1'b1) ? 4'd7 : 4'd8);

assign select_ln49_10_fu_1197_p3 = ((icmp_ln49_8_reg_1739[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_11_fu_1253_p3 = ((icmp_ln49_4_reg_1697[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_12_fu_1266_p3 = ((icmp_ln49_9_reg_1749[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_13_fu_1321_p3 = ((icmp_ln49_10_reg_1759[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_1_fu_1025_p3 = ((icmp_ln49_5_reg_1713[0:0] == 1'b1) ? arg2_r_7_cast : arg2_r_8_cast);

assign select_ln49_2_fu_757_p3 = ((tmp_13_reg_1652[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_3_fu_987_p3 = ((icmp_ln49_reg_1657[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_4_fu_1000_p3 = ((icmp_ln49_5_reg_1713[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_5_fu_1043_p3 = ((icmp_ln49_1_reg_1667[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_6_fu_1056_p3 = ((icmp_ln49_6_reg_1719[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_7_fu_1114_p3 = ((icmp_ln49_2_reg_1677[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_8_fu_1127_p3 = ((icmp_ln49_7_reg_1729[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_9_fu_1184_p3 = ((icmp_ln49_3_reg_1687[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_fu_775_p3 = ((tmp_12_reg_1642[0:0] == 1'b1) ? arg2_r_7_cast : arg2_r_8_cast);

assign shl_ln49_10_fu_1308_p3 = {{tmp_10_fu_1291_p11}, {1'd0}};

assign shl_ln49_11_fu_1362_p3 = {{tmp_11_fu_1346_p11}, {1'd0}};

assign shl_ln49_1_fu_813_p3 = {{tmp_2_fu_793_p11}, {1'd0}};

assign shl_ln49_2_fu_845_p3 = {{tmp_3_fu_826_p11}, {1'd0}};

assign shl_ln49_3_fu_876_p3 = {{tmp_4_fu_858_p11}, {1'd0}};

assign shl_ln49_4_fu_906_p3 = {{tmp_5_fu_889_p11}, {1'd0}};

assign shl_ln49_5_fu_935_p3 = {{tmp_6_fu_919_p11}, {1'd0}};

assign shl_ln49_6_fu_964_p3 = {{tmp_7_fu_948_p11}, {1'd0}};

assign shl_ln49_7_fu_1030_p3 = {{select_ln49_1_fu_1025_p3}, {1'd0}};

assign shl_ln49_8_fu_1101_p3 = {{tmp_s_fu_1081_p11}, {1'd0}};

assign shl_ln49_9_fu_1171_p3 = {{tmp_1_fu_1152_p11}, {1'd0}};

assign shl_ln49_s_fu_1240_p3 = {{tmp_9_fu_1222_p11}, {1'd0}};

assign shl_ln_fu_780_p3 = {{select_ln49_fu_775_p3}, {1'd0}};

assign sub_ln34_1_fu_556_p2 = (sub_ln34_fu_530_p2 - zext_ln50_3_fu_552_p1);

assign sub_ln34_2_fu_572_p2 = (sub_ln34_1_fu_556_p2 - zext_ln50_4_fu_568_p1);

assign sub_ln34_3_fu_674_p2 = (sub_ln34_9_fu_648_p2 - zext_ln50_7_fu_670_p1);

assign sub_ln34_4_fu_690_p2 = (sub_ln34_3_fu_674_p2 - zext_ln50_8_fu_686_p1);

assign sub_ln34_5_fu_716_p2 = (sub_ln34_4_fu_690_p2 - zext_ln50_9_fu_712_p1);

assign sub_ln34_6_fu_498_p2 = (select_ln34_fu_480_p3 - zext_ln50_fu_494_p1);

assign sub_ln34_7_fu_514_p2 = (sub_ln34_6_fu_498_p2 - zext_ln50_1_fu_510_p1);

assign sub_ln34_8_fu_632_p2 = (select_ln34_1_fu_614_p3 - zext_ln50_5_fu_628_p1);

assign sub_ln34_9_fu_648_p2 = (sub_ln34_8_fu_632_p2 - zext_ln50_6_fu_644_p1);

assign sub_ln34_fu_530_p2 = (sub_ln34_7_fu_514_p2 - zext_ln50_2_fu_526_p1);

assign tmp_13_fu_472_p3 = ap_sig_allocacmp_i_1[32'd3];

assign tmp_14_fu_536_p4 = {{ap_sig_allocacmp_i_1[3:2]}};

assign tmp_15_fu_654_p4 = {{empty_fu_578_p2[3:2]}};

assign tmp_16_fu_696_p4 = {{empty_fu_578_p2[3:1]}};

assign zext_ln49_8_fu_977_p1 = tmp_8_reg_1708;

assign zext_ln49_fu_459_p1 = tmp_fu_435_p11;

assign zext_ln50_1_fu_510_p1 = icmp_ln49_1_fu_504_p2;

assign zext_ln50_2_fu_526_p1 = icmp_ln49_2_fu_520_p2;

assign zext_ln50_3_fu_552_p1 = icmp_ln49_3_fu_546_p2;

assign zext_ln50_4_fu_568_p1 = icmp_ln49_4_fu_562_p2;

assign zext_ln50_5_fu_628_p1 = icmp_ln49_6_fu_622_p2;

assign zext_ln50_6_fu_644_p1 = icmp_ln49_7_fu_638_p2;

assign zext_ln50_7_fu_670_p1 = icmp_ln49_8_fu_664_p2;

assign zext_ln50_8_fu_686_p1 = icmp_ln49_9_fu_680_p2;

assign zext_ln50_9_fu_712_p1 = icmp_ln49_10_fu_706_p2;

assign zext_ln50_fu_494_p1 = icmp_ln49_fu_488_p2;

always @ (posedge ap_clk) begin
    conv34_cast_reg_1623[127:64] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    zext_ln49_reg_1631[127:64] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //test_test_Pipeline_VITIS_LOOP_36_1
