// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_36_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arg1_r_1_reload,
        arg1_r_2_reload,
        arg1_r_3_reload,
        arg1_r_4_reload,
        arg1_r_5_reload,
        arg1_r_6_reload,
        arg1_r_7_reload,
        arg1_r_8_reload,
        conv34,
        arg2_r_7_cast,
        arg2_r_8_cast,
        arg2_r_6_cast,
        arg2_r_5_cast,
        arg2_r_4_cast,
        arg2_r_3_cast,
        arg2_r_2_cast,
        arg2_r_1_cast,
        add_3_1251_out,
        add_3_1251_out_ap_vld,
        add_3250_out,
        add_3250_out_ap_vld,
        add_2_1249_out,
        add_2_1249_out_ap_vld,
        add_2248_out,
        add_2248_out_ap_vld,
        add_1_1247_out,
        add_1_1247_out_ap_vld,
        add_1246_out,
        add_1246_out_ap_vld,
        add_1159245_out,
        add_1159245_out_ap_vld,
        add244_out,
        add244_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] arg1_r_1_reload;
input  [63:0] arg1_r_2_reload;
input  [63:0] arg1_r_3_reload;
input  [63:0] arg1_r_4_reload;
input  [63:0] arg1_r_5_reload;
input  [63:0] arg1_r_6_reload;
input  [63:0] arg1_r_7_reload;
input  [63:0] arg1_r_8_reload;
input  [63:0] conv34;
input  [62:0] arg2_r_7_cast;
input  [62:0] arg2_r_8_cast;
input  [62:0] arg2_r_6_cast;
input  [62:0] arg2_r_5_cast;
input  [62:0] arg2_r_4_cast;
input  [62:0] arg2_r_3_cast;
input  [62:0] arg2_r_2_cast;
input  [62:0] arg2_r_1_cast;
output  [127:0] add_3_1251_out;
output   add_3_1251_out_ap_vld;
output  [127:0] add_3250_out;
output   add_3250_out_ap_vld;
output  [127:0] add_2_1249_out;
output   add_2_1249_out_ap_vld;
output  [127:0] add_2248_out;
output   add_2248_out_ap_vld;
output  [127:0] add_1_1247_out;
output   add_1_1247_out_ap_vld;
output  [127:0] add_1246_out;
output   add_1246_out_ap_vld;
output  [127:0] add_1159245_out;
output   add_1159245_out_ap_vld;
output  [127:0] add244_out;
output   add244_out_ap_vld;

reg ap_idle;
reg add_3_1251_out_ap_vld;
reg add_3250_out_ap_vld;
reg add_2_1249_out_ap_vld;
reg add_2248_out_ap_vld;
reg add_1_1247_out_ap_vld;
reg add_1246_out_ap_vld;
reg add_1159245_out_ap_vld;
reg add244_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln36_fu_396_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [127:0] conv34_cast_fu_344_p1;
reg   [127:0] conv34_cast_reg_1153;
reg   [0:0] icmp_ln36_reg_1158;
wire   [63:0] tmp_fu_402_p11;
reg   [63:0] tmp_reg_1162;
reg   [0:0] tmp_1_reg_1167;
wire   [0:0] tmp_8_fu_434_p3;
reg   [0:0] tmp_8_reg_1172;
reg   [0:0] tmp_8_reg_1172_pp0_iter1_reg;
wire   [0:0] icmp_ln49_fu_442_p2;
reg   [0:0] icmp_ln49_reg_1177;
reg   [0:0] icmp_ln49_reg_1177_pp0_iter1_reg;
wire   [3:0] sub_ln34_3_fu_460_p2;
reg   [3:0] sub_ln34_3_reg_1182;
wire   [0:0] icmp_ln49_1_fu_466_p2;
reg   [0:0] icmp_ln49_1_reg_1187;
reg   [0:0] icmp_ln49_1_reg_1187_pp0_iter1_reg;
wire   [3:0] sub_ln34_4_fu_476_p2;
reg   [3:0] sub_ln34_4_reg_1192;
wire   [0:0] icmp_ln49_2_fu_482_p2;
reg   [0:0] icmp_ln49_2_reg_1197;
reg   [0:0] icmp_ln49_2_reg_1197_pp0_iter1_reg;
wire   [3:0] sub_ln34_5_fu_492_p2;
reg   [3:0] sub_ln34_5_reg_1202;
wire   [0:0] icmp_ln49_3_fu_508_p2;
reg   [0:0] icmp_ln49_3_reg_1207;
reg   [0:0] icmp_ln49_3_reg_1207_pp0_iter1_reg;
wire   [3:0] sub_ln34_fu_518_p2;
reg   [3:0] sub_ln34_reg_1212;
wire   [0:0] icmp_ln49_4_fu_524_p2;
reg   [0:0] icmp_ln49_4_reg_1218;
reg   [0:0] icmp_ln49_4_reg_1218_pp0_iter1_reg;
wire   [0:0] icmp_ln49_5_fu_540_p2;
reg   [0:0] icmp_ln49_5_reg_1224;
reg   [0:0] icmp_ln49_5_reg_1224_pp0_iter1_reg;
wire   [127:0] mul_ln49_fu_312_p2;
reg   [127:0] mul_ln49_reg_1230;
wire   [127:0] mul_ln49_1_fu_316_p2;
reg   [127:0] mul_ln49_1_reg_1235;
wire   [127:0] mul_ln49_2_fu_320_p2;
reg   [127:0] mul_ln49_2_reg_1240;
wire   [127:0] mul_ln49_3_fu_324_p2;
reg   [127:0] mul_ln49_3_reg_1245;
wire   [127:0] mul_ln49_4_fu_328_p2;
reg   [127:0] mul_ln49_4_reg_1250;
wire   [127:0] mul_ln49_5_fu_332_p2;
reg   [127:0] mul_ln49_5_reg_1255;
wire   [127:0] mul_ln49_6_fu_336_p2;
reg   [127:0] mul_ln49_6_reg_1260;
wire   [127:0] mul_ln49_7_fu_340_p2;
reg   [127:0] mul_ln49_7_reg_1265;
reg   [127:0] add244_fu_118;
wire   [127:0] add_ln49_fu_824_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [127:0] add_1159245_fu_122;
wire   [127:0] add_ln49_1_fu_842_p2;
reg   [127:0] add_1246_fu_126;
wire   [127:0] add_ln49_2_fu_860_p2;
reg   [127:0] add_1_1247_fu_130;
wire   [127:0] add_ln49_3_fu_878_p2;
reg   [127:0] add_2248_fu_134;
wire   [127:0] add_ln49_4_fu_896_p2;
reg   [127:0] add_2_1249_fu_138;
wire   [127:0] add_ln49_5_fu_914_p2;
reg   [127:0] add_3250_fu_142;
wire   [127:0] add_ln49_6_fu_932_p2;
reg   [127:0] add_3_1251_fu_146;
wire   [127:0] add_ln49_7_fu_938_p2;
reg   [3:0] i_fu_150;
wire   [3:0] add_ln36_fu_546_p2;
reg   [3:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] mul_ln49_fu_312_p0;
wire   [127:0] zext_ln49_fu_557_p1;
wire   [63:0] mul_ln49_fu_312_p1;
wire   [63:0] mul_ln49_1_fu_316_p0;
wire   [63:0] mul_ln49_1_fu_316_p1;
wire   [63:0] mul_ln49_2_fu_320_p0;
wire   [63:0] mul_ln49_2_fu_320_p1;
wire   [63:0] mul_ln49_3_fu_324_p0;
wire   [63:0] mul_ln49_3_fu_324_p1;
wire   [63:0] mul_ln49_4_fu_328_p0;
wire   [63:0] mul_ln49_4_fu_328_p1;
wire   [63:0] mul_ln49_5_fu_332_p0;
wire   [63:0] mul_ln49_5_fu_332_p1;
wire   [63:0] mul_ln49_6_fu_336_p0;
wire   [63:0] mul_ln49_6_fu_336_p1;
wire   [63:0] mul_ln49_7_fu_340_p0;
wire   [63:0] mul_ln49_7_fu_340_p1;
wire   [3:0] select_ln50_fu_448_p3;
wire   [3:0] zext_ln50_fu_456_p1;
wire   [3:0] zext_ln50_1_fu_472_p1;
wire   [3:0] zext_ln50_2_fu_488_p1;
wire   [1:0] tmp_9_fu_498_p4;
wire   [3:0] zext_ln50_3_fu_514_p1;
wire   [2:0] tmp_10_fu_530_p4;
wire   [62:0] select_ln49_fu_568_p3;
wire   [63:0] shl_ln_fu_573_p3;
wire   [62:0] tmp_2_fu_586_p11;
wire   [63:0] shl_ln49_1_fu_606_p3;
wire   [62:0] tmp_3_fu_619_p11;
wire   [63:0] shl_ln49_2_fu_638_p3;
wire   [62:0] tmp_4_fu_651_p11;
wire   [63:0] shl_ln49_3_fu_669_p3;
wire   [62:0] tmp_5_fu_682_p11;
wire   [63:0] shl_ln49_4_fu_699_p3;
wire   [3:0] zext_ln50_4_fu_712_p1;
wire   [3:0] sub_ln34_1_fu_715_p2;
wire   [62:0] tmp_6_fu_720_p11;
wire   [63:0] shl_ln49_5_fu_737_p3;
wire   [3:0] zext_ln50_5_fu_750_p1;
wire   [3:0] tmp_7_fu_759_p10;
wire   [62:0] tmp_7_fu_759_p11;
wire   [63:0] shl_ln49_6_fu_775_p3;
wire   [127:0] select_ln49_1_fu_812_p3;
wire   [127:0] and_ln49_fu_819_p2;
wire   [127:0] select_ln49_2_fu_830_p3;
wire   [127:0] and_ln49_1_fu_837_p2;
wire   [127:0] select_ln49_3_fu_848_p3;
wire   [127:0] and_ln49_2_fu_855_p2;
wire   [127:0] select_ln49_4_fu_866_p3;
wire   [127:0] and_ln49_3_fu_873_p2;
wire   [127:0] select_ln49_5_fu_884_p3;
wire   [127:0] and_ln49_4_fu_891_p2;
wire   [127:0] select_ln49_6_fu_902_p3;
wire   [127:0] and_ln49_5_fu_909_p2;
wire   [127:0] select_ln49_7_fu_920_p3;
wire   [127:0] and_ln49_6_fu_927_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [127:0] mul_ln49_1_fu_316_p00;
wire   [127:0] mul_ln49_2_fu_320_p00;
wire   [127:0] mul_ln49_3_fu_324_p00;
wire   [127:0] mul_ln49_4_fu_328_p00;
wire   [127:0] mul_ln49_5_fu_332_p00;
wire   [127:0] mul_ln49_6_fu_336_p00;
wire   [127:0] mul_ln49_7_fu_340_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U23(
    .din0(mul_ln49_fu_312_p0),
    .din1(mul_ln49_fu_312_p1),
    .dout(mul_ln49_fu_312_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U24(
    .din0(mul_ln49_1_fu_316_p0),
    .din1(mul_ln49_1_fu_316_p1),
    .dout(mul_ln49_1_fu_316_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U25(
    .din0(mul_ln49_2_fu_320_p0),
    .din1(mul_ln49_2_fu_320_p1),
    .dout(mul_ln49_2_fu_320_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U26(
    .din0(mul_ln49_3_fu_324_p0),
    .din1(mul_ln49_3_fu_324_p1),
    .dout(mul_ln49_3_fu_324_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U27(
    .din0(mul_ln49_4_fu_328_p0),
    .din1(mul_ln49_4_fu_328_p1),
    .dout(mul_ln49_4_fu_328_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U28(
    .din0(mul_ln49_5_fu_332_p0),
    .din1(mul_ln49_5_fu_332_p1),
    .dout(mul_ln49_5_fu_332_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U29(
    .din0(mul_ln49_6_fu_336_p0),
    .din1(mul_ln49_6_fu_336_p1),
    .dout(mul_ln49_6_fu_336_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U30(
    .din0(mul_ln49_7_fu_340_p0),
    .din1(mul_ln49_7_fu_340_p1),
    .dout(mul_ln49_7_fu_340_p2)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U31(
    .din0(64'd0),
    .din1(arg1_r_1_reload),
    .din2(arg1_r_2_reload),
    .din3(arg1_r_3_reload),
    .din4(arg1_r_4_reload),
    .din5(arg1_r_5_reload),
    .din6(arg1_r_6_reload),
    .din7(arg1_r_7_reload),
    .din8(arg1_r_8_reload),
    .din9(ap_sig_allocacmp_i_1),
    .dout(tmp_fu_402_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U32(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(63'd0),
    .din5(63'd0),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_3_reg_1182),
    .dout(tmp_2_fu_586_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U33(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(63'd0),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_4_reg_1192),
    .dout(tmp_3_fu_619_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U34(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_5_reg_1202),
    .dout(tmp_4_fu_651_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U35(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(arg2_r_3_cast),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_reg_1212),
    .dout(tmp_5_fu_682_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U36(
    .din0(63'd0),
    .din1(63'd0),
    .din2(arg2_r_2_cast),
    .din3(arg2_r_3_cast),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_1_fu_715_p2),
    .dout(tmp_6_fu_720_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U37(
    .din0(63'd0),
    .din1(arg2_r_1_cast),
    .din2(arg2_r_2_cast),
    .din3(arg2_r_3_cast),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(tmp_7_fu_759_p10),
    .dout(tmp_7_fu_759_p11)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            add244_fu_118 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add244_fu_118 <= add_ln49_fu_824_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            add_1159245_fu_122 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add_1159245_fu_122 <= add_ln49_1_fu_842_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            add_1246_fu_126 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add_1246_fu_126 <= add_ln49_2_fu_860_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            add_1_1247_fu_130 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add_1_1247_fu_130 <= add_ln49_3_fu_878_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            add_2248_fu_134 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add_2248_fu_134 <= add_ln49_4_fu_896_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            add_2_1249_fu_138 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add_2_1249_fu_138 <= add_ln49_5_fu_914_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            add_3250_fu_142 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add_3250_fu_142 <= add_ln49_6_fu_932_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            add_3_1251_fu_146 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add_3_1251_fu_146 <= add_ln49_7_fu_938_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln36_fu_396_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_150 <= add_ln36_fu_546_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_150 <= 4'd8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        conv34_cast_reg_1153[63 : 0] <= conv34_cast_fu_344_p1[63 : 0];
        icmp_ln36_reg_1158 <= icmp_ln36_fu_396_p2;
        icmp_ln49_1_reg_1187_pp0_iter1_reg <= icmp_ln49_1_reg_1187;
        icmp_ln49_2_reg_1197_pp0_iter1_reg <= icmp_ln49_2_reg_1197;
        icmp_ln49_3_reg_1207_pp0_iter1_reg <= icmp_ln49_3_reg_1207;
        icmp_ln49_4_reg_1218_pp0_iter1_reg <= icmp_ln49_4_reg_1218;
        icmp_ln49_5_reg_1224_pp0_iter1_reg <= icmp_ln49_5_reg_1224;
        icmp_ln49_reg_1177_pp0_iter1_reg <= icmp_ln49_reg_1177;
        mul_ln49_1_reg_1235 <= mul_ln49_1_fu_316_p2;
        mul_ln49_2_reg_1240 <= mul_ln49_2_fu_320_p2;
        mul_ln49_3_reg_1245 <= mul_ln49_3_fu_324_p2;
        mul_ln49_4_reg_1250 <= mul_ln49_4_fu_328_p2;
        mul_ln49_5_reg_1255 <= mul_ln49_5_fu_332_p2;
        mul_ln49_6_reg_1260 <= mul_ln49_6_fu_336_p2;
        mul_ln49_7_reg_1265 <= mul_ln49_7_fu_340_p2;
        mul_ln49_reg_1230 <= mul_ln49_fu_312_p2;
        tmp_8_reg_1172_pp0_iter1_reg <= tmp_8_reg_1172;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_396_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln49_1_reg_1187 <= icmp_ln49_1_fu_466_p2;
        icmp_ln49_2_reg_1197 <= icmp_ln49_2_fu_482_p2;
        icmp_ln49_3_reg_1207 <= icmp_ln49_3_fu_508_p2;
        icmp_ln49_4_reg_1218 <= icmp_ln49_4_fu_524_p2;
        icmp_ln49_5_reg_1224 <= icmp_ln49_5_fu_540_p2;
        icmp_ln49_reg_1177 <= icmp_ln49_fu_442_p2;
        sub_ln34_3_reg_1182 <= sub_ln34_3_fu_460_p2;
        sub_ln34_4_reg_1192 <= sub_ln34_4_fu_476_p2;
        sub_ln34_5_reg_1202 <= sub_ln34_5_fu_492_p2;
        sub_ln34_reg_1212 <= sub_ln34_fu_518_p2;
        tmp_1_reg_1167 <= ap_sig_allocacmp_i_1[32'd3];
        tmp_8_reg_1172 <= ap_sig_allocacmp_i_1[32'd3];
        tmp_reg_1162 <= tmp_fu_402_p11;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1158 == 1'd1))) begin
        add244_out_ap_vld = 1'b1;
    end else begin
        add244_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1158 == 1'd1))) begin
        add_1159245_out_ap_vld = 1'b1;
    end else begin
        add_1159245_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1158 == 1'd1))) begin
        add_1246_out_ap_vld = 1'b1;
    end else begin
        add_1246_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1158 == 1'd1))) begin
        add_1_1247_out_ap_vld = 1'b1;
    end else begin
        add_1_1247_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1158 == 1'd1))) begin
        add_2248_out_ap_vld = 1'b1;
    end else begin
        add_2248_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1158 == 1'd1))) begin
        add_2_1249_out_ap_vld = 1'b1;
    end else begin
        add_2_1249_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1158 == 1'd1))) begin
        add_3250_out_ap_vld = 1'b1;
    end else begin
        add_3250_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1158 == 1'd1))) begin
        add_3_1251_out_ap_vld = 1'b1;
    end else begin
        add_3_1251_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_396_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 4'd8;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_150;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add244_out = add244_fu_118;

assign add_1159245_out = add_1159245_fu_122;

assign add_1246_out = add_1246_fu_126;

assign add_1_1247_out = add_1_1247_fu_130;

assign add_2248_out = add_2248_fu_134;

assign add_2_1249_out = add_2_1249_fu_138;

assign add_3250_out = add_3250_fu_142;

assign add_3_1251_out = add_3_1251_fu_146;

assign add_ln36_fu_546_p2 = ($signed(ap_sig_allocacmp_i_1) + $signed(4'd15));

assign add_ln49_1_fu_842_p2 = (and_ln49_1_fu_837_p2 + add_1159245_fu_122);

assign add_ln49_2_fu_860_p2 = (and_ln49_2_fu_855_p2 + add_1246_fu_126);

assign add_ln49_3_fu_878_p2 = (and_ln49_3_fu_873_p2 + add_1_1247_fu_130);

assign add_ln49_4_fu_896_p2 = (and_ln49_4_fu_891_p2 + add_2248_fu_134);

assign add_ln49_5_fu_914_p2 = (and_ln49_5_fu_909_p2 + add_2_1249_fu_138);

assign add_ln49_6_fu_932_p2 = (and_ln49_6_fu_927_p2 + add_3250_fu_142);

assign add_ln49_7_fu_938_p2 = (mul_ln49_7_reg_1265 + add_3_1251_fu_146);

assign add_ln49_fu_824_p2 = (and_ln49_fu_819_p2 + add244_fu_118);

assign and_ln49_1_fu_837_p2 = (select_ln49_2_fu_830_p3 & mul_ln49_1_reg_1235);

assign and_ln49_2_fu_855_p2 = (select_ln49_3_fu_848_p3 & mul_ln49_2_reg_1240);

assign and_ln49_3_fu_873_p2 = (select_ln49_4_fu_866_p3 & mul_ln49_3_reg_1245);

assign and_ln49_4_fu_891_p2 = (select_ln49_5_fu_884_p3 & mul_ln49_4_reg_1250);

assign and_ln49_5_fu_909_p2 = (select_ln49_6_fu_902_p3 & mul_ln49_5_reg_1255);

assign and_ln49_6_fu_927_p2 = (select_ln49_7_fu_920_p3 & mul_ln49_6_reg_1260);

assign and_ln49_fu_819_p2 = (select_ln49_1_fu_812_p3 & mul_ln49_reg_1230);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv34_cast_fu_344_p1 = conv34;

assign icmp_ln36_fu_396_p2 = ((ap_sig_allocacmp_i_1 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_1_fu_466_p2 = ((ap_sig_allocacmp_i_1 > 4'd5) ? 1'b1 : 1'b0);

assign icmp_ln49_2_fu_482_p2 = ((ap_sig_allocacmp_i_1 > 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln49_3_fu_508_p2 = ((tmp_9_fu_498_p4 != 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_4_fu_524_p2 = ((ap_sig_allocacmp_i_1 > 4'd2) ? 1'b1 : 1'b0);

assign icmp_ln49_5_fu_540_p2 = ((tmp_10_fu_530_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_442_p2 = ((ap_sig_allocacmp_i_1 > 4'd6) ? 1'b1 : 1'b0);

assign mul_ln49_1_fu_316_p0 = mul_ln49_1_fu_316_p00;

assign mul_ln49_1_fu_316_p00 = shl_ln_fu_573_p3;

assign mul_ln49_1_fu_316_p1 = zext_ln49_fu_557_p1;

assign mul_ln49_2_fu_320_p0 = mul_ln49_2_fu_320_p00;

assign mul_ln49_2_fu_320_p00 = shl_ln49_1_fu_606_p3;

assign mul_ln49_2_fu_320_p1 = zext_ln49_fu_557_p1;

assign mul_ln49_3_fu_324_p0 = mul_ln49_3_fu_324_p00;

assign mul_ln49_3_fu_324_p00 = shl_ln49_2_fu_638_p3;

assign mul_ln49_3_fu_324_p1 = zext_ln49_fu_557_p1;

assign mul_ln49_4_fu_328_p0 = mul_ln49_4_fu_328_p00;

assign mul_ln49_4_fu_328_p00 = shl_ln49_3_fu_669_p3;

assign mul_ln49_4_fu_328_p1 = zext_ln49_fu_557_p1;

assign mul_ln49_5_fu_332_p0 = mul_ln49_5_fu_332_p00;

assign mul_ln49_5_fu_332_p00 = shl_ln49_4_fu_699_p3;

assign mul_ln49_5_fu_332_p1 = zext_ln49_fu_557_p1;

assign mul_ln49_6_fu_336_p0 = mul_ln49_6_fu_336_p00;

assign mul_ln49_6_fu_336_p00 = shl_ln49_5_fu_737_p3;

assign mul_ln49_6_fu_336_p1 = zext_ln49_fu_557_p1;

assign mul_ln49_7_fu_340_p0 = mul_ln49_7_fu_340_p00;

assign mul_ln49_7_fu_340_p00 = shl_ln49_6_fu_775_p3;

assign mul_ln49_7_fu_340_p1 = zext_ln49_fu_557_p1;

assign mul_ln49_fu_312_p0 = zext_ln49_fu_557_p1;

assign mul_ln49_fu_312_p1 = conv34_cast_reg_1153;

assign select_ln49_1_fu_812_p3 = ((tmp_8_reg_1172_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_2_fu_830_p3 = ((icmp_ln49_reg_1177_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_3_fu_848_p3 = ((icmp_ln49_1_reg_1187_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_4_fu_866_p3 = ((icmp_ln49_2_reg_1197_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_5_fu_884_p3 = ((icmp_ln49_3_reg_1207_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_6_fu_902_p3 = ((icmp_ln49_4_reg_1218_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_7_fu_920_p3 = ((icmp_ln49_5_reg_1224_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_fu_568_p3 = ((tmp_1_reg_1167[0:0] == 1'b1) ? arg2_r_7_cast : arg2_r_8_cast);

assign select_ln50_fu_448_p3 = ((tmp_8_fu_434_p3[0:0] == 1'b1) ? 4'd7 : 4'd8);

assign shl_ln49_1_fu_606_p3 = {{tmp_2_fu_586_p11}, {1'd0}};

assign shl_ln49_2_fu_638_p3 = {{tmp_3_fu_619_p11}, {1'd0}};

assign shl_ln49_3_fu_669_p3 = {{tmp_4_fu_651_p11}, {1'd0}};

assign shl_ln49_4_fu_699_p3 = {{tmp_5_fu_682_p11}, {1'd0}};

assign shl_ln49_5_fu_737_p3 = {{tmp_6_fu_720_p11}, {1'd0}};

assign shl_ln49_6_fu_775_p3 = {{tmp_7_fu_759_p11}, {1'd0}};

assign shl_ln_fu_573_p3 = {{select_ln49_fu_568_p3}, {1'd0}};

assign sub_ln34_1_fu_715_p2 = (sub_ln34_reg_1212 - zext_ln50_4_fu_712_p1);

assign sub_ln34_3_fu_460_p2 = (select_ln50_fu_448_p3 - zext_ln50_fu_456_p1);

assign sub_ln34_4_fu_476_p2 = (sub_ln34_3_fu_460_p2 - zext_ln50_1_fu_472_p1);

assign sub_ln34_5_fu_492_p2 = (sub_ln34_4_fu_476_p2 - zext_ln50_2_fu_488_p1);

assign sub_ln34_fu_518_p2 = (sub_ln34_5_fu_492_p2 - zext_ln50_3_fu_514_p1);

assign tmp_10_fu_530_p4 = {{ap_sig_allocacmp_i_1[3:1]}};

assign tmp_7_fu_759_p10 = (sub_ln34_1_fu_715_p2 - zext_ln50_5_fu_750_p1);

assign tmp_8_fu_434_p3 = ap_sig_allocacmp_i_1[32'd3];

assign tmp_9_fu_498_p4 = {{ap_sig_allocacmp_i_1[3:2]}};

assign zext_ln49_fu_557_p1 = tmp_reg_1162;

assign zext_ln50_1_fu_472_p1 = icmp_ln49_1_fu_466_p2;

assign zext_ln50_2_fu_488_p1 = icmp_ln49_2_fu_482_p2;

assign zext_ln50_3_fu_514_p1 = icmp_ln49_3_fu_508_p2;

assign zext_ln50_4_fu_712_p1 = icmp_ln49_4_reg_1218;

assign zext_ln50_5_fu_750_p1 = icmp_ln49_5_reg_1224;

assign zext_ln50_fu_456_p1 = icmp_ln49_fu_442_p2;

always @ (posedge ap_clk) begin
    conv34_cast_reg_1153[127:64] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //test_test_Pipeline_VITIS_LOOP_36_1
