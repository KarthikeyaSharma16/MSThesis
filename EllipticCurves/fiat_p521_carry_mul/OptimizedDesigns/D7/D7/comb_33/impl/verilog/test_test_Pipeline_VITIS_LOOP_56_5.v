// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_56_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr_7,
        arr_6,
        arr_5,
        arr_4,
        arr_3,
        arr_2,
        arr_1,
        arr,
        arg1_r_reload,
        arg1_r_1_reload,
        arg1_r_2_reload,
        arg1_r_3_reload,
        arg1_r_4_reload,
        arg1_r_5_reload,
        arg1_r_6_reload,
        arg1_r_7_reload,
        arg1_r_8_reload,
        arg2_r_reload,
        arg2_r_1_reload,
        arg2_r_2_reload,
        arg2_r_3_reload,
        arg2_r_4_reload,
        arg2_r_5_reload,
        arg2_r_6_reload,
        arg2_r_7_reload,
        arg2_r_8_reload,
        add114_3_1147_out,
        add114_3_1147_out_ap_vld,
        add114_3146_out,
        add114_3146_out_ap_vld,
        add114_2_1145_out,
        add114_2_1145_out_ap_vld,
        add114_2144_out,
        add114_2144_out_ap_vld,
        add114_1_1143_out,
        add114_1_1143_out_ap_vld,
        add114_1142_out,
        add114_1142_out_ap_vld,
        add114_127141_out,
        add114_127141_out_ap_vld,
        add114140_out,
        add114140_out_ap_vld,
        add87139_out,
        add87139_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] arr_7;
input  [127:0] arr_6;
input  [127:0] arr_5;
input  [127:0] arr_4;
input  [127:0] arr_3;
input  [127:0] arr_2;
input  [127:0] arr_1;
input  [127:0] arr;
input  [63:0] arg1_r_reload;
input  [63:0] arg1_r_1_reload;
input  [63:0] arg1_r_2_reload;
input  [63:0] arg1_r_3_reload;
input  [63:0] arg1_r_4_reload;
input  [63:0] arg1_r_5_reload;
input  [63:0] arg1_r_6_reload;
input  [63:0] arg1_r_7_reload;
input  [63:0] arg1_r_8_reload;
input  [63:0] arg2_r_reload;
input  [63:0] arg2_r_1_reload;
input  [63:0] arg2_r_2_reload;
input  [63:0] arg2_r_3_reload;
input  [63:0] arg2_r_4_reload;
input  [63:0] arg2_r_5_reload;
input  [63:0] arg2_r_6_reload;
input  [63:0] arg2_r_7_reload;
input  [63:0] arg2_r_8_reload;
output  [127:0] add114_3_1147_out;
output   add114_3_1147_out_ap_vld;
output  [127:0] add114_3146_out;
output   add114_3146_out_ap_vld;
output  [127:0] add114_2_1145_out;
output   add114_2_1145_out_ap_vld;
output  [127:0] add114_2144_out;
output   add114_2144_out_ap_vld;
output  [127:0] add114_1_1143_out;
output   add114_1_1143_out_ap_vld;
output  [127:0] add114_1142_out;
output   add114_1142_out_ap_vld;
output  [127:0] add114_127141_out;
output   add114_127141_out_ap_vld;
output  [127:0] add114140_out;
output   add114140_out_ap_vld;
output  [127:0] add87139_out;
output   add87139_out_ap_vld;

reg ap_idle;
reg add114_3_1147_out_ap_vld;
reg add114_3146_out_ap_vld;
reg add114_2_1145_out_ap_vld;
reg add114_2144_out_ap_vld;
reg add114_1_1143_out_ap_vld;
reg add114_1142_out_ap_vld;
reg add114_127141_out_ap_vld;
reg add114140_out_ap_vld;
reg add87139_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_10_fu_488_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_10_reg_1344;
wire   [3:0] trunc_ln34_fu_496_p1;
reg   [3:0] trunc_ln34_reg_1348;
wire   [0:0] icmp_ln62_fu_510_p2;
reg   [0:0] icmp_ln62_reg_1353;
reg   [0:0] icmp_ln62_reg_1353_pp0_iter1_reg;
wire   [3:0] and_ln34_fu_530_p2;
reg   [3:0] and_ln34_reg_1358;
wire   [63:0] tmp_fu_536_p11;
reg   [63:0] tmp_reg_1363;
wire   [3:0] sub_ln67_3_fu_564_p2;
reg   [3:0] sub_ln67_3_reg_1368;
wire   [0:0] icmp_ln70_fu_570_p2;
reg   [0:0] icmp_ln70_reg_1373;
reg   [0:0] icmp_ln70_reg_1373_pp0_iter1_reg;
wire   [3:0] sub_ln67_4_fu_580_p2;
reg   [3:0] sub_ln67_4_reg_1378;
wire   [0:0] icmp_ln70_1_fu_586_p2;
reg   [0:0] icmp_ln70_1_reg_1383;
reg   [0:0] icmp_ln70_1_reg_1383_pp0_iter1_reg;
wire   [3:0] sub_ln67_5_fu_596_p2;
reg   [3:0] sub_ln67_5_reg_1388;
wire   [0:0] icmp_ln70_2_fu_602_p2;
reg   [0:0] icmp_ln70_2_reg_1393;
reg   [0:0] icmp_ln70_2_reg_1393_pp0_iter1_reg;
wire   [3:0] sub_ln67_6_fu_612_p2;
reg   [3:0] sub_ln67_6_reg_1398;
wire   [0:0] icmp_ln70_3_fu_628_p2;
reg   [0:0] icmp_ln70_3_reg_1403;
reg   [0:0] icmp_ln70_3_reg_1403_pp0_iter1_reg;
wire   [3:0] sub_ln67_fu_638_p2;
reg   [3:0] sub_ln67_reg_1408;
wire   [0:0] icmp_ln70_4_fu_644_p2;
reg   [0:0] icmp_ln70_4_reg_1414;
reg   [0:0] icmp_ln70_4_reg_1414_pp0_iter1_reg;
wire   [0:0] icmp_ln70_5_fu_660_p2;
reg   [0:0] icmp_ln70_5_reg_1420;
reg   [0:0] icmp_ln70_5_reg_1420_pp0_iter1_reg;
wire   [0:0] icmp_ln70_6_fu_666_p2;
reg   [0:0] icmp_ln70_6_reg_1426;
reg   [0:0] icmp_ln70_6_reg_1426_pp0_iter1_reg;
wire   [127:0] mul_ln63_fu_399_p2;
reg   [127:0] mul_ln63_reg_1431;
wire   [127:0] mul_ln70_fu_403_p2;
reg   [127:0] mul_ln70_reg_1436;
wire   [127:0] mul_ln70_1_fu_407_p2;
reg   [127:0] mul_ln70_1_reg_1441;
wire   [127:0] mul_ln70_2_fu_411_p2;
reg   [127:0] mul_ln70_2_reg_1446;
wire   [127:0] mul_ln70_3_fu_415_p2;
reg   [127:0] mul_ln70_3_reg_1451;
wire   [127:0] mul_ln70_4_fu_419_p2;
reg   [127:0] mul_ln70_4_reg_1456;
wire   [127:0] mul_ln70_5_fu_423_p2;
reg   [127:0] mul_ln70_5_reg_1461;
wire   [127:0] mul_ln70_6_fu_427_p2;
reg   [127:0] mul_ln70_6_reg_1466;
wire   [127:0] mul_ln70_7_fu_431_p2;
reg   [127:0] mul_ln70_7_reg_1471;
reg   [127:0] add87139_fu_140;
wire   [127:0] add_ln63_fu_918_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [127:0] add114140_fu_144;
wire   [127:0] add_ln70_fu_935_p2;
reg   [127:0] add114_127141_fu_148;
wire   [127:0] add_ln70_1_fu_953_p2;
reg   [127:0] add114_1142_fu_152;
wire   [127:0] add_ln70_2_fu_971_p2;
reg   [127:0] add114_1_1143_fu_156;
wire   [127:0] add_ln70_3_fu_989_p2;
reg   [127:0] add114_2144_fu_160;
wire   [127:0] add_ln70_4_fu_1007_p2;
reg   [127:0] add114_2_1145_fu_164;
wire   [127:0] add_ln70_5_fu_1025_p2;
reg   [127:0] add114_3146_fu_168;
wire   [127:0] add_ln70_6_fu_1043_p2;
reg   [127:0] add114_3_1147_fu_172;
wire   [127:0] add_ln70_7_fu_1061_p2;
reg   [4:0] i_fu_176;
wire   [4:0] add_ln56_fu_672_p2;
reg   [4:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] mul_ln63_fu_399_p0;
wire   [63:0] mul_ln63_fu_399_p1;
wire   [127:0] zext_ln63_fu_688_p1;
wire   [63:0] mul_ln70_fu_403_p0;
wire   [63:0] mul_ln70_fu_403_p1;
wire   [63:0] mul_ln70_1_fu_407_p0;
wire   [63:0] mul_ln70_1_fu_407_p1;
wire   [63:0] mul_ln70_2_fu_411_p0;
wire   [63:0] mul_ln70_2_fu_411_p1;
wire   [63:0] mul_ln70_3_fu_415_p0;
wire   [63:0] mul_ln70_3_fu_415_p1;
wire   [63:0] mul_ln70_4_fu_419_p0;
wire   [63:0] mul_ln70_4_fu_419_p1;
wire   [63:0] mul_ln70_5_fu_423_p0;
wire   [63:0] mul_ln70_5_fu_423_p1;
wire   [63:0] mul_ln70_6_fu_427_p0;
wire   [63:0] mul_ln70_6_fu_427_p1;
wire   [63:0] mul_ln70_7_fu_431_p0;
wire   [63:0] mul_ln70_7_fu_431_p1;
wire   [1:0] tmp_11_fu_500_p4;
wire   [3:0] sub_ln62_fu_516_p2;
wire   [3:0] select_ln62_fu_522_p3;
wire   [3:0] zext_ln71_fu_560_p1;
wire   [3:0] zext_ln71_1_fu_576_p1;
wire   [3:0] zext_ln71_2_fu_592_p1;
wire   [3:0] zext_ln71_3_fu_608_p1;
wire   [2:0] tmp_12_fu_618_p4;
wire   [3:0] zext_ln71_4_fu_634_p1;
wire   [3:0] tmp_13_fu_650_p4;
wire   [3:0] tmp_1_fu_700_p10;
wire   [63:0] tmp_1_fu_700_p11;
wire   [63:0] tmp_2_fu_720_p11;
wire   [63:0] tmp_3_fu_739_p11;
wire   [63:0] tmp_4_fu_758_p11;
wire   [63:0] tmp_5_fu_777_p11;
wire   [63:0] tmp_6_fu_796_p11;
wire   [63:0] tmp_7_fu_815_p11;
wire   [3:0] zext_ln71_5_fu_834_p1;
wire   [3:0] sub_ln67_1_fu_837_p2;
wire   [63:0] tmp_8_fu_842_p11;
wire   [3:0] zext_ln71_6_fu_862_p1;
wire   [3:0] tmp_9_fu_871_p10;
wire   [63:0] tmp_9_fu_871_p11;
wire   [127:0] select_ln70_fu_923_p3;
wire   [127:0] and_ln70_fu_930_p2;
wire   [127:0] select_ln70_1_fu_941_p3;
wire   [127:0] and_ln70_1_fu_948_p2;
wire   [127:0] select_ln70_2_fu_959_p3;
wire   [127:0] and_ln70_2_fu_966_p2;
wire   [127:0] select_ln70_3_fu_977_p3;
wire   [127:0] and_ln70_3_fu_984_p2;
wire   [127:0] select_ln70_4_fu_995_p3;
wire   [127:0] and_ln70_4_fu_1002_p2;
wire   [127:0] select_ln70_5_fu_1013_p3;
wire   [127:0] and_ln70_5_fu_1020_p2;
wire   [127:0] select_ln70_6_fu_1031_p3;
wire   [127:0] and_ln70_6_fu_1038_p2;
wire   [127:0] select_ln70_7_fu_1049_p3;
wire   [127:0] and_ln70_7_fu_1056_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [127:0] mul_ln63_fu_399_p00;
wire   [127:0] mul_ln70_1_fu_407_p00;
wire   [127:0] mul_ln70_2_fu_411_p00;
wire   [127:0] mul_ln70_3_fu_415_p00;
wire   [127:0] mul_ln70_4_fu_419_p00;
wire   [127:0] mul_ln70_5_fu_423_p00;
wire   [127:0] mul_ln70_6_fu_427_p00;
wire   [127:0] mul_ln70_7_fu_431_p00;
wire   [127:0] mul_ln70_fu_403_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U23(
    .din0(mul_ln63_fu_399_p0),
    .din1(mul_ln63_fu_399_p1),
    .dout(mul_ln63_fu_399_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U24(
    .din0(mul_ln70_fu_403_p0),
    .din1(mul_ln70_fu_403_p1),
    .dout(mul_ln70_fu_403_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U25(
    .din0(mul_ln70_1_fu_407_p0),
    .din1(mul_ln70_1_fu_407_p1),
    .dout(mul_ln70_1_fu_407_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U26(
    .din0(mul_ln70_2_fu_411_p0),
    .din1(mul_ln70_2_fu_411_p1),
    .dout(mul_ln70_2_fu_411_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U27(
    .din0(mul_ln70_3_fu_415_p0),
    .din1(mul_ln70_3_fu_415_p1),
    .dout(mul_ln70_3_fu_415_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U28(
    .din0(mul_ln70_4_fu_419_p0),
    .din1(mul_ln70_4_fu_419_p1),
    .dout(mul_ln70_4_fu_419_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U29(
    .din0(mul_ln70_5_fu_423_p0),
    .din1(mul_ln70_5_fu_423_p1),
    .dout(mul_ln70_5_fu_423_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U30(
    .din0(mul_ln70_6_fu_427_p0),
    .din1(mul_ln70_6_fu_427_p1),
    .dout(mul_ln70_6_fu_427_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U31(
    .din0(mul_ln70_7_fu_431_p0),
    .din1(mul_ln70_7_fu_431_p1),
    .dout(mul_ln70_7_fu_431_p2)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U32(
    .din0(arg1_r_reload),
    .din1(arg1_r_1_reload),
    .din2(arg1_r_2_reload),
    .din3(arg1_r_3_reload),
    .din4(arg1_r_4_reload),
    .din5(arg1_r_5_reload),
    .din6(arg1_r_6_reload),
    .din7(arg1_r_7_reload),
    .din8(arg1_r_8_reload),
    .din9(trunc_ln34_fu_496_p1),
    .dout(tmp_fu_536_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U33(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(tmp_1_fu_700_p10),
    .dout(tmp_1_fu_700_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U34(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(and_ln34_reg_1358),
    .dout(tmp_2_fu_720_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U35(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln67_3_reg_1368),
    .dout(tmp_3_fu_739_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U36(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln67_4_reg_1378),
    .dout(tmp_4_fu_758_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U37(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln67_5_reg_1388),
    .dout(tmp_5_fu_777_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U38(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln67_6_reg_1398),
    .dout(tmp_6_fu_796_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U39(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln67_reg_1408),
    .dout(tmp_7_fu_815_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U40(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln67_1_fu_837_p2),
    .dout(tmp_8_fu_842_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U41(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(tmp_9_fu_871_p10),
    .dout(tmp_9_fu_871_p11)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add114140_fu_144 <= arr;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add114140_fu_144 <= add_ln70_fu_935_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add114_1142_fu_152 <= arr_2;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add114_1142_fu_152 <= add_ln70_2_fu_971_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add114_127141_fu_148 <= arr_1;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add114_127141_fu_148 <= add_ln70_1_fu_953_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add114_1_1143_fu_156 <= arr_3;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add114_1_1143_fu_156 <= add_ln70_3_fu_989_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add114_2144_fu_160 <= arr_4;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add114_2144_fu_160 <= add_ln70_4_fu_1007_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add114_2_1145_fu_164 <= arr_5;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add114_2_1145_fu_164 <= add_ln70_5_fu_1025_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add114_3146_fu_168 <= arr_6;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add114_3146_fu_168 <= add_ln70_6_fu_1043_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add114_3_1147_fu_172 <= arr_7;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add114_3_1147_fu_172 <= add_ln70_7_fu_1061_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add87139_fu_140 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add87139_fu_140 <= add_ln63_fu_918_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((tmp_10_fu_488_p3 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_176 <= add_ln56_fu_672_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_176 <= 5'd8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_fu_488_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln34_reg_1358 <= and_ln34_fu_530_p2;
        icmp_ln62_reg_1353 <= icmp_ln62_fu_510_p2;
        icmp_ln70_1_reg_1383 <= icmp_ln70_1_fu_586_p2;
        icmp_ln70_2_reg_1393 <= icmp_ln70_2_fu_602_p2;
        icmp_ln70_3_reg_1403 <= icmp_ln70_3_fu_628_p2;
        icmp_ln70_4_reg_1414 <= icmp_ln70_4_fu_644_p2;
        icmp_ln70_5_reg_1420 <= icmp_ln70_5_fu_660_p2;
        icmp_ln70_6_reg_1426 <= icmp_ln70_6_fu_666_p2;
        icmp_ln70_reg_1373 <= icmp_ln70_fu_570_p2;
        sub_ln67_3_reg_1368 <= sub_ln67_3_fu_564_p2;
        sub_ln67_4_reg_1378 <= sub_ln67_4_fu_580_p2;
        sub_ln67_5_reg_1388 <= sub_ln67_5_fu_596_p2;
        sub_ln67_6_reg_1398 <= sub_ln67_6_fu_612_p2;
        sub_ln67_reg_1408 <= sub_ln67_fu_638_p2;
        tmp_reg_1363 <= tmp_fu_536_p11;
        trunc_ln34_reg_1348 <= trunc_ln34_fu_496_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln62_reg_1353_pp0_iter1_reg <= icmp_ln62_reg_1353;
        icmp_ln70_1_reg_1383_pp0_iter1_reg <= icmp_ln70_1_reg_1383;
        icmp_ln70_2_reg_1393_pp0_iter1_reg <= icmp_ln70_2_reg_1393;
        icmp_ln70_3_reg_1403_pp0_iter1_reg <= icmp_ln70_3_reg_1403;
        icmp_ln70_4_reg_1414_pp0_iter1_reg <= icmp_ln70_4_reg_1414;
        icmp_ln70_5_reg_1420_pp0_iter1_reg <= icmp_ln70_5_reg_1420;
        icmp_ln70_6_reg_1426_pp0_iter1_reg <= icmp_ln70_6_reg_1426;
        icmp_ln70_reg_1373_pp0_iter1_reg <= icmp_ln70_reg_1373;
        mul_ln63_reg_1431 <= mul_ln63_fu_399_p2;
        mul_ln70_1_reg_1441 <= mul_ln70_1_fu_407_p2;
        mul_ln70_2_reg_1446 <= mul_ln70_2_fu_411_p2;
        mul_ln70_3_reg_1451 <= mul_ln70_3_fu_415_p2;
        mul_ln70_4_reg_1456 <= mul_ln70_4_fu_419_p2;
        mul_ln70_5_reg_1461 <= mul_ln70_5_fu_423_p2;
        mul_ln70_6_reg_1466 <= mul_ln70_6_fu_427_p2;
        mul_ln70_7_reg_1471 <= mul_ln70_7_fu_431_p2;
        mul_ln70_reg_1436 <= mul_ln70_fu_403_p2;
        tmp_10_reg_1344 <= ap_sig_allocacmp_i_1[32'd4];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_10_reg_1344 == 1'd1))) begin
        add114140_out_ap_vld = 1'b1;
    end else begin
        add114140_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_10_reg_1344 == 1'd1))) begin
        add114_1142_out_ap_vld = 1'b1;
    end else begin
        add114_1142_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_10_reg_1344 == 1'd1))) begin
        add114_127141_out_ap_vld = 1'b1;
    end else begin
        add114_127141_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_10_reg_1344 == 1'd1))) begin
        add114_1_1143_out_ap_vld = 1'b1;
    end else begin
        add114_1_1143_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_10_reg_1344 == 1'd1))) begin
        add114_2144_out_ap_vld = 1'b1;
    end else begin
        add114_2144_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_10_reg_1344 == 1'd1))) begin
        add114_2_1145_out_ap_vld = 1'b1;
    end else begin
        add114_2_1145_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_10_reg_1344 == 1'd1))) begin
        add114_3146_out_ap_vld = 1'b1;
    end else begin
        add114_3146_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_10_reg_1344 == 1'd1))) begin
        add114_3_1147_out_ap_vld = 1'b1;
    end else begin
        add114_3_1147_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_10_reg_1344 == 1'd1))) begin
        add87139_out_ap_vld = 1'b1;
    end else begin
        add87139_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_10_fu_488_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 5'd8;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_176;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add114140_out = add114140_fu_144;

assign add114_1142_out = add114_1142_fu_152;

assign add114_127141_out = add114_127141_fu_148;

assign add114_1_1143_out = add114_1_1143_fu_156;

assign add114_2144_out = add114_2144_fu_160;

assign add114_2_1145_out = add114_2_1145_fu_164;

assign add114_3146_out = add114_3146_fu_168;

assign add114_3_1147_out = add114_3_1147_fu_172;

assign add87139_out = add87139_fu_140;

assign add_ln56_fu_672_p2 = ($signed(ap_sig_allocacmp_i_1) + $signed(5'd31));

assign add_ln63_fu_918_p2 = (mul_ln63_reg_1431 + add87139_fu_140);

assign add_ln70_1_fu_953_p2 = (and_ln70_1_fu_948_p2 + add114_127141_fu_148);

assign add_ln70_2_fu_971_p2 = (and_ln70_2_fu_966_p2 + add114_1142_fu_152);

assign add_ln70_3_fu_989_p2 = (and_ln70_3_fu_984_p2 + add114_1_1143_fu_156);

assign add_ln70_4_fu_1007_p2 = (and_ln70_4_fu_1002_p2 + add114_2144_fu_160);

assign add_ln70_5_fu_1025_p2 = (and_ln70_5_fu_1020_p2 + add114_2_1145_fu_164);

assign add_ln70_6_fu_1043_p2 = (and_ln70_6_fu_1038_p2 + add114_3146_fu_168);

assign add_ln70_7_fu_1061_p2 = (and_ln70_7_fu_1056_p2 + add114_3_1147_fu_172);

assign add_ln70_fu_935_p2 = (and_ln70_fu_930_p2 + add114140_fu_144);

assign and_ln34_fu_530_p2 = (sub_ln62_fu_516_p2 & select_ln62_fu_522_p3);

assign and_ln70_1_fu_948_p2 = (select_ln70_1_fu_941_p3 & mul_ln70_1_reg_1441);

assign and_ln70_2_fu_966_p2 = (select_ln70_2_fu_959_p3 & mul_ln70_2_reg_1446);

assign and_ln70_3_fu_984_p2 = (select_ln70_3_fu_977_p3 & mul_ln70_3_reg_1451);

assign and_ln70_4_fu_1002_p2 = (select_ln70_4_fu_995_p3 & mul_ln70_4_reg_1456);

assign and_ln70_5_fu_1020_p2 = (select_ln70_5_fu_1013_p3 & mul_ln70_5_reg_1461);

assign and_ln70_6_fu_1038_p2 = (select_ln70_6_fu_1031_p3 & mul_ln70_6_reg_1466);

assign and_ln70_7_fu_1056_p2 = (select_ln70_7_fu_1049_p3 & mul_ln70_7_reg_1471);

assign and_ln70_fu_930_p2 = (select_ln70_fu_923_p3 & mul_ln70_reg_1436);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln62_fu_510_p2 = ((tmp_11_fu_500_p4 != 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln70_1_fu_586_p2 = (($signed(ap_sig_allocacmp_i_1) < $signed(5'd6)) ? 1'b1 : 1'b0);

assign icmp_ln70_2_fu_602_p2 = (($signed(ap_sig_allocacmp_i_1) < $signed(5'd5)) ? 1'b1 : 1'b0);

assign icmp_ln70_3_fu_628_p2 = (($signed(tmp_12_fu_618_p4) < $signed(3'd1)) ? 1'b1 : 1'b0);

assign icmp_ln70_4_fu_644_p2 = (($signed(ap_sig_allocacmp_i_1) < $signed(5'd3)) ? 1'b1 : 1'b0);

assign icmp_ln70_5_fu_660_p2 = (($signed(tmp_13_fu_650_p4) < $signed(4'd1)) ? 1'b1 : 1'b0);

assign icmp_ln70_6_fu_666_p2 = (($signed(ap_sig_allocacmp_i_1) < $signed(5'd1)) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_570_p2 = (($signed(ap_sig_allocacmp_i_1) < $signed(5'd7)) ? 1'b1 : 1'b0);

assign mul_ln63_fu_399_p0 = mul_ln63_fu_399_p00;

assign mul_ln63_fu_399_p00 = tmp_1_fu_700_p11;

assign mul_ln63_fu_399_p1 = zext_ln63_fu_688_p1;

assign mul_ln70_1_fu_407_p0 = mul_ln70_1_fu_407_p00;

assign mul_ln70_1_fu_407_p00 = tmp_3_fu_739_p11;

assign mul_ln70_1_fu_407_p1 = zext_ln63_fu_688_p1;

assign mul_ln70_2_fu_411_p0 = mul_ln70_2_fu_411_p00;

assign mul_ln70_2_fu_411_p00 = tmp_4_fu_758_p11;

assign mul_ln70_2_fu_411_p1 = zext_ln63_fu_688_p1;

assign mul_ln70_3_fu_415_p0 = mul_ln70_3_fu_415_p00;

assign mul_ln70_3_fu_415_p00 = tmp_5_fu_777_p11;

assign mul_ln70_3_fu_415_p1 = zext_ln63_fu_688_p1;

assign mul_ln70_4_fu_419_p0 = mul_ln70_4_fu_419_p00;

assign mul_ln70_4_fu_419_p00 = tmp_6_fu_796_p11;

assign mul_ln70_4_fu_419_p1 = zext_ln63_fu_688_p1;

assign mul_ln70_5_fu_423_p0 = mul_ln70_5_fu_423_p00;

assign mul_ln70_5_fu_423_p00 = tmp_7_fu_815_p11;

assign mul_ln70_5_fu_423_p1 = zext_ln63_fu_688_p1;

assign mul_ln70_6_fu_427_p0 = mul_ln70_6_fu_427_p00;

assign mul_ln70_6_fu_427_p00 = tmp_8_fu_842_p11;

assign mul_ln70_6_fu_427_p1 = zext_ln63_fu_688_p1;

assign mul_ln70_7_fu_431_p0 = mul_ln70_7_fu_431_p00;

assign mul_ln70_7_fu_431_p00 = tmp_9_fu_871_p11;

assign mul_ln70_7_fu_431_p1 = zext_ln63_fu_688_p1;

assign mul_ln70_fu_403_p0 = mul_ln70_fu_403_p00;

assign mul_ln70_fu_403_p00 = tmp_2_fu_720_p11;

assign mul_ln70_fu_403_p1 = zext_ln63_fu_688_p1;

assign select_ln62_fu_522_p3 = ((icmp_ln62_fu_510_p2[0:0] == 1'b1) ? 4'd15 : 4'd0);

assign select_ln70_1_fu_941_p3 = ((icmp_ln70_reg_1373_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln70_2_fu_959_p3 = ((icmp_ln70_1_reg_1383_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln70_3_fu_977_p3 = ((icmp_ln70_2_reg_1393_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln70_4_fu_995_p3 = ((icmp_ln70_3_reg_1403_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln70_5_fu_1013_p3 = ((icmp_ln70_4_reg_1414_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln70_6_fu_1031_p3 = ((icmp_ln70_5_reg_1420_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln70_7_fu_1049_p3 = ((icmp_ln70_6_reg_1426_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln70_fu_923_p3 = ((icmp_ln62_reg_1353_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign sub_ln62_fu_516_p2 = (4'd7 - trunc_ln34_fu_496_p1);

assign sub_ln67_1_fu_837_p2 = (sub_ln67_reg_1408 - zext_ln71_5_fu_834_p1);

assign sub_ln67_3_fu_564_p2 = (and_ln34_fu_530_p2 - zext_ln71_fu_560_p1);

assign sub_ln67_4_fu_580_p2 = (sub_ln67_3_fu_564_p2 - zext_ln71_1_fu_576_p1);

assign sub_ln67_5_fu_596_p2 = (sub_ln67_4_fu_580_p2 - zext_ln71_2_fu_592_p1);

assign sub_ln67_6_fu_612_p2 = (sub_ln67_5_fu_596_p2 - zext_ln71_3_fu_608_p1);

assign sub_ln67_fu_638_p2 = (sub_ln67_6_fu_612_p2 - zext_ln71_4_fu_634_p1);

assign tmp_10_fu_488_p3 = ap_sig_allocacmp_i_1[32'd4];

assign tmp_11_fu_500_p4 = {{ap_sig_allocacmp_i_1[4:3]}};

assign tmp_12_fu_618_p4 = {{ap_sig_allocacmp_i_1[4:2]}};

assign tmp_13_fu_650_p4 = {{ap_sig_allocacmp_i_1[4:1]}};

assign tmp_1_fu_700_p10 = ($signed(4'd8) - $signed(trunc_ln34_reg_1348));

assign tmp_9_fu_871_p10 = (sub_ln67_1_fu_837_p2 - zext_ln71_6_fu_862_p1);

assign trunc_ln34_fu_496_p1 = ap_sig_allocacmp_i_1[3:0];

assign zext_ln63_fu_688_p1 = tmp_reg_1363;

assign zext_ln71_1_fu_576_p1 = icmp_ln70_fu_570_p2;

assign zext_ln71_2_fu_592_p1 = icmp_ln70_1_fu_586_p2;

assign zext_ln71_3_fu_608_p1 = icmp_ln70_2_fu_602_p2;

assign zext_ln71_4_fu_634_p1 = icmp_ln70_3_fu_628_p2;

assign zext_ln71_5_fu_834_p1 = icmp_ln70_4_reg_1414;

assign zext_ln71_6_fu_862_p1 = icmp_ln70_5_reg_1420;

assign zext_ln71_fu_560_p1 = icmp_ln62_fu_510_p2;

endmodule //test_test_Pipeline_VITIS_LOOP_56_5
