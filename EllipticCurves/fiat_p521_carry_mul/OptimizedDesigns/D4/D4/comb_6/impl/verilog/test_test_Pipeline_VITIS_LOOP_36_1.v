// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_36_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arg1_r_reload,
        arg1_r_1_reload,
        arg1_r_2_reload,
        arg1_r_3_reload,
        arg1_r_4_reload,
        arg1_r_5_reload,
        arg1_r_6_reload,
        arg1_r_7_reload,
        arg2_r_1_reload,
        arg2_r_2_reload,
        arg2_r_3_reload,
        arg2_r_4_reload,
        arg2_r_5_reload,
        arg2_r_6_reload,
        arg2_r_7_reload,
        arg2_r_8_reload,
        mul40,
        arg1_r_8_reload,
        arg2_r_reload,
        conv58,
        arg2_r_7_cast,
        arg2_r_8_cast,
        arg2_r_6_cast,
        arg2_r_5_cast,
        arg2_r_4_cast,
        arg2_r_3_cast,
        arg2_r_2_cast,
        arg2_r_1_cast,
        conv39,
        add68_719_out,
        add68_719_out_ap_vld,
        add68_618_out,
        add68_618_out_ap_vld,
        add68_517_out,
        add68_517_out_ap_vld,
        add68_416_out,
        add68_416_out_ap_vld,
        add68_315_out,
        add68_315_out_ap_vld,
        add68_214_out,
        add68_214_out_ap_vld,
        add68_113_out,
        add68_113_out_ap_vld,
        add6812_out,
        add6812_out_ap_vld,
        p_out,
        p_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] arg1_r_reload;
input  [63:0] arg1_r_1_reload;
input  [63:0] arg1_r_2_reload;
input  [63:0] arg1_r_3_reload;
input  [63:0] arg1_r_4_reload;
input  [63:0] arg1_r_5_reload;
input  [63:0] arg1_r_6_reload;
input  [63:0] arg1_r_7_reload;
input  [63:0] arg2_r_1_reload;
input  [63:0] arg2_r_2_reload;
input  [63:0] arg2_r_3_reload;
input  [63:0] arg2_r_4_reload;
input  [63:0] arg2_r_5_reload;
input  [63:0] arg2_r_6_reload;
input  [63:0] arg2_r_7_reload;
input  [63:0] arg2_r_8_reload;
input  [127:0] mul40;
input  [63:0] arg1_r_8_reload;
input  [63:0] arg2_r_reload;
input  [63:0] conv58;
input  [62:0] arg2_r_7_cast;
input  [62:0] arg2_r_8_cast;
input  [62:0] arg2_r_6_cast;
input  [62:0] arg2_r_5_cast;
input  [62:0] arg2_r_4_cast;
input  [62:0] arg2_r_3_cast;
input  [62:0] arg2_r_2_cast;
input  [62:0] arg2_r_1_cast;
input  [63:0] conv39;
output  [127:0] add68_719_out;
output   add68_719_out_ap_vld;
output  [127:0] add68_618_out;
output   add68_618_out_ap_vld;
output  [127:0] add68_517_out;
output   add68_517_out_ap_vld;
output  [127:0] add68_416_out;
output   add68_416_out_ap_vld;
output  [127:0] add68_315_out;
output   add68_315_out_ap_vld;
output  [127:0] add68_214_out;
output   add68_214_out_ap_vld;
output  [127:0] add68_113_out;
output   add68_113_out_ap_vld;
output  [127:0] add6812_out;
output   add6812_out_ap_vld;
output  [127:0] p_out;
output   p_out_ap_vld;

reg ap_idle;
reg add68_719_out_ap_vld;
reg add68_618_out_ap_vld;
reg add68_517_out_ap_vld;
reg add68_416_out_ap_vld;
reg add68_315_out_ap_vld;
reg add68_214_out_ap_vld;
reg add68_113_out_ap_vld;
reg add6812_out_ap_vld;
reg p_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln36_fu_558_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [127:0] conv39_cast_fu_497_p1;
reg   [127:0] conv39_cast_reg_1889;
wire   [127:0] conv58_cast_fu_501_p1;
reg   [127:0] conv58_cast_reg_1894;
reg   [3:0] i_1_reg_1899;
wire   [2:0] trunc_ln44_fu_570_p1;
reg   [2:0] trunc_ln44_reg_1915;
wire   [63:0] tmp_fu_574_p10;
reg   [63:0] tmp_reg_1925;
wire   [63:0] tmp_2_fu_602_p11;
reg   [63:0] tmp_2_reg_1930;
wire   [63:0] tmp_3_fu_626_p11;
reg   [63:0] tmp_3_reg_1935;
wire   [0:0] tmp_16_fu_650_p3;
reg   [0:0] tmp_16_reg_1940;
wire   [0:0] icmp_ln52_fu_658_p2;
reg   [0:0] icmp_ln52_reg_1946;
wire   [3:0] sub_ln54_3_fu_676_p2;
reg   [3:0] sub_ln54_3_reg_1951;
wire   [0:0] icmp_ln52_1_fu_682_p2;
reg   [0:0] icmp_ln52_1_reg_1956;
wire   [3:0] sub_ln54_4_fu_692_p2;
reg   [3:0] sub_ln54_4_reg_1961;
wire   [0:0] icmp_ln52_2_fu_698_p2;
reg   [0:0] icmp_ln52_2_reg_1966;
wire   [3:0] sub_ln54_5_fu_708_p2;
reg   [3:0] sub_ln54_5_reg_1971;
wire   [0:0] icmp_ln52_3_fu_724_p2;
reg   [0:0] icmp_ln52_3_reg_1976;
wire   [3:0] sub_ln54_fu_734_p2;
reg   [3:0] sub_ln54_reg_1981;
wire   [0:0] icmp_ln52_4_fu_740_p2;
reg   [0:0] icmp_ln52_4_reg_1986;
wire   [3:0] sub_ln54_1_fu_750_p2;
reg   [3:0] sub_ln54_1_reg_1991;
wire   [0:0] icmp_ln52_5_fu_766_p2;
reg   [0:0] icmp_ln52_5_reg_1996;
wire   [3:0] sub_ln54_2_fu_776_p2;
reg   [3:0] sub_ln54_2_reg_2001;
wire   [0:0] icmp_ln54_4_fu_782_p2;
reg   [0:0] icmp_ln54_4_reg_2006;
reg   [127:0] empty_fu_152;
wire   [127:0] add_ln44_1_fu_868_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [127:0] add6812_fu_156;
wire   [127:0] add_ln54_1_fu_940_p2;
reg   [127:0] add68_113_fu_160;
wire   [127:0] add_ln54_3_fu_1022_p2;
reg   [127:0] add68_214_fu_164;
wire   [127:0] add_ln54_5_fu_1119_p2;
reg   [127:0] add68_315_fu_168;
wire   [127:0] add_ln54_7_fu_1216_p2;
reg   [127:0] add68_416_fu_172;
wire   [127:0] add_ln54_9_fu_1313_p2;
reg   [127:0] add68_517_fu_176;
wire   [127:0] add_ln54_11_fu_1420_p2;
reg   [127:0] add68_618_fu_180;
wire   [127:0] add_ln54_13_fu_1503_p2;
reg   [127:0] add68_719_fu_184;
wire   [127:0] add_ln54_15_fu_1572_p2;
reg   [3:0] i_fu_188;
wire   [3:0] indvars_iv_next21_fu_596_p2;
reg   [3:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] mul_ln44_fu_429_p0;
wire   [63:0] mul_ln44_fu_429_p1;
wire   [63:0] mul_ln54_fu_433_p0;
wire   [127:0] zext_ln52_fu_874_p1;
wire   [63:0] mul_ln54_fu_433_p1;
wire   [63:0] mul_ln54_1_fu_437_p0;
wire   [63:0] mul_ln54_1_fu_437_p1;
wire   [127:0] zext_ln54_fu_892_p1;
wire   [63:0] mul_ln54_2_fu_441_p0;
wire   [63:0] mul_ln54_2_fu_441_p1;
wire   [63:0] mul_ln54_3_fu_445_p0;
wire   [63:0] mul_ln54_3_fu_445_p1;
wire   [63:0] mul_ln54_4_fu_449_p0;
wire   [63:0] mul_ln54_4_fu_449_p1;
wire   [63:0] mul_ln54_5_fu_453_p0;
wire   [63:0] mul_ln54_5_fu_453_p1;
wire   [63:0] mul_ln54_6_fu_457_p0;
wire   [63:0] mul_ln54_6_fu_457_p1;
wire   [63:0] mul_ln54_7_fu_461_p0;
wire   [63:0] mul_ln54_7_fu_461_p1;
wire   [63:0] mul_ln54_8_fu_465_p0;
wire   [63:0] mul_ln54_8_fu_465_p1;
wire   [63:0] mul_ln54_9_fu_469_p0;
wire   [63:0] mul_ln54_9_fu_469_p1;
wire   [63:0] mul_ln54_10_fu_473_p0;
wire   [63:0] mul_ln54_10_fu_473_p1;
wire   [63:0] mul_ln54_11_fu_477_p0;
wire   [63:0] mul_ln54_11_fu_477_p1;
wire   [63:0] mul_ln54_12_fu_481_p0;
wire   [63:0] mul_ln54_12_fu_481_p1;
wire   [63:0] mul_ln54_13_fu_485_p0;
wire   [63:0] mul_ln54_13_fu_485_p1;
wire   [63:0] mul_ln54_14_fu_489_p0;
wire   [63:0] mul_ln54_14_fu_489_p1;
wire   [63:0] mul_ln54_15_fu_493_p0;
wire   [63:0] mul_ln54_15_fu_493_p1;
wire   [3:0] sub_ln39_fu_564_p2;
wire   [2:0] tmp_fu_574_p9;
wire   [3:0] select_ln53_fu_664_p3;
wire   [3:0] zext_ln53_fu_672_p1;
wire   [3:0] zext_ln53_1_fu_688_p1;
wire   [3:0] zext_ln53_2_fu_704_p1;
wire   [1:0] tmp_17_fu_714_p4;
wire   [3:0] zext_ln53_3_fu_730_p1;
wire   [3:0] zext_ln53_4_fu_746_p1;
wire   [2:0] tmp_19_fu_756_p4;
wire   [3:0] zext_ln53_5_fu_772_p1;
wire   [63:0] tmp_1_fu_824_p11;
wire   [0:0] icmp_ln44_fu_844_p2;
wire   [127:0] select_ln44_fu_849_p3;
wire   [127:0] mul_ln44_fu_429_p2;
wire   [127:0] and_ln44_fu_857_p2;
wire   [127:0] add_ln44_fu_862_p2;
wire   [63:0] tmp_4_fu_903_p10;
wire   [127:0] mul_ln54_fu_433_p2;
wire   [127:0] select_ln54_1_fu_921_p3;
wire   [127:0] mul_ln54_1_fu_437_p2;
wire   [127:0] and_ln54_fu_928_p2;
wire   [127:0] add_ln54_fu_934_p2;
wire   [0:0] tmp_15_fu_885_p3;
wire   [62:0] select_ln52_fu_946_p3;
wire   [63:0] shl_ln_fu_952_p3;
wire   [63:0] tmp_6_fu_965_p10;
wire   [127:0] mul_ln54_2_fu_441_p2;
wire   [127:0] select_ln54_2_fu_984_p3;
wire   [0:0] xor_ln54_fu_997_p2;
wire   [127:0] mul_ln54_3_fu_445_p2;
wire   [127:0] select_ln54_3_fu_1002_p3;
wire   [127:0] and_ln54_2_fu_1010_p2;
wire   [127:0] and_ln54_1_fu_991_p2;
wire   [127:0] add_ln54_2_fu_1016_p2;
wire   [62:0] tmp_7_fu_1028_p11;
wire   [63:0] shl_ln52_1_fu_1048_p3;
wire   [63:0] tmp_8_fu_1061_p10;
wire   [127:0] mul_ln54_4_fu_449_p2;
wire   [127:0] select_ln54_4_fu_1086_p3;
wire   [0:0] icmp_ln54_fu_1081_p2;
wire   [127:0] mul_ln54_5_fu_453_p2;
wire   [127:0] select_ln54_5_fu_1099_p3;
wire   [127:0] and_ln54_4_fu_1107_p2;
wire   [127:0] and_ln54_3_fu_1093_p2;
wire   [127:0] add_ln54_4_fu_1113_p2;
wire   [62:0] tmp_9_fu_1125_p11;
wire   [63:0] shl_ln52_2_fu_1144_p3;
wire   [63:0] tmp_s_fu_1157_p10;
wire   [127:0] mul_ln54_6_fu_457_p2;
wire   [127:0] select_ln54_6_fu_1183_p3;
wire   [0:0] icmp_ln54_1_fu_1178_p2;
wire   [127:0] mul_ln54_7_fu_461_p2;
wire   [127:0] select_ln54_7_fu_1196_p3;
wire   [127:0] and_ln54_6_fu_1204_p2;
wire   [127:0] and_ln54_5_fu_1190_p2;
wire   [127:0] add_ln54_6_fu_1210_p2;
wire   [62:0] tmp_5_fu_1222_p11;
wire   [63:0] shl_ln52_3_fu_1240_p3;
wire   [63:0] tmp_10_fu_1253_p10;
wire   [127:0] mul_ln54_8_fu_465_p2;
wire   [127:0] select_ln54_8_fu_1280_p3;
wire   [0:0] icmp_ln54_2_fu_1275_p2;
wire   [127:0] mul_ln54_9_fu_469_p2;
wire   [127:0] select_ln54_9_fu_1293_p3;
wire   [127:0] and_ln54_8_fu_1301_p2;
wire   [127:0] and_ln54_7_fu_1287_p2;
wire   [127:0] add_ln54_8_fu_1307_p2;
wire   [62:0] tmp_11_fu_1319_p11;
wire   [63:0] shl_ln52_4_fu_1336_p3;
wire   [63:0] tmp_12_fu_1349_p10;
wire   [1:0] tmp_18_fu_1372_p4;
wire   [127:0] mul_ln54_10_fu_473_p2;
wire   [127:0] select_ln54_10_fu_1387_p3;
wire   [0:0] icmp_ln54_3_fu_1381_p2;
wire   [127:0] mul_ln54_11_fu_477_p2;
wire   [127:0] select_ln54_11_fu_1400_p3;
wire   [127:0] and_ln54_10_fu_1408_p2;
wire   [127:0] and_ln54_9_fu_1394_p2;
wire   [127:0] add_ln54_10_fu_1414_p2;
wire   [62:0] tmp_13_fu_1426_p11;
wire   [63:0] shl_ln52_5_fu_1442_p3;
wire   [63:0] select_ln54_fu_1455_p3;
wire   [127:0] mul_ln54_12_fu_481_p2;
wire   [127:0] select_ln54_12_fu_1470_p3;
wire   [0:0] icmp_ln54_5_fu_1465_p2;
wire   [127:0] mul_ln54_13_fu_485_p2;
wire   [127:0] select_ln54_13_fu_1483_p3;
wire   [127:0] and_ln54_12_fu_1491_p2;
wire   [127:0] and_ln54_11_fu_1477_p2;
wire   [127:0] add_ln54_12_fu_1497_p2;
wire   [62:0] tmp_14_fu_1509_p11;
wire   [63:0] shl_ln52_6_fu_1524_p3;
wire   [2:0] tmp_20_fu_1537_p4;
wire   [0:0] icmp_ln54_6_fu_1546_p2;
wire   [127:0] mul_ln54_15_fu_493_p2;
wire   [127:0] select_ln54_14_fu_1552_p3;
wire   [127:0] and_ln54_13_fu_1560_p2;
wire   [127:0] mul_ln54_14_fu_489_p2;
wire   [127:0] add_ln54_14_fu_1566_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [127:0] mul_ln44_fu_429_p00;
wire   [127:0] mul_ln44_fu_429_p10;
wire   [127:0] mul_ln54_10_fu_473_p00;
wire   [127:0] mul_ln54_11_fu_477_p00;
wire   [127:0] mul_ln54_12_fu_481_p00;
wire   [127:0] mul_ln54_13_fu_485_p00;
wire   [127:0] mul_ln54_14_fu_489_p00;
wire   [127:0] mul_ln54_1_fu_437_p00;
wire   [127:0] mul_ln54_2_fu_441_p00;
wire   [127:0] mul_ln54_3_fu_445_p00;
wire   [127:0] mul_ln54_4_fu_449_p00;
wire   [127:0] mul_ln54_5_fu_453_p00;
wire   [127:0] mul_ln54_6_fu_457_p00;
wire   [127:0] mul_ln54_7_fu_461_p00;
wire   [127:0] mul_ln54_8_fu_465_p00;
wire   [127:0] mul_ln54_9_fu_469_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U23(
    .din0(mul_ln44_fu_429_p0),
    .din1(mul_ln44_fu_429_p1),
    .dout(mul_ln44_fu_429_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U24(
    .din0(mul_ln54_fu_433_p0),
    .din1(mul_ln54_fu_433_p1),
    .dout(mul_ln54_fu_433_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U25(
    .din0(mul_ln54_1_fu_437_p0),
    .din1(mul_ln54_1_fu_437_p1),
    .dout(mul_ln54_1_fu_437_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U26(
    .din0(mul_ln54_2_fu_441_p0),
    .din1(mul_ln54_2_fu_441_p1),
    .dout(mul_ln54_2_fu_441_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U27(
    .din0(mul_ln54_3_fu_445_p0),
    .din1(mul_ln54_3_fu_445_p1),
    .dout(mul_ln54_3_fu_445_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U28(
    .din0(mul_ln54_4_fu_449_p0),
    .din1(mul_ln54_4_fu_449_p1),
    .dout(mul_ln54_4_fu_449_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U29(
    .din0(mul_ln54_5_fu_453_p0),
    .din1(mul_ln54_5_fu_453_p1),
    .dout(mul_ln54_5_fu_453_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U30(
    .din0(mul_ln54_6_fu_457_p0),
    .din1(mul_ln54_6_fu_457_p1),
    .dout(mul_ln54_6_fu_457_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U31(
    .din0(mul_ln54_7_fu_461_p0),
    .din1(mul_ln54_7_fu_461_p1),
    .dout(mul_ln54_7_fu_461_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U32(
    .din0(mul_ln54_8_fu_465_p0),
    .din1(mul_ln54_8_fu_465_p1),
    .dout(mul_ln54_8_fu_465_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U33(
    .din0(mul_ln54_9_fu_469_p0),
    .din1(mul_ln54_9_fu_469_p1),
    .dout(mul_ln54_9_fu_469_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U34(
    .din0(mul_ln54_10_fu_473_p0),
    .din1(mul_ln54_10_fu_473_p1),
    .dout(mul_ln54_10_fu_473_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U35(
    .din0(mul_ln54_11_fu_477_p0),
    .din1(mul_ln54_11_fu_477_p1),
    .dout(mul_ln54_11_fu_477_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U36(
    .din0(mul_ln54_12_fu_481_p0),
    .din1(mul_ln54_12_fu_481_p1),
    .dout(mul_ln54_12_fu_481_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U37(
    .din0(mul_ln54_13_fu_485_p0),
    .din1(mul_ln54_13_fu_485_p1),
    .dout(mul_ln54_13_fu_485_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U38(
    .din0(mul_ln54_14_fu_489_p0),
    .din1(mul_ln54_14_fu_489_p1),
    .dout(mul_ln54_14_fu_489_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U39(
    .din0(mul_ln54_15_fu_493_p0),
    .din1(mul_ln54_15_fu_493_p1),
    .dout(mul_ln54_15_fu_493_p2)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U40(
    .din0(arg1_r_reload),
    .din1(arg1_r_1_reload),
    .din2(arg1_r_2_reload),
    .din3(arg1_r_3_reload),
    .din4(arg1_r_4_reload),
    .din5(arg1_r_5_reload),
    .din6(arg1_r_6_reload),
    .din7(arg1_r_7_reload),
    .din8(tmp_fu_574_p9),
    .dout(tmp_fu_574_p10)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U41(
    .din0(64'd0),
    .din1(arg1_r_1_reload),
    .din2(arg1_r_2_reload),
    .din3(arg1_r_3_reload),
    .din4(arg1_r_4_reload),
    .din5(arg1_r_5_reload),
    .din6(arg1_r_6_reload),
    .din7(arg1_r_7_reload),
    .din8(arg1_r_8_reload),
    .din9(ap_sig_allocacmp_i_1),
    .dout(tmp_2_fu_602_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U42(
    .din0(64'd0),
    .din1(arg1_r_reload),
    .din2(arg1_r_1_reload),
    .din3(arg1_r_2_reload),
    .din4(arg1_r_3_reload),
    .din5(arg1_r_4_reload),
    .din6(arg1_r_5_reload),
    .din7(arg1_r_6_reload),
    .din8(arg1_r_7_reload),
    .din9(ap_sig_allocacmp_i_1),
    .dout(tmp_3_fu_626_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U43(
    .din0(64'd0),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(i_1_reg_1899),
    .dout(tmp_1_fu_824_p11)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U44(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(trunc_ln44_reg_1915),
    .dout(tmp_4_fu_903_p10)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U45(
    .din0(64'd0),
    .din1(arg2_r_reload),
    .din2(arg2_r_1_reload),
    .din3(arg2_r_2_reload),
    .din4(arg2_r_3_reload),
    .din5(arg2_r_4_reload),
    .din6(arg2_r_5_reload),
    .din7(arg2_r_6_reload),
    .din8(trunc_ln44_reg_1915),
    .dout(tmp_6_fu_965_p10)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U46(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(63'd0),
    .din5(63'd0),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln54_3_reg_1951),
    .dout(tmp_7_fu_1028_p11)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U47(
    .din0(64'd0),
    .din1(64'd0),
    .din2(arg2_r_reload),
    .din3(arg2_r_1_reload),
    .din4(arg2_r_2_reload),
    .din5(arg2_r_3_reload),
    .din6(arg2_r_4_reload),
    .din7(arg2_r_5_reload),
    .din8(trunc_ln44_reg_1915),
    .dout(tmp_8_fu_1061_p10)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U48(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(63'd0),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln54_4_reg_1961),
    .dout(tmp_9_fu_1125_p11)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U49(
    .din0(64'd0),
    .din1(64'd0),
    .din2(64'd0),
    .din3(arg2_r_reload),
    .din4(arg2_r_1_reload),
    .din5(arg2_r_2_reload),
    .din6(arg2_r_3_reload),
    .din7(arg2_r_4_reload),
    .din8(trunc_ln44_reg_1915),
    .dout(tmp_s_fu_1157_p10)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U50(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln54_5_reg_1971),
    .dout(tmp_5_fu_1222_p11)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U51(
    .din0(64'd0),
    .din1(64'd0),
    .din2(64'd0),
    .din3(64'd0),
    .din4(arg2_r_reload),
    .din5(arg2_r_1_reload),
    .din6(arg2_r_2_reload),
    .din7(arg2_r_3_reload),
    .din8(trunc_ln44_reg_1915),
    .dout(tmp_10_fu_1253_p10)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U52(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(arg2_r_3_cast),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln54_reg_1981),
    .dout(tmp_11_fu_1319_p11)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U53(
    .din0(64'd0),
    .din1(64'd0),
    .din2(64'd0),
    .din3(64'd0),
    .din4(64'd0),
    .din5(arg2_r_reload),
    .din6(arg2_r_1_reload),
    .din7(arg2_r_2_reload),
    .din8(trunc_ln44_reg_1915),
    .dout(tmp_12_fu_1349_p10)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U54(
    .din0(63'd0),
    .din1(63'd0),
    .din2(arg2_r_2_cast),
    .din3(arg2_r_3_cast),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln54_1_reg_1991),
    .dout(tmp_13_fu_1426_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U55(
    .din0(63'd0),
    .din1(arg2_r_1_cast),
    .din2(arg2_r_2_cast),
    .din3(arg2_r_3_cast),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln54_2_reg_2001),
    .dout(tmp_14_fu_1509_p11)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add6812_fu_156 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add6812_fu_156 <= add_ln54_1_fu_940_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add68_113_fu_160 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add68_113_fu_160 <= add_ln54_3_fu_1022_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add68_214_fu_164 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add68_214_fu_164 <= add_ln54_5_fu_1119_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add68_315_fu_168 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add68_315_fu_168 <= add_ln54_7_fu_1216_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add68_416_fu_172 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add68_416_fu_172 <= add_ln54_9_fu_1313_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add68_517_fu_176 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add68_517_fu_176 <= add_ln54_11_fu_1420_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add68_618_fu_180 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add68_618_fu_180 <= add_ln54_13_fu_1503_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add68_719_fu_184 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add68_719_fu_184 <= add_ln54_15_fu_1572_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_fu_152 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            empty_fu_152 <= add_ln44_1_fu_868_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln36_fu_558_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_188 <= indvars_iv_next21_fu_596_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_188 <= 4'd8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv39_cast_reg_1889[63 : 0] <= conv39_cast_fu_497_p1[63 : 0];
        conv58_cast_reg_1894[63 : 0] <= conv58_cast_fu_501_p1[63 : 0];
        i_1_reg_1899 <= ap_sig_allocacmp_i_1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_558_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln52_1_reg_1956 <= icmp_ln52_1_fu_682_p2;
        icmp_ln52_2_reg_1966 <= icmp_ln52_2_fu_698_p2;
        icmp_ln52_3_reg_1976 <= icmp_ln52_3_fu_724_p2;
        icmp_ln52_4_reg_1986 <= icmp_ln52_4_fu_740_p2;
        icmp_ln52_5_reg_1996 <= icmp_ln52_5_fu_766_p2;
        icmp_ln52_reg_1946 <= icmp_ln52_fu_658_p2;
        icmp_ln54_4_reg_2006 <= icmp_ln54_4_fu_782_p2;
        sub_ln54_1_reg_1991 <= sub_ln54_1_fu_750_p2;
        sub_ln54_2_reg_2001 <= sub_ln54_2_fu_776_p2;
        sub_ln54_3_reg_1951 <= sub_ln54_3_fu_676_p2;
        sub_ln54_4_reg_1961 <= sub_ln54_4_fu_692_p2;
        sub_ln54_5_reg_1971 <= sub_ln54_5_fu_708_p2;
        sub_ln54_reg_1981 <= sub_ln54_fu_734_p2;
        tmp_16_reg_1940 <= ap_sig_allocacmp_i_1[32'd3];
        tmp_2_reg_1930 <= tmp_2_fu_602_p11;
        tmp_3_reg_1935 <= tmp_3_fu_626_p11;
        tmp_reg_1925 <= tmp_fu_574_p10;
        trunc_ln44_reg_1915 <= trunc_ln44_fu_570_p1;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_558_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add6812_out_ap_vld = 1'b1;
    end else begin
        add6812_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_558_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add68_113_out_ap_vld = 1'b1;
    end else begin
        add68_113_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_558_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add68_214_out_ap_vld = 1'b1;
    end else begin
        add68_214_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_558_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add68_315_out_ap_vld = 1'b1;
    end else begin
        add68_315_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_558_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add68_416_out_ap_vld = 1'b1;
    end else begin
        add68_416_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_558_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add68_517_out_ap_vld = 1'b1;
    end else begin
        add68_517_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_558_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add68_618_out_ap_vld = 1'b1;
    end else begin
        add68_618_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_558_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add68_719_out_ap_vld = 1'b1;
    end else begin
        add68_719_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_558_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 4'd8;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_188;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_558_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add6812_out = add6812_fu_156;

assign add68_113_out = add68_113_fu_160;

assign add68_214_out = add68_214_fu_164;

assign add68_315_out = add68_315_fu_168;

assign add68_416_out = add68_416_fu_172;

assign add68_517_out = add68_517_fu_176;

assign add68_618_out = add68_618_fu_180;

assign add68_719_out = add68_719_fu_184;

assign add_ln44_1_fu_868_p2 = (empty_fu_152 + add_ln44_fu_862_p2);

assign add_ln44_fu_862_p2 = (mul_ln44_fu_429_p2 + and_ln44_fu_857_p2);

assign add_ln54_10_fu_1414_p2 = (and_ln54_10_fu_1408_p2 + and_ln54_9_fu_1394_p2);

assign add_ln54_11_fu_1420_p2 = (add68_517_fu_176 + add_ln54_10_fu_1414_p2);

assign add_ln54_12_fu_1497_p2 = (and_ln54_12_fu_1491_p2 + and_ln54_11_fu_1477_p2);

assign add_ln54_13_fu_1503_p2 = (add68_618_fu_180 + add_ln54_12_fu_1497_p2);

assign add_ln54_14_fu_1566_p2 = (and_ln54_13_fu_1560_p2 + mul_ln54_14_fu_489_p2);

assign add_ln54_15_fu_1572_p2 = (add68_719_fu_184 + add_ln54_14_fu_1566_p2);

assign add_ln54_1_fu_940_p2 = (add6812_fu_156 + add_ln54_fu_934_p2);

assign add_ln54_2_fu_1016_p2 = (and_ln54_2_fu_1010_p2 + and_ln54_1_fu_991_p2);

assign add_ln54_3_fu_1022_p2 = (add68_113_fu_160 + add_ln54_2_fu_1016_p2);

assign add_ln54_4_fu_1113_p2 = (and_ln54_4_fu_1107_p2 + and_ln54_3_fu_1093_p2);

assign add_ln54_5_fu_1119_p2 = (add68_214_fu_164 + add_ln54_4_fu_1113_p2);

assign add_ln54_6_fu_1210_p2 = (and_ln54_6_fu_1204_p2 + and_ln54_5_fu_1190_p2);

assign add_ln54_7_fu_1216_p2 = (add68_315_fu_168 + add_ln54_6_fu_1210_p2);

assign add_ln54_8_fu_1307_p2 = (and_ln54_8_fu_1301_p2 + and_ln54_7_fu_1287_p2);

assign add_ln54_9_fu_1313_p2 = (add68_416_fu_172 + add_ln54_8_fu_1307_p2);

assign add_ln54_fu_934_p2 = (mul_ln54_1_fu_437_p2 + and_ln54_fu_928_p2);

assign and_ln44_fu_857_p2 = (select_ln44_fu_849_p3 & mul40);

assign and_ln54_10_fu_1408_p2 = (select_ln54_11_fu_1400_p3 & mul_ln54_11_fu_477_p2);

assign and_ln54_11_fu_1477_p2 = (select_ln54_12_fu_1470_p3 & mul_ln54_12_fu_481_p2);

assign and_ln54_12_fu_1491_p2 = (select_ln54_13_fu_1483_p3 & mul_ln54_13_fu_485_p2);

assign and_ln54_13_fu_1560_p2 = (select_ln54_14_fu_1552_p3 & mul_ln54_15_fu_493_p2);

assign and_ln54_1_fu_991_p2 = (select_ln54_2_fu_984_p3 & mul_ln54_2_fu_441_p2);

assign and_ln54_2_fu_1010_p2 = (select_ln54_3_fu_1002_p3 & mul_ln54_3_fu_445_p2);

assign and_ln54_3_fu_1093_p2 = (select_ln54_4_fu_1086_p3 & mul_ln54_4_fu_449_p2);

assign and_ln54_4_fu_1107_p2 = (select_ln54_5_fu_1099_p3 & mul_ln54_5_fu_453_p2);

assign and_ln54_5_fu_1190_p2 = (select_ln54_6_fu_1183_p3 & mul_ln54_6_fu_457_p2);

assign and_ln54_6_fu_1204_p2 = (select_ln54_7_fu_1196_p3 & mul_ln54_7_fu_461_p2);

assign and_ln54_7_fu_1287_p2 = (select_ln54_8_fu_1280_p3 & mul_ln54_8_fu_465_p2);

assign and_ln54_8_fu_1301_p2 = (select_ln54_9_fu_1293_p3 & mul_ln54_9_fu_469_p2);

assign and_ln54_9_fu_1394_p2 = (select_ln54_10_fu_1387_p3 & mul_ln54_10_fu_473_p2);

assign and_ln54_fu_928_p2 = (select_ln54_1_fu_921_p3 & mul_ln54_fu_433_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv39_cast_fu_497_p1 = conv39;

assign conv58_cast_fu_501_p1 = conv58;

assign icmp_ln36_fu_558_p2 = ((ap_sig_allocacmp_i_1 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_844_p2 = ((i_1_reg_1899 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln52_1_fu_682_p2 = ((ap_sig_allocacmp_i_1 > 4'd5) ? 1'b1 : 1'b0);

assign icmp_ln52_2_fu_698_p2 = ((ap_sig_allocacmp_i_1 > 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln52_3_fu_724_p2 = ((tmp_17_fu_714_p4 != 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_4_fu_740_p2 = ((ap_sig_allocacmp_i_1 > 4'd2) ? 1'b1 : 1'b0);

assign icmp_ln52_5_fu_766_p2 = ((tmp_19_fu_756_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_658_p2 = ((ap_sig_allocacmp_i_1 > 4'd6) ? 1'b1 : 1'b0);

assign icmp_ln54_1_fu_1178_p2 = ((i_1_reg_1899 < 4'd6) ? 1'b1 : 1'b0);

assign icmp_ln54_2_fu_1275_p2 = ((i_1_reg_1899 < 4'd5) ? 1'b1 : 1'b0);

assign icmp_ln54_3_fu_1381_p2 = ((tmp_18_fu_1372_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln54_4_fu_782_p2 = ((sub_ln39_fu_564_p2 == 4'd7) ? 1'b1 : 1'b0);

assign icmp_ln54_5_fu_1465_p2 = ((i_1_reg_1899 < 4'd3) ? 1'b1 : 1'b0);

assign icmp_ln54_6_fu_1546_p2 = ((tmp_20_fu_1537_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_1081_p2 = ((i_1_reg_1899 < 4'd7) ? 1'b1 : 1'b0);

assign indvars_iv_next21_fu_596_p2 = ($signed(ap_sig_allocacmp_i_1) + $signed(4'd15));

assign mul_ln44_fu_429_p0 = mul_ln44_fu_429_p00;

assign mul_ln44_fu_429_p00 = tmp_1_fu_824_p11;

assign mul_ln44_fu_429_p1 = mul_ln44_fu_429_p10;

assign mul_ln44_fu_429_p10 = tmp_reg_1925;

assign mul_ln54_10_fu_473_p0 = mul_ln54_10_fu_473_p00;

assign mul_ln54_10_fu_473_p00 = shl_ln52_4_fu_1336_p3;

assign mul_ln54_10_fu_473_p1 = zext_ln52_fu_874_p1;

assign mul_ln54_11_fu_477_p0 = mul_ln54_11_fu_477_p00;

assign mul_ln54_11_fu_477_p00 = tmp_12_fu_1349_p10;

assign mul_ln54_11_fu_477_p1 = zext_ln54_fu_892_p1;

assign mul_ln54_12_fu_481_p0 = mul_ln54_12_fu_481_p00;

assign mul_ln54_12_fu_481_p00 = shl_ln52_5_fu_1442_p3;

assign mul_ln54_12_fu_481_p1 = zext_ln52_fu_874_p1;

assign mul_ln54_13_fu_485_p0 = mul_ln54_13_fu_485_p00;

assign mul_ln54_13_fu_485_p00 = select_ln54_fu_1455_p3;

assign mul_ln54_13_fu_485_p1 = zext_ln54_fu_892_p1;

assign mul_ln54_14_fu_489_p0 = mul_ln54_14_fu_489_p00;

assign mul_ln54_14_fu_489_p00 = shl_ln52_6_fu_1524_p3;

assign mul_ln54_14_fu_489_p1 = zext_ln52_fu_874_p1;

assign mul_ln54_15_fu_493_p0 = conv39_cast_reg_1889;

assign mul_ln54_15_fu_493_p1 = zext_ln54_fu_892_p1;

assign mul_ln54_1_fu_437_p0 = mul_ln54_1_fu_437_p00;

assign mul_ln54_1_fu_437_p00 = tmp_4_fu_903_p10;

assign mul_ln54_1_fu_437_p1 = zext_ln54_fu_892_p1;

assign mul_ln54_2_fu_441_p0 = mul_ln54_2_fu_441_p00;

assign mul_ln54_2_fu_441_p00 = shl_ln_fu_952_p3;

assign mul_ln54_2_fu_441_p1 = zext_ln52_fu_874_p1;

assign mul_ln54_3_fu_445_p0 = mul_ln54_3_fu_445_p00;

assign mul_ln54_3_fu_445_p00 = tmp_6_fu_965_p10;

assign mul_ln54_3_fu_445_p1 = zext_ln54_fu_892_p1;

assign mul_ln54_4_fu_449_p0 = mul_ln54_4_fu_449_p00;

assign mul_ln54_4_fu_449_p00 = shl_ln52_1_fu_1048_p3;

assign mul_ln54_4_fu_449_p1 = zext_ln52_fu_874_p1;

assign mul_ln54_5_fu_453_p0 = mul_ln54_5_fu_453_p00;

assign mul_ln54_5_fu_453_p00 = tmp_8_fu_1061_p10;

assign mul_ln54_5_fu_453_p1 = zext_ln54_fu_892_p1;

assign mul_ln54_6_fu_457_p0 = mul_ln54_6_fu_457_p00;

assign mul_ln54_6_fu_457_p00 = shl_ln52_2_fu_1144_p3;

assign mul_ln54_6_fu_457_p1 = zext_ln52_fu_874_p1;

assign mul_ln54_7_fu_461_p0 = mul_ln54_7_fu_461_p00;

assign mul_ln54_7_fu_461_p00 = tmp_s_fu_1157_p10;

assign mul_ln54_7_fu_461_p1 = zext_ln54_fu_892_p1;

assign mul_ln54_8_fu_465_p0 = mul_ln54_8_fu_465_p00;

assign mul_ln54_8_fu_465_p00 = shl_ln52_3_fu_1240_p3;

assign mul_ln54_8_fu_465_p1 = zext_ln52_fu_874_p1;

assign mul_ln54_9_fu_469_p0 = mul_ln54_9_fu_469_p00;

assign mul_ln54_9_fu_469_p00 = tmp_10_fu_1253_p10;

assign mul_ln54_9_fu_469_p1 = zext_ln54_fu_892_p1;

assign mul_ln54_fu_433_p0 = zext_ln52_fu_874_p1;

assign mul_ln54_fu_433_p1 = conv58_cast_reg_1894;

assign p_out = empty_fu_152;

assign select_ln44_fu_849_p3 = ((icmp_ln44_fu_844_p2[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln52_fu_946_p3 = ((tmp_15_fu_885_p3[0:0] == 1'b1) ? arg2_r_7_cast : arg2_r_8_cast);

assign select_ln53_fu_664_p3 = ((tmp_16_fu_650_p3[0:0] == 1'b1) ? 4'd7 : 4'd8);

assign select_ln54_10_fu_1387_p3 = ((icmp_ln52_4_reg_1986[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln54_11_fu_1400_p3 = ((icmp_ln54_3_fu_1381_p2[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln54_12_fu_1470_p3 = ((icmp_ln52_5_reg_1996[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln54_13_fu_1483_p3 = ((icmp_ln54_5_fu_1465_p2[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln54_14_fu_1552_p3 = ((icmp_ln54_6_fu_1546_p2[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln54_1_fu_921_p3 = ((tmp_16_reg_1940[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln54_2_fu_984_p3 = ((icmp_ln52_reg_1946[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln54_3_fu_1002_p3 = ((xor_ln54_fu_997_p2[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln54_4_fu_1086_p3 = ((icmp_ln52_1_reg_1956[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln54_5_fu_1099_p3 = ((icmp_ln54_fu_1081_p2[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln54_6_fu_1183_p3 = ((icmp_ln52_2_reg_1966[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln54_7_fu_1196_p3 = ((icmp_ln54_1_fu_1178_p2[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln54_8_fu_1280_p3 = ((icmp_ln52_3_reg_1976[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln54_9_fu_1293_p3 = ((icmp_ln54_2_fu_1275_p2[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln54_fu_1455_p3 = ((icmp_ln54_4_reg_2006[0:0] == 1'b1) ? arg2_r_1_reload : arg2_r_reload);

assign shl_ln52_1_fu_1048_p3 = {{tmp_7_fu_1028_p11}, {1'd0}};

assign shl_ln52_2_fu_1144_p3 = {{tmp_9_fu_1125_p11}, {1'd0}};

assign shl_ln52_3_fu_1240_p3 = {{tmp_5_fu_1222_p11}, {1'd0}};

assign shl_ln52_4_fu_1336_p3 = {{tmp_11_fu_1319_p11}, {1'd0}};

assign shl_ln52_5_fu_1442_p3 = {{tmp_13_fu_1426_p11}, {1'd0}};

assign shl_ln52_6_fu_1524_p3 = {{tmp_14_fu_1509_p11}, {1'd0}};

assign shl_ln_fu_952_p3 = {{select_ln52_fu_946_p3}, {1'd0}};

assign sub_ln39_fu_564_p2 = ($signed(4'd8) - $signed(ap_sig_allocacmp_i_1));

assign sub_ln54_1_fu_750_p2 = (sub_ln54_fu_734_p2 - zext_ln53_4_fu_746_p1);

assign sub_ln54_2_fu_776_p2 = (sub_ln54_1_fu_750_p2 - zext_ln53_5_fu_772_p1);

assign sub_ln54_3_fu_676_p2 = (select_ln53_fu_664_p3 - zext_ln53_fu_672_p1);

assign sub_ln54_4_fu_692_p2 = (sub_ln54_3_fu_676_p2 - zext_ln53_1_fu_688_p1);

assign sub_ln54_5_fu_708_p2 = (sub_ln54_4_fu_692_p2 - zext_ln53_2_fu_704_p1);

assign sub_ln54_fu_734_p2 = (sub_ln54_5_fu_708_p2 - zext_ln53_3_fu_730_p1);

assign tmp_15_fu_885_p3 = i_1_reg_1899[32'd3];

assign tmp_16_fu_650_p3 = ap_sig_allocacmp_i_1[32'd3];

assign tmp_17_fu_714_p4 = {{ap_sig_allocacmp_i_1[3:2]}};

assign tmp_18_fu_1372_p4 = {{i_1_reg_1899[3:2]}};

assign tmp_19_fu_756_p4 = {{ap_sig_allocacmp_i_1[3:1]}};

assign tmp_20_fu_1537_p4 = {{i_1_reg_1899[3:1]}};

assign tmp_fu_574_p9 = sub_ln39_fu_564_p2[2:0];

assign trunc_ln44_fu_570_p1 = sub_ln39_fu_564_p2[2:0];

assign xor_ln54_fu_997_p2 = (tmp_16_reg_1940 ^ 1'd1);

assign zext_ln52_fu_874_p1 = tmp_2_reg_1930;

assign zext_ln53_1_fu_688_p1 = icmp_ln52_1_fu_682_p2;

assign zext_ln53_2_fu_704_p1 = icmp_ln52_2_fu_698_p2;

assign zext_ln53_3_fu_730_p1 = icmp_ln52_3_fu_724_p2;

assign zext_ln53_4_fu_746_p1 = icmp_ln52_4_fu_740_p2;

assign zext_ln53_5_fu_772_p1 = icmp_ln52_5_fu_766_p2;

assign zext_ln53_fu_672_p1 = icmp_ln52_fu_658_p2;

assign zext_ln54_fu_892_p1 = tmp_3_reg_1935;

always @ (posedge ap_clk) begin
    conv39_cast_reg_1889[127:64] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    conv58_cast_reg_1894[127:64] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //test_test_Pipeline_VITIS_LOOP_36_1
