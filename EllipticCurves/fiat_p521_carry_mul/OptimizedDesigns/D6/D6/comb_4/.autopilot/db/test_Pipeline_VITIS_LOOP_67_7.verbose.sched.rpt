

================================================================
== Vitis HLS Report for 'test_Pipeline_VITIS_LOOP_67_7'
================================================================
* Date:           Thu May  9 21:58:09 2024

* Version:        2023.1.1 (Build 3869133 on Jun 15 2023)
* Project:        D6
* Solution:       comb_4 (Vivado IP Flow Target)
* Product family: zynquplus
* Target device:  xczu9eg-ffvb1156-2-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  6.894 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |       11|       11|  0.110 us|  0.110 us|   11|   11|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- VITIS_LOOP_67_7  |        9|        9|         3|          1|          1|     8|       yes|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 3
* Pipeline : 1
  Pipeline-0 : II = 1, D = 3, States = { 1 2 3 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 3.86>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%add124126 = alloca i32 1"   --->   Operation 6 'alloca' 'add124126' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%add124_1127 = alloca i32 1"   --->   Operation 7 'alloca' 'add124_1127' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%add124_2128 = alloca i32 1"   --->   Operation 8 'alloca' 'add124_2128' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%add124_3129 = alloca i32 1"   --->   Operation 9 'alloca' 'add124_3129' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%add124_4130 = alloca i32 1"   --->   Operation 10 'alloca' 'add124_4130' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%add124_5131 = alloca i32 1"   --->   Operation 11 'alloca' 'add124_5131' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%add124_6132 = alloca i32 1"   --->   Operation 12 'alloca' 'add124_6132' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%add124_7133 = alloca i32 1"   --->   Operation 13 'alloca' 'add124_7133' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%i = alloca i32 1"   --->   Operation 14 'alloca' 'i' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%arg2_r_8_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_8_reload"   --->   Operation 15 'read' 'arg2_r_8_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%arg2_r_7_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_7_reload"   --->   Operation 16 'read' 'arg2_r_7_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%arg2_r_6_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_6_reload"   --->   Operation 17 'read' 'arg2_r_6_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%arg2_r_5_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_5_reload"   --->   Operation 18 'read' 'arg2_r_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%arg2_r_4_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_4_reload"   --->   Operation 19 'read' 'arg2_r_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%arg2_r_3_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_3_reload"   --->   Operation 20 'read' 'arg2_r_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%arg2_r_2_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_2_reload"   --->   Operation 21 'read' 'arg2_r_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%arg2_r_1_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_1_reload"   --->   Operation 22 'read' 'arg2_r_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%arg2_r_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_reload"   --->   Operation 23 'read' 'arg2_r_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%arg1_r_7_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_7_reload"   --->   Operation 24 'read' 'arg1_r_7_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%arg1_r_6_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_6_reload"   --->   Operation 25 'read' 'arg1_r_6_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%arg1_r_5_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_5_reload"   --->   Operation 26 'read' 'arg1_r_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%arg1_r_4_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_4_reload"   --->   Operation 27 'read' 'arg1_r_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%arg1_r_3_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_3_reload"   --->   Operation 28 'read' 'arg1_r_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%arg1_r_2_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_2_reload"   --->   Operation 29 'read' 'arg1_r_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%arg1_r_1_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_1_reload"   --->   Operation 30 'read' 'arg1_r_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%arg1_r_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_reload"   --->   Operation 31 'read' 'arg1_r_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%add135_reload_read = read i128 @_ssdm_op_Read.ap_auto.i128, i128 %add135_reload"   --->   Operation 32 'read' 'add135_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%add_1121136_reload_read = read i128 @_ssdm_op_Read.ap_auto.i128, i128 %add_1121136_reload"   --->   Operation 33 'read' 'add_1121136_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%add_173137_reload_read = read i128 @_ssdm_op_Read.ap_auto.i128, i128 %add_173137_reload"   --->   Operation 34 'read' 'add_173137_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%add_173_1138_reload_read = read i128 @_ssdm_op_Read.ap_auto.i128, i128 %add_173_1138_reload"   --->   Operation 35 'read' 'add_173_1138_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%add_288139_reload_read = read i128 @_ssdm_op_Read.ap_auto.i128, i128 %add_288139_reload"   --->   Operation 36 'read' 'add_288139_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%add_288_1140_reload_read = read i128 @_ssdm_op_Read.ap_auto.i128, i128 %add_288_1140_reload"   --->   Operation 37 'read' 'add_288_1140_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%add_3103141_reload_read = read i128 @_ssdm_op_Read.ap_auto.i128, i128 %add_3103141_reload"   --->   Operation 38 'read' 'add_3103141_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "%add_3103_1142_reload_read = read i128 @_ssdm_op_Read.ap_auto.i128, i128 %add_3103_1142_reload"   --->   Operation 39 'read' 'add_3103_1142_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.42ns)   --->   "%store_ln0 = store i4 7, i4 %i"   --->   Operation 40 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 41 [1/1] (0.42ns)   --->   "%store_ln0 = store i128 %add_3103_1142_reload_read, i128 %add124_7133"   --->   Operation 41 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 42 [1/1] (0.42ns)   --->   "%store_ln0 = store i128 %add_3103141_reload_read, i128 %add124_6132"   --->   Operation 42 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 43 [1/1] (0.42ns)   --->   "%store_ln0 = store i128 %add_288_1140_reload_read, i128 %add124_5131"   --->   Operation 43 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 44 [1/1] (0.42ns)   --->   "%store_ln0 = store i128 %add_288139_reload_read, i128 %add124_4130"   --->   Operation 44 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 45 [1/1] (0.42ns)   --->   "%store_ln0 = store i128 %add_173_1138_reload_read, i128 %add124_3129"   --->   Operation 45 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 46 [1/1] (0.42ns)   --->   "%store_ln0 = store i128 %add_173137_reload_read, i128 %add124_2128"   --->   Operation 46 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 47 [1/1] (0.42ns)   --->   "%store_ln0 = store i128 %add_1121136_reload_read, i128 %add124_1127"   --->   Operation 47 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 48 [1/1] (0.42ns)   --->   "%store_ln0 = store i128 %add135_reload_read, i128 %add124126"   --->   Operation 48 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 49 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.inc131"   --->   Operation 49 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 50 [1/1] (0.00ns)   --->   "%i_1 = load i4 %i" [d6.cpp:80]   --->   Operation 50 'load' 'i_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 51 [1/1] (0.00ns)   --->   "%tmp = bitselect i1 @_ssdm_op_BitSelect.i1.i4.i32, i4 %i_1, i32 3" [d6.cpp:67]   --->   Operation 51 'bitselect' 'tmp' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 52 [1/1] (0.00ns)   --->   "%br_ln67 = br i1 %tmp, void %for.inc131.split, void %for.end142.exitStub" [d6.cpp:67]   --->   Operation 52 'br' 'br_ln67' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 53 [1/1] (0.00ns)   --->   "%trunc_ln34 = trunc i4 %i_1" [d6.cpp:34]   --->   Operation 53 'trunc' 'trunc_ln34' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 54 [1/1] (0.12ns)   --->   "%xor_ln70 = xor i3 %trunc_ln34, i3 7" [d6.cpp:70]   --->   Operation 54 'xor' 'xor_ln70' <Predicate = (!tmp)> <Delay = 0.12> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.12> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 55 [1/1] (0.00ns) (grouped into LUT with out node add_ln77)   --->   "%zext_ln80_9 = zext i3 %xor_ln70" [d6.cpp:80]   --->   Operation 55 'zext' 'zext_ln80_9' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 56 [1/1] (0.72ns)   --->   "%tmp_s = mux i64 @_ssdm_op_Mux.ap_auto.8i64.i3, i64 %arg1_r_reload_read, i64 %arg1_r_1_reload_read, i64 %arg1_r_2_reload_read, i64 %arg1_r_3_reload_read, i64 %arg1_r_4_reload_read, i64 %arg1_r_5_reload_read, i64 %arg1_r_6_reload_read, i64 %arg1_r_7_reload_read, i3 %trunc_ln34" [d6.cpp:80]   --->   Operation 56 'mux' 'tmp_s' <Predicate = (!tmp)> <Delay = 0.72> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.72> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 57 [1/1] (0.79ns)   --->   "%icmp_ln80 = icmp_ne  i4 %i_1, i4 7" [d6.cpp:80]   --->   Operation 57 'icmp' 'icmp_ln80' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 58 [1/1] (0.00ns) (grouped into LUT with out node add_ln77)   --->   "%select_ln77 = select i1 %icmp_ln80, i4 14, i4 15" [d6.cpp:77]   --->   Operation 58 'select' 'select_ln77' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 59 [1/1] (0.67ns) (out node of the LUT)   --->   "%add_ln77 = add i4 %select_ln77, i4 %zext_ln80_9" [d6.cpp:77]   --->   Operation 59 'add' 'add_ln77' <Predicate = (!tmp)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 60 [1/1] (0.79ns)   --->   "%icmp_ln80_1 = icmp_slt  i4 %i_1, i4 6" [d6.cpp:80]   --->   Operation 60 'icmp' 'icmp_ln80_1' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 61 [1/1] (0.00ns)   --->   "%zext_ln81 = zext i1 %icmp_ln80_1" [d6.cpp:81]   --->   Operation 61 'zext' 'zext_ln81' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 62 [1/1] (0.79ns)   --->   "%sub_ln77_3 = sub i4 %add_ln77, i4 %zext_ln81" [d6.cpp:77]   --->   Operation 62 'sub' 'sub_ln77_3' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 63 [1/1] (0.79ns)   --->   "%icmp_ln80_2 = icmp_slt  i4 %i_1, i4 5" [d6.cpp:80]   --->   Operation 63 'icmp' 'icmp_ln80_2' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 64 [1/1] (0.00ns)   --->   "%zext_ln81_1 = zext i1 %icmp_ln80_2" [d6.cpp:81]   --->   Operation 64 'zext' 'zext_ln81_1' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 65 [1/1] (0.79ns)   --->   "%sub_ln77_4 = sub i4 %sub_ln77_3, i4 %zext_ln81_1" [d6.cpp:77]   --->   Operation 65 'sub' 'sub_ln77_4' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 66 [1/1] (0.00ns)   --->   "%tmp_6 = partselect i2 @_ssdm_op_PartSelect.i2.i4.i32.i32, i4 %i_1, i32 2, i32 3" [d6.cpp:80]   --->   Operation 66 'partselect' 'tmp_6' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 67 [1/1] (0.54ns)   --->   "%icmp_ln80_3 = icmp_ne  i2 %tmp_6, i2 1" [d6.cpp:80]   --->   Operation 67 'icmp' 'icmp_ln80_3' <Predicate = (!tmp)> <Delay = 0.54> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 68 [1/1] (0.00ns)   --->   "%zext_ln81_2 = zext i1 %icmp_ln80_3" [d6.cpp:81]   --->   Operation 68 'zext' 'zext_ln81_2' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 69 [1/1] (0.79ns)   --->   "%sub_ln77 = sub i4 %sub_ln77_4, i4 %zext_ln81_2" [d6.cpp:77]   --->   Operation 69 'sub' 'sub_ln77' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 70 [1/1] (0.79ns)   --->   "%icmp_ln80_4 = icmp_slt  i4 %i_1, i4 3" [d6.cpp:80]   --->   Operation 70 'icmp' 'icmp_ln80_4' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 71 [1/1] (0.00ns)   --->   "%tmp_9 = partselect i3 @_ssdm_op_PartSelect.i3.i4.i32.i32, i4 %i_1, i32 1, i32 3" [d6.cpp:80]   --->   Operation 71 'partselect' 'tmp_9' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 72 [1/1] (0.67ns)   --->   "%icmp_ln80_5 = icmp_slt  i3 %tmp_9, i3 1" [d6.cpp:80]   --->   Operation 72 'icmp' 'icmp_ln80_5' <Predicate = (!tmp)> <Delay = 0.67> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 73 [1/1] (0.79ns)   --->   "%icmp_ln80_6 = icmp_slt  i4 %i_1, i4 1" [d6.cpp:80]   --->   Operation 73 'icmp' 'icmp_ln80_6' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 74 [1/1] (0.79ns)   --->   "%add_ln67 = add i4 %i_1, i4 15" [d6.cpp:67]   --->   Operation 74 'add' 'add_ln67' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 75 [1/1] (0.42ns)   --->   "%store_ln67 = store i4 %add_ln67, i4 %i" [d6.cpp:67]   --->   Operation 75 'store' 'store_ln67' <Predicate = (!tmp)> <Delay = 0.42>

State 2 <SV = 1> <Delay = 6.89>
ST_2 : Operation 76 [1/1] (0.00ns)   --->   "%zext_ln80 = zext i64 %tmp_s" [d6.cpp:80]   --->   Operation 76 'zext' 'zext_ln80' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 77 [1/1] (0.72ns)   --->   "%tmp_1 = mux i64 @_ssdm_op_Mux.ap_auto.8i64.i3, i64 %arg2_r_reload_read, i64 %arg2_r_1_reload_read, i64 %arg2_r_2_reload_read, i64 %arg2_r_3_reload_read, i64 %arg2_r_4_reload_read, i64 %arg2_r_5_reload_read, i64 %arg2_r_6_reload_read, i64 %arg2_r_7_reload_read, i3 %xor_ln70" [d6.cpp:80]   --->   Operation 77 'mux' 'tmp_1' <Predicate = true> <Delay = 0.72> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.72> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 78 [1/1] (0.00ns)   --->   "%zext_ln80_1 = zext i64 %tmp_1" [d6.cpp:80]   --->   Operation 78 'zext' 'zext_ln80_1' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.82ns)   --->   Input mux for Operation 79 '%mul_ln80 = mul i128 %zext_ln80_1, i128 %zext_ln80'
ST_2 : Operation 79 [1/1] (3.70ns)   --->   "%mul_ln80 = mul i128 %zext_ln80_1, i128 %zext_ln80" [d6.cpp:80]   --->   Operation 79 'mul' 'mul_ln80' <Predicate = true> <Delay = 3.70> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 80 [1/1] (0.72ns)   --->   "%tmp_2 = mux i64 @_ssdm_op_Mux.ap_auto.8i64.i3, i64 0, i64 %arg2_r_reload_read, i64 %arg2_r_1_reload_read, i64 %arg2_r_2_reload_read, i64 %arg2_r_3_reload_read, i64 %arg2_r_4_reload_read, i64 %arg2_r_5_reload_read, i64 %arg2_r_6_reload_read, i3 %xor_ln70" [d6.cpp:80]   --->   Operation 80 'mux' 'tmp_2' <Predicate = true> <Delay = 0.72> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.72> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 81 [1/1] (0.00ns)   --->   "%zext_ln80_2 = zext i64 %tmp_2" [d6.cpp:80]   --->   Operation 81 'zext' 'zext_ln80_2' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.82ns)   --->   Input mux for Operation 82 '%mul_ln80_1 = mul i128 %zext_ln80_2, i128 %zext_ln80'
ST_2 : Operation 82 [1/1] (3.70ns)   --->   "%mul_ln80_1 = mul i128 %zext_ln80_2, i128 %zext_ln80" [d6.cpp:80]   --->   Operation 82 'mul' 'mul_ln80_1' <Predicate = true> <Delay = 3.70> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 83 [1/1] (0.77ns)   --->   "%tmp_3 = mux i64 @_ssdm_op_Mux.ap_auto.9i64.i4, i64 %arg2_r_reload_read, i64 %arg2_r_1_reload_read, i64 %arg2_r_2_reload_read, i64 %arg2_r_3_reload_read, i64 %arg2_r_4_reload_read, i64 %arg2_r_5_reload_read, i64 %arg2_r_6_reload_read, i64 %arg2_r_7_reload_read, i64 %arg2_r_8_reload_read, i4 %add_ln77" [d6.cpp:80]   --->   Operation 83 'mux' 'tmp_3' <Predicate = true> <Delay = 0.77> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 84 [1/1] (0.00ns)   --->   "%zext_ln80_3 = zext i64 %tmp_3" [d6.cpp:80]   --->   Operation 84 'zext' 'zext_ln80_3' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.82ns)   --->   Input mux for Operation 85 '%mul_ln80_2 = mul i128 %zext_ln80_3, i128 %zext_ln80'
ST_2 : Operation 85 [1/1] (3.70ns)   --->   "%mul_ln80_2 = mul i128 %zext_ln80_3, i128 %zext_ln80" [d6.cpp:80]   --->   Operation 85 'mul' 'mul_ln80_2' <Predicate = true> <Delay = 3.70> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 86 [1/1] (0.77ns)   --->   "%tmp_4 = mux i64 @_ssdm_op_Mux.ap_auto.9i64.i4, i64 %arg2_r_reload_read, i64 %arg2_r_1_reload_read, i64 %arg2_r_2_reload_read, i64 %arg2_r_3_reload_read, i64 %arg2_r_4_reload_read, i64 %arg2_r_5_reload_read, i64 %arg2_r_6_reload_read, i64 %arg2_r_7_reload_read, i64 %arg2_r_8_reload_read, i4 %sub_ln77_3" [d6.cpp:80]   --->   Operation 86 'mux' 'tmp_4' <Predicate = true> <Delay = 0.77> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 87 [1/1] (0.00ns)   --->   "%zext_ln80_4 = zext i64 %tmp_4" [d6.cpp:80]   --->   Operation 87 'zext' 'zext_ln80_4' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.82ns)   --->   Input mux for Operation 88 '%mul_ln80_3 = mul i128 %zext_ln80_4, i128 %zext_ln80'
ST_2 : Operation 88 [1/1] (3.70ns)   --->   "%mul_ln80_3 = mul i128 %zext_ln80_4, i128 %zext_ln80" [d6.cpp:80]   --->   Operation 88 'mul' 'mul_ln80_3' <Predicate = true> <Delay = 3.70> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 89 [1/1] (0.77ns)   --->   "%tmp_5 = mux i64 @_ssdm_op_Mux.ap_auto.9i64.i4, i64 %arg2_r_reload_read, i64 %arg2_r_1_reload_read, i64 %arg2_r_2_reload_read, i64 %arg2_r_3_reload_read, i64 %arg2_r_4_reload_read, i64 %arg2_r_5_reload_read, i64 %arg2_r_6_reload_read, i64 %arg2_r_7_reload_read, i64 %arg2_r_8_reload_read, i4 %sub_ln77_4" [d6.cpp:80]   --->   Operation 89 'mux' 'tmp_5' <Predicate = true> <Delay = 0.77> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 90 [1/1] (0.00ns)   --->   "%zext_ln80_5 = zext i64 %tmp_5" [d6.cpp:80]   --->   Operation 90 'zext' 'zext_ln80_5' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.82ns)   --->   Input mux for Operation 91 '%mul_ln80_4 = mul i128 %zext_ln80_5, i128 %zext_ln80'
ST_2 : Operation 91 [1/1] (3.70ns)   --->   "%mul_ln80_4 = mul i128 %zext_ln80_5, i128 %zext_ln80" [d6.cpp:80]   --->   Operation 91 'mul' 'mul_ln80_4' <Predicate = true> <Delay = 3.70> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 92 [1/1] (0.77ns)   --->   "%tmp_7 = mux i64 @_ssdm_op_Mux.ap_auto.9i64.i4, i64 %arg2_r_reload_read, i64 %arg2_r_1_reload_read, i64 %arg2_r_2_reload_read, i64 %arg2_r_3_reload_read, i64 %arg2_r_4_reload_read, i64 %arg2_r_5_reload_read, i64 %arg2_r_6_reload_read, i64 %arg2_r_7_reload_read, i64 %arg2_r_8_reload_read, i4 %sub_ln77" [d6.cpp:80]   --->   Operation 92 'mux' 'tmp_7' <Predicate = true> <Delay = 0.77> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 93 [1/1] (0.00ns)   --->   "%zext_ln80_6 = zext i64 %tmp_7" [d6.cpp:80]   --->   Operation 93 'zext' 'zext_ln80_6' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.82ns)   --->   Input mux for Operation 94 '%mul_ln80_5 = mul i128 %zext_ln80_6, i128 %zext_ln80'
ST_2 : Operation 94 [1/1] (3.70ns)   --->   "%mul_ln80_5 = mul i128 %zext_ln80_6, i128 %zext_ln80" [d6.cpp:80]   --->   Operation 94 'mul' 'mul_ln80_5' <Predicate = true> <Delay = 3.70> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 95 [1/1] (0.00ns)   --->   "%zext_ln81_3 = zext i1 %icmp_ln80_4" [d6.cpp:81]   --->   Operation 95 'zext' 'zext_ln81_3' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 96 [1/1] (0.79ns)   --->   "%sub_ln77_1 = sub i4 %sub_ln77, i4 %zext_ln81_3" [d6.cpp:77]   --->   Operation 96 'sub' 'sub_ln77_1' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 97 [1/1] (0.77ns)   --->   "%tmp_8 = mux i64 @_ssdm_op_Mux.ap_auto.9i64.i4, i64 %arg2_r_reload_read, i64 %arg2_r_1_reload_read, i64 %arg2_r_2_reload_read, i64 %arg2_r_3_reload_read, i64 %arg2_r_4_reload_read, i64 %arg2_r_5_reload_read, i64 %arg2_r_6_reload_read, i64 %arg2_r_7_reload_read, i64 %arg2_r_8_reload_read, i4 %sub_ln77_1" [d6.cpp:80]   --->   Operation 97 'mux' 'tmp_8' <Predicate = true> <Delay = 0.77> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 98 [1/1] (0.00ns)   --->   "%zext_ln80_7 = zext i64 %tmp_8" [d6.cpp:80]   --->   Operation 98 'zext' 'zext_ln80_7' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.82ns)   --->   Input mux for Operation 99 '%mul_ln80_6 = mul i128 %zext_ln80_7, i128 %zext_ln80'
ST_2 : Operation 99 [1/1] (3.70ns)   --->   "%mul_ln80_6 = mul i128 %zext_ln80_7, i128 %zext_ln80" [d6.cpp:80]   --->   Operation 99 'mul' 'mul_ln80_6' <Predicate = true> <Delay = 3.70> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 100 [1/1] (0.00ns)   --->   "%zext_ln81_4 = zext i1 %icmp_ln80_5" [d6.cpp:81]   --->   Operation 100 'zext' 'zext_ln81_4' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 101 [1/1] (0.79ns)   --->   "%sub_ln77_2 = sub i4 %sub_ln77_1, i4 %zext_ln81_4" [d6.cpp:77]   --->   Operation 101 'sub' 'sub_ln77_2' <Predicate = true> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 102 [1/1] (0.77ns)   --->   "%tmp_10 = mux i64 @_ssdm_op_Mux.ap_auto.9i64.i4, i64 %arg2_r_reload_read, i64 %arg2_r_1_reload_read, i64 %arg2_r_2_reload_read, i64 %arg2_r_3_reload_read, i64 %arg2_r_4_reload_read, i64 %arg2_r_5_reload_read, i64 %arg2_r_6_reload_read, i64 %arg2_r_7_reload_read, i64 %arg2_r_8_reload_read, i4 %sub_ln77_2" [d6.cpp:80]   --->   Operation 102 'mux' 'tmp_10' <Predicate = true> <Delay = 0.77> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 103 [1/1] (0.00ns)   --->   "%zext_ln80_8 = zext i64 %tmp_10" [d6.cpp:80]   --->   Operation 103 'zext' 'zext_ln80_8' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.82ns)   --->   Input mux for Operation 104 '%mul_ln80_7 = mul i128 %zext_ln80_8, i128 %zext_ln80'
ST_2 : Operation 104 [1/1] (3.70ns)   --->   "%mul_ln80_7 = mul i128 %zext_ln80_8, i128 %zext_ln80" [d6.cpp:80]   --->   Operation 104 'mul' 'mul_ln80_7' <Predicate = true> <Delay = 3.70> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 147 [1/1] (0.00ns)   --->   "%add124126_load_1 = load i128 %add124126"   --->   Operation 147 'load' 'add124126_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 148 [1/1] (0.00ns)   --->   "%add124_1127_load_1 = load i128 %add124_1127"   --->   Operation 148 'load' 'add124_1127_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 149 [1/1] (0.00ns)   --->   "%add124_2128_load_1 = load i128 %add124_2128"   --->   Operation 149 'load' 'add124_2128_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 150 [1/1] (0.00ns)   --->   "%add124_3129_load_1 = load i128 %add124_3129"   --->   Operation 150 'load' 'add124_3129_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 151 [1/1] (0.00ns)   --->   "%add124_4130_load_1 = load i128 %add124_4130"   --->   Operation 151 'load' 'add124_4130_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 152 [1/1] (0.00ns)   --->   "%add124_5131_load_1 = load i128 %add124_5131"   --->   Operation 152 'load' 'add124_5131_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 153 [1/1] (0.00ns)   --->   "%add124_6132_load_1 = load i128 %add124_6132"   --->   Operation 153 'load' 'add124_6132_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 154 [1/1] (0.00ns)   --->   "%add124_7133_load_1 = load i128 %add124_7133"   --->   Operation 154 'load' 'add124_7133_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 155 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i128P0A, i128 %add124_7133_out, i128 %add124_7133_load_1"   --->   Operation 155 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 156 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i128P0A, i128 %add124_6132_out, i128 %add124_6132_load_1"   --->   Operation 156 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 157 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i128P0A, i128 %add124_5131_out, i128 %add124_5131_load_1"   --->   Operation 157 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 158 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i128P0A, i128 %add124_4130_out, i128 %add124_4130_load_1"   --->   Operation 158 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 159 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i128P0A, i128 %add124_3129_out, i128 %add124_3129_load_1"   --->   Operation 159 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 160 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i128P0A, i128 %add124_2128_out, i128 %add124_2128_load_1"   --->   Operation 160 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 161 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i128P0A, i128 %add124_1127_out, i128 %add124_1127_load_1"   --->   Operation 161 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 162 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i128P0A, i128 %add124126_out, i128 %add124126_load_1"   --->   Operation 162 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_2 : Operation 163 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 163 'ret' 'ret_ln0' <Predicate = (tmp)> <Delay = 0.00>

State 3 <SV = 2> <Delay = 2.00>
ST_3 : Operation 105 [1/1] (0.00ns)   --->   "%add124126_load = load i128 %add124126" [d6.cpp:80]   --->   Operation 105 'load' 'add124126_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 106 [1/1] (0.00ns)   --->   "%add124_1127_load = load i128 %add124_1127" [d6.cpp:80]   --->   Operation 106 'load' 'add124_1127_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 107 [1/1] (0.00ns)   --->   "%add124_2128_load = load i128 %add124_2128" [d6.cpp:80]   --->   Operation 107 'load' 'add124_2128_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 108 [1/1] (0.00ns)   --->   "%add124_3129_load = load i128 %add124_3129" [d6.cpp:80]   --->   Operation 108 'load' 'add124_3129_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 109 [1/1] (0.00ns)   --->   "%add124_4130_load = load i128 %add124_4130" [d6.cpp:80]   --->   Operation 109 'load' 'add124_4130_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 110 [1/1] (0.00ns)   --->   "%add124_5131_load = load i128 %add124_5131" [d6.cpp:80]   --->   Operation 110 'load' 'add124_5131_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 111 [1/1] (0.00ns)   --->   "%add124_6132_load = load i128 %add124_6132" [d6.cpp:80]   --->   Operation 111 'load' 'add124_6132_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 112 [1/1] (0.00ns)   --->   "%add124_7133_load = load i128 %add124_7133" [d6.cpp:80]   --->   Operation 112 'load' 'add124_7133_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 113 [1/1] (0.00ns)   --->   "%specpipeline_ln69 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty_3" [d6.cpp:69]   --->   Operation 113 'specpipeline' 'specpipeline_ln69' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 114 [1/1] (0.00ns)   --->   "%speclooptripcount_ln34 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 8, i64 8, i64 8" [d6.cpp:34]   --->   Operation 114 'speclooptripcount' 'speclooptripcount_ln34' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 115 [1/1] (0.00ns)   --->   "%specloopname_ln67 = specloopname void @_ssdm_op_SpecLoopName, void @empty_8" [d6.cpp:67]   --->   Operation 115 'specloopname' 'specloopname_ln67' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 116 [1/1] (1.57ns)   --->   "%add_ln80 = add i128 %mul_ln80, i128 %add124126_load" [d6.cpp:80]   --->   Operation 116 'add' 'add_ln80' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 117 [1/1] (0.00ns) (grouped into LUT with out node add_ln80_1)   --->   "%select_ln80 = select i1 %icmp_ln80, i128 340282366920938463463374607431768211455, i128 0" [d6.cpp:80]   --->   Operation 117 'select' 'select_ln80' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 118 [1/1] (0.00ns) (grouped into LUT with out node add_ln80_1)   --->   "%and_ln80 = and i128 %mul_ln80_1, i128 %select_ln80" [d6.cpp:80]   --->   Operation 118 'and' 'and_ln80' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 119 [1/1] (1.57ns) (out node of the LUT)   --->   "%add_ln80_1 = add i128 %and_ln80, i128 %add124_1127_load" [d6.cpp:80]   --->   Operation 119 'add' 'add_ln80_1' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 120 [1/1] (0.00ns) (grouped into LUT with out node add_ln80_2)   --->   "%select_ln80_1 = select i1 %icmp_ln80_1, i128 340282366920938463463374607431768211455, i128 0" [d6.cpp:80]   --->   Operation 120 'select' 'select_ln80_1' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 121 [1/1] (0.00ns) (grouped into LUT with out node add_ln80_2)   --->   "%and_ln80_1 = and i128 %mul_ln80_2, i128 %select_ln80_1" [d6.cpp:80]   --->   Operation 121 'and' 'and_ln80_1' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 122 [1/1] (1.57ns) (out node of the LUT)   --->   "%add_ln80_2 = add i128 %and_ln80_1, i128 %add124_2128_load" [d6.cpp:80]   --->   Operation 122 'add' 'add_ln80_2' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 123 [1/1] (0.00ns) (grouped into LUT with out node add_ln80_3)   --->   "%select_ln80_2 = select i1 %icmp_ln80_2, i128 340282366920938463463374607431768211455, i128 0" [d6.cpp:80]   --->   Operation 123 'select' 'select_ln80_2' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 124 [1/1] (0.00ns) (grouped into LUT with out node add_ln80_3)   --->   "%and_ln80_2 = and i128 %mul_ln80_3, i128 %select_ln80_2" [d6.cpp:80]   --->   Operation 124 'and' 'and_ln80_2' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 125 [1/1] (1.57ns) (out node of the LUT)   --->   "%add_ln80_3 = add i128 %and_ln80_2, i128 %add124_3129_load" [d6.cpp:80]   --->   Operation 125 'add' 'add_ln80_3' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 126 [1/1] (0.00ns) (grouped into LUT with out node add_ln80_4)   --->   "%select_ln80_3 = select i1 %icmp_ln80_3, i128 340282366920938463463374607431768211455, i128 0" [d6.cpp:80]   --->   Operation 126 'select' 'select_ln80_3' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 127 [1/1] (0.00ns) (grouped into LUT with out node add_ln80_4)   --->   "%and_ln80_3 = and i128 %mul_ln80_4, i128 %select_ln80_3" [d6.cpp:80]   --->   Operation 127 'and' 'and_ln80_3' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 128 [1/1] (1.57ns) (out node of the LUT)   --->   "%add_ln80_4 = add i128 %and_ln80_3, i128 %add124_4130_load" [d6.cpp:80]   --->   Operation 128 'add' 'add_ln80_4' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 129 [1/1] (0.00ns) (grouped into LUT with out node add_ln80_5)   --->   "%select_ln80_4 = select i1 %icmp_ln80_4, i128 340282366920938463463374607431768211455, i128 0" [d6.cpp:80]   --->   Operation 129 'select' 'select_ln80_4' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 130 [1/1] (0.00ns) (grouped into LUT with out node add_ln80_5)   --->   "%and_ln80_4 = and i128 %mul_ln80_5, i128 %select_ln80_4" [d6.cpp:80]   --->   Operation 130 'and' 'and_ln80_4' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 131 [1/1] (1.57ns) (out node of the LUT)   --->   "%add_ln80_5 = add i128 %and_ln80_4, i128 %add124_5131_load" [d6.cpp:80]   --->   Operation 131 'add' 'add_ln80_5' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 132 [1/1] (0.00ns) (grouped into LUT with out node add_ln80_6)   --->   "%select_ln80_5 = select i1 %icmp_ln80_5, i128 340282366920938463463374607431768211455, i128 0" [d6.cpp:80]   --->   Operation 132 'select' 'select_ln80_5' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 133 [1/1] (0.00ns) (grouped into LUT with out node add_ln80_6)   --->   "%and_ln80_5 = and i128 %mul_ln80_6, i128 %select_ln80_5" [d6.cpp:80]   --->   Operation 133 'and' 'and_ln80_5' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 134 [1/1] (1.57ns) (out node of the LUT)   --->   "%add_ln80_6 = add i128 %and_ln80_5, i128 %add124_6132_load" [d6.cpp:80]   --->   Operation 134 'add' 'add_ln80_6' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 135 [1/1] (0.00ns) (grouped into LUT with out node add_ln80_7)   --->   "%select_ln80_6 = select i1 %icmp_ln80_6, i128 340282366920938463463374607431768211455, i128 0" [d6.cpp:80]   --->   Operation 135 'select' 'select_ln80_6' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 136 [1/1] (0.00ns) (grouped into LUT with out node add_ln80_7)   --->   "%and_ln80_6 = and i128 %mul_ln80_7, i128 %select_ln80_6" [d6.cpp:80]   --->   Operation 136 'and' 'and_ln80_6' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 137 [1/1] (1.57ns) (out node of the LUT)   --->   "%add_ln80_7 = add i128 %and_ln80_6, i128 %add124_7133_load" [d6.cpp:80]   --->   Operation 137 'add' 'add_ln80_7' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 138 [1/1] (0.42ns)   --->   "%store_ln67 = store i128 %add_ln80_7, i128 %add124_7133" [d6.cpp:67]   --->   Operation 138 'store' 'store_ln67' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 139 [1/1] (0.42ns)   --->   "%store_ln67 = store i128 %add_ln80_6, i128 %add124_6132" [d6.cpp:67]   --->   Operation 139 'store' 'store_ln67' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 140 [1/1] (0.42ns)   --->   "%store_ln67 = store i128 %add_ln80_5, i128 %add124_5131" [d6.cpp:67]   --->   Operation 140 'store' 'store_ln67' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 141 [1/1] (0.42ns)   --->   "%store_ln67 = store i128 %add_ln80_4, i128 %add124_4130" [d6.cpp:67]   --->   Operation 141 'store' 'store_ln67' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 142 [1/1] (0.42ns)   --->   "%store_ln67 = store i128 %add_ln80_3, i128 %add124_3129" [d6.cpp:67]   --->   Operation 142 'store' 'store_ln67' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 143 [1/1] (0.42ns)   --->   "%store_ln67 = store i128 %add_ln80_2, i128 %add124_2128" [d6.cpp:67]   --->   Operation 143 'store' 'store_ln67' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 144 [1/1] (0.42ns)   --->   "%store_ln67 = store i128 %add_ln80_1, i128 %add124_1127" [d6.cpp:67]   --->   Operation 144 'store' 'store_ln67' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 145 [1/1] (0.42ns)   --->   "%store_ln67 = store i128 %add_ln80, i128 %add124126" [d6.cpp:67]   --->   Operation 145 'store' 'store_ln67' <Predicate = true> <Delay = 0.42>
ST_3 : Operation 146 [1/1] (0.00ns)   --->   "%br_ln67 = br void %for.inc131" [d6.cpp:67]   --->   Operation 146 'br' 'br_ln67' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 3.861ns
The critical path consists of the following:
	'alloca' operation ('i') [42]  (0.000 ns)
	'load' operation ('i', d6.cpp:80) on local variable 'i' [79]  (0.000 ns)
	'icmp' operation ('icmp_ln80', d6.cpp:80) [105]  (0.797 ns)
	'select' operation ('select_ln77', d6.cpp:77) [110]  (0.000 ns)
	'add' operation ('add_ln77', d6.cpp:77) [111]  (0.673 ns)
	'sub' operation ('sub_ln77_3', d6.cpp:77) [120]  (0.797 ns)
	'sub' operation ('sub_ln77_4', d6.cpp:77) [129]  (0.797 ns)
	'sub' operation ('sub_ln77', d6.cpp:77) [139]  (0.797 ns)

 <State 2>: 6.894ns
The critical path consists of the following:
	'sub' operation ('sub_ln77_1', d6.cpp:77) [148]  (0.797 ns)
	'sub' operation ('sub_ln77_2', d6.cpp:77) [158]  (0.797 ns)
	'mux' operation ('tmp_10', d6.cpp:80) [159]  (0.770 ns)
	multiplexor before operation 'mul' with delay (0.823 ns)
'mul' operation ('mul_ln80_7', d6.cpp:80) [162]  (3.707 ns)

 <State 3>: 2.006ns
The critical path consists of the following:
	'load' operation ('add124_7133_load', d6.cpp:80) on local variable 'add124_7133' [90]  (0.000 ns)
	'add' operation ('add_ln80_7', d6.cpp:80) [165]  (1.579 ns)
	'store' operation ('store_ln67', d6.cpp:67) of variable 'add_ln80_7', d6.cpp:80 on local variable 'add124_7133' [168]  (0.427 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
