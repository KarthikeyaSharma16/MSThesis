-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity test_test_Pipeline_VITIS_LOOP_67_7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arr_7 : IN STD_LOGIC_VECTOR (127 downto 0);
    arr_6 : IN STD_LOGIC_VECTOR (127 downto 0);
    arr_5 : IN STD_LOGIC_VECTOR (127 downto 0);
    arr_4 : IN STD_LOGIC_VECTOR (127 downto 0);
    arr_3 : IN STD_LOGIC_VECTOR (127 downto 0);
    arr_2 : IN STD_LOGIC_VECTOR (127 downto 0);
    arr_1 : IN STD_LOGIC_VECTOR (127 downto 0);
    arr : IN STD_LOGIC_VECTOR (127 downto 0);
    arg1_r_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_1_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_2_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_3_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_4_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_5_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_6_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_7_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg2_r_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg2_r_1_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg2_r_2_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg2_r_3_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg2_r_4_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg2_r_5_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg2_r_6_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg2_r_7_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg2_r_8_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    add124_7123_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    add124_7123_out_ap_vld : OUT STD_LOGIC;
    add124_6122_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    add124_6122_out_ap_vld : OUT STD_LOGIC;
    add124_5121_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    add124_5121_out_ap_vld : OUT STD_LOGIC;
    add124_4120_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    add124_4120_out_ap_vld : OUT STD_LOGIC;
    add124_3119_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    add124_3119_out_ap_vld : OUT STD_LOGIC;
    add124_2118_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    add124_2118_out_ap_vld : OUT STD_LOGIC;
    add124_1117_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    add124_1117_out_ap_vld : OUT STD_LOGIC;
    add124116_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    add124116_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of test_test_Pipeline_VITIS_LOOP_67_7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_9_fu_450_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_9_reg_1195 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln70_fu_462_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln70_reg_1199 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_472_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_1205 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln80_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_1210 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_1210_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln77_fu_508_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln77_reg_1215 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln80_1_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_1_reg_1220 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_1_reg_1220_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln77_3_fu_524_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln77_3_reg_1225 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln80_2_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_2_reg_1230 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_2_reg_1230_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln77_4_fu_540_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln77_4_reg_1235 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln80_3_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_3_reg_1240 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_3_reg_1240_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln77_fu_566_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln77_reg_1245 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln80_4_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_4_reg_1251 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_4_reg_1251_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_5_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_5_reg_1257 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_5_reg_1257_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_6_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_6_reg_1263 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_6_reg_1263_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln80_fu_370_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_reg_1268 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_1_fu_374_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_1_reg_1273 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_2_fu_378_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_2_reg_1278 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_3_fu_382_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_3_reg_1283 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_4_fu_386_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_4_reg_1288 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_5_fu_390_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_5_reg_1293 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_6_fu_394_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_6_reg_1298 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_7_fu_398_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_7_reg_1303 : STD_LOGIC_VECTOR (127 downto 0);
    signal add124116_fu_128 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln80_fu_816_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal add124_1117_fu_132 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln80_1_fu_833_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add124_2118_fu_136 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln80_2_fu_851_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add124_3119_fu_140 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln80_3_fu_869_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add124_4120_fu_144 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln80_4_fu_887_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add124_5121_fu_148 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln80_5_fu_905_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add124_6122_fu_152 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln80_6_fu_923_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add124_7123_fu_156 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln80_7_fu_941_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_fu_160 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln67_fu_600_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln80_fu_370_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln80_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln80_fu_611_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_1_fu_374_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln80_1_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln80_2_fu_378_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln80_2_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln80_3_fu_382_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln80_3_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln80_4_fu_386_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln80_4_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln80_5_fu_390_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln80_5_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln80_6_fu_394_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln80_6_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln80_7_fu_398_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln80_7_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln34_fu_458_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln77_fu_500_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln80_9_fu_468_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln81_fu_520_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln81_1_fu_536_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_546_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln81_2_fu_562_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_578_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_622_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_640_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_659_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_678_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_697_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_716_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln81_3_fu_735_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln77_1_fu_738_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_743_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln81_4_fu_763_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_772_p10 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_772_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln80_fu_821_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln80_fu_828_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln80_1_fu_839_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln80_1_fu_846_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln80_2_fu_857_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln80_2_fu_864_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln80_3_fu_875_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln80_3_fu_882_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln80_4_fu_893_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln80_4_fu_900_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln80_5_fu_911_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln80_5_fu_918_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln80_6_fu_929_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln80_6_fu_936_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln80_1_fu_374_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_2_fu_378_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_3_fu_382_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_4_fu_386_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_5_fu_390_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_6_fu_394_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_7_fu_398_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln80_fu_370_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component test_mul_64ns_64ns_128_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component test_mux_8_3_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component test_mux_9_4_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        din9 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component test_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_64ns_64ns_128_1_1_U23 : component test_mul_64ns_64ns_128_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        din0 => mul_ln80_fu_370_p0,
        din1 => mul_ln80_fu_370_p1,
        dout => mul_ln80_fu_370_p2);

    mul_64ns_64ns_128_1_1_U24 : component test_mul_64ns_64ns_128_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        din0 => mul_ln80_1_fu_374_p0,
        din1 => mul_ln80_1_fu_374_p1,
        dout => mul_ln80_1_fu_374_p2);

    mul_64ns_64ns_128_1_1_U25 : component test_mul_64ns_64ns_128_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        din0 => mul_ln80_2_fu_378_p0,
        din1 => mul_ln80_2_fu_378_p1,
        dout => mul_ln80_2_fu_378_p2);

    mul_64ns_64ns_128_1_1_U26 : component test_mul_64ns_64ns_128_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        din0 => mul_ln80_3_fu_382_p0,
        din1 => mul_ln80_3_fu_382_p1,
        dout => mul_ln80_3_fu_382_p2);

    mul_64ns_64ns_128_1_1_U27 : component test_mul_64ns_64ns_128_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        din0 => mul_ln80_4_fu_386_p0,
        din1 => mul_ln80_4_fu_386_p1,
        dout => mul_ln80_4_fu_386_p2);

    mul_64ns_64ns_128_1_1_U28 : component test_mul_64ns_64ns_128_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        din0 => mul_ln80_5_fu_390_p0,
        din1 => mul_ln80_5_fu_390_p1,
        dout => mul_ln80_5_fu_390_p2);

    mul_64ns_64ns_128_1_1_U29 : component test_mul_64ns_64ns_128_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        din0 => mul_ln80_6_fu_394_p0,
        din1 => mul_ln80_6_fu_394_p1,
        dout => mul_ln80_6_fu_394_p2);

    mul_64ns_64ns_128_1_1_U30 : component test_mul_64ns_64ns_128_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        din0 => mul_ln80_7_fu_398_p0,
        din1 => mul_ln80_7_fu_398_p1,
        dout => mul_ln80_7_fu_398_p2);

    mux_8_3_64_1_1_U31 : component test_mux_8_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => arg1_r_reload,
        din1 => arg1_r_1_reload,
        din2 => arg1_r_2_reload,
        din3 => arg1_r_3_reload,
        din4 => arg1_r_4_reload,
        din5 => arg1_r_5_reload,
        din6 => arg1_r_6_reload,
        din7 => arg1_r_7_reload,
        din8 => trunc_ln34_fu_458_p1,
        dout => tmp_fu_472_p10);

    mux_8_3_64_1_1_U32 : component test_mux_8_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => arg2_r_7_reload,
        din8 => xor_ln70_reg_1199,
        dout => tmp_1_fu_622_p10);

    mux_8_3_64_1_1_U33 : component test_mux_8_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => ap_const_lv64_0,
        din1 => arg2_r_reload,
        din2 => arg2_r_1_reload,
        din3 => arg2_r_2_reload,
        din4 => arg2_r_3_reload,
        din5 => arg2_r_4_reload,
        din6 => arg2_r_5_reload,
        din7 => arg2_r_6_reload,
        din8 => xor_ln70_reg_1199,
        dout => tmp_2_fu_640_p10);

    mux_9_4_64_1_1_U34 : component test_mux_9_4_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => arg2_r_7_reload,
        din8 => arg2_r_8_reload,
        din9 => add_ln77_reg_1215,
        dout => tmp_3_fu_659_p11);

    mux_9_4_64_1_1_U35 : component test_mux_9_4_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => arg2_r_7_reload,
        din8 => arg2_r_8_reload,
        din9 => sub_ln77_3_reg_1225,
        dout => tmp_4_fu_678_p11);

    mux_9_4_64_1_1_U36 : component test_mux_9_4_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => arg2_r_7_reload,
        din8 => arg2_r_8_reload,
        din9 => sub_ln77_4_reg_1235,
        dout => tmp_5_fu_697_p11);

    mux_9_4_64_1_1_U37 : component test_mux_9_4_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => arg2_r_7_reload,
        din8 => arg2_r_8_reload,
        din9 => sub_ln77_reg_1245,
        dout => tmp_6_fu_716_p11);

    mux_9_4_64_1_1_U38 : component test_mux_9_4_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => arg2_r_7_reload,
        din8 => arg2_r_8_reload,
        din9 => sub_ln77_1_fu_738_p2,
        dout => tmp_7_fu_743_p11);

    mux_9_4_64_1_1_U39 : component test_mux_9_4_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => arg2_r_7_reload,
        din8 => arg2_r_8_reload,
        din9 => tmp_8_fu_772_p10,
        dout => tmp_8_fu_772_p11);

    flow_control_loop_pipe_sequential_init_U : component test_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    add124116_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add124116_fu_128 <= arr;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    add124116_fu_128 <= add_ln80_fu_816_p2;
                end if;
            end if; 
        end if;
    end process;

    add124_1117_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add124_1117_fu_132 <= arr_1;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    add124_1117_fu_132 <= add_ln80_1_fu_833_p2;
                end if;
            end if; 
        end if;
    end process;

    add124_2118_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add124_2118_fu_136 <= arr_2;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    add124_2118_fu_136 <= add_ln80_2_fu_851_p2;
                end if;
            end if; 
        end if;
    end process;

    add124_3119_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add124_3119_fu_140 <= arr_3;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    add124_3119_fu_140 <= add_ln80_3_fu_869_p2;
                end if;
            end if; 
        end if;
    end process;

    add124_4120_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add124_4120_fu_144 <= arr_4;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    add124_4120_fu_144 <= add_ln80_4_fu_887_p2;
                end if;
            end if; 
        end if;
    end process;

    add124_5121_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add124_5121_fu_148 <= arr_5;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    add124_5121_fu_148 <= add_ln80_5_fu_905_p2;
                end if;
            end if; 
        end if;
    end process;

    add124_6122_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add124_6122_fu_152 <= arr_6;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    add124_6122_fu_152 <= add_ln80_6_fu_923_p2;
                end if;
            end if; 
        end if;
    end process;

    add124_7123_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    add124_7123_fu_156 <= arr_7;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    add124_7123_fu_156 <= add_ln80_7_fu_941_p2;
                end if;
            end if; 
        end if;
    end process;

    i_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((tmp_9_fu_450_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_160 <= add_ln67_fu_600_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_160 <= ap_const_lv4_7;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_9_fu_450_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln77_reg_1215 <= add_ln77_fu_508_p2;
                icmp_ln80_1_reg_1220 <= icmp_ln80_1_fu_514_p2;
                icmp_ln80_2_reg_1230 <= icmp_ln80_2_fu_530_p2;
                icmp_ln80_3_reg_1240 <= icmp_ln80_3_fu_556_p2;
                icmp_ln80_4_reg_1251 <= icmp_ln80_4_fu_572_p2;
                icmp_ln80_5_reg_1257 <= icmp_ln80_5_fu_588_p2;
                icmp_ln80_6_reg_1263 <= icmp_ln80_6_fu_594_p2;
                icmp_ln80_reg_1210 <= icmp_ln80_fu_494_p2;
                sub_ln77_3_reg_1225 <= sub_ln77_3_fu_524_p2;
                sub_ln77_4_reg_1235 <= sub_ln77_4_fu_540_p2;
                sub_ln77_reg_1245 <= sub_ln77_fu_566_p2;
                tmp_reg_1205 <= tmp_fu_472_p10;
                xor_ln70_reg_1199 <= xor_ln70_fu_462_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln80_1_reg_1220_pp0_iter1_reg <= icmp_ln80_1_reg_1220;
                icmp_ln80_2_reg_1230_pp0_iter1_reg <= icmp_ln80_2_reg_1230;
                icmp_ln80_3_reg_1240_pp0_iter1_reg <= icmp_ln80_3_reg_1240;
                icmp_ln80_4_reg_1251_pp0_iter1_reg <= icmp_ln80_4_reg_1251;
                icmp_ln80_5_reg_1257_pp0_iter1_reg <= icmp_ln80_5_reg_1257;
                icmp_ln80_6_reg_1263_pp0_iter1_reg <= icmp_ln80_6_reg_1263;
                icmp_ln80_reg_1210_pp0_iter1_reg <= icmp_ln80_reg_1210;
                mul_ln80_1_reg_1273 <= mul_ln80_1_fu_374_p2;
                mul_ln80_2_reg_1278 <= mul_ln80_2_fu_378_p2;
                mul_ln80_3_reg_1283 <= mul_ln80_3_fu_382_p2;
                mul_ln80_4_reg_1288 <= mul_ln80_4_fu_386_p2;
                mul_ln80_5_reg_1293 <= mul_ln80_5_fu_390_p2;
                mul_ln80_6_reg_1298 <= mul_ln80_6_fu_394_p2;
                mul_ln80_7_reg_1303 <= mul_ln80_7_fu_398_p2;
                mul_ln80_reg_1268 <= mul_ln80_fu_370_p2;
                tmp_9_reg_1195 <= ap_sig_allocacmp_i_1(3 downto 3);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add124116_out <= add124116_fu_128;

    add124116_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_9_reg_1195)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_9_reg_1195 = ap_const_lv1_1))) then 
            add124116_out_ap_vld <= ap_const_logic_1;
        else 
            add124116_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add124_1117_out <= add124_1117_fu_132;

    add124_1117_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_9_reg_1195)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_9_reg_1195 = ap_const_lv1_1))) then 
            add124_1117_out_ap_vld <= ap_const_logic_1;
        else 
            add124_1117_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add124_2118_out <= add124_2118_fu_136;

    add124_2118_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_9_reg_1195)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_9_reg_1195 = ap_const_lv1_1))) then 
            add124_2118_out_ap_vld <= ap_const_logic_1;
        else 
            add124_2118_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add124_3119_out <= add124_3119_fu_140;

    add124_3119_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_9_reg_1195)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_9_reg_1195 = ap_const_lv1_1))) then 
            add124_3119_out_ap_vld <= ap_const_logic_1;
        else 
            add124_3119_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add124_4120_out <= add124_4120_fu_144;

    add124_4120_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_9_reg_1195)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_9_reg_1195 = ap_const_lv1_1))) then 
            add124_4120_out_ap_vld <= ap_const_logic_1;
        else 
            add124_4120_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add124_5121_out <= add124_5121_fu_148;

    add124_5121_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_9_reg_1195)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_9_reg_1195 = ap_const_lv1_1))) then 
            add124_5121_out_ap_vld <= ap_const_logic_1;
        else 
            add124_5121_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add124_6122_out <= add124_6122_fu_152;

    add124_6122_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_9_reg_1195)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_9_reg_1195 = ap_const_lv1_1))) then 
            add124_6122_out_ap_vld <= ap_const_logic_1;
        else 
            add124_6122_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add124_7123_out <= add124_7123_fu_156;

    add124_7123_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_9_reg_1195)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_9_reg_1195 = ap_const_lv1_1))) then 
            add124_7123_out_ap_vld <= ap_const_logic_1;
        else 
            add124_7123_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln67_fu_600_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv4_F));
    add_ln77_fu_508_p2 <= std_logic_vector(unsigned(select_ln77_fu_500_p3) + unsigned(zext_ln80_9_fu_468_p1));
    add_ln80_1_fu_833_p2 <= std_logic_vector(unsigned(and_ln80_fu_828_p2) + unsigned(add124_1117_fu_132));
    add_ln80_2_fu_851_p2 <= std_logic_vector(unsigned(and_ln80_1_fu_846_p2) + unsigned(add124_2118_fu_136));
    add_ln80_3_fu_869_p2 <= std_logic_vector(unsigned(and_ln80_2_fu_864_p2) + unsigned(add124_3119_fu_140));
    add_ln80_4_fu_887_p2 <= std_logic_vector(unsigned(and_ln80_3_fu_882_p2) + unsigned(add124_4120_fu_144));
    add_ln80_5_fu_905_p2 <= std_logic_vector(unsigned(and_ln80_4_fu_900_p2) + unsigned(add124_5121_fu_148));
    add_ln80_6_fu_923_p2 <= std_logic_vector(unsigned(and_ln80_5_fu_918_p2) + unsigned(add124_6122_fu_152));
    add_ln80_7_fu_941_p2 <= std_logic_vector(unsigned(and_ln80_6_fu_936_p2) + unsigned(add124_7123_fu_156));
    add_ln80_fu_816_p2 <= std_logic_vector(unsigned(mul_ln80_reg_1268) + unsigned(add124116_fu_128));
    and_ln80_1_fu_846_p2 <= (select_ln80_1_fu_839_p3 and mul_ln80_2_reg_1278);
    and_ln80_2_fu_864_p2 <= (select_ln80_2_fu_857_p3 and mul_ln80_3_reg_1283);
    and_ln80_3_fu_882_p2 <= (select_ln80_3_fu_875_p3 and mul_ln80_4_reg_1288);
    and_ln80_4_fu_900_p2 <= (select_ln80_4_fu_893_p3 and mul_ln80_5_reg_1293);
    and_ln80_5_fu_918_p2 <= (select_ln80_5_fu_911_p3 and mul_ln80_6_reg_1298);
    and_ln80_6_fu_936_p2 <= (select_ln80_6_fu_929_p3 and mul_ln80_7_reg_1303);
    and_ln80_fu_828_p2 <= (select_ln80_fu_821_p3 and mul_ln80_1_reg_1273);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, tmp_9_fu_450_p3)
    begin
        if (((tmp_9_fu_450_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_160)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv4_7;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_160;
        end if; 
    end process;

    icmp_ln80_1_fu_514_p2 <= "1" when (signed(ap_sig_allocacmp_i_1) < signed(ap_const_lv4_6)) else "0";
    icmp_ln80_2_fu_530_p2 <= "1" when (signed(ap_sig_allocacmp_i_1) < signed(ap_const_lv4_5)) else "0";
    icmp_ln80_3_fu_556_p2 <= "0" when (tmp_10_fu_546_p4 = ap_const_lv2_1) else "1";
    icmp_ln80_4_fu_572_p2 <= "1" when (signed(ap_sig_allocacmp_i_1) < signed(ap_const_lv4_3)) else "0";
    icmp_ln80_5_fu_588_p2 <= "1" when (signed(tmp_11_fu_578_p4) < signed(ap_const_lv3_1)) else "0";
    icmp_ln80_6_fu_594_p2 <= "1" when (signed(ap_sig_allocacmp_i_1) < signed(ap_const_lv4_1)) else "0";
    icmp_ln80_fu_494_p2 <= "0" when (ap_sig_allocacmp_i_1 = ap_const_lv4_7) else "1";
    mul_ln80_1_fu_374_p0 <= mul_ln80_1_fu_374_p00(64 - 1 downto 0);
    mul_ln80_1_fu_374_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_640_p10),128));
    mul_ln80_1_fu_374_p1 <= zext_ln80_fu_611_p1(64 - 1 downto 0);
    mul_ln80_2_fu_378_p0 <= mul_ln80_2_fu_378_p00(64 - 1 downto 0);
    mul_ln80_2_fu_378_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_659_p11),128));
    mul_ln80_2_fu_378_p1 <= zext_ln80_fu_611_p1(64 - 1 downto 0);
    mul_ln80_3_fu_382_p0 <= mul_ln80_3_fu_382_p00(64 - 1 downto 0);
    mul_ln80_3_fu_382_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_678_p11),128));
    mul_ln80_3_fu_382_p1 <= zext_ln80_fu_611_p1(64 - 1 downto 0);
    mul_ln80_4_fu_386_p0 <= mul_ln80_4_fu_386_p00(64 - 1 downto 0);
    mul_ln80_4_fu_386_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_697_p11),128));
    mul_ln80_4_fu_386_p1 <= zext_ln80_fu_611_p1(64 - 1 downto 0);
    mul_ln80_5_fu_390_p0 <= mul_ln80_5_fu_390_p00(64 - 1 downto 0);
    mul_ln80_5_fu_390_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_716_p11),128));
    mul_ln80_5_fu_390_p1 <= zext_ln80_fu_611_p1(64 - 1 downto 0);
    mul_ln80_6_fu_394_p0 <= mul_ln80_6_fu_394_p00(64 - 1 downto 0);
    mul_ln80_6_fu_394_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_743_p11),128));
    mul_ln80_6_fu_394_p1 <= zext_ln80_fu_611_p1(64 - 1 downto 0);
    mul_ln80_7_fu_398_p0 <= mul_ln80_7_fu_398_p00(64 - 1 downto 0);
    mul_ln80_7_fu_398_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_772_p11),128));
    mul_ln80_7_fu_398_p1 <= zext_ln80_fu_611_p1(64 - 1 downto 0);
    mul_ln80_fu_370_p0 <= mul_ln80_fu_370_p00(64 - 1 downto 0);
    mul_ln80_fu_370_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_622_p10),128));
    mul_ln80_fu_370_p1 <= zext_ln80_fu_611_p1(64 - 1 downto 0);
    select_ln77_fu_500_p3 <= 
        ap_const_lv4_E when (icmp_ln80_fu_494_p2(0) = '1') else 
        ap_const_lv4_F;
    select_ln80_1_fu_839_p3 <= 
        ap_const_lv128_lc_1 when (icmp_ln80_1_reg_1220_pp0_iter1_reg(0) = '1') else 
        ap_const_lv128_lc_2;
    select_ln80_2_fu_857_p3 <= 
        ap_const_lv128_lc_1 when (icmp_ln80_2_reg_1230_pp0_iter1_reg(0) = '1') else 
        ap_const_lv128_lc_2;
    select_ln80_3_fu_875_p3 <= 
        ap_const_lv128_lc_1 when (icmp_ln80_3_reg_1240_pp0_iter1_reg(0) = '1') else 
        ap_const_lv128_lc_2;
    select_ln80_4_fu_893_p3 <= 
        ap_const_lv128_lc_1 when (icmp_ln80_4_reg_1251_pp0_iter1_reg(0) = '1') else 
        ap_const_lv128_lc_2;
    select_ln80_5_fu_911_p3 <= 
        ap_const_lv128_lc_1 when (icmp_ln80_5_reg_1257_pp0_iter1_reg(0) = '1') else 
        ap_const_lv128_lc_2;
    select_ln80_6_fu_929_p3 <= 
        ap_const_lv128_lc_1 when (icmp_ln80_6_reg_1263_pp0_iter1_reg(0) = '1') else 
        ap_const_lv128_lc_2;
    select_ln80_fu_821_p3 <= 
        ap_const_lv128_lc_1 when (icmp_ln80_reg_1210_pp0_iter1_reg(0) = '1') else 
        ap_const_lv128_lc_2;
    sub_ln77_1_fu_738_p2 <= std_logic_vector(unsigned(sub_ln77_reg_1245) - unsigned(zext_ln81_3_fu_735_p1));
    sub_ln77_3_fu_524_p2 <= std_logic_vector(unsigned(add_ln77_fu_508_p2) - unsigned(zext_ln81_fu_520_p1));
    sub_ln77_4_fu_540_p2 <= std_logic_vector(unsigned(sub_ln77_3_fu_524_p2) - unsigned(zext_ln81_1_fu_536_p1));
    sub_ln77_fu_566_p2 <= std_logic_vector(unsigned(sub_ln77_4_fu_540_p2) - unsigned(zext_ln81_2_fu_562_p1));
    tmp_10_fu_546_p4 <= ap_sig_allocacmp_i_1(3 downto 2);
    tmp_11_fu_578_p4 <= ap_sig_allocacmp_i_1(3 downto 1);
    tmp_8_fu_772_p10 <= std_logic_vector(unsigned(sub_ln77_1_fu_738_p2) - unsigned(zext_ln81_4_fu_763_p1));
    tmp_9_fu_450_p3 <= ap_sig_allocacmp_i_1(3 downto 3);
    trunc_ln34_fu_458_p1 <= ap_sig_allocacmp_i_1(3 - 1 downto 0);
    xor_ln70_fu_462_p2 <= (trunc_ln34_fu_458_p1 xor ap_const_lv3_7);
    zext_ln80_9_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln70_fu_462_p2),4));
    zext_ln80_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1205),128));
    zext_ln81_1_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln80_2_fu_530_p2),4));
    zext_ln81_2_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln80_3_fu_556_p2),4));
    zext_ln81_3_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln80_4_reg_1251),4));
    zext_ln81_4_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln80_5_reg_1257),4));
    zext_ln81_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln80_1_fu_514_p2),4));
end behav;
