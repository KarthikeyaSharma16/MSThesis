// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_67_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add_791_reload,
        add_690_reload,
        add_589_reload,
        add_488_reload,
        add_387_reload,
        add_286_reload,
        add_16985_reload,
        add84_reload,
        arg1_r_3_reload,
        arg1_r_4_reload,
        arg1_r_5_reload,
        arg1_r_6_reload,
        arg1_r_7_reload,
        arg2_r_reload,
        arg2_r_1_reload,
        arg2_r_2_reload,
        arg2_r_3_reload,
        arg2_r_4_reload,
        arg2_r_5_reload,
        arg2_r_6_reload,
        arg2_r_7_reload,
        arg2_r_8_reload,
        arg1_r_2_reload,
        arg1_r_1_reload,
        arg1_r_reload,
        add124_781_out,
        add124_781_out_ap_vld,
        add124_680_out,
        add124_680_out_ap_vld,
        add124_579_out,
        add124_579_out_ap_vld,
        add124_478_out,
        add124_478_out_ap_vld,
        add124_35577_out,
        add124_35577_out_ap_vld,
        add124_24176_out,
        add124_24176_out_ap_vld,
        add124_12775_out,
        add124_12775_out_ap_vld,
        add12474_out,
        add12474_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] add_791_reload;
input  [127:0] add_690_reload;
input  [127:0] add_589_reload;
input  [127:0] add_488_reload;
input  [127:0] add_387_reload;
input  [127:0] add_286_reload;
input  [127:0] add_16985_reload;
input  [127:0] add84_reload;
input  [63:0] arg1_r_3_reload;
input  [63:0] arg1_r_4_reload;
input  [63:0] arg1_r_5_reload;
input  [63:0] arg1_r_6_reload;
input  [63:0] arg1_r_7_reload;
input  [63:0] arg2_r_reload;
input  [63:0] arg2_r_1_reload;
input  [63:0] arg2_r_2_reload;
input  [63:0] arg2_r_3_reload;
input  [63:0] arg2_r_4_reload;
input  [63:0] arg2_r_5_reload;
input  [63:0] arg2_r_6_reload;
input  [63:0] arg2_r_7_reload;
input  [63:0] arg2_r_8_reload;
input  [63:0] arg1_r_2_reload;
input  [63:0] arg1_r_1_reload;
input  [63:0] arg1_r_reload;
output  [127:0] add124_781_out;
output   add124_781_out_ap_vld;
output  [127:0] add124_680_out;
output   add124_680_out_ap_vld;
output  [127:0] add124_579_out;
output   add124_579_out_ap_vld;
output  [127:0] add124_478_out;
output   add124_478_out_ap_vld;
output  [127:0] add124_35577_out;
output   add124_35577_out_ap_vld;
output  [127:0] add124_24176_out;
output   add124_24176_out_ap_vld;
output  [127:0] add124_12775_out;
output   add124_12775_out_ap_vld;
output  [127:0] add12474_out;
output   add12474_out_ap_vld;

reg ap_idle;
reg add124_781_out_ap_vld;
reg add124_680_out_ap_vld;
reg add124_579_out_ap_vld;
reg add124_478_out_ap_vld;
reg add124_35577_out_ap_vld;
reg add124_24176_out_ap_vld;
reg add124_12775_out_ap_vld;
reg add12474_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_fu_528_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_reg_2013;
wire   [2:0] trunc_ln34_fu_536_p1;
reg   [2:0] trunc_ln34_reg_2017;
wire   [2:0] xor_ln70_fu_540_p2;
reg   [2:0] xor_ln70_reg_2025;
wire   [0:0] icmp_ln80_fu_550_p2;
reg   [0:0] icmp_ln80_reg_2034;
wire   [3:0] sub_ln77_fu_566_p2;
reg   [3:0] sub_ln77_reg_2039;
wire   [0:0] icmp_ln80_1_fu_572_p2;
reg   [0:0] icmp_ln80_1_reg_2044;
wire   [3:0] sub_ln77_1_fu_582_p2;
reg   [3:0] sub_ln77_1_reg_2049;
wire   [0:0] icmp_ln80_2_fu_588_p2;
reg   [0:0] icmp_ln80_2_reg_2054;
wire   [3:0] sub_ln77_2_fu_598_p2;
reg   [3:0] sub_ln77_2_reg_2059;
wire   [0:0] icmp_ln80_3_fu_614_p2;
reg   [0:0] icmp_ln80_3_reg_2064;
wire   [0:0] icmp_ln80_4_fu_626_p2;
reg   [0:0] icmp_ln80_4_reg_2069;
wire   [3:0] sub_ln77_3_fu_636_p2;
reg   [3:0] sub_ln77_3_reg_2074;
wire   [0:0] icmp_ln80_5_fu_642_p2;
reg   [0:0] icmp_ln80_5_reg_2079;
wire   [3:0] sub_ln77_4_fu_652_p2;
reg   [3:0] sub_ln77_4_reg_2084;
wire   [0:0] icmp_ln80_6_fu_668_p2;
reg   [0:0] icmp_ln80_6_reg_2090;
wire   [0:0] icmp_ln80_7_fu_674_p2;
reg   [0:0] icmp_ln80_7_reg_2096;
wire   [0:0] icmp_ln80_8_fu_686_p2;
reg   [0:0] icmp_ln80_8_reg_2101;
wire   [3:0] sub_ln77_6_fu_696_p2;
reg   [3:0] sub_ln77_6_reg_2106;
wire   [0:0] icmp_ln80_9_fu_712_p2;
reg   [0:0] icmp_ln80_9_reg_2111;
wire   [3:0] sub_ln77_7_fu_722_p2;
reg   [3:0] sub_ln77_7_reg_2116;
wire   [0:0] icmp_ln80_10_fu_728_p2;
reg   [0:0] icmp_ln80_10_reg_2122;
wire   [0:0] icmp_ln80_11_fu_744_p2;
reg   [0:0] icmp_ln80_11_reg_2128;
wire   [0:0] icmp_ln80_12_fu_766_p2;
reg   [0:0] icmp_ln80_12_reg_2133;
wire   [3:0] sub_ln77_9_fu_776_p2;
reg   [3:0] sub_ln77_9_reg_2138;
wire   [0:0] icmp_ln80_13_fu_782_p2;
reg   [0:0] icmp_ln80_13_reg_2144;
wire   [0:0] icmp_ln80_14_fu_798_p2;
reg   [0:0] icmp_ln80_14_reg_2150;
wire   [0:0] icmp_ln80_15_fu_804_p2;
reg   [0:0] icmp_ln80_15_reg_2156;
reg   [0:0] icmp_ln80_15_reg_2156_pp0_iter1_reg;
wire   [127:0] add_ln80_fu_1201_p2;
reg   [127:0] add_ln80_reg_2161;
wire   [127:0] add_ln80_1_fu_1207_p2;
reg   [127:0] add_ln80_1_reg_2166;
wire   [127:0] add_ln80_4_fu_1226_p2;
reg   [127:0] add_ln80_4_reg_2171;
wire   [127:0] add_ln80_5_fu_1232_p2;
reg   [127:0] add_ln80_5_reg_2176;
wire   [127:0] add_ln80_8_fu_1264_p2;
reg   [127:0] add_ln80_8_reg_2181;
wire   [127:0] add_ln80_9_fu_1270_p2;
reg   [127:0] add_ln80_9_reg_2186;
wire   [127:0] add_ln80_12_fu_1315_p2;
reg   [127:0] add_ln80_12_reg_2191;
wire   [127:0] add_ln80_13_fu_1321_p2;
reg   [127:0] add_ln80_13_reg_2196;
wire   [127:0] add_ln80_16_fu_1379_p2;
reg   [127:0] add_ln80_16_reg_2201;
wire   [127:0] add_ln80_17_fu_1385_p2;
reg   [127:0] add_ln80_17_reg_2206;
wire   [127:0] and_ln80_11_fu_1430_p2;
reg   [127:0] and_ln80_11_reg_2211;
wire   [127:0] add_ln80_20_fu_1449_p2;
reg   [127:0] add_ln80_20_reg_2216;
wire   [127:0] and_ln80_13_fu_1490_p2;
reg   [127:0] and_ln80_13_reg_2221;
wire   [127:0] and_ln80_14_fu_1503_p2;
reg   [127:0] and_ln80_14_reg_2226;
wire   [127:0] mul_ln80_25_fu_476_p2;
reg   [127:0] mul_ln80_25_reg_2231;
reg   [127:0] add12474_fu_134;
wire   [127:0] add_ln80_3_fu_1566_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [127:0] add124_12775_fu_138;
wire   [127:0] add_ln80_7_fu_1576_p2;
reg   [127:0] add124_24176_fu_142;
wire   [127:0] add_ln80_11_fu_1586_p2;
reg   [127:0] add124_35577_fu_146;
wire   [127:0] add_ln80_15_fu_1596_p2;
reg   [127:0] add124_478_fu_150;
wire   [127:0] add_ln80_19_fu_1606_p2;
reg   [127:0] add124_579_fu_154;
wire   [127:0] add_ln80_22_fu_1616_p2;
reg   [127:0] add124_680_fu_158;
wire   [127:0] add_ln80_24_fu_1626_p2;
reg   [127:0] add124_781_fu_162;
wire   [127:0] add_ln80_25_fu_1644_p2;
reg   [3:0] i_fu_166;
wire   [3:0] add_ln67_fu_810_p2;
reg   [3:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] mul_ln80_fu_376_p0;
wire   [63:0] mul_ln80_fu_376_p1;
wire   [127:0] zext_ln80_16_fu_1174_p1;
wire   [63:0] mul_ln80_1_fu_380_p0;
wire   [127:0] zext_ln80_7_fu_976_p1;
wire   [63:0] mul_ln80_1_fu_380_p1;
wire   [127:0] zext_ln80_6_fu_956_p1;
wire   [63:0] mul_ln80_2_fu_384_p0;
wire   [127:0] zext_ln80_12_fu_1086_p1;
wire   [63:0] mul_ln80_2_fu_384_p1;
wire   [127:0] zext_ln80_11_fu_1065_p1;
wire   [63:0] mul_ln80_3_fu_388_p0;
wire   [127:0] zext_ln80_1_fu_856_p1;
wire   [63:0] mul_ln80_3_fu_388_p1;
wire   [127:0] zext_ln80_fu_837_p1;
wire   [63:0] mul_ln80_4_fu_392_p0;
wire   [63:0] mul_ln80_4_fu_392_p1;
wire   [63:0] mul_ln80_5_fu_396_p0;
wire   [127:0] zext_ln80_2_fu_875_p1;
wire   [63:0] mul_ln80_5_fu_396_p1;
wire   [63:0] mul_ln80_6_fu_400_p0;
wire   [63:0] mul_ln80_6_fu_400_p1;
wire   [63:0] mul_ln80_7_fu_404_p0;
wire   [63:0] mul_ln80_7_fu_404_p1;
wire   [63:0] mul_ln80_8_fu_408_p0;
wire   [63:0] mul_ln80_8_fu_408_p1;
wire   [63:0] mul_ln80_9_fu_412_p0;
wire   [63:0] mul_ln80_9_fu_412_p1;
wire   [63:0] mul_ln80_10_fu_416_p0;
wire   [63:0] mul_ln80_10_fu_416_p1;
wire   [63:0] mul_ln80_11_fu_420_p0;
wire   [63:0] mul_ln80_11_fu_420_p1;
wire   [63:0] mul_ln80_12_fu_424_p0;
wire   [63:0] mul_ln80_12_fu_424_p1;
wire   [63:0] mul_ln80_13_fu_428_p0;
wire   [63:0] mul_ln80_13_fu_428_p1;
wire   [63:0] mul_ln80_14_fu_432_p0;
wire   [63:0] mul_ln80_14_fu_432_p1;
wire   [63:0] mul_ln80_15_fu_436_p0;
wire   [63:0] mul_ln80_15_fu_436_p1;
wire   [63:0] mul_ln80_16_fu_440_p0;
wire   [63:0] mul_ln80_16_fu_440_p1;
wire   [63:0] mul_ln80_17_fu_444_p0;
wire   [63:0] mul_ln80_17_fu_444_p1;
wire   [63:0] mul_ln80_18_fu_448_p0;
wire   [63:0] mul_ln80_18_fu_448_p1;
wire   [63:0] mul_ln80_19_fu_452_p0;
wire   [63:0] mul_ln80_19_fu_452_p1;
wire   [63:0] mul_ln80_20_fu_456_p0;
wire   [63:0] mul_ln80_20_fu_456_p1;
wire   [63:0] mul_ln80_21_fu_460_p0;
wire   [63:0] mul_ln80_21_fu_460_p1;
wire   [63:0] mul_ln80_22_fu_464_p0;
wire   [63:0] mul_ln80_22_fu_464_p1;
wire   [63:0] mul_ln80_23_fu_468_p0;
wire   [63:0] mul_ln80_23_fu_468_p1;
wire   [63:0] mul_ln80_24_fu_472_p0;
wire   [63:0] mul_ln80_24_fu_472_p1;
wire   [63:0] mul_ln80_25_fu_476_p0;
wire   [63:0] mul_ln80_25_fu_476_p1;
wire   [3:0] zext_ln80_21_fu_546_p1;
wire   [3:0] add_ln81_fu_556_p2;
wire   [3:0] zext_ln81_fu_562_p1;
wire   [3:0] zext_ln81_1_fu_578_p1;
wire   [3:0] zext_ln81_2_fu_594_p1;
wire   [1:0] tmp_6_fu_604_p4;
wire   [3:0] empty_fu_620_p2;
wire   [3:0] zext_ln81_3_fu_632_p1;
wire   [3:0] zext_ln81_4_fu_648_p1;
wire   [1:0] tmp_11_fu_658_p4;
wire   [3:0] empty_30_fu_680_p2;
wire   [3:0] zext_ln81_6_fu_692_p1;
wire   [1:0] tmp_16_fu_702_p4;
wire   [3:0] zext_ln81_7_fu_718_p1;
wire   [2:0] tmp_19_fu_734_p4;
wire   [3:0] empty_31_fu_750_p2;
wire   [1:0] tmp_22_fu_756_p4;
wire   [3:0] zext_ln81_9_fu_772_p1;
wire   [2:0] tmp_25_fu_788_p4;
wire   [63:0] tmp_s_fu_821_p10;
wire   [63:0] tmp_1_fu_846_p7;
wire   [63:0] tmp_2_fu_864_p7;
wire   [63:0] tmp_3_fu_883_p11;
wire   [63:0] tmp_4_fu_902_p11;
wire   [63:0] tmp_5_fu_921_p11;
wire   [63:0] tmp_7_fu_940_p10;
wire   [63:0] tmp_8_fu_966_p7;
wire   [63:0] tmp_9_fu_983_p11;
wire   [63:0] tmp_10_fu_1002_p11;
wire   [3:0] zext_ln81_5_fu_1021_p1;
wire   [3:0] tmp_12_fu_1029_p10;
wire   [63:0] tmp_12_fu_1029_p11;
wire   [63:0] tmp_13_fu_1049_p10;
wire   [63:0] tmp_14_fu_1076_p7;
wire   [63:0] tmp_15_fu_1092_p11;
wire   [63:0] tmp_17_fu_1111_p11;
wire   [3:0] zext_ln81_8_fu_1130_p1;
wire   [3:0] tmp_18_fu_1138_p10;
wire   [63:0] tmp_18_fu_1138_p11;
wire   [63:0] tmp_20_fu_1158_p10;
wire   [63:0] tmp_21_fu_1186_p7;
wire   [127:0] mul_ln80_3_fu_388_p2;
wire   [127:0] mul_ln80_1_fu_380_p2;
wire   [127:0] mul_ln80_2_fu_384_p2;
wire   [127:0] mul_ln80_fu_376_p2;
wire   [127:0] mul_ln80_5_fu_396_p2;
wire   [127:0] select_ln80_fu_1213_p3;
wire   [127:0] and_ln80_fu_1220_p2;
wire   [127:0] mul_ln80_7_fu_404_p2;
wire   [127:0] mul_ln80_6_fu_400_p2;
wire   [127:0] mul_ln80_4_fu_392_p2;
wire   [127:0] mul_ln80_9_fu_412_p2;
wire   [127:0] select_ln80_1_fu_1238_p3;
wire   [127:0] mul_ln80_10_fu_416_p2;
wire   [127:0] select_ln80_2_fu_1251_p3;
wire   [127:0] and_ln80_2_fu_1258_p2;
wire   [127:0] and_ln80_1_fu_1245_p2;
wire   [127:0] mul_ln80_11_fu_420_p2;
wire   [127:0] mul_ln80_8_fu_408_p2;
wire   [127:0] mul_ln80_13_fu_428_p2;
wire   [127:0] select_ln80_3_fu_1276_p3;
wire   [127:0] mul_ln80_14_fu_432_p2;
wire   [127:0] select_ln80_4_fu_1289_p3;
wire   [127:0] mul_ln80_15_fu_436_p2;
wire   [127:0] select_ln80_5_fu_1302_p3;
wire   [127:0] and_ln80_5_fu_1309_p2;
wire   [127:0] and_ln80_3_fu_1283_p2;
wire   [127:0] and_ln80_4_fu_1296_p2;
wire   [127:0] mul_ln80_12_fu_424_p2;
wire   [127:0] mul_ln80_16_fu_440_p2;
wire   [127:0] select_ln80_6_fu_1327_p3;
wire   [127:0] mul_ln80_17_fu_444_p2;
wire   [127:0] select_ln80_7_fu_1340_p3;
wire   [127:0] mul_ln80_18_fu_448_p2;
wire   [127:0] select_ln80_8_fu_1353_p3;
wire   [127:0] mul_ln80_19_fu_452_p2;
wire   [127:0] select_ln80_9_fu_1366_p3;
wire   [127:0] and_ln80_9_fu_1373_p2;
wire   [127:0] and_ln80_7_fu_1347_p2;
wire   [127:0] and_ln80_8_fu_1360_p2;
wire   [127:0] and_ln80_6_fu_1334_p2;
wire   [63:0] tmp_23_fu_1391_p11;
wire   [127:0] mul_ln80_20_fu_456_p2;
wire   [127:0] select_ln80_10_fu_1410_p3;
wire   [127:0] mul_ln80_21_fu_460_p2;
wire   [127:0] select_ln80_11_fu_1423_p3;
wire   [127:0] mul_ln80_22_fu_464_p2;
wire   [127:0] select_ln80_12_fu_1436_p3;
wire   [127:0] and_ln80_12_fu_1443_p2;
wire   [127:0] and_ln80_10_fu_1417_p2;
wire   [3:0] zext_ln81_10_fu_1455_p1;
wire   [3:0] sub_ln77_10_fu_1458_p2;
wire   [63:0] tmp_24_fu_1463_p11;
wire   [127:0] mul_ln80_23_fu_468_p2;
wire   [127:0] select_ln80_13_fu_1483_p3;
wire   [127:0] mul_ln80_24_fu_472_p2;
wire   [127:0] select_ln80_14_fu_1496_p3;
wire   [3:0] zext_ln81_11_fu_1509_p1;
wire   [3:0] tmp_26_fu_1518_p10;
wire   [63:0] tmp_26_fu_1518_p11;
wire   [127:0] add_ln80_2_fu_1562_p2;
wire   [127:0] add_ln80_6_fu_1572_p2;
wire   [127:0] add_ln80_10_fu_1582_p2;
wire   [127:0] add_ln80_14_fu_1592_p2;
wire   [127:0] add_ln80_18_fu_1602_p2;
wire   [127:0] add_ln80_21_fu_1612_p2;
wire   [127:0] add_ln80_23_fu_1622_p2;
wire   [127:0] select_ln80_15_fu_1632_p3;
wire   [127:0] and_ln80_15_fu_1639_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [127:0] mul_ln80_10_fu_416_p00;
wire   [127:0] mul_ln80_13_fu_428_p00;
wire   [127:0] mul_ln80_15_fu_436_p00;
wire   [127:0] mul_ln80_17_fu_444_p00;
wire   [127:0] mul_ln80_18_fu_448_p00;
wire   [127:0] mul_ln80_19_fu_452_p00;
wire   [127:0] mul_ln80_20_fu_456_p00;
wire   [127:0] mul_ln80_21_fu_460_p00;
wire   [127:0] mul_ln80_22_fu_464_p00;
wire   [127:0] mul_ln80_23_fu_468_p00;
wire   [127:0] mul_ln80_24_fu_472_p00;
wire   [127:0] mul_ln80_25_fu_476_p00;
wire   [127:0] mul_ln80_fu_376_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U84(
    .din0(mul_ln80_fu_376_p0),
    .din1(mul_ln80_fu_376_p1),
    .dout(mul_ln80_fu_376_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U85(
    .din0(mul_ln80_1_fu_380_p0),
    .din1(mul_ln80_1_fu_380_p1),
    .dout(mul_ln80_1_fu_380_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U86(
    .din0(mul_ln80_2_fu_384_p0),
    .din1(mul_ln80_2_fu_384_p1),
    .dout(mul_ln80_2_fu_384_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U87(
    .din0(mul_ln80_3_fu_388_p0),
    .din1(mul_ln80_3_fu_388_p1),
    .dout(mul_ln80_3_fu_388_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U88(
    .din0(mul_ln80_4_fu_392_p0),
    .din1(mul_ln80_4_fu_392_p1),
    .dout(mul_ln80_4_fu_392_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U89(
    .din0(mul_ln80_5_fu_396_p0),
    .din1(mul_ln80_5_fu_396_p1),
    .dout(mul_ln80_5_fu_396_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U90(
    .din0(mul_ln80_6_fu_400_p0),
    .din1(mul_ln80_6_fu_400_p1),
    .dout(mul_ln80_6_fu_400_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U91(
    .din0(mul_ln80_7_fu_404_p0),
    .din1(mul_ln80_7_fu_404_p1),
    .dout(mul_ln80_7_fu_404_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U92(
    .din0(mul_ln80_8_fu_408_p0),
    .din1(mul_ln80_8_fu_408_p1),
    .dout(mul_ln80_8_fu_408_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U93(
    .din0(mul_ln80_9_fu_412_p0),
    .din1(mul_ln80_9_fu_412_p1),
    .dout(mul_ln80_9_fu_412_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U94(
    .din0(mul_ln80_10_fu_416_p0),
    .din1(mul_ln80_10_fu_416_p1),
    .dout(mul_ln80_10_fu_416_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U95(
    .din0(mul_ln80_11_fu_420_p0),
    .din1(mul_ln80_11_fu_420_p1),
    .dout(mul_ln80_11_fu_420_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U96(
    .din0(mul_ln80_12_fu_424_p0),
    .din1(mul_ln80_12_fu_424_p1),
    .dout(mul_ln80_12_fu_424_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U97(
    .din0(mul_ln80_13_fu_428_p0),
    .din1(mul_ln80_13_fu_428_p1),
    .dout(mul_ln80_13_fu_428_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U98(
    .din0(mul_ln80_14_fu_432_p0),
    .din1(mul_ln80_14_fu_432_p1),
    .dout(mul_ln80_14_fu_432_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U99(
    .din0(mul_ln80_15_fu_436_p0),
    .din1(mul_ln80_15_fu_436_p1),
    .dout(mul_ln80_15_fu_436_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U100(
    .din0(mul_ln80_16_fu_440_p0),
    .din1(mul_ln80_16_fu_440_p1),
    .dout(mul_ln80_16_fu_440_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U101(
    .din0(mul_ln80_17_fu_444_p0),
    .din1(mul_ln80_17_fu_444_p1),
    .dout(mul_ln80_17_fu_444_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U102(
    .din0(mul_ln80_18_fu_448_p0),
    .din1(mul_ln80_18_fu_448_p1),
    .dout(mul_ln80_18_fu_448_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U103(
    .din0(mul_ln80_19_fu_452_p0),
    .din1(mul_ln80_19_fu_452_p1),
    .dout(mul_ln80_19_fu_452_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U104(
    .din0(mul_ln80_20_fu_456_p0),
    .din1(mul_ln80_20_fu_456_p1),
    .dout(mul_ln80_20_fu_456_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U105(
    .din0(mul_ln80_21_fu_460_p0),
    .din1(mul_ln80_21_fu_460_p1),
    .dout(mul_ln80_21_fu_460_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U106(
    .din0(mul_ln80_22_fu_464_p0),
    .din1(mul_ln80_22_fu_464_p1),
    .dout(mul_ln80_22_fu_464_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U107(
    .din0(mul_ln80_23_fu_468_p0),
    .din1(mul_ln80_23_fu_468_p1),
    .dout(mul_ln80_23_fu_468_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U108(
    .din0(mul_ln80_24_fu_472_p0),
    .din1(mul_ln80_24_fu_472_p1),
    .dout(mul_ln80_24_fu_472_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U109(
    .din0(mul_ln80_25_fu_476_p0),
    .din1(mul_ln80_25_fu_476_p1),
    .dout(mul_ln80_25_fu_476_p2)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U110(
    .din0(64'd0),
    .din1(64'd0),
    .din2(64'd0),
    .din3(arg1_r_3_reload),
    .din4(arg1_r_4_reload),
    .din5(arg1_r_5_reload),
    .din6(arg1_r_6_reload),
    .din7(arg1_r_7_reload),
    .din8(trunc_ln34_reg_2017),
    .dout(tmp_s_fu_821_p10)
);

test_mux_5_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_5_3_64_1_1_U111(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(xor_ln70_reg_2025),
    .dout(tmp_1_fu_846_p7)
);

test_mux_5_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_5_3_64_1_1_U112(
    .din0(64'd0),
    .din1(arg2_r_reload),
    .din2(arg2_r_1_reload),
    .din3(arg2_r_2_reload),
    .din4(arg2_r_3_reload),
    .din5(xor_ln70_reg_2025),
    .dout(tmp_2_fu_864_p7)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U113(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln77_reg_2039),
    .dout(tmp_3_fu_883_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U114(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln77_1_reg_2049),
    .dout(tmp_4_fu_902_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U115(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln77_2_reg_2059),
    .dout(tmp_5_fu_921_p11)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U116(
    .din0(64'd0),
    .din1(64'd0),
    .din2(64'd0),
    .din3(arg1_r_2_reload),
    .din4(arg1_r_3_reload),
    .din5(arg1_r_4_reload),
    .din6(arg1_r_5_reload),
    .din7(arg1_r_6_reload),
    .din8(trunc_ln34_reg_2017),
    .dout(tmp_7_fu_940_p10)
);

test_mux_5_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_5_3_64_1_1_U117(
    .din0(arg2_r_1_reload),
    .din1(arg2_r_2_reload),
    .din2(arg2_r_3_reload),
    .din3(arg2_r_4_reload),
    .din4(arg2_r_5_reload),
    .din5(xor_ln70_reg_2025),
    .dout(tmp_8_fu_966_p7)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U118(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln77_3_reg_2074),
    .dout(tmp_9_fu_983_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U119(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln77_4_reg_2084),
    .dout(tmp_10_fu_1002_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U120(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(tmp_12_fu_1029_p10),
    .dout(tmp_12_fu_1029_p11)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U121(
    .din0(64'd0),
    .din1(64'd0),
    .din2(64'd0),
    .din3(arg1_r_1_reload),
    .din4(arg1_r_2_reload),
    .din5(arg1_r_3_reload),
    .din6(arg1_r_4_reload),
    .din7(arg1_r_5_reload),
    .din8(trunc_ln34_reg_2017),
    .dout(tmp_13_fu_1049_p10)
);

test_mux_5_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_5_3_64_1_1_U122(
    .din0(arg2_r_2_reload),
    .din1(arg2_r_3_reload),
    .din2(arg2_r_4_reload),
    .din3(arg2_r_5_reload),
    .din4(arg2_r_6_reload),
    .din5(xor_ln70_reg_2025),
    .dout(tmp_14_fu_1076_p7)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U123(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln77_6_reg_2106),
    .dout(tmp_15_fu_1092_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U124(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln77_7_reg_2116),
    .dout(tmp_17_fu_1111_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U125(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(tmp_18_fu_1138_p10),
    .dout(tmp_18_fu_1138_p11)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U126(
    .din0(64'd0),
    .din1(64'd0),
    .din2(64'd0),
    .din3(arg1_r_reload),
    .din4(arg1_r_1_reload),
    .din5(arg1_r_2_reload),
    .din6(arg1_r_3_reload),
    .din7(arg1_r_4_reload),
    .din8(trunc_ln34_reg_2017),
    .dout(tmp_20_fu_1158_p10)
);

test_mux_5_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_5_3_64_1_1_U127(
    .din0(arg2_r_3_reload),
    .din1(arg2_r_4_reload),
    .din2(arg2_r_5_reload),
    .din3(arg2_r_6_reload),
    .din4(arg2_r_7_reload),
    .din5(xor_ln70_reg_2025),
    .dout(tmp_21_fu_1186_p7)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U128(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln77_9_reg_2138),
    .dout(tmp_23_fu_1391_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U129(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln77_10_fu_1458_p2),
    .dout(tmp_24_fu_1463_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U130(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(tmp_26_fu_1518_p10),
    .dout(tmp_26_fu_1518_p11)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add12474_fu_134 <= add84_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add12474_fu_134 <= add_ln80_3_fu_1566_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add124_12775_fu_138 <= add_16985_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add124_12775_fu_138 <= add_ln80_7_fu_1576_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add124_24176_fu_142 <= add_286_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add124_24176_fu_142 <= add_ln80_11_fu_1586_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add124_35577_fu_146 <= add_387_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add124_35577_fu_146 <= add_ln80_15_fu_1596_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add124_478_fu_150 <= add_488_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add124_478_fu_150 <= add_ln80_19_fu_1606_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add124_579_fu_154 <= add_589_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add124_579_fu_154 <= add_ln80_22_fu_1616_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add124_680_fu_158 <= add_690_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add124_680_fu_158 <= add_ln80_24_fu_1626_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add124_781_fu_162 <= add_791_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add124_781_fu_162 <= add_ln80_25_fu_1644_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((tmp_fu_528_p3 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_166 <= add_ln67_fu_810_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_166 <= 4'd7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln80_12_reg_2191 <= add_ln80_12_fu_1315_p2;
        add_ln80_13_reg_2196 <= add_ln80_13_fu_1321_p2;
        add_ln80_16_reg_2201 <= add_ln80_16_fu_1379_p2;
        add_ln80_17_reg_2206 <= add_ln80_17_fu_1385_p2;
        add_ln80_1_reg_2166 <= add_ln80_1_fu_1207_p2;
        add_ln80_20_reg_2216 <= add_ln80_20_fu_1449_p2;
        add_ln80_4_reg_2171 <= add_ln80_4_fu_1226_p2;
        add_ln80_5_reg_2176 <= add_ln80_5_fu_1232_p2;
        add_ln80_8_reg_2181 <= add_ln80_8_fu_1264_p2;
        add_ln80_9_reg_2186 <= add_ln80_9_fu_1270_p2;
        add_ln80_reg_2161 <= add_ln80_fu_1201_p2;
        and_ln80_11_reg_2211 <= and_ln80_11_fu_1430_p2;
        and_ln80_13_reg_2221 <= and_ln80_13_fu_1490_p2;
        and_ln80_14_reg_2226 <= and_ln80_14_fu_1503_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln80_15_reg_2156_pp0_iter1_reg <= icmp_ln80_15_reg_2156;
        mul_ln80_25_reg_2231 <= mul_ln80_25_fu_476_p2;
        tmp_reg_2013 <= ap_sig_allocacmp_i_1[32'd3];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_528_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln80_10_reg_2122 <= icmp_ln80_10_fu_728_p2;
        icmp_ln80_11_reg_2128 <= icmp_ln80_11_fu_744_p2;
        icmp_ln80_12_reg_2133 <= icmp_ln80_12_fu_766_p2;
        icmp_ln80_13_reg_2144 <= icmp_ln80_13_fu_782_p2;
        icmp_ln80_14_reg_2150 <= icmp_ln80_14_fu_798_p2;
        icmp_ln80_15_reg_2156 <= icmp_ln80_15_fu_804_p2;
        icmp_ln80_1_reg_2044 <= icmp_ln80_1_fu_572_p2;
        icmp_ln80_2_reg_2054 <= icmp_ln80_2_fu_588_p2;
        icmp_ln80_3_reg_2064 <= icmp_ln80_3_fu_614_p2;
        icmp_ln80_4_reg_2069 <= icmp_ln80_4_fu_626_p2;
        icmp_ln80_5_reg_2079 <= icmp_ln80_5_fu_642_p2;
        icmp_ln80_6_reg_2090 <= icmp_ln80_6_fu_668_p2;
        icmp_ln80_7_reg_2096 <= icmp_ln80_7_fu_674_p2;
        icmp_ln80_8_reg_2101 <= icmp_ln80_8_fu_686_p2;
        icmp_ln80_9_reg_2111 <= icmp_ln80_9_fu_712_p2;
        icmp_ln80_reg_2034 <= icmp_ln80_fu_550_p2;
        sub_ln77_1_reg_2049 <= sub_ln77_1_fu_582_p2;
        sub_ln77_2_reg_2059 <= sub_ln77_2_fu_598_p2;
        sub_ln77_3_reg_2074 <= sub_ln77_3_fu_636_p2;
        sub_ln77_4_reg_2084 <= sub_ln77_4_fu_652_p2;
        sub_ln77_6_reg_2106 <= sub_ln77_6_fu_696_p2;
        sub_ln77_7_reg_2116 <= sub_ln77_7_fu_722_p2;
        sub_ln77_9_reg_2138 <= sub_ln77_9_fu_776_p2;
        sub_ln77_reg_2039 <= sub_ln77_fu_566_p2;
        trunc_ln34_reg_2017 <= trunc_ln34_fu_536_p1;
        xor_ln70_reg_2025 <= xor_ln70_fu_540_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_2013 == 1'd1))) begin
        add12474_out_ap_vld = 1'b1;
    end else begin
        add12474_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_2013 == 1'd1))) begin
        add124_12775_out_ap_vld = 1'b1;
    end else begin
        add124_12775_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_2013 == 1'd1))) begin
        add124_24176_out_ap_vld = 1'b1;
    end else begin
        add124_24176_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_2013 == 1'd1))) begin
        add124_35577_out_ap_vld = 1'b1;
    end else begin
        add124_35577_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_2013 == 1'd1))) begin
        add124_478_out_ap_vld = 1'b1;
    end else begin
        add124_478_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_2013 == 1'd1))) begin
        add124_579_out_ap_vld = 1'b1;
    end else begin
        add124_579_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_2013 == 1'd1))) begin
        add124_680_out_ap_vld = 1'b1;
    end else begin
        add124_680_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_2013 == 1'd1))) begin
        add124_781_out_ap_vld = 1'b1;
    end else begin
        add124_781_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_528_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 4'd7;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_166;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add12474_out = add12474_fu_134;

assign add124_12775_out = add124_12775_fu_138;

assign add124_24176_out = add124_24176_fu_142;

assign add124_35577_out = add124_35577_fu_146;

assign add124_478_out = add124_478_fu_150;

assign add124_579_out = add124_579_fu_154;

assign add124_680_out = add124_680_fu_158;

assign add124_781_out = add124_781_fu_162;

assign add_ln67_fu_810_p2 = ($signed(ap_sig_allocacmp_i_1) + $signed(4'd12));

assign add_ln80_10_fu_1582_p2 = (add_ln80_9_reg_2186 + add_ln80_8_reg_2181);

assign add_ln80_11_fu_1586_p2 = (add124_24176_fu_142 + add_ln80_10_fu_1582_p2);

assign add_ln80_12_fu_1315_p2 = (and_ln80_5_fu_1309_p2 + and_ln80_3_fu_1283_p2);

assign add_ln80_13_fu_1321_p2 = (and_ln80_4_fu_1296_p2 + mul_ln80_12_fu_424_p2);

assign add_ln80_14_fu_1592_p2 = (add_ln80_13_reg_2196 + add_ln80_12_reg_2191);

assign add_ln80_15_fu_1596_p2 = (add124_35577_fu_146 + add_ln80_14_fu_1592_p2);

assign add_ln80_16_fu_1379_p2 = (and_ln80_9_fu_1373_p2 + and_ln80_7_fu_1347_p2);

assign add_ln80_17_fu_1385_p2 = (and_ln80_8_fu_1360_p2 + and_ln80_6_fu_1334_p2);

assign add_ln80_18_fu_1602_p2 = (add_ln80_17_reg_2206 + add_ln80_16_reg_2201);

assign add_ln80_19_fu_1606_p2 = (add124_478_fu_150 + add_ln80_18_fu_1602_p2);

assign add_ln80_1_fu_1207_p2 = (mul_ln80_2_fu_384_p2 + mul_ln80_fu_376_p2);

assign add_ln80_20_fu_1449_p2 = (and_ln80_12_fu_1443_p2 + and_ln80_10_fu_1417_p2);

assign add_ln80_21_fu_1612_p2 = (add_ln80_20_reg_2216 + and_ln80_11_reg_2211);

assign add_ln80_22_fu_1616_p2 = (add124_579_fu_154 + add_ln80_21_fu_1612_p2);

assign add_ln80_23_fu_1622_p2 = (and_ln80_14_reg_2226 + and_ln80_13_reg_2221);

assign add_ln80_24_fu_1626_p2 = (add124_680_fu_158 + add_ln80_23_fu_1622_p2);

assign add_ln80_25_fu_1644_p2 = (and_ln80_15_fu_1639_p2 + add124_781_fu_162);

assign add_ln80_2_fu_1562_p2 = (add_ln80_1_reg_2166 + add_ln80_reg_2161);

assign add_ln80_3_fu_1566_p2 = (add12474_fu_134 + add_ln80_2_fu_1562_p2);

assign add_ln80_4_fu_1226_p2 = (and_ln80_fu_1220_p2 + mul_ln80_7_fu_404_p2);

assign add_ln80_5_fu_1232_p2 = (mul_ln80_6_fu_400_p2 + mul_ln80_4_fu_392_p2);

assign add_ln80_6_fu_1572_p2 = (add_ln80_5_reg_2176 + add_ln80_4_reg_2171);

assign add_ln80_7_fu_1576_p2 = (add124_12775_fu_138 + add_ln80_6_fu_1572_p2);

assign add_ln80_8_fu_1264_p2 = (and_ln80_2_fu_1258_p2 + and_ln80_1_fu_1245_p2);

assign add_ln80_9_fu_1270_p2 = (mul_ln80_11_fu_420_p2 + mul_ln80_8_fu_408_p2);

assign add_ln80_fu_1201_p2 = (mul_ln80_3_fu_388_p2 + mul_ln80_1_fu_380_p2);

assign add_ln81_fu_556_p2 = ($signed(zext_ln80_21_fu_546_p1) + $signed(4'd15));

assign and_ln80_10_fu_1417_p2 = (select_ln80_10_fu_1410_p3 & mul_ln80_20_fu_456_p2);

assign and_ln80_11_fu_1430_p2 = (select_ln80_11_fu_1423_p3 & mul_ln80_21_fu_460_p2);

assign and_ln80_12_fu_1443_p2 = (select_ln80_12_fu_1436_p3 & mul_ln80_22_fu_464_p2);

assign and_ln80_13_fu_1490_p2 = (select_ln80_13_fu_1483_p3 & mul_ln80_23_fu_468_p2);

assign and_ln80_14_fu_1503_p2 = (select_ln80_14_fu_1496_p3 & mul_ln80_24_fu_472_p2);

assign and_ln80_15_fu_1639_p2 = (select_ln80_15_fu_1632_p3 & mul_ln80_25_reg_2231);

assign and_ln80_1_fu_1245_p2 = (select_ln80_1_fu_1238_p3 & mul_ln80_9_fu_412_p2);

assign and_ln80_2_fu_1258_p2 = (select_ln80_2_fu_1251_p3 & mul_ln80_10_fu_416_p2);

assign and_ln80_3_fu_1283_p2 = (select_ln80_3_fu_1276_p3 & mul_ln80_13_fu_428_p2);

assign and_ln80_4_fu_1296_p2 = (select_ln80_4_fu_1289_p3 & mul_ln80_14_fu_432_p2);

assign and_ln80_5_fu_1309_p2 = (select_ln80_5_fu_1302_p3 & mul_ln80_15_fu_436_p2);

assign and_ln80_6_fu_1334_p2 = (select_ln80_6_fu_1327_p3 & mul_ln80_16_fu_440_p2);

assign and_ln80_7_fu_1347_p2 = (select_ln80_7_fu_1340_p3 & mul_ln80_17_fu_444_p2);

assign and_ln80_8_fu_1360_p2 = (select_ln80_8_fu_1353_p3 & mul_ln80_18_fu_448_p2);

assign and_ln80_9_fu_1373_p2 = (select_ln80_9_fu_1366_p3 & mul_ln80_19_fu_452_p2);

assign and_ln80_fu_1220_p2 = (select_ln80_fu_1213_p3 & mul_ln80_5_fu_396_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_30_fu_680_p2 = ($signed(ap_sig_allocacmp_i_1) + $signed(4'd14));

assign empty_31_fu_750_p2 = ($signed(ap_sig_allocacmp_i_1) + $signed(4'd13));

assign empty_fu_620_p2 = ($signed(ap_sig_allocacmp_i_1) + $signed(4'd15));

assign icmp_ln80_10_fu_728_p2 = (($signed(empty_30_fu_680_p2) < $signed(4'd3)) ? 1'b1 : 1'b0);

assign icmp_ln80_11_fu_744_p2 = (($signed(tmp_19_fu_734_p4) < $signed(3'd1)) ? 1'b1 : 1'b0);

assign icmp_ln80_12_fu_766_p2 = ((tmp_22_fu_756_p4 != 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln80_13_fu_782_p2 = (($signed(empty_31_fu_750_p2) < $signed(4'd3)) ? 1'b1 : 1'b0);

assign icmp_ln80_14_fu_798_p2 = (($signed(tmp_25_fu_788_p4) < $signed(3'd1)) ? 1'b1 : 1'b0);

assign icmp_ln80_15_fu_804_p2 = (($signed(empty_31_fu_750_p2) < $signed(4'd1)) ? 1'b1 : 1'b0);

assign icmp_ln80_1_fu_572_p2 = (($signed(ap_sig_allocacmp_i_1) < $signed(4'd6)) ? 1'b1 : 1'b0);

assign icmp_ln80_2_fu_588_p2 = (($signed(ap_sig_allocacmp_i_1) < $signed(4'd5)) ? 1'b1 : 1'b0);

assign icmp_ln80_3_fu_614_p2 = ((tmp_6_fu_604_p4 != 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln80_4_fu_626_p2 = (($signed(empty_fu_620_p2) < $signed(4'd6)) ? 1'b1 : 1'b0);

assign icmp_ln80_5_fu_642_p2 = (($signed(empty_fu_620_p2) < $signed(4'd5)) ? 1'b1 : 1'b0);

assign icmp_ln80_6_fu_668_p2 = ((tmp_11_fu_658_p4 != 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln80_7_fu_674_p2 = (($signed(empty_fu_620_p2) < $signed(4'd3)) ? 1'b1 : 1'b0);

assign icmp_ln80_8_fu_686_p2 = (($signed(empty_30_fu_680_p2) < $signed(4'd5)) ? 1'b1 : 1'b0);

assign icmp_ln80_9_fu_712_p2 = ((tmp_16_fu_702_p4 != 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_550_p2 = ((ap_sig_allocacmp_i_1 != 4'd7) ? 1'b1 : 1'b0);

assign mul_ln80_10_fu_416_p0 = mul_ln80_10_fu_416_p00;

assign mul_ln80_10_fu_416_p00 = tmp_3_fu_883_p11;

assign mul_ln80_10_fu_416_p1 = zext_ln80_fu_837_p1;

assign mul_ln80_11_fu_420_p0 = zext_ln80_11_fu_1065_p1;

assign mul_ln80_11_fu_420_p1 = zext_ln80_1_fu_856_p1;

assign mul_ln80_12_fu_424_p0 = zext_ln80_16_fu_1174_p1;

assign mul_ln80_12_fu_424_p1 = zext_ln80_1_fu_856_p1;

assign mul_ln80_13_fu_428_p0 = mul_ln80_13_fu_428_p00;

assign mul_ln80_13_fu_428_p00 = tmp_9_fu_983_p11;

assign mul_ln80_13_fu_428_p1 = zext_ln80_6_fu_956_p1;

assign mul_ln80_14_fu_432_p0 = zext_ln80_11_fu_1065_p1;

assign mul_ln80_14_fu_432_p1 = zext_ln80_2_fu_875_p1;

assign mul_ln80_15_fu_436_p0 = mul_ln80_15_fu_436_p00;

assign mul_ln80_15_fu_436_p00 = tmp_4_fu_902_p11;

assign mul_ln80_15_fu_436_p1 = zext_ln80_fu_837_p1;

assign mul_ln80_16_fu_440_p0 = zext_ln80_16_fu_1174_p1;

assign mul_ln80_16_fu_440_p1 = zext_ln80_2_fu_875_p1;

assign mul_ln80_17_fu_444_p0 = mul_ln80_17_fu_444_p00;

assign mul_ln80_17_fu_444_p00 = tmp_10_fu_1002_p11;

assign mul_ln80_17_fu_444_p1 = zext_ln80_6_fu_956_p1;

assign mul_ln80_18_fu_448_p0 = mul_ln80_18_fu_448_p00;

assign mul_ln80_18_fu_448_p00 = tmp_15_fu_1092_p11;

assign mul_ln80_18_fu_448_p1 = zext_ln80_11_fu_1065_p1;

assign mul_ln80_19_fu_452_p0 = mul_ln80_19_fu_452_p00;

assign mul_ln80_19_fu_452_p00 = tmp_5_fu_921_p11;

assign mul_ln80_19_fu_452_p1 = zext_ln80_fu_837_p1;

assign mul_ln80_1_fu_380_p0 = zext_ln80_7_fu_976_p1;

assign mul_ln80_1_fu_380_p1 = zext_ln80_6_fu_956_p1;

assign mul_ln80_20_fu_456_p0 = mul_ln80_20_fu_456_p00;

assign mul_ln80_20_fu_456_p00 = tmp_23_fu_1391_p11;

assign mul_ln80_20_fu_456_p1 = zext_ln80_16_fu_1174_p1;

assign mul_ln80_21_fu_460_p0 = mul_ln80_21_fu_460_p00;

assign mul_ln80_21_fu_460_p00 = tmp_12_fu_1029_p11;

assign mul_ln80_21_fu_460_p1 = zext_ln80_6_fu_956_p1;

assign mul_ln80_22_fu_464_p0 = mul_ln80_22_fu_464_p00;

assign mul_ln80_22_fu_464_p00 = tmp_17_fu_1111_p11;

assign mul_ln80_22_fu_464_p1 = zext_ln80_11_fu_1065_p1;

assign mul_ln80_23_fu_468_p0 = mul_ln80_23_fu_468_p00;

assign mul_ln80_23_fu_468_p00 = tmp_18_fu_1138_p11;

assign mul_ln80_23_fu_468_p1 = zext_ln80_11_fu_1065_p1;

assign mul_ln80_24_fu_472_p0 = mul_ln80_24_fu_472_p00;

assign mul_ln80_24_fu_472_p00 = tmp_24_fu_1463_p11;

assign mul_ln80_24_fu_472_p1 = zext_ln80_16_fu_1174_p1;

assign mul_ln80_25_fu_476_p0 = mul_ln80_25_fu_476_p00;

assign mul_ln80_25_fu_476_p00 = tmp_26_fu_1518_p11;

assign mul_ln80_25_fu_476_p1 = zext_ln80_16_fu_1174_p1;

assign mul_ln80_2_fu_384_p0 = zext_ln80_12_fu_1086_p1;

assign mul_ln80_2_fu_384_p1 = zext_ln80_11_fu_1065_p1;

assign mul_ln80_3_fu_388_p0 = zext_ln80_1_fu_856_p1;

assign mul_ln80_3_fu_388_p1 = zext_ln80_fu_837_p1;

assign mul_ln80_4_fu_392_p0 = zext_ln80_16_fu_1174_p1;

assign mul_ln80_4_fu_392_p1 = zext_ln80_12_fu_1086_p1;

assign mul_ln80_5_fu_396_p0 = zext_ln80_2_fu_875_p1;

assign mul_ln80_5_fu_396_p1 = zext_ln80_fu_837_p1;

assign mul_ln80_6_fu_400_p0 = zext_ln80_11_fu_1065_p1;

assign mul_ln80_6_fu_400_p1 = zext_ln80_7_fu_976_p1;

assign mul_ln80_7_fu_404_p0 = zext_ln80_6_fu_956_p1;

assign mul_ln80_7_fu_404_p1 = zext_ln80_1_fu_856_p1;

assign mul_ln80_8_fu_408_p0 = zext_ln80_16_fu_1174_p1;

assign mul_ln80_8_fu_408_p1 = zext_ln80_7_fu_976_p1;

assign mul_ln80_9_fu_412_p0 = zext_ln80_6_fu_956_p1;

assign mul_ln80_9_fu_412_p1 = zext_ln80_2_fu_875_p1;

assign mul_ln80_fu_376_p0 = mul_ln80_fu_376_p00;

assign mul_ln80_fu_376_p00 = tmp_21_fu_1186_p7;

assign mul_ln80_fu_376_p1 = zext_ln80_16_fu_1174_p1;

assign select_ln80_10_fu_1410_p3 = ((icmp_ln80_13_reg_2144[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_11_fu_1423_p3 = ((icmp_ln80_7_reg_2096[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_12_fu_1436_p3 = ((icmp_ln80_10_reg_2122[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_13_fu_1483_p3 = ((icmp_ln80_11_reg_2128[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_14_fu_1496_p3 = ((icmp_ln80_14_reg_2150[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_15_fu_1632_p3 = ((icmp_ln80_15_reg_2156_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_1_fu_1238_p3 = ((icmp_ln80_4_reg_2069[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_2_fu_1251_p3 = ((icmp_ln80_1_reg_2044[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_3_fu_1276_p3 = ((icmp_ln80_5_reg_2079[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_4_fu_1289_p3 = ((icmp_ln80_8_reg_2101[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_5_fu_1302_p3 = ((icmp_ln80_2_reg_2054[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_6_fu_1327_p3 = ((icmp_ln80_12_reg_2133[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_7_fu_1340_p3 = ((icmp_ln80_6_reg_2090[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_8_fu_1353_p3 = ((icmp_ln80_9_reg_2111[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_9_fu_1366_p3 = ((icmp_ln80_3_reg_2064[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_fu_1213_p3 = ((icmp_ln80_reg_2034[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign sub_ln77_10_fu_1458_p2 = (sub_ln77_9_reg_2138 - zext_ln81_10_fu_1455_p1);

assign sub_ln77_1_fu_582_p2 = (sub_ln77_fu_566_p2 - zext_ln81_1_fu_578_p1);

assign sub_ln77_2_fu_598_p2 = (sub_ln77_1_fu_582_p2 - zext_ln81_2_fu_594_p1);

assign sub_ln77_3_fu_636_p2 = (add_ln81_fu_556_p2 - zext_ln81_3_fu_632_p1);

assign sub_ln77_4_fu_652_p2 = (sub_ln77_3_fu_636_p2 - zext_ln81_4_fu_648_p1);

assign sub_ln77_6_fu_696_p2 = (add_ln81_fu_556_p2 - zext_ln81_6_fu_692_p1);

assign sub_ln77_7_fu_722_p2 = (sub_ln77_6_fu_696_p2 - zext_ln81_7_fu_718_p1);

assign sub_ln77_9_fu_776_p2 = (add_ln81_fu_556_p2 - zext_ln81_9_fu_772_p1);

assign sub_ln77_fu_566_p2 = (add_ln81_fu_556_p2 - zext_ln81_fu_562_p1);

assign tmp_11_fu_658_p4 = {{empty_fu_620_p2[3:2]}};

assign tmp_12_fu_1029_p10 = (sub_ln77_4_reg_2084 - zext_ln81_5_fu_1021_p1);

assign tmp_16_fu_702_p4 = {{empty_30_fu_680_p2[3:2]}};

assign tmp_18_fu_1138_p10 = (sub_ln77_7_reg_2116 - zext_ln81_8_fu_1130_p1);

assign tmp_19_fu_734_p4 = {{empty_30_fu_680_p2[3:1]}};

assign tmp_22_fu_756_p4 = {{empty_31_fu_750_p2[3:2]}};

assign tmp_25_fu_788_p4 = {{empty_31_fu_750_p2[3:1]}};

assign tmp_26_fu_1518_p10 = (sub_ln77_10_fu_1458_p2 - zext_ln81_11_fu_1509_p1);

assign tmp_6_fu_604_p4 = {{ap_sig_allocacmp_i_1[3:2]}};

assign tmp_fu_528_p3 = ap_sig_allocacmp_i_1[32'd3];

assign trunc_ln34_fu_536_p1 = ap_sig_allocacmp_i_1[2:0];

assign xor_ln70_fu_540_p2 = (trunc_ln34_fu_536_p1 ^ 3'd7);

assign zext_ln80_11_fu_1065_p1 = tmp_13_fu_1049_p10;

assign zext_ln80_12_fu_1086_p1 = tmp_14_fu_1076_p7;

assign zext_ln80_16_fu_1174_p1 = tmp_20_fu_1158_p10;

assign zext_ln80_1_fu_856_p1 = tmp_1_fu_846_p7;

assign zext_ln80_21_fu_546_p1 = xor_ln70_fu_540_p2;

assign zext_ln80_2_fu_875_p1 = tmp_2_fu_864_p7;

assign zext_ln80_6_fu_956_p1 = tmp_7_fu_940_p10;

assign zext_ln80_7_fu_976_p1 = tmp_8_fu_966_p7;

assign zext_ln80_fu_837_p1 = tmp_s_fu_821_p10;

assign zext_ln81_10_fu_1455_p1 = icmp_ln80_13_reg_2144;

assign zext_ln81_11_fu_1509_p1 = icmp_ln80_14_reg_2150;

assign zext_ln81_1_fu_578_p1 = icmp_ln80_1_fu_572_p2;

assign zext_ln81_2_fu_594_p1 = icmp_ln80_2_fu_588_p2;

assign zext_ln81_3_fu_632_p1 = icmp_ln80_4_fu_626_p2;

assign zext_ln81_4_fu_648_p1 = icmp_ln80_5_fu_642_p2;

assign zext_ln81_5_fu_1021_p1 = icmp_ln80_6_reg_2090;

assign zext_ln81_6_fu_692_p1 = icmp_ln80_8_fu_686_p2;

assign zext_ln81_7_fu_718_p1 = icmp_ln80_9_fu_712_p2;

assign zext_ln81_8_fu_1130_p1 = icmp_ln80_10_reg_2122;

assign zext_ln81_9_fu_772_p1 = icmp_ln80_12_fu_766_p2;

assign zext_ln81_fu_562_p1 = icmp_ln80_fu_550_p2;

endmodule //test_test_Pipeline_VITIS_LOOP_67_7
