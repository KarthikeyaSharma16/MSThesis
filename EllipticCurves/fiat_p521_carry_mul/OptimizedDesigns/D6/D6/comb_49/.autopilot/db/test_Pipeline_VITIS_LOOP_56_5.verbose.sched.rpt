

================================================================
== Vitis HLS Report for 'test_Pipeline_VITIS_LOOP_56_5'
================================================================
* Date:           Thu May  9 22:22:22 2024

* Version:        2023.1.1 (Build 3869133 on Jun 15 2023)
* Project:        D6
* Solution:       comb_49 (Vivado IP Flow Target)
* Product family: zynquplus
* Target device:  xczu9eg-ffvb1156-2-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  7.300 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |       30|       30|  0.300 us|  0.300 us|   30|   30|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- VITIS_LOOP_56_5  |       28|       28|        17|          6|          1|     3|       yes|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 6, depth = 17


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 17
* Pipeline : 1
  Pipeline-0 : II = 6, D = 17, States = { 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 7 
7 --> 8 
8 --> 9 
9 --> 10 
10 --> 11 
11 --> 12 
12 --> 13 
13 --> 14 
14 --> 15 
15 --> 16 
16 --> 17 
17 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 2.63>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%arr = alloca i32 1"   --->   Operation 20 'alloca' 'arr' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%i = alloca i32 1"   --->   Operation 21 'alloca' 'i' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%indvar = alloca i32 1"   --->   Operation 22 'alloca' 'indvar' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%sext_ln29_1_read = read i61 @_ssdm_op_Read.ap_auto.i61, i61 %sext_ln29_1"   --->   Operation 23 'read' 'sext_ln29_1_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%arg1_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1"   --->   Operation 24 'read' 'arg1_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%sext_ln29_1_cast = sext i61 %sext_ln29_1_read"   --->   Operation 25 'sext' 'sext_ln29_1_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i64 %mem, void @empty_2, i32 0, i32 0, void @empty_3, i32 0, i32 9, void @empty_4, void @empty_5, void @empty_3, i32 16, i32 16, i32 16, i32 16, void @empty_3, void @empty_3, i32 4294967295, i32 0"   --->   Operation 26 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.42ns)   --->   "%store_ln0 = store i2 0, i2 %indvar"   --->   Operation 27 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 28 [1/1] (0.42ns)   --->   "%store_ln0 = store i4 0, i4 %i"   --->   Operation 28 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 29 [1/1] (0.42ns)   --->   "%store_ln0 = store i128 0, i128 %arr"   --->   Operation 29 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.inc84"   --->   Operation 30 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%indvar_load = load i2 %indvar" [d6.cpp:56]   --->   Operation 31 'load' 'indvar_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i64 %mem"   --->   Operation 32 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.54ns)   --->   "%icmp_ln56 = icmp_eq  i2 %indvar_load, i2 3" [d6.cpp:56]   --->   Operation 33 'icmp' 'icmp_ln56' <Predicate = true> <Delay = 0.54> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 34 [1/1] (0.54ns)   --->   "%add_ln56_1 = add i2 %indvar_load, i2 1" [d6.cpp:56]   --->   Operation 34 'add' 'add_ln56_1' <Predicate = true> <Delay = 0.54> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%br_ln56 = br i1 %icmp_ln56, void %for.inc84.split, void %for.inc131.3.preheader.exitStub" [d6.cpp:56]   --->   Operation 35 'br' 'br_ln56' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%p_shl = bitconcatenate i7 @_ssdm_op_BitConcatenate.i7.i2.i5, i2 %indvar_load, i5 0" [d6.cpp:56]   --->   Operation 36 'bitconcatenate' 'p_shl' <Predicate = (!icmp_ln56)> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%p_shl1 = bitconcatenate i5 @_ssdm_op_BitConcatenate.i5.i2.i3, i2 %indvar_load, i3 0" [d6.cpp:56]   --->   Operation 37 'bitconcatenate' 'p_shl1' <Predicate = (!icmp_ln56)> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%p_shl19_cast = zext i5 %p_shl1" [d6.cpp:56]   --->   Operation 38 'zext' 'p_shl19_cast' <Predicate = (!icmp_ln56)> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.77ns)   --->   "%empty = sub i7 %p_shl19_cast, i7 %p_shl" [d6.cpp:56]   --->   Operation 39 'sub' 'empty' <Predicate = (!icmp_ln56)> <Delay = 0.77> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "%p_cast = sext i7 %empty" [d6.cpp:56]   --->   Operation 40 'sext' 'p_cast' <Predicate = (!icmp_ln56)> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.77ns)   --->   "%tmp = add i8 %p_cast, i8 48" [d6.cpp:56]   --->   Operation 41 'add' 'tmp' <Predicate = (!icmp_ln56)> <Delay = 0.77> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 42 [1/1] (0.00ns)   --->   "%tmp_cast = sext i8 %tmp" [d6.cpp:56]   --->   Operation 42 'sext' 'tmp_cast' <Predicate = (!icmp_ln56)> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (1.08ns)   --->   "%empty_32 = add i64 %tmp_cast, i64 %arg1_read" [d6.cpp:56]   --->   Operation 43 'add' 'empty_32' <Predicate = (!icmp_ln56)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 44 [1/1] (0.00ns)   --->   "%trunc_ln1 = partselect i61 @_ssdm_op_PartSelect.i61.i64.i32.i32, i64 %empty_32, i32 3, i32 63" [d6.cpp:62]   --->   Operation 44 'partselect' 'trunc_ln1' <Predicate = (!icmp_ln56)> <Delay = 0.00>
ST_1 : Operation 45 [1/1] (0.42ns)   --->   "%store_ln56 = store i2 %add_ln56_1, i2 %indvar" [d6.cpp:56]   --->   Operation 45 'store' 'store_ln56' <Predicate = (!icmp_ln56)> <Delay = 0.42>

State 2 <SV = 1> <Delay = 7.30>
ST_2 : Operation 46 [1/1] (0.00ns)   --->   "%sext_ln62 = sext i61 %trunc_ln1" [d6.cpp:62]   --->   Operation 46 'sext' 'sext_ln62' <Predicate = (!icmp_ln56)> <Delay = 0.00>
ST_2 : Operation 47 [1/1] (0.00ns)   --->   "%sext_ln62_1 = sext i61 %trunc_ln1" [d6.cpp:62]   --->   Operation 47 'sext' 'sext_ln62_1' <Predicate = (!icmp_ln56)> <Delay = 0.00>
ST_2 : Operation 48 [1/1] (0.00ns)   --->   "%mem_addr = getelementptr i64 %mem, i64 %sext_ln62" [d6.cpp:62]   --->   Operation 48 'getelementptr' 'mem_addr' <Predicate = (!icmp_ln56)> <Delay = 0.00>
ST_2 : Operation 49 [8/8] (7.30ns)   --->   "%mem_load_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr, i32 1" [d6.cpp:62]   --->   Operation 49 'readreq' 'mem_load_req' <Predicate = (!icmp_ln56)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_2 : Operation 50 [1/1] (1.08ns)   --->   "%add_ln62 = add i62 %sext_ln62_1, i62 1" [d6.cpp:62]   --->   Operation 50 'add' 'add_ln62' <Predicate = (!icmp_ln56)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 3 <SV = 2> <Delay = 7.30>
ST_3 : Operation 51 [7/8] (7.30ns)   --->   "%mem_load_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr, i32 1" [d6.cpp:62]   --->   Operation 51 'readreq' 'mem_load_req' <Predicate = (!icmp_ln56)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_3 : Operation 52 [1/1] (0.00ns)   --->   "%sext_ln62_2 = sext i62 %add_ln62" [d6.cpp:62]   --->   Operation 52 'sext' 'sext_ln62_2' <Predicate = (!icmp_ln56)> <Delay = 0.00>
ST_3 : Operation 53 [1/1] (0.00ns)   --->   "%mem_addr_1 = getelementptr i64 %mem, i64 %sext_ln62_2" [d6.cpp:62]   --->   Operation 53 'getelementptr' 'mem_addr_1' <Predicate = (!icmp_ln56)> <Delay = 0.00>
ST_3 : Operation 54 [8/8] (7.30ns)   --->   "%mem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_1, i32 1" [d6.cpp:62]   --->   Operation 54 'readreq' 'mem_load_1_req' <Predicate = (!icmp_ln56)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_3 : Operation 55 [1/1] (1.08ns)   --->   "%add_ln62_1 = add i62 %sext_ln62_1, i62 2" [d6.cpp:62]   --->   Operation 55 'add' 'add_ln62_1' <Predicate = (!icmp_ln56)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 4 <SV = 3> <Delay = 7.30>
ST_4 : Operation 56 [1/1] (0.00ns)   --->   "%i_load = load i4 %i" [d6.cpp:56]   --->   Operation 56 'load' 'i_load' <Predicate = (!icmp_ln56)> <Delay = 0.00>
ST_4 : Operation 57 [1/1] (0.00ns)   --->   "%zext_ln56 = zext i4 %i_load" [d6.cpp:56]   --->   Operation 57 'zext' 'zext_ln56' <Predicate = (!icmp_ln56)> <Delay = 0.00>
ST_4 : Operation 58 [6/8] (7.30ns)   --->   "%mem_load_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr, i32 1" [d6.cpp:62]   --->   Operation 58 'readreq' 'mem_load_req' <Predicate = (!icmp_ln56)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 59 [7/8] (7.30ns)   --->   "%mem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_1, i32 1" [d6.cpp:62]   --->   Operation 59 'readreq' 'mem_load_1_req' <Predicate = (!icmp_ln56)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 60 [1/1] (0.00ns)   --->   "%sext_ln62_3 = sext i62 %add_ln62_1" [d6.cpp:62]   --->   Operation 60 'sext' 'sext_ln62_3' <Predicate = (!icmp_ln56)> <Delay = 0.00>
ST_4 : Operation 61 [1/1] (0.00ns)   --->   "%mem_addr_2 = getelementptr i64 %mem, i64 %sext_ln62_3" [d6.cpp:62]   --->   Operation 61 'getelementptr' 'mem_addr_2' <Predicate = (!icmp_ln56)> <Delay = 0.00>
ST_4 : Operation 62 [8/8] (7.30ns)   --->   "%mem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_2, i32 1" [d6.cpp:62]   --->   Operation 62 'readreq' 'mem_load_2_req' <Predicate = (!icmp_ln56)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_4 : Operation 63 [1/1] (1.08ns)   --->   "%add_ln62_2 = add i62 %zext_ln56, i62 %sext_ln29_1_cast" [d6.cpp:62]   --->   Operation 63 'add' 'add_ln62_2' <Predicate = (!icmp_ln56)> <Delay = 1.08> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.08> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 64 [1/1] (0.79ns)   --->   "%add_ln56 = add i4 %i_load, i4 3" [d6.cpp:56]   --->   Operation 64 'add' 'add_ln56' <Predicate = (!icmp_ln56)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 65 [1/1] (0.42ns)   --->   "%store_ln56 = store i4 %add_ln56, i4 %i" [d6.cpp:56]   --->   Operation 65 'store' 'store_ln56' <Predicate = (!icmp_ln56)> <Delay = 0.42>

State 5 <SV = 4> <Delay = 7.30>
ST_5 : Operation 66 [5/8] (7.30ns)   --->   "%mem_load_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr, i32 1" [d6.cpp:62]   --->   Operation 66 'readreq' 'mem_load_req' <Predicate = (!icmp_ln56)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_5 : Operation 67 [6/8] (7.30ns)   --->   "%mem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_1, i32 1" [d6.cpp:62]   --->   Operation 67 'readreq' 'mem_load_1_req' <Predicate = (!icmp_ln56)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_5 : Operation 68 [7/8] (7.30ns)   --->   "%mem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_2, i32 1" [d6.cpp:62]   --->   Operation 68 'readreq' 'mem_load_2_req' <Predicate = (!icmp_ln56)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_5 : Operation 69 [1/1] (0.00ns)   --->   "%sext_ln62_4 = sext i62 %add_ln62_2" [d6.cpp:62]   --->   Operation 69 'sext' 'sext_ln62_4' <Predicate = (!icmp_ln56)> <Delay = 0.00>
ST_5 : Operation 70 [1/1] (0.00ns)   --->   "%mem_addr_3 = getelementptr i64 %mem, i64 %sext_ln62_4" [d6.cpp:62]   --->   Operation 70 'getelementptr' 'mem_addr_3' <Predicate = (!icmp_ln56)> <Delay = 0.00>
ST_5 : Operation 71 [8/8] (7.30ns)   --->   "%mem_load_3_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_3, i32 1" [d6.cpp:62]   --->   Operation 71 'readreq' 'mem_load_3_req' <Predicate = (!icmp_ln56)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_5 : Operation 72 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln62_5 = add i62 %sext_ln29_1_cast, i62 1" [d6.cpp:62]   --->   Operation 72 'add' 'add_ln62_5' <Predicate = (!icmp_ln56)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.49> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_5 : Operation 73 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln62_3 = add i62 %add_ln62_5, i62 %zext_ln56" [d6.cpp:62]   --->   Operation 73 'add' 'add_ln62_3' <Predicate = (!icmp_ln56)> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.49> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_5 : Operation 74 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln62_6 = add i62 %sext_ln29_1_cast, i62 2" [d6.cpp:62]   --->   Operation 74 'add' 'add_ln62_6' <Predicate = (!icmp_ln56)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.49> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_5 : Operation 75 [1/1] (0.81ns) (root node of TernaryAdder)   --->   "%add_ln62_4 = add i62 %add_ln62_6, i62 %zext_ln56" [d6.cpp:62]   --->   Operation 75 'add' 'add_ln62_4' <Predicate = (!icmp_ln56)> <Delay = 0.81> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.49> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>

State 6 <SV = 5> <Delay = 7.30>
ST_6 : Operation 76 [4/8] (7.30ns)   --->   "%mem_load_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr, i32 1" [d6.cpp:62]   --->   Operation 76 'readreq' 'mem_load_req' <Predicate = (!icmp_ln56)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 77 [5/8] (7.30ns)   --->   "%mem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_1, i32 1" [d6.cpp:62]   --->   Operation 77 'readreq' 'mem_load_1_req' <Predicate = (!icmp_ln56)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 78 [6/8] (7.30ns)   --->   "%mem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_2, i32 1" [d6.cpp:62]   --->   Operation 78 'readreq' 'mem_load_2_req' <Predicate = (!icmp_ln56)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 79 [7/8] (7.30ns)   --->   "%mem_load_3_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_3, i32 1" [d6.cpp:62]   --->   Operation 79 'readreq' 'mem_load_3_req' <Predicate = (!icmp_ln56)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_6 : Operation 80 [1/1] (0.00ns)   --->   "%sext_ln62_5 = sext i62 %add_ln62_3" [d6.cpp:62]   --->   Operation 80 'sext' 'sext_ln62_5' <Predicate = (!icmp_ln56)> <Delay = 0.00>
ST_6 : Operation 81 [1/1] (0.00ns)   --->   "%mem_addr_4 = getelementptr i64 %mem, i64 %sext_ln62_5" [d6.cpp:62]   --->   Operation 81 'getelementptr' 'mem_addr_4' <Predicate = (!icmp_ln56)> <Delay = 0.00>
ST_6 : Operation 82 [8/8] (7.30ns)   --->   "%mem_load_4_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_4, i32 1" [d6.cpp:62]   --->   Operation 82 'readreq' 'mem_load_4_req' <Predicate = (!icmp_ln56)> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 7 <SV = 6> <Delay = 7.30>
ST_7 : Operation 83 [3/8] (7.30ns)   --->   "%mem_load_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr, i32 1" [d6.cpp:62]   --->   Operation 83 'readreq' 'mem_load_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 84 [4/8] (7.30ns)   --->   "%mem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_1, i32 1" [d6.cpp:62]   --->   Operation 84 'readreq' 'mem_load_1_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 85 [5/8] (7.30ns)   --->   "%mem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_2, i32 1" [d6.cpp:62]   --->   Operation 85 'readreq' 'mem_load_2_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 86 [6/8] (7.30ns)   --->   "%mem_load_3_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_3, i32 1" [d6.cpp:62]   --->   Operation 86 'readreq' 'mem_load_3_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 87 [7/8] (7.30ns)   --->   "%mem_load_4_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_4, i32 1" [d6.cpp:62]   --->   Operation 87 'readreq' 'mem_load_4_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_7 : Operation 88 [1/1] (0.00ns)   --->   "%sext_ln62_6 = sext i62 %add_ln62_4" [d6.cpp:62]   --->   Operation 88 'sext' 'sext_ln62_6' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 89 [1/1] (0.00ns)   --->   "%mem_addr_5 = getelementptr i64 %mem, i64 %sext_ln62_6" [d6.cpp:62]   --->   Operation 89 'getelementptr' 'mem_addr_5' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 90 [8/8] (7.30ns)   --->   "%mem_load_5_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_5, i32 1" [d6.cpp:62]   --->   Operation 90 'readreq' 'mem_load_5_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 8 <SV = 7> <Delay = 7.30>
ST_8 : Operation 91 [2/8] (7.30ns)   --->   "%mem_load_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr, i32 1" [d6.cpp:62]   --->   Operation 91 'readreq' 'mem_load_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 92 [3/8] (7.30ns)   --->   "%mem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_1, i32 1" [d6.cpp:62]   --->   Operation 92 'readreq' 'mem_load_1_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 93 [4/8] (7.30ns)   --->   "%mem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_2, i32 1" [d6.cpp:62]   --->   Operation 93 'readreq' 'mem_load_2_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 94 [5/8] (7.30ns)   --->   "%mem_load_3_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_3, i32 1" [d6.cpp:62]   --->   Operation 94 'readreq' 'mem_load_3_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 95 [6/8] (7.30ns)   --->   "%mem_load_4_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_4, i32 1" [d6.cpp:62]   --->   Operation 95 'readreq' 'mem_load_4_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_8 : Operation 96 [7/8] (7.30ns)   --->   "%mem_load_5_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_5, i32 1" [d6.cpp:62]   --->   Operation 96 'readreq' 'mem_load_5_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 9 <SV = 8> <Delay = 7.30>
ST_9 : Operation 97 [1/8] (7.30ns)   --->   "%mem_load_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr, i32 1" [d6.cpp:62]   --->   Operation 97 'readreq' 'mem_load_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 98 [2/8] (7.30ns)   --->   "%mem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_1, i32 1" [d6.cpp:62]   --->   Operation 98 'readreq' 'mem_load_1_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 99 [3/8] (7.30ns)   --->   "%mem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_2, i32 1" [d6.cpp:62]   --->   Operation 99 'readreq' 'mem_load_2_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 100 [4/8] (7.30ns)   --->   "%mem_load_3_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_3, i32 1" [d6.cpp:62]   --->   Operation 100 'readreq' 'mem_load_3_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 101 [5/8] (7.30ns)   --->   "%mem_load_4_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_4, i32 1" [d6.cpp:62]   --->   Operation 101 'readreq' 'mem_load_4_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 102 [6/8] (7.30ns)   --->   "%mem_load_5_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_5, i32 1" [d6.cpp:62]   --->   Operation 102 'readreq' 'mem_load_5_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 10 <SV = 9> <Delay = 7.30>
ST_10 : Operation 103 [1/1] (7.30ns)   --->   "%mem_addr_read = read i64 @_ssdm_op_Read.m_axi.i64P1A, i64 %mem_addr" [d6.cpp:62]   --->   Operation 103 'read' 'mem_addr_read' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_10 : Operation 104 [1/8] (7.30ns)   --->   "%mem_load_1_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_1, i32 1" [d6.cpp:62]   --->   Operation 104 'readreq' 'mem_load_1_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_10 : Operation 105 [2/8] (7.30ns)   --->   "%mem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_2, i32 1" [d6.cpp:62]   --->   Operation 105 'readreq' 'mem_load_2_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_10 : Operation 106 [3/8] (7.30ns)   --->   "%mem_load_3_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_3, i32 1" [d6.cpp:62]   --->   Operation 106 'readreq' 'mem_load_3_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_10 : Operation 107 [4/8] (7.30ns)   --->   "%mem_load_4_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_4, i32 1" [d6.cpp:62]   --->   Operation 107 'readreq' 'mem_load_4_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_10 : Operation 108 [5/8] (7.30ns)   --->   "%mem_load_5_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_5, i32 1" [d6.cpp:62]   --->   Operation 108 'readreq' 'mem_load_5_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 11 <SV = 10> <Delay = 7.30>
ST_11 : Operation 109 [1/1] (7.30ns)   --->   "%mem_addr_1_read = read i64 @_ssdm_op_Read.m_axi.i64P1A, i64 %mem_addr_1" [d6.cpp:62]   --->   Operation 109 'read' 'mem_addr_1_read' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_11 : Operation 110 [1/8] (7.30ns)   --->   "%mem_load_2_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_2, i32 1" [d6.cpp:62]   --->   Operation 110 'readreq' 'mem_load_2_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_11 : Operation 111 [2/8] (7.30ns)   --->   "%mem_load_3_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_3, i32 1" [d6.cpp:62]   --->   Operation 111 'readreq' 'mem_load_3_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_11 : Operation 112 [3/8] (7.30ns)   --->   "%mem_load_4_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_4, i32 1" [d6.cpp:62]   --->   Operation 112 'readreq' 'mem_load_4_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_11 : Operation 113 [4/8] (7.30ns)   --->   "%mem_load_5_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_5, i32 1" [d6.cpp:62]   --->   Operation 113 'readreq' 'mem_load_5_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_11 : Operation 142 [1/1] (0.00ns)   --->   "%arr_load = load i128 %arr"   --->   Operation 142 'load' 'arr_load' <Predicate = (icmp_ln56)> <Delay = 0.00>
ST_11 : Operation 143 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i128P0A, i128 %add83_2174_out, i128 %arr_load"   --->   Operation 143 'write' 'write_ln0' <Predicate = (icmp_ln56)> <Delay = 0.00>
ST_11 : Operation 144 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 144 'ret' 'ret_ln0' <Predicate = (icmp_ln56)> <Delay = 0.00>

State 12 <SV = 11> <Delay = 7.30>
ST_12 : Operation 114 [1/1] (7.30ns)   --->   "%mem_addr_2_read = read i64 @_ssdm_op_Read.m_axi.i64P1A, i64 %mem_addr_2" [d6.cpp:62]   --->   Operation 114 'read' 'mem_addr_2_read' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_12 : Operation 115 [1/8] (7.30ns)   --->   "%mem_load_3_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_3, i32 1" [d6.cpp:62]   --->   Operation 115 'readreq' 'mem_load_3_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_12 : Operation 116 [2/8] (7.30ns)   --->   "%mem_load_4_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_4, i32 1" [d6.cpp:62]   --->   Operation 116 'readreq' 'mem_load_4_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_12 : Operation 117 [3/8] (7.30ns)   --->   "%mem_load_5_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_5, i32 1" [d6.cpp:62]   --->   Operation 117 'readreq' 'mem_load_5_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 13 <SV = 12> <Delay = 7.30>
ST_13 : Operation 118 [1/1] (7.30ns)   --->   "%mem_addr_3_read = read i64 @_ssdm_op_Read.m_axi.i64P1A, i64 %mem_addr_3" [d6.cpp:62]   --->   Operation 118 'read' 'mem_addr_3_read' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_13 : Operation 119 [1/8] (7.30ns)   --->   "%mem_load_4_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_4, i32 1" [d6.cpp:62]   --->   Operation 119 'readreq' 'mem_load_4_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_13 : Operation 120 [2/8] (7.30ns)   --->   "%mem_load_5_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_5, i32 1" [d6.cpp:62]   --->   Operation 120 'readreq' 'mem_load_5_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 14 <SV = 13> <Delay = 7.30>
ST_14 : Operation 121 [1/1] (0.00ns)   --->   "%zext_ln62 = zext i64 %mem_addr_2_read" [d6.cpp:62]   --->   Operation 121 'zext' 'zext_ln62' <Predicate = true> <Delay = 0.00>
ST_14 : Operation 122 [1/1] (7.30ns)   --->   "%mem_addr_4_read = read i64 @_ssdm_op_Read.m_axi.i64P1A, i64 %mem_addr_4" [d6.cpp:62]   --->   Operation 122 'read' 'mem_addr_4_read' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_14 : Operation 123 [1/8] (7.30ns)   --->   "%mem_load_5_req = readreq i1 @_ssdm_op_ReadReq.m_axi.i64P1A, i64 %mem_addr_5, i32 1" [d6.cpp:62]   --->   Operation 123 'readreq' 'mem_load_5_req' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_14 : Operation 124 [1/1] (0.00ns)   --->   "%zext_ln62_1 = zext i64 %mem_addr_3_read" [d6.cpp:62]   --->   Operation 124 'zext' 'zext_ln62_1' <Predicate = true> <Delay = 0.00>
ST_14 : [1/1] (0.95ns)   --->   Input mux for Operation 125 '%mul_ln62_1 = mul i128 %zext_ln62_1, i128 %zext_ln62'
ST_14 : Operation 125 [1/1] (3.57ns)   --->   "%mul_ln62_1 = mul i128 %zext_ln62_1, i128 %zext_ln62" [d6.cpp:62]   --->   Operation 125 'mul' 'mul_ln62_1' <Predicate = true> <Delay = 3.57> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 15 <SV = 14> <Delay = 7.30>
ST_15 : Operation 126 [1/1] (7.30ns)   --->   "%mem_addr_5_read = read i64 @_ssdm_op_Read.m_axi.i64P1A, i64 %mem_addr_5" [d6.cpp:62]   --->   Operation 126 'read' 'mem_addr_5_read' <Predicate = true> <Delay = 7.30> <CoreInst = "m_axi">   --->   Core 121 'm_axi' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_15 : Operation 127 [1/1] (0.00ns)   --->   "%zext_ln62_2 = zext i64 %mem_addr_1_read" [d6.cpp:62]   --->   Operation 127 'zext' 'zext_ln62_2' <Predicate = true> <Delay = 0.00>
ST_15 : Operation 128 [1/1] (0.00ns)   --->   "%zext_ln62_3 = zext i64 %mem_addr_4_read" [d6.cpp:62]   --->   Operation 128 'zext' 'zext_ln62_3' <Predicate = true> <Delay = 0.00>
ST_15 : [1/1] (0.95ns)   --->   Input mux for Operation 129 '%mul_ln62_2 = mul i128 %zext_ln62_3, i128 %zext_ln62_2'
ST_15 : Operation 129 [1/1] (3.57ns)   --->   "%mul_ln62_2 = mul i128 %zext_ln62_3, i128 %zext_ln62_2" [d6.cpp:62]   --->   Operation 129 'mul' 'mul_ln62_2' <Predicate = true> <Delay = 3.57> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 16 <SV = 15> <Delay = 6.10>
ST_16 : Operation 130 [1/1] (0.00ns)   --->   "%zext_ln62_4 = zext i64 %mem_addr_read" [d6.cpp:62]   --->   Operation 130 'zext' 'zext_ln62_4' <Predicate = true> <Delay = 0.00>
ST_16 : Operation 131 [1/1] (0.00ns)   --->   "%zext_ln62_5 = zext i64 %mem_addr_5_read" [d6.cpp:62]   --->   Operation 131 'zext' 'zext_ln62_5' <Predicate = true> <Delay = 0.00>
ST_16 : [1/1] (0.95ns)   --->   Input mux for Operation 132 '%mul_ln62 = mul i128 %zext_ln62_5, i128 %zext_ln62_4'
ST_16 : Operation 132 [1/1] (3.57ns)   --->   "%mul_ln62 = mul i128 %zext_ln62_5, i128 %zext_ln62_4" [d6.cpp:62]   --->   Operation 132 'mul' 'mul_ln62' <Predicate = true> <Delay = 3.57> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_16 : Operation 133 [1/1] (1.57ns)   --->   "%add_ln62_7 = add i128 %mul_ln62_2, i128 %mul_ln62" [d6.cpp:62]   --->   Operation 133 'add' 'add_ln62_7' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 17 <SV = 16> <Delay = 1.42>
ST_17 : Operation 134 [1/1] (0.00ns)   --->   "%arr_load_1 = load i128 %arr" [d6.cpp:62]   --->   Operation 134 'load' 'arr_load_1' <Predicate = true> <Delay = 0.00>
ST_17 : Operation 135 [1/1] (0.00ns)   --->   "%specpipeline_ln58 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty_3" [d6.cpp:58]   --->   Operation 135 'specpipeline' 'specpipeline_ln58' <Predicate = true> <Delay = 0.00>
ST_17 : Operation 136 [1/1] (0.00ns)   --->   "%speclooptripcount_ln56 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 3, i64 3, i64 3" [d6.cpp:56]   --->   Operation 136 'speclooptripcount' 'speclooptripcount_ln56' <Predicate = true> <Delay = 0.00>
ST_17 : Operation 137 [1/1] (0.00ns)   --->   "%specloopname_ln56 = specloopname void @_ssdm_op_SpecLoopName, void @empty_10" [d6.cpp:56]   --->   Operation 137 'specloopname' 'specloopname_ln56' <Predicate = true> <Delay = 0.00>
ST_17 : Operation 138 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln62_8 = add i128 %add_ln62_7, i128 %mul_ln62_1" [d6.cpp:62]   --->   Operation 138 'add' 'add_ln62_8' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.49> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_17 : Operation 139 [1/1] (0.99ns) (root node of TernaryAdder)   --->   "%arr_1 = add i128 %arr_load_1, i128 %add_ln62_8" [d6.cpp:62]   --->   Operation 139 'add' 'arr_1' <Predicate = true> <Delay = 0.99> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.49> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_17 : Operation 140 [1/1] (0.42ns)   --->   "%store_ln56 = store i128 %arr_1, i128 %arr" [d6.cpp:56]   --->   Operation 140 'store' 'store_ln56' <Predicate = true> <Delay = 0.42>
ST_17 : Operation 141 [1/1] (0.00ns)   --->   "%br_ln56 = br void %for.inc84" [d6.cpp:56]   --->   Operation 141 'br' 'br_ln56' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 2.631ns
The critical path consists of the following:
	'alloca' operation ('indvar') [7]  (0.000 ns)
	'load' operation ('indvar_load', d6.cpp:56) on local variable 'indvar' [17]  (0.000 ns)
	'sub' operation ('empty', d6.cpp:56) [32]  (0.773 ns)
	'add' operation ('tmp', d6.cpp:56) [34]  (0.773 ns)
	'add' operation ('empty_32', d6.cpp:56) [36]  (1.085 ns)

 <State 2>: 7.300ns
The critical path consists of the following:
	'getelementptr' operation ('mem_addr', d6.cpp:62) [40]  (0.000 ns)
	bus request operation ('mem_load_req', d6.cpp:62) on port 'mem' (d6.cpp:62) [41]  (7.300 ns)

 <State 3>: 7.300ns
The critical path consists of the following:
	bus request operation ('mem_load_req', d6.cpp:62) on port 'mem' (d6.cpp:62) [41]  (7.300 ns)

 <State 4>: 7.300ns
The critical path consists of the following:
	bus request operation ('mem_load_req', d6.cpp:62) on port 'mem' (d6.cpp:62) [41]  (7.300 ns)

 <State 5>: 7.300ns
The critical path consists of the following:
	bus request operation ('mem_load_req', d6.cpp:62) on port 'mem' (d6.cpp:62) [41]  (7.300 ns)

 <State 6>: 7.300ns
The critical path consists of the following:
	bus request operation ('mem_load_req', d6.cpp:62) on port 'mem' (d6.cpp:62) [41]  (7.300 ns)

 <State 7>: 7.300ns
The critical path consists of the following:
	bus request operation ('mem_load_req', d6.cpp:62) on port 'mem' (d6.cpp:62) [41]  (7.300 ns)

 <State 8>: 7.300ns
The critical path consists of the following:
	bus request operation ('mem_load_req', d6.cpp:62) on port 'mem' (d6.cpp:62) [41]  (7.300 ns)

 <State 9>: 7.300ns
The critical path consists of the following:
	bus request operation ('mem_load_req', d6.cpp:62) on port 'mem' (d6.cpp:62) [41]  (7.300 ns)

 <State 10>: 7.300ns
The critical path consists of the following:
	bus read operation ('mem_addr_read', d6.cpp:62) on port 'mem' (d6.cpp:62) [42]  (7.300 ns)

 <State 11>: 7.300ns
The critical path consists of the following:
	bus read operation ('mem_addr_1_read', d6.cpp:62) on port 'mem' (d6.cpp:62) [47]  (7.300 ns)

 <State 12>: 7.300ns
The critical path consists of the following:
	bus read operation ('mem_addr_2_read', d6.cpp:62) on port 'mem' (d6.cpp:62) [52]  (7.300 ns)

 <State 13>: 7.300ns
The critical path consists of the following:
	bus read operation ('mem_addr_3_read', d6.cpp:62) on port 'mem' (d6.cpp:62) [58]  (7.300 ns)

 <State 14>: 7.300ns
The critical path consists of the following:
	bus read operation ('mem_addr_4_read', d6.cpp:62) on port 'mem' (d6.cpp:62) [64]  (7.300 ns)

 <State 15>: 7.300ns
The critical path consists of the following:
	bus read operation ('mem_addr_5_read', d6.cpp:62) on port 'mem' (d6.cpp:62) [70]  (7.300 ns)

 <State 16>: 6.109ns
The critical path consists of the following:
	multiplexor before operation 'mul' with delay (0.956 ns)
'mul' operation ('mul_ln62', d6.cpp:62) [76]  (3.574 ns)
	'add' operation ('add_ln62_7', d6.cpp:62) [79]  (1.579 ns)

 <State 17>: 1.422ns
The critical path consists of the following:
	'load' operation ('arr_load_1', d6.cpp:62) on local variable 'arr' [23]  (0.000 ns)
	'add' operation ('arr', d6.cpp:62) [81]  (0.995 ns)
	'store' operation ('store_ln56', d6.cpp:56) of variable 'arr', d6.cpp:62 on local variable 'arr' [85]  (0.427 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
