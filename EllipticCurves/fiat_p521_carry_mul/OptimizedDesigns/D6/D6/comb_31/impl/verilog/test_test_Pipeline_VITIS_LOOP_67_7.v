// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_67_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add_3146_1185_reload,
        add_3146184_reload,
        add_2131_1183_reload,
        add_2131182_reload,
        add_1116_1181_reload,
        add_1116180_reload,
        add_1164179_reload,
        add178_reload,
        arg1_r_1_reload,
        arg1_r_2_reload,
        arg1_r_3_reload,
        arg1_r_4_reload,
        arg1_r_5_reload,
        arg1_r_6_reload,
        arg1_r_7_reload,
        arg2_r_reload,
        arg2_r_1_reload,
        arg2_r_2_reload,
        arg2_r_3_reload,
        arg2_r_4_reload,
        arg2_r_5_reload,
        arg2_r_6_reload,
        arg2_r_7_reload,
        arg2_r_8_reload,
        arg1_r_reload,
        add124_3_1176_out,
        add124_3_1176_out_ap_vld,
        add124_3175_out,
        add124_3175_out_ap_vld,
        add124_2_1174_out,
        add124_2_1174_out_ap_vld,
        add124_2173_out,
        add124_2173_out_ap_vld,
        add124_142_1172_out,
        add124_142_1172_out_ap_vld,
        add124_142171_out,
        add124_142171_out_ap_vld,
        add124_156170_out,
        add124_156170_out_ap_vld,
        add124169_out,
        add124169_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] add_3146_1185_reload;
input  [127:0] add_3146184_reload;
input  [127:0] add_2131_1183_reload;
input  [127:0] add_2131182_reload;
input  [127:0] add_1116_1181_reload;
input  [127:0] add_1116180_reload;
input  [127:0] add_1164179_reload;
input  [127:0] add178_reload;
input  [63:0] arg1_r_1_reload;
input  [63:0] arg1_r_2_reload;
input  [63:0] arg1_r_3_reload;
input  [63:0] arg1_r_4_reload;
input  [63:0] arg1_r_5_reload;
input  [63:0] arg1_r_6_reload;
input  [63:0] arg1_r_7_reload;
input  [63:0] arg2_r_reload;
input  [63:0] arg2_r_1_reload;
input  [63:0] arg2_r_2_reload;
input  [63:0] arg2_r_3_reload;
input  [63:0] arg2_r_4_reload;
input  [63:0] arg2_r_5_reload;
input  [63:0] arg2_r_6_reload;
input  [63:0] arg2_r_7_reload;
input  [63:0] arg2_r_8_reload;
input  [63:0] arg1_r_reload;
output  [127:0] add124_3_1176_out;
output   add124_3_1176_out_ap_vld;
output  [127:0] add124_3175_out;
output   add124_3175_out_ap_vld;
output  [127:0] add124_2_1174_out;
output   add124_2_1174_out_ap_vld;
output  [127:0] add124_2173_out;
output   add124_2173_out_ap_vld;
output  [127:0] add124_142_1172_out;
output   add124_142_1172_out_ap_vld;
output  [127:0] add124_142171_out;
output   add124_142171_out_ap_vld;
output  [127:0] add124_156170_out;
output   add124_156170_out_ap_vld;
output  [127:0] add124169_out;
output   add124169_out_ap_vld;

reg ap_idle;
reg add124_3_1176_out_ap_vld;
reg add124_3175_out_ap_vld;
reg add124_2_1174_out_ap_vld;
reg add124_2173_out_ap_vld;
reg add124_142_1172_out_ap_vld;
reg add124_142171_out_ap_vld;
reg add124_156170_out_ap_vld;
reg add124169_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_fu_480_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_reg_1586;
wire   [2:0] xor_ln70_fu_492_p2;
reg   [2:0] xor_ln70_reg_1590;
wire   [127:0] zext_ln80_fu_524_p1;
reg   [127:0] zext_ln80_reg_1596;
wire   [3:0] sub_ln77_7_fu_617_p2;
reg   [3:0] sub_ln77_7_reg_1605;
wire   [0:0] icmp_ln80_2_fu_623_p2;
reg   [0:0] icmp_ln80_2_reg_1610;
wire   [3:0] sub_ln77_fu_633_p2;
reg   [3:0] sub_ln77_reg_1615;
wire   [0:0] icmp_ln80_3_fu_649_p2;
reg   [0:0] icmp_ln80_3_reg_1621;
wire   [0:0] icmp_ln80_4_fu_655_p2;
reg   [0:0] icmp_ln80_4_reg_1627;
wire   [0:0] icmp_ln80_5_fu_671_p2;
reg   [0:0] icmp_ln80_5_reg_1633;
wire   [127:0] zext_ln80_8_fu_705_p1;
reg   [127:0] zext_ln80_8_reg_1638;
wire   [127:0] and_ln80_fu_718_p2;
reg   [127:0] and_ln80_reg_1649;
wire   [127:0] and_ln80_1_fu_738_p2;
reg   [127:0] and_ln80_1_reg_1654;
wire   [127:0] and_ln80_2_fu_752_p2;
reg   [127:0] and_ln80_2_reg_1659;
wire   [3:0] sub_ln77_8_fu_762_p2;
reg   [3:0] sub_ln77_8_reg_1664;
wire   [0:0] icmp_ln80_7_fu_768_p2;
reg   [0:0] icmp_ln80_7_reg_1669;
wire   [3:0] sub_ln77_9_fu_778_p2;
reg   [3:0] sub_ln77_9_reg_1674;
wire   [0:0] icmp_ln80_8_fu_794_p2;
reg   [0:0] icmp_ln80_8_reg_1679;
wire   [3:0] sub_ln77_3_fu_804_p2;
reg   [3:0] sub_ln77_3_reg_1684;
wire   [0:0] icmp_ln80_9_fu_810_p2;
reg   [0:0] icmp_ln80_9_reg_1690;
wire   [0:0] icmp_ln80_10_fu_826_p2;
reg   [0:0] icmp_ln80_10_reg_1696;
wire   [0:0] icmp_ln80_11_fu_832_p2;
reg   [0:0] icmp_ln80_11_reg_1702;
reg   [0:0] icmp_ln80_11_reg_1702_pp0_iter1_reg;
wire   [127:0] and_ln80_3_fu_1047_p2;
reg   [127:0] and_ln80_3_reg_1707;
wire   [127:0] and_ln80_4_fu_1060_p2;
reg   [127:0] and_ln80_4_reg_1712;
wire   [127:0] and_ln80_5_fu_1092_p2;
reg   [127:0] and_ln80_5_reg_1717;
wire   [127:0] and_ln80_6_fu_1105_p2;
reg   [127:0] and_ln80_6_reg_1722;
wire   [127:0] and_ln80_7_fu_1137_p2;
reg   [127:0] and_ln80_7_reg_1727;
wire   [127:0] and_ln80_8_fu_1150_p2;
reg   [127:0] and_ln80_8_reg_1732;
wire   [127:0] and_ln80_9_fu_1191_p2;
reg   [127:0] and_ln80_9_reg_1737;
wire   [127:0] and_ln80_10_fu_1204_p2;
reg   [127:0] and_ln80_10_reg_1742;
wire   [127:0] mul_ln80_14_fu_428_p2;
reg   [127:0] mul_ln80_14_reg_1747;
reg   [127:0] add124169_fu_130;
wire   [127:0] add_ln80_1_fu_994_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [127:0] add124_156170_fu_134;
wire   [127:0] add_ln80_3_fu_1005_p2;
reg   [127:0] add124_142171_fu_138;
wire   [127:0] add_ln80_5_fu_1015_p2;
reg   [127:0] add124_142_1172_fu_142;
wire   [127:0] add_ln80_7_fu_1273_p2;
reg   [127:0] add124_2173_fu_146;
wire   [127:0] add_ln80_9_fu_1283_p2;
reg   [127:0] add124_2_1174_fu_150;
wire   [127:0] add_ln80_11_fu_1293_p2;
reg   [127:0] add124_3175_fu_154;
wire   [127:0] add_ln80_13_fu_1303_p2;
reg   [127:0] add124_3_1176_fu_158;
wire   [127:0] add_ln80_14_fu_1321_p2;
reg   [3:0] i_fu_162;
wire   [3:0] add_ln67_fu_838_p2;
reg   [3:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] mul_ln80_2_fu_372_p0;
wire   [127:0] zext_ln80_2_fu_550_p1;
wire   [63:0] mul_ln80_2_fu_372_p1;
wire   [63:0] mul_ln80_4_fu_376_p0;
wire   [63:0] mul_ln80_4_fu_376_p1;
wire   [63:0] mul_ln80_5_fu_380_p0;
wire   [63:0] mul_ln80_5_fu_380_p1;
wire   [63:0] mul_ln80_fu_384_p0;
wire   [127:0] zext_ln80_1_fu_870_p1;
wire   [63:0] mul_ln80_fu_384_p1;
wire   [63:0] mul_ln80_1_fu_388_p0;
wire   [63:0] mul_ln80_1_fu_388_p1;
wire   [63:0] mul_ln80_3_fu_392_p0;
wire   [63:0] mul_ln80_3_fu_392_p1;
wire   [63:0] mul_ln80_6_fu_396_p0;
wire   [63:0] mul_ln80_6_fu_396_p1;
wire   [63:0] mul_ln80_7_fu_400_p0;
wire   [63:0] mul_ln80_7_fu_400_p1;
wire   [63:0] mul_ln80_8_fu_404_p0;
wire   [63:0] mul_ln80_8_fu_404_p1;
wire   [63:0] mul_ln80_9_fu_408_p0;
wire   [63:0] mul_ln80_9_fu_408_p1;
wire   [63:0] mul_ln80_10_fu_412_p0;
wire   [63:0] mul_ln80_10_fu_412_p1;
wire   [63:0] mul_ln80_11_fu_416_p0;
wire   [63:0] mul_ln80_11_fu_416_p1;
wire   [63:0] mul_ln80_12_fu_420_p0;
wire   [63:0] mul_ln80_12_fu_420_p1;
wire   [63:0] mul_ln80_13_fu_424_p0;
wire   [63:0] mul_ln80_13_fu_424_p1;
wire   [63:0] mul_ln80_14_fu_428_p0;
wire   [63:0] mul_ln80_14_fu_428_p1;
wire   [2:0] trunc_ln34_fu_488_p1;
wire   [63:0] tmp_s_fu_502_p10;
wire   [63:0] tmp_2_fu_530_p9;
wire   [3:0] zext_ln80_15_fu_498_p1;
wire   [0:0] icmp_ln80_fu_556_p2;
wire   [3:0] add_ln81_fu_562_p2;
wire   [3:0] zext_ln81_fu_568_p1;
wire   [3:0] sub_ln77_6_fu_572_p2;
wire   [63:0] tmp_3_fu_578_p11;
wire   [0:0] icmp_ln80_1_fu_607_p2;
wire   [3:0] zext_ln81_1_fu_613_p1;
wire   [3:0] zext_ln81_2_fu_629_p1;
wire   [1:0] tmp_6_fu_639_p4;
wire   [2:0] tmp_9_fu_661_p4;
wire   [63:0] tmp_10_fu_683_p10;
wire   [127:0] mul_ln80_2_fu_372_p2;
wire   [127:0] select_ln80_fu_710_p3;
wire   [3:0] empty_fu_677_p2;
wire   [127:0] mul_ln80_4_fu_376_p2;
wire   [127:0] select_ln80_1_fu_730_p3;
wire   [0:0] icmp_ln80_6_fu_724_p2;
wire   [127:0] mul_ln80_5_fu_380_p2;
wire   [127:0] select_ln80_2_fu_744_p3;
wire   [3:0] zext_ln81_5_fu_758_p1;
wire   [3:0] zext_ln81_6_fu_774_p1;
wire   [1:0] tmp_14_fu_784_p4;
wire   [3:0] zext_ln81_7_fu_800_p1;
wire   [2:0] tmp_17_fu_816_p4;
wire   [63:0] tmp_1_fu_858_p9;
wire   [63:0] tmp_4_fu_876_p11;
wire   [63:0] tmp_5_fu_895_p11;
wire   [3:0] zext_ln81_3_fu_914_p1;
wire   [3:0] sub_ln77_1_fu_917_p2;
wire   [63:0] tmp_7_fu_922_p11;
wire   [3:0] zext_ln81_4_fu_942_p1;
wire   [3:0] tmp_8_fu_951_p10;
wire   [63:0] tmp_8_fu_951_p11;
wire   [63:0] tmp_11_fu_971_p9;
wire   [127:0] mul_ln80_1_fu_388_p2;
wire   [127:0] mul_ln80_fu_384_p2;
wire   [127:0] add_ln80_fu_988_p2;
wire   [127:0] mul_ln80_3_fu_392_p2;
wire   [127:0] add_ln80_2_fu_1000_p2;
wire   [127:0] add_ln80_4_fu_1011_p2;
wire   [63:0] tmp_12_fu_1021_p11;
wire   [127:0] mul_ln80_6_fu_396_p2;
wire   [127:0] select_ln80_3_fu_1040_p3;
wire   [127:0] mul_ln80_7_fu_400_p2;
wire   [127:0] select_ln80_4_fu_1053_p3;
wire   [63:0] tmp_13_fu_1066_p11;
wire   [127:0] mul_ln80_8_fu_404_p2;
wire   [127:0] select_ln80_5_fu_1085_p3;
wire   [127:0] mul_ln80_9_fu_408_p2;
wire   [127:0] select_ln80_6_fu_1098_p3;
wire   [63:0] tmp_15_fu_1111_p11;
wire   [127:0] mul_ln80_10_fu_412_p2;
wire   [127:0] select_ln80_7_fu_1130_p3;
wire   [127:0] mul_ln80_11_fu_416_p2;
wire   [127:0] select_ln80_8_fu_1143_p3;
wire   [3:0] zext_ln81_8_fu_1156_p1;
wire   [3:0] sub_ln77_4_fu_1159_p2;
wire   [63:0] tmp_16_fu_1164_p11;
wire   [127:0] mul_ln80_12_fu_420_p2;
wire   [127:0] select_ln80_9_fu_1184_p3;
wire   [127:0] mul_ln80_13_fu_424_p2;
wire   [127:0] select_ln80_10_fu_1197_p3;
wire   [3:0] zext_ln81_9_fu_1210_p1;
wire   [3:0] tmp_18_fu_1219_p10;
wire   [63:0] tmp_18_fu_1219_p11;
wire   [127:0] add_ln80_6_fu_1269_p2;
wire   [127:0] add_ln80_8_fu_1279_p2;
wire   [127:0] add_ln80_10_fu_1289_p2;
wire   [127:0] add_ln80_12_fu_1299_p2;
wire   [127:0] select_ln80_11_fu_1309_p3;
wire   [127:0] and_ln80_11_fu_1316_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [127:0] mul_ln80_10_fu_412_p00;
wire   [127:0] mul_ln80_11_fu_416_p00;
wire   [127:0] mul_ln80_12_fu_420_p00;
wire   [127:0] mul_ln80_13_fu_424_p00;
wire   [127:0] mul_ln80_14_fu_428_p00;
wire   [127:0] mul_ln80_1_fu_388_p00;
wire   [127:0] mul_ln80_4_fu_376_p00;
wire   [127:0] mul_ln80_5_fu_380_p00;
wire   [127:0] mul_ln80_6_fu_396_p00;
wire   [127:0] mul_ln80_7_fu_400_p00;
wire   [127:0] mul_ln80_8_fu_404_p00;
wire   [127:0] mul_ln80_9_fu_408_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U99(
    .din0(mul_ln80_2_fu_372_p0),
    .din1(mul_ln80_2_fu_372_p1),
    .dout(mul_ln80_2_fu_372_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U100(
    .din0(mul_ln80_4_fu_376_p0),
    .din1(mul_ln80_4_fu_376_p1),
    .dout(mul_ln80_4_fu_376_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U101(
    .din0(mul_ln80_5_fu_380_p0),
    .din1(mul_ln80_5_fu_380_p1),
    .dout(mul_ln80_5_fu_380_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U102(
    .din0(mul_ln80_fu_384_p0),
    .din1(mul_ln80_fu_384_p1),
    .dout(mul_ln80_fu_384_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U103(
    .din0(mul_ln80_1_fu_388_p0),
    .din1(mul_ln80_1_fu_388_p1),
    .dout(mul_ln80_1_fu_388_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U104(
    .din0(mul_ln80_3_fu_392_p0),
    .din1(mul_ln80_3_fu_392_p1),
    .dout(mul_ln80_3_fu_392_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U105(
    .din0(mul_ln80_6_fu_396_p0),
    .din1(mul_ln80_6_fu_396_p1),
    .dout(mul_ln80_6_fu_396_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U106(
    .din0(mul_ln80_7_fu_400_p0),
    .din1(mul_ln80_7_fu_400_p1),
    .dout(mul_ln80_7_fu_400_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U107(
    .din0(mul_ln80_8_fu_404_p0),
    .din1(mul_ln80_8_fu_404_p1),
    .dout(mul_ln80_8_fu_404_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U108(
    .din0(mul_ln80_9_fu_408_p0),
    .din1(mul_ln80_9_fu_408_p1),
    .dout(mul_ln80_9_fu_408_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U109(
    .din0(mul_ln80_10_fu_412_p0),
    .din1(mul_ln80_10_fu_412_p1),
    .dout(mul_ln80_10_fu_412_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U110(
    .din0(mul_ln80_11_fu_416_p0),
    .din1(mul_ln80_11_fu_416_p1),
    .dout(mul_ln80_11_fu_416_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U111(
    .din0(mul_ln80_12_fu_420_p0),
    .din1(mul_ln80_12_fu_420_p1),
    .dout(mul_ln80_12_fu_420_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U112(
    .din0(mul_ln80_13_fu_424_p0),
    .din1(mul_ln80_13_fu_424_p1),
    .dout(mul_ln80_13_fu_424_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U113(
    .din0(mul_ln80_14_fu_428_p0),
    .din1(mul_ln80_14_fu_428_p1),
    .dout(mul_ln80_14_fu_428_p2)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U114(
    .din0(64'd0),
    .din1(arg1_r_1_reload),
    .din2(arg1_r_2_reload),
    .din3(arg1_r_3_reload),
    .din4(arg1_r_4_reload),
    .din5(arg1_r_5_reload),
    .din6(arg1_r_6_reload),
    .din7(arg1_r_7_reload),
    .din8(trunc_ln34_fu_488_p1),
    .dout(tmp_s_fu_502_p10)
);

test_mux_7_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_7_3_64_1_1_U115(
    .din0(64'd0),
    .din1(arg2_r_reload),
    .din2(arg2_r_1_reload),
    .din3(arg2_r_2_reload),
    .din4(arg2_r_3_reload),
    .din5(arg2_r_4_reload),
    .din6(arg2_r_5_reload),
    .din7(xor_ln70_fu_492_p2),
    .dout(tmp_2_fu_530_p9)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U116(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln77_6_fu_572_p2),
    .dout(tmp_3_fu_578_p11)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U117(
    .din0(64'd0),
    .din1(arg1_r_reload),
    .din2(arg1_r_1_reload),
    .din3(arg1_r_2_reload),
    .din4(arg1_r_3_reload),
    .din5(arg1_r_4_reload),
    .din6(arg1_r_5_reload),
    .din7(arg1_r_6_reload),
    .din8(trunc_ln34_fu_488_p1),
    .dout(tmp_10_fu_683_p10)
);

test_mux_7_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_7_3_64_1_1_U118(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(xor_ln70_reg_1590),
    .dout(tmp_1_fu_858_p9)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U119(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln77_7_reg_1605),
    .dout(tmp_4_fu_876_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U120(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln77_reg_1615),
    .dout(tmp_5_fu_895_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U121(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln77_1_fu_917_p2),
    .dout(tmp_7_fu_922_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U122(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(tmp_8_fu_951_p10),
    .dout(tmp_8_fu_951_p11)
);

test_mux_7_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_7_3_64_1_1_U123(
    .din0(arg2_r_1_reload),
    .din1(arg2_r_2_reload),
    .din2(arg2_r_3_reload),
    .din3(arg2_r_4_reload),
    .din4(arg2_r_5_reload),
    .din5(arg2_r_6_reload),
    .din6(arg2_r_7_reload),
    .din7(xor_ln70_reg_1590),
    .dout(tmp_11_fu_971_p9)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U124(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln77_8_reg_1664),
    .dout(tmp_12_fu_1021_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U125(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln77_9_reg_1674),
    .dout(tmp_13_fu_1066_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U126(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln77_3_reg_1684),
    .dout(tmp_15_fu_1111_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U127(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln77_4_fu_1159_p2),
    .dout(tmp_16_fu_1164_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U128(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(tmp_18_fu_1219_p10),
    .dout(tmp_18_fu_1219_p11)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add124169_fu_130 <= add178_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add124169_fu_130 <= add_ln80_1_fu_994_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add124_142171_fu_138 <= add_1116180_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add124_142171_fu_138 <= add_ln80_5_fu_1015_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add124_142_1172_fu_142 <= add_1116_1181_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add124_142_1172_fu_142 <= add_ln80_7_fu_1273_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add124_156170_fu_134 <= add_1164179_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add124_156170_fu_134 <= add_ln80_3_fu_1005_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add124_2173_fu_146 <= add_2131182_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add124_2173_fu_146 <= add_ln80_9_fu_1283_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add124_2_1174_fu_150 <= add_2131_1183_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add124_2_1174_fu_150 <= add_ln80_11_fu_1293_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add124_3175_fu_154 <= add_3146184_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add124_3175_fu_154 <= add_ln80_13_fu_1303_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add124_3_1176_fu_158 <= add_3146_1185_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add124_3_1176_fu_158 <= add_ln80_14_fu_1321_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((tmp_fu_480_p3 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_162 <= add_ln67_fu_838_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_162 <= 4'd7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln80_10_reg_1742 <= and_ln80_10_fu_1204_p2;
        and_ln80_3_reg_1707 <= and_ln80_3_fu_1047_p2;
        and_ln80_4_reg_1712 <= and_ln80_4_fu_1060_p2;
        and_ln80_5_reg_1717 <= and_ln80_5_fu_1092_p2;
        and_ln80_6_reg_1722 <= and_ln80_6_fu_1105_p2;
        and_ln80_7_reg_1727 <= and_ln80_7_fu_1137_p2;
        and_ln80_8_reg_1732 <= and_ln80_8_fu_1150_p2;
        and_ln80_9_reg_1737 <= and_ln80_9_fu_1191_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln80_11_reg_1702_pp0_iter1_reg <= icmp_ln80_11_reg_1702;
        mul_ln80_14_reg_1747 <= mul_ln80_14_fu_428_p2;
        tmp_reg_1586 <= ap_sig_allocacmp_i_1[32'd3];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_480_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln80_1_reg_1654 <= and_ln80_1_fu_738_p2;
        and_ln80_2_reg_1659 <= and_ln80_2_fu_752_p2;
        and_ln80_reg_1649 <= and_ln80_fu_718_p2;
        icmp_ln80_10_reg_1696 <= icmp_ln80_10_fu_826_p2;
        icmp_ln80_11_reg_1702 <= icmp_ln80_11_fu_832_p2;
        icmp_ln80_2_reg_1610 <= icmp_ln80_2_fu_623_p2;
        icmp_ln80_3_reg_1621 <= icmp_ln80_3_fu_649_p2;
        icmp_ln80_4_reg_1627 <= icmp_ln80_4_fu_655_p2;
        icmp_ln80_5_reg_1633 <= icmp_ln80_5_fu_671_p2;
        icmp_ln80_7_reg_1669 <= icmp_ln80_7_fu_768_p2;
        icmp_ln80_8_reg_1679 <= icmp_ln80_8_fu_794_p2;
        icmp_ln80_9_reg_1690 <= icmp_ln80_9_fu_810_p2;
        sub_ln77_3_reg_1684 <= sub_ln77_3_fu_804_p2;
        sub_ln77_7_reg_1605 <= sub_ln77_7_fu_617_p2;
        sub_ln77_8_reg_1664 <= sub_ln77_8_fu_762_p2;
        sub_ln77_9_reg_1674 <= sub_ln77_9_fu_778_p2;
        sub_ln77_reg_1615 <= sub_ln77_fu_633_p2;
        xor_ln70_reg_1590 <= xor_ln70_fu_492_p2;
        zext_ln80_8_reg_1638[63 : 0] <= zext_ln80_8_fu_705_p1[63 : 0];
        zext_ln80_reg_1596[63 : 0] <= zext_ln80_fu_524_p1[63 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_1586 == 1'd1))) begin
        add124169_out_ap_vld = 1'b1;
    end else begin
        add124169_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_1586 == 1'd1))) begin
        add124_142171_out_ap_vld = 1'b1;
    end else begin
        add124_142171_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_1586 == 1'd1))) begin
        add124_142_1172_out_ap_vld = 1'b1;
    end else begin
        add124_142_1172_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_1586 == 1'd1))) begin
        add124_156170_out_ap_vld = 1'b1;
    end else begin
        add124_156170_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_1586 == 1'd1))) begin
        add124_2173_out_ap_vld = 1'b1;
    end else begin
        add124_2173_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_1586 == 1'd1))) begin
        add124_2_1174_out_ap_vld = 1'b1;
    end else begin
        add124_2_1174_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_1586 == 1'd1))) begin
        add124_3175_out_ap_vld = 1'b1;
    end else begin
        add124_3175_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_1586 == 1'd1))) begin
        add124_3_1176_out_ap_vld = 1'b1;
    end else begin
        add124_3_1176_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_480_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 4'd7;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_162;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add124169_out = add124169_fu_130;

assign add124_142171_out = add124_142171_fu_138;

assign add124_142_1172_out = add124_142_1172_fu_142;

assign add124_156170_out = add124_156170_fu_134;

assign add124_2173_out = add124_2173_fu_146;

assign add124_2_1174_out = add124_2_1174_fu_150;

assign add124_3175_out = add124_3175_fu_154;

assign add124_3_1176_out = add124_3_1176_fu_158;

assign add_ln67_fu_838_p2 = ($signed(ap_sig_allocacmp_i_1) + $signed(4'd14));

assign add_ln80_10_fu_1289_p2 = (and_ln80_8_reg_1732 + and_ln80_7_reg_1727);

assign add_ln80_11_fu_1293_p2 = (add124_2_1174_fu_150 + add_ln80_10_fu_1289_p2);

assign add_ln80_12_fu_1299_p2 = (and_ln80_10_reg_1742 + and_ln80_9_reg_1737);

assign add_ln80_13_fu_1303_p2 = (add124_3175_fu_154 + add_ln80_12_fu_1299_p2);

assign add_ln80_14_fu_1321_p2 = (and_ln80_11_fu_1316_p2 + add124_3_1176_fu_158);

assign add_ln80_1_fu_994_p2 = (add124169_fu_130 + add_ln80_fu_988_p2);

assign add_ln80_2_fu_1000_p2 = (mul_ln80_3_fu_392_p2 + and_ln80_reg_1649);

assign add_ln80_3_fu_1005_p2 = (add124_156170_fu_134 + add_ln80_2_fu_1000_p2);

assign add_ln80_4_fu_1011_p2 = (and_ln80_2_reg_1659 + and_ln80_1_reg_1654);

assign add_ln80_5_fu_1015_p2 = (add124_142171_fu_138 + add_ln80_4_fu_1011_p2);

assign add_ln80_6_fu_1269_p2 = (and_ln80_4_reg_1712 + and_ln80_3_reg_1707);

assign add_ln80_7_fu_1273_p2 = (add124_142_1172_fu_142 + add_ln80_6_fu_1269_p2);

assign add_ln80_8_fu_1279_p2 = (and_ln80_6_reg_1722 + and_ln80_5_reg_1717);

assign add_ln80_9_fu_1283_p2 = (add124_2173_fu_146 + add_ln80_8_fu_1279_p2);

assign add_ln80_fu_988_p2 = (mul_ln80_1_fu_388_p2 + mul_ln80_fu_384_p2);

assign add_ln81_fu_562_p2 = ($signed(zext_ln80_15_fu_498_p1) + $signed(4'd15));

assign and_ln80_10_fu_1204_p2 = (select_ln80_10_fu_1197_p3 & mul_ln80_13_fu_424_p2);

assign and_ln80_11_fu_1316_p2 = (select_ln80_11_fu_1309_p3 & mul_ln80_14_reg_1747);

assign and_ln80_1_fu_738_p2 = (select_ln80_1_fu_730_p3 & mul_ln80_4_fu_376_p2);

assign and_ln80_2_fu_752_p2 = (select_ln80_2_fu_744_p3 & mul_ln80_5_fu_380_p2);

assign and_ln80_3_fu_1047_p2 = (select_ln80_3_fu_1040_p3 & mul_ln80_6_fu_396_p2);

assign and_ln80_4_fu_1060_p2 = (select_ln80_4_fu_1053_p3 & mul_ln80_7_fu_400_p2);

assign and_ln80_5_fu_1092_p2 = (select_ln80_5_fu_1085_p3 & mul_ln80_8_fu_404_p2);

assign and_ln80_6_fu_1105_p2 = (select_ln80_6_fu_1098_p3 & mul_ln80_9_fu_408_p2);

assign and_ln80_7_fu_1137_p2 = (select_ln80_7_fu_1130_p3 & mul_ln80_10_fu_412_p2);

assign and_ln80_8_fu_1150_p2 = (select_ln80_8_fu_1143_p3 & mul_ln80_11_fu_416_p2);

assign and_ln80_9_fu_1191_p2 = (select_ln80_9_fu_1184_p3 & mul_ln80_12_fu_420_p2);

assign and_ln80_fu_718_p2 = (select_ln80_fu_710_p3 & mul_ln80_2_fu_372_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_fu_677_p2 = ($signed(ap_sig_allocacmp_i_1) + $signed(4'd15));

assign icmp_ln80_10_fu_826_p2 = (($signed(tmp_17_fu_816_p4) < $signed(3'd1)) ? 1'b1 : 1'b0);

assign icmp_ln80_11_fu_832_p2 = (($signed(empty_fu_677_p2) < $signed(4'd1)) ? 1'b1 : 1'b0);

assign icmp_ln80_1_fu_607_p2 = (($signed(ap_sig_allocacmp_i_1) < $signed(4'd6)) ? 1'b1 : 1'b0);

assign icmp_ln80_2_fu_623_p2 = (($signed(ap_sig_allocacmp_i_1) < $signed(4'd5)) ? 1'b1 : 1'b0);

assign icmp_ln80_3_fu_649_p2 = ((tmp_6_fu_639_p4 != 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln80_4_fu_655_p2 = (($signed(ap_sig_allocacmp_i_1) < $signed(4'd3)) ? 1'b1 : 1'b0);

assign icmp_ln80_5_fu_671_p2 = (($signed(tmp_9_fu_661_p4) < $signed(3'd1)) ? 1'b1 : 1'b0);

assign icmp_ln80_6_fu_724_p2 = (($signed(empty_fu_677_p2) < $signed(4'd6)) ? 1'b1 : 1'b0);

assign icmp_ln80_7_fu_768_p2 = (($signed(empty_fu_677_p2) < $signed(4'd5)) ? 1'b1 : 1'b0);

assign icmp_ln80_8_fu_794_p2 = ((tmp_14_fu_784_p4 != 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln80_9_fu_810_p2 = (($signed(empty_fu_677_p2) < $signed(4'd3)) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_556_p2 = ((ap_sig_allocacmp_i_1 != 4'd7) ? 1'b1 : 1'b0);

assign mul_ln80_10_fu_412_p0 = mul_ln80_10_fu_412_p00;

assign mul_ln80_10_fu_412_p00 = tmp_7_fu_922_p11;

assign mul_ln80_10_fu_412_p1 = zext_ln80_reg_1596;

assign mul_ln80_11_fu_416_p0 = mul_ln80_11_fu_416_p00;

assign mul_ln80_11_fu_416_p00 = tmp_15_fu_1111_p11;

assign mul_ln80_11_fu_416_p1 = zext_ln80_8_reg_1638;

assign mul_ln80_12_fu_420_p0 = mul_ln80_12_fu_420_p00;

assign mul_ln80_12_fu_420_p00 = tmp_8_fu_951_p11;

assign mul_ln80_12_fu_420_p1 = zext_ln80_reg_1596;

assign mul_ln80_13_fu_424_p0 = mul_ln80_13_fu_424_p00;

assign mul_ln80_13_fu_424_p00 = tmp_16_fu_1164_p11;

assign mul_ln80_13_fu_424_p1 = zext_ln80_8_reg_1638;

assign mul_ln80_14_fu_428_p0 = mul_ln80_14_fu_428_p00;

assign mul_ln80_14_fu_428_p00 = tmp_18_fu_1219_p11;

assign mul_ln80_14_fu_428_p1 = zext_ln80_8_reg_1638;

assign mul_ln80_1_fu_388_p0 = mul_ln80_1_fu_388_p00;

assign mul_ln80_1_fu_388_p00 = tmp_11_fu_971_p9;

assign mul_ln80_1_fu_388_p1 = zext_ln80_8_reg_1638;

assign mul_ln80_2_fu_372_p0 = zext_ln80_2_fu_550_p1;

assign mul_ln80_2_fu_372_p1 = zext_ln80_fu_524_p1;

assign mul_ln80_3_fu_392_p0 = zext_ln80_8_reg_1638;

assign mul_ln80_3_fu_392_p1 = zext_ln80_1_fu_870_p1;

assign mul_ln80_4_fu_376_p0 = mul_ln80_4_fu_376_p00;

assign mul_ln80_4_fu_376_p00 = tmp_3_fu_578_p11;

assign mul_ln80_4_fu_376_p1 = zext_ln80_fu_524_p1;

assign mul_ln80_5_fu_380_p0 = mul_ln80_5_fu_380_p00;

assign mul_ln80_5_fu_380_p00 = tmp_10_fu_683_p10;

assign mul_ln80_5_fu_380_p1 = zext_ln80_2_fu_550_p1;

assign mul_ln80_6_fu_396_p0 = mul_ln80_6_fu_396_p00;

assign mul_ln80_6_fu_396_p00 = tmp_4_fu_876_p11;

assign mul_ln80_6_fu_396_p1 = zext_ln80_reg_1596;

assign mul_ln80_7_fu_400_p0 = mul_ln80_7_fu_400_p00;

assign mul_ln80_7_fu_400_p00 = tmp_12_fu_1021_p11;

assign mul_ln80_7_fu_400_p1 = zext_ln80_8_reg_1638;

assign mul_ln80_8_fu_404_p0 = mul_ln80_8_fu_404_p00;

assign mul_ln80_8_fu_404_p00 = tmp_5_fu_895_p11;

assign mul_ln80_8_fu_404_p1 = zext_ln80_reg_1596;

assign mul_ln80_9_fu_408_p0 = mul_ln80_9_fu_408_p00;

assign mul_ln80_9_fu_408_p00 = tmp_13_fu_1066_p11;

assign mul_ln80_9_fu_408_p1 = zext_ln80_8_reg_1638;

assign mul_ln80_fu_384_p0 = zext_ln80_1_fu_870_p1;

assign mul_ln80_fu_384_p1 = zext_ln80_reg_1596;

assign select_ln80_10_fu_1197_p3 = ((icmp_ln80_10_reg_1696[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_11_fu_1309_p3 = ((icmp_ln80_11_reg_1702_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_1_fu_730_p3 = ((icmp_ln80_1_fu_607_p2[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_2_fu_744_p3 = ((icmp_ln80_6_fu_724_p2[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_3_fu_1040_p3 = ((icmp_ln80_2_reg_1610[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_4_fu_1053_p3 = ((icmp_ln80_7_reg_1669[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_5_fu_1085_p3 = ((icmp_ln80_3_reg_1621[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_6_fu_1098_p3 = ((icmp_ln80_8_reg_1679[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_7_fu_1130_p3 = ((icmp_ln80_4_reg_1627[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_8_fu_1143_p3 = ((icmp_ln80_9_reg_1690[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_9_fu_1184_p3 = ((icmp_ln80_5_reg_1633[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_fu_710_p3 = ((icmp_ln80_fu_556_p2[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign sub_ln77_1_fu_917_p2 = (sub_ln77_reg_1615 - zext_ln81_3_fu_914_p1);

assign sub_ln77_3_fu_804_p2 = (sub_ln77_9_fu_778_p2 - zext_ln81_7_fu_800_p1);

assign sub_ln77_4_fu_1159_p2 = (sub_ln77_3_reg_1684 - zext_ln81_8_fu_1156_p1);

assign sub_ln77_6_fu_572_p2 = (add_ln81_fu_562_p2 - zext_ln81_fu_568_p1);

assign sub_ln77_7_fu_617_p2 = (sub_ln77_6_fu_572_p2 - zext_ln81_1_fu_613_p1);

assign sub_ln77_8_fu_762_p2 = (add_ln81_fu_562_p2 - zext_ln81_5_fu_758_p1);

assign sub_ln77_9_fu_778_p2 = (sub_ln77_8_fu_762_p2 - zext_ln81_6_fu_774_p1);

assign sub_ln77_fu_633_p2 = (sub_ln77_7_fu_617_p2 - zext_ln81_2_fu_629_p1);

assign tmp_14_fu_784_p4 = {{empty_fu_677_p2[3:2]}};

assign tmp_17_fu_816_p4 = {{empty_fu_677_p2[3:1]}};

assign tmp_18_fu_1219_p10 = (sub_ln77_4_fu_1159_p2 - zext_ln81_9_fu_1210_p1);

assign tmp_6_fu_639_p4 = {{ap_sig_allocacmp_i_1[3:2]}};

assign tmp_8_fu_951_p10 = (sub_ln77_1_fu_917_p2 - zext_ln81_4_fu_942_p1);

assign tmp_9_fu_661_p4 = {{ap_sig_allocacmp_i_1[3:1]}};

assign tmp_fu_480_p3 = ap_sig_allocacmp_i_1[32'd3];

assign trunc_ln34_fu_488_p1 = ap_sig_allocacmp_i_1[2:0];

assign xor_ln70_fu_492_p2 = (trunc_ln34_fu_488_p1 ^ 3'd7);

assign zext_ln80_15_fu_498_p1 = xor_ln70_fu_492_p2;

assign zext_ln80_1_fu_870_p1 = tmp_1_fu_858_p9;

assign zext_ln80_2_fu_550_p1 = tmp_2_fu_530_p9;

assign zext_ln80_8_fu_705_p1 = tmp_10_fu_683_p10;

assign zext_ln80_fu_524_p1 = tmp_s_fu_502_p10;

assign zext_ln81_1_fu_613_p1 = icmp_ln80_1_fu_607_p2;

assign zext_ln81_2_fu_629_p1 = icmp_ln80_2_fu_623_p2;

assign zext_ln81_3_fu_914_p1 = icmp_ln80_3_reg_1621;

assign zext_ln81_4_fu_942_p1 = icmp_ln80_4_reg_1627;

assign zext_ln81_5_fu_758_p1 = icmp_ln80_6_fu_724_p2;

assign zext_ln81_6_fu_774_p1 = icmp_ln80_7_fu_768_p2;

assign zext_ln81_7_fu_800_p1 = icmp_ln80_8_fu_794_p2;

assign zext_ln81_8_fu_1156_p1 = icmp_ln80_9_reg_1690;

assign zext_ln81_9_fu_1210_p1 = icmp_ln80_10_reg_1696;

assign zext_ln81_fu_568_p1 = icmp_ln80_fu_556_p2;

always @ (posedge ap_clk) begin
    zext_ln80_reg_1596[127:64] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    zext_ln80_8_reg_1638[127:64] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //test_test_Pipeline_VITIS_LOOP_67_7
