// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_36_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arg1_r_2_reload,
        arg1_r_4_reload,
        arg1_r_6_reload,
        arg1_r_8_reload,
        conv34,
        arg2_r_7_cast,
        arg2_r_8_cast,
        arg2_r_6_cast,
        arg2_r_5_cast,
        arg2_r_4_cast,
        arg2_r_3_cast,
        arg2_r_2_cast,
        arg2_r_1_cast,
        arg1_r_1_reload,
        arg1_r_3_reload,
        arg1_r_5_reload,
        arg1_r_7_reload,
        add_7150_out,
        add_7150_out_ap_vld,
        add_6149_out,
        add_6149_out_ap_vld,
        add_5148_out,
        add_5148_out_ap_vld,
        add_4147_out,
        add_4147_out_ap_vld,
        add_3146_out,
        add_3146_out_ap_vld,
        add_2145_out,
        add_2145_out_ap_vld,
        add_1129144_out,
        add_1129144_out_ap_vld,
        add143_out,
        add143_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] arg1_r_2_reload;
input  [63:0] arg1_r_4_reload;
input  [63:0] arg1_r_6_reload;
input  [63:0] arg1_r_8_reload;
input  [63:0] conv34;
input  [62:0] arg2_r_7_cast;
input  [62:0] arg2_r_8_cast;
input  [62:0] arg2_r_6_cast;
input  [62:0] arg2_r_5_cast;
input  [62:0] arg2_r_4_cast;
input  [62:0] arg2_r_3_cast;
input  [62:0] arg2_r_2_cast;
input  [62:0] arg2_r_1_cast;
input  [63:0] arg1_r_1_reload;
input  [63:0] arg1_r_3_reload;
input  [63:0] arg1_r_5_reload;
input  [63:0] arg1_r_7_reload;
output  [127:0] add_7150_out;
output   add_7150_out_ap_vld;
output  [127:0] add_6149_out;
output   add_6149_out_ap_vld;
output  [127:0] add_5148_out;
output   add_5148_out_ap_vld;
output  [127:0] add_4147_out;
output   add_4147_out_ap_vld;
output  [127:0] add_3146_out;
output   add_3146_out_ap_vld;
output  [127:0] add_2145_out;
output   add_2145_out_ap_vld;
output  [127:0] add_1129144_out;
output   add_1129144_out_ap_vld;
output  [127:0] add143_out;
output   add143_out_ap_vld;

reg ap_idle;
reg add_7150_out_ap_vld;
reg add_6149_out_ap_vld;
reg add_5148_out_ap_vld;
reg add_4147_out_ap_vld;
reg add_3146_out_ap_vld;
reg add_2145_out_ap_vld;
reg add_1129144_out_ap_vld;
reg add143_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln36_fu_428_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [127:0] conv34_cast_fu_376_p1;
reg   [127:0] conv34_cast_reg_1616;
reg   [0:0] icmp_ln36_reg_1622;
wire   [63:0] tmp_fu_434_p11;
reg   [63:0] tmp_reg_1626;
reg   [0:0] tmp_26_reg_1631;
wire   [0:0] tmp_27_fu_466_p3;
reg   [0:0] tmp_27_reg_1636;
reg   [0:0] tmp_27_reg_1636_pp0_iter1_reg;
wire   [0:0] icmp_ln49_fu_482_p2;
reg   [0:0] icmp_ln49_reg_1641;
wire   [3:0] sub_ln34_6_fu_492_p2;
reg   [3:0] sub_ln34_6_reg_1646;
wire   [0:0] icmp_ln49_1_fu_498_p2;
reg   [0:0] icmp_ln49_1_reg_1651;
wire   [3:0] sub_ln34_7_fu_508_p2;
reg   [3:0] sub_ln34_7_reg_1656;
wire   [0:0] icmp_ln49_2_fu_514_p2;
reg   [0:0] icmp_ln49_2_reg_1661;
wire   [3:0] sub_ln34_fu_524_p2;
reg   [3:0] sub_ln34_reg_1666;
wire   [0:0] icmp_ln49_3_fu_540_p2;
reg   [0:0] icmp_ln49_3_reg_1671;
wire   [3:0] sub_ln34_1_fu_550_p2;
reg   [3:0] sub_ln34_1_reg_1676;
wire   [0:0] icmp_ln49_4_fu_556_p2;
reg   [0:0] icmp_ln49_4_reg_1681;
wire   [3:0] sub_ln34_2_fu_566_p2;
reg   [3:0] sub_ln34_2_reg_1686;
wire   [63:0] tmp_8_fu_578_p11;
reg   [63:0] tmp_8_reg_1692;
wire   [0:0] icmp_ln49_5_fu_602_p2;
reg   [0:0] icmp_ln49_5_reg_1697;
wire   [0:0] icmp_ln49_6_fu_616_p2;
reg   [0:0] icmp_ln49_6_reg_1703;
wire   [3:0] sub_ln34_8_fu_626_p2;
reg   [3:0] sub_ln34_8_reg_1708;
wire   [0:0] icmp_ln49_7_fu_632_p2;
reg   [0:0] icmp_ln49_7_reg_1713;
wire   [3:0] sub_ln34_9_fu_642_p2;
reg   [3:0] sub_ln34_9_reg_1718;
wire   [0:0] icmp_ln49_8_fu_658_p2;
reg   [0:0] icmp_ln49_8_reg_1723;
wire   [3:0] sub_ln34_3_fu_668_p2;
reg   [3:0] sub_ln34_3_reg_1728;
wire   [0:0] icmp_ln49_9_fu_674_p2;
reg   [0:0] icmp_ln49_9_reg_1733;
wire   [3:0] sub_ln34_4_fu_684_p2;
reg   [3:0] sub_ln34_4_reg_1738;
wire   [0:0] icmp_ln49_10_fu_700_p2;
reg   [0:0] icmp_ln49_10_reg_1743;
wire   [3:0] sub_ln34_5_fu_710_p2;
reg   [3:0] sub_ln34_5_reg_1748;
wire   [127:0] mul_ln49_fu_316_p2;
reg   [127:0] mul_ln49_reg_1753;
wire   [127:0] and_ln49_1_fu_960_p2;
reg   [127:0] and_ln49_1_reg_1758;
wire   [127:0] and_ln49_2_fu_973_p2;
reg   [127:0] and_ln49_2_reg_1763;
wire   [127:0] and_ln49_3_fu_1004_p2;
reg   [127:0] and_ln49_3_reg_1768;
wire   [127:0] and_ln49_4_fu_1017_p2;
reg   [127:0] and_ln49_4_reg_1773;
wire   [127:0] and_ln49_5_fu_1063_p2;
reg   [127:0] and_ln49_5_reg_1778;
wire   [127:0] and_ln49_6_fu_1076_p2;
reg   [127:0] and_ln49_6_reg_1783;
wire   [127:0] and_ln49_7_fu_1121_p2;
reg   [127:0] and_ln49_7_reg_1788;
wire   [127:0] and_ln49_8_fu_1134_p2;
reg   [127:0] and_ln49_8_reg_1793;
wire   [127:0] and_ln49_9_fu_1178_p2;
reg   [127:0] and_ln49_9_reg_1798;
wire   [127:0] and_ln49_10_fu_1191_p2;
reg   [127:0] and_ln49_10_reg_1803;
wire   [127:0] mul_ln49_11_fu_360_p2;
reg   [127:0] mul_ln49_11_reg_1808;
wire   [127:0] and_ln49_11_fu_1234_p2;
reg   [127:0] and_ln49_11_reg_1813;
reg   [127:0] arr_8_fu_122;
wire   [127:0] arr_fu_1319_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [127:0] arr_9_fu_126;
wire   [127:0] arr_16_fu_1329_p2;
reg   [127:0] arr_10_fu_130;
wire   [127:0] arr_17_fu_1339_p2;
reg   [127:0] arr_11_fu_134;
wire   [127:0] arr_18_fu_1349_p2;
reg   [127:0] arr_12_fu_138;
wire   [127:0] arr_19_fu_1359_p2;
reg   [127:0] arr_13_fu_142;
wire   [127:0] arr_20_fu_1369_p2;
reg   [127:0] arr_14_fu_146;
wire   [127:0] arr_21_fu_1379_p2;
reg   [127:0] arr_15_fu_150;
wire   [127:0] arr_22_fu_1275_p2;
reg   [3:0] i_fu_154;
wire   [3:0] add_ln36_fu_716_p2;
reg   [3:0] ap_sig_allocacmp_i_2;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] mul_ln49_fu_316_p0;
wire   [127:0] zext_ln49_fu_730_p1;
wire   [63:0] mul_ln49_fu_316_p1;
wire   [63:0] mul_ln49_1_fu_320_p0;
wire   [63:0] mul_ln49_1_fu_320_p1;
wire   [63:0] mul_ln49_2_fu_324_p0;
wire   [127:0] zext_ln49_8_fu_943_p1;
wire   [63:0] mul_ln49_2_fu_324_p1;
wire   [63:0] mul_ln49_3_fu_328_p0;
wire   [63:0] mul_ln49_3_fu_328_p1;
wire   [63:0] mul_ln49_4_fu_332_p0;
wire   [63:0] mul_ln49_4_fu_332_p1;
wire   [63:0] mul_ln49_5_fu_336_p0;
wire   [63:0] mul_ln49_5_fu_336_p1;
wire   [63:0] mul_ln49_6_fu_340_p0;
wire   [63:0] mul_ln49_6_fu_340_p1;
wire   [63:0] mul_ln49_7_fu_344_p0;
wire   [63:0] mul_ln49_7_fu_344_p1;
wire   [63:0] mul_ln49_8_fu_348_p0;
wire   [63:0] mul_ln49_8_fu_348_p1;
wire   [63:0] mul_ln49_9_fu_352_p0;
wire   [63:0] mul_ln49_9_fu_352_p1;
wire   [63:0] mul_ln49_10_fu_356_p0;
wire   [63:0] mul_ln49_10_fu_356_p1;
wire   [63:0] mul_ln49_11_fu_360_p0;
wire   [63:0] mul_ln49_11_fu_360_p1;
wire   [63:0] mul_ln49_12_fu_364_p0;
wire   [63:0] mul_ln49_12_fu_364_p1;
wire   [63:0] mul_ln49_13_fu_368_p0;
wire   [63:0] mul_ln49_13_fu_368_p1;
wire   [63:0] mul_ln49_14_fu_372_p0;
wire   [63:0] mul_ln49_14_fu_372_p1;
wire   [3:0] select_ln34_fu_474_p3;
wire   [3:0] zext_ln50_fu_488_p1;
wire   [3:0] zext_ln50_1_fu_504_p1;
wire   [3:0] zext_ln50_2_fu_520_p1;
wire   [1:0] tmp_28_fu_530_p4;
wire   [3:0] zext_ln50_3_fu_546_p1;
wire   [3:0] zext_ln50_4_fu_562_p1;
wire   [3:0] empty_fu_572_p2;
wire   [3:0] select_ln34_1_fu_608_p3;
wire   [3:0] zext_ln50_5_fu_622_p1;
wire   [3:0] zext_ln50_6_fu_638_p1;
wire   [1:0] tmp_29_fu_648_p4;
wire   [3:0] zext_ln50_7_fu_664_p1;
wire   [3:0] zext_ln50_8_fu_680_p1;
wire   [2:0] tmp_30_fu_690_p4;
wire   [3:0] zext_ln50_9_fu_706_p1;
wire   [62:0] select_ln49_fu_741_p3;
wire   [63:0] shl_ln_fu_746_p3;
wire   [62:0] tmp_2_fu_759_p11;
wire   [63:0] shl_ln49_1_fu_779_p3;
wire   [62:0] tmp_3_fu_792_p11;
wire   [63:0] shl_ln49_2_fu_811_p3;
wire   [62:0] tmp_4_fu_824_p11;
wire   [63:0] shl_ln49_3_fu_842_p3;
wire   [62:0] tmp_5_fu_855_p11;
wire   [63:0] shl_ln49_4_fu_872_p3;
wire   [62:0] tmp_6_fu_885_p11;
wire   [63:0] shl_ln49_5_fu_901_p3;
wire   [62:0] tmp_7_fu_914_p11;
wire   [63:0] shl_ln49_6_fu_930_p3;
wire   [127:0] mul_ln49_1_fu_320_p2;
wire   [127:0] select_ln49_3_fu_953_p3;
wire   [127:0] mul_ln49_2_fu_324_p2;
wire   [127:0] select_ln49_4_fu_966_p3;
wire   [62:0] select_ln49_1_fu_979_p3;
wire   [63:0] shl_ln49_7_fu_984_p3;
wire   [127:0] mul_ln49_3_fu_328_p2;
wire   [127:0] select_ln49_5_fu_997_p3;
wire   [127:0] mul_ln49_4_fu_332_p2;
wire   [127:0] select_ln49_6_fu_1010_p3;
wire   [62:0] tmp_s_fu_1023_p11;
wire   [63:0] shl_ln49_8_fu_1043_p3;
wire   [127:0] mul_ln49_5_fu_336_p2;
wire   [127:0] select_ln49_7_fu_1056_p3;
wire   [127:0] mul_ln49_6_fu_340_p2;
wire   [127:0] select_ln49_8_fu_1069_p3;
wire   [62:0] tmp_1_fu_1082_p11;
wire   [63:0] shl_ln49_9_fu_1101_p3;
wire   [127:0] mul_ln49_7_fu_344_p2;
wire   [127:0] select_ln49_9_fu_1114_p3;
wire   [127:0] mul_ln49_8_fu_348_p2;
wire   [127:0] select_ln49_10_fu_1127_p3;
wire   [62:0] tmp_9_fu_1140_p11;
wire   [63:0] shl_ln49_s_fu_1158_p3;
wire   [127:0] mul_ln49_9_fu_352_p2;
wire   [127:0] select_ln49_11_fu_1171_p3;
wire   [127:0] mul_ln49_10_fu_356_p2;
wire   [127:0] select_ln49_12_fu_1184_p3;
wire   [62:0] tmp_10_fu_1197_p11;
wire   [63:0] shl_ln49_10_fu_1214_p3;
wire   [127:0] mul_ln49_12_fu_364_p2;
wire   [127:0] select_ln49_13_fu_1227_p3;
wire   [62:0] tmp_11_fu_1240_p11;
wire   [63:0] shl_ln49_11_fu_1256_p3;
wire   [127:0] mul_ln49_14_fu_372_p2;
wire   [127:0] mul_ln49_13_fu_368_p2;
wire   [127:0] add_ln49_12_fu_1269_p2;
wire   [127:0] select_ln49_2_fu_1307_p3;
wire   [127:0] and_ln49_fu_1314_p2;
wire   [127:0] add_ln49_fu_1325_p2;
wire   [127:0] add_ln49_2_fu_1335_p2;
wire   [127:0] add_ln49_4_fu_1345_p2;
wire   [127:0] add_ln49_6_fu_1355_p2;
wire   [127:0] add_ln49_8_fu_1365_p2;
wire   [127:0] add_ln49_10_fu_1375_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [127:0] mul_ln49_10_fu_356_p00;
wire   [127:0] mul_ln49_11_fu_360_p00;
wire   [127:0] mul_ln49_12_fu_364_p00;
wire   [127:0] mul_ln49_13_fu_368_p00;
wire   [127:0] mul_ln49_14_fu_372_p00;
wire   [127:0] mul_ln49_1_fu_320_p00;
wire   [127:0] mul_ln49_3_fu_328_p00;
wire   [127:0] mul_ln49_4_fu_332_p00;
wire   [127:0] mul_ln49_5_fu_336_p00;
wire   [127:0] mul_ln49_6_fu_340_p00;
wire   [127:0] mul_ln49_7_fu_344_p00;
wire   [127:0] mul_ln49_8_fu_348_p00;
wire   [127:0] mul_ln49_9_fu_352_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U23(
    .din0(mul_ln49_fu_316_p0),
    .din1(mul_ln49_fu_316_p1),
    .dout(mul_ln49_fu_316_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U24(
    .din0(mul_ln49_1_fu_320_p0),
    .din1(mul_ln49_1_fu_320_p1),
    .dout(mul_ln49_1_fu_320_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U25(
    .din0(mul_ln49_2_fu_324_p0),
    .din1(mul_ln49_2_fu_324_p1),
    .dout(mul_ln49_2_fu_324_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U26(
    .din0(mul_ln49_3_fu_328_p0),
    .din1(mul_ln49_3_fu_328_p1),
    .dout(mul_ln49_3_fu_328_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U27(
    .din0(mul_ln49_4_fu_332_p0),
    .din1(mul_ln49_4_fu_332_p1),
    .dout(mul_ln49_4_fu_332_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U28(
    .din0(mul_ln49_5_fu_336_p0),
    .din1(mul_ln49_5_fu_336_p1),
    .dout(mul_ln49_5_fu_336_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U29(
    .din0(mul_ln49_6_fu_340_p0),
    .din1(mul_ln49_6_fu_340_p1),
    .dout(mul_ln49_6_fu_340_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U30(
    .din0(mul_ln49_7_fu_344_p0),
    .din1(mul_ln49_7_fu_344_p1),
    .dout(mul_ln49_7_fu_344_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U31(
    .din0(mul_ln49_8_fu_348_p0),
    .din1(mul_ln49_8_fu_348_p1),
    .dout(mul_ln49_8_fu_348_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U32(
    .din0(mul_ln49_9_fu_352_p0),
    .din1(mul_ln49_9_fu_352_p1),
    .dout(mul_ln49_9_fu_352_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U33(
    .din0(mul_ln49_10_fu_356_p0),
    .din1(mul_ln49_10_fu_356_p1),
    .dout(mul_ln49_10_fu_356_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U34(
    .din0(mul_ln49_11_fu_360_p0),
    .din1(mul_ln49_11_fu_360_p1),
    .dout(mul_ln49_11_fu_360_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U35(
    .din0(mul_ln49_12_fu_364_p0),
    .din1(mul_ln49_12_fu_364_p1),
    .dout(mul_ln49_12_fu_364_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U36(
    .din0(mul_ln49_13_fu_368_p0),
    .din1(mul_ln49_13_fu_368_p1),
    .dout(mul_ln49_13_fu_368_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U37(
    .din0(mul_ln49_14_fu_372_p0),
    .din1(mul_ln49_14_fu_372_p1),
    .dout(mul_ln49_14_fu_372_p2)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U38(
    .din0(64'd0),
    .din1(64'd0),
    .din2(arg1_r_2_reload),
    .din3(64'd0),
    .din4(arg1_r_4_reload),
    .din5(64'd0),
    .din6(arg1_r_6_reload),
    .din7(64'd0),
    .din8(arg1_r_8_reload),
    .din9(ap_sig_allocacmp_i_2),
    .dout(tmp_fu_434_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U39(
    .din0(64'd0),
    .din1(64'd0),
    .din2(arg1_r_1_reload),
    .din3(64'd0),
    .din4(arg1_r_3_reload),
    .din5(64'd0),
    .din6(arg1_r_5_reload),
    .din7(64'd0),
    .din8(arg1_r_7_reload),
    .din9(ap_sig_allocacmp_i_2),
    .dout(tmp_8_fu_578_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U40(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(63'd0),
    .din5(63'd0),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_6_reg_1646),
    .dout(tmp_2_fu_759_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U41(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(63'd0),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_7_reg_1656),
    .dout(tmp_3_fu_792_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U42(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_reg_1666),
    .dout(tmp_4_fu_824_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U43(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(arg2_r_3_cast),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_1_reg_1676),
    .dout(tmp_5_fu_855_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U44(
    .din0(63'd0),
    .din1(63'd0),
    .din2(arg2_r_2_cast),
    .din3(arg2_r_3_cast),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_2_reg_1686),
    .dout(tmp_6_fu_885_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U45(
    .din0(63'd0),
    .din1(63'd0),
    .din2(arg2_r_1_cast),
    .din3(arg2_r_2_cast),
    .din4(arg2_r_3_cast),
    .din5(arg2_r_4_cast),
    .din6(arg2_r_5_cast),
    .din7(arg2_r_6_cast),
    .din8(arg2_r_7_cast),
    .din9(sub_ln34_2_reg_1686),
    .dout(tmp_7_fu_914_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U46(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(63'd0),
    .din5(63'd0),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_8_reg_1708),
    .dout(tmp_s_fu_1023_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U47(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(63'd0),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_9_reg_1718),
    .dout(tmp_1_fu_1082_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U48(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_3_reg_1728),
    .dout(tmp_9_fu_1140_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U49(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(arg2_r_3_cast),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_4_reg_1738),
    .dout(tmp_10_fu_1197_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U50(
    .din0(63'd0),
    .din1(63'd0),
    .din2(arg2_r_2_cast),
    .din3(arg2_r_3_cast),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_5_reg_1748),
    .dout(tmp_11_fu_1240_p11)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            arr_10_fu_130 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            arr_10_fu_130 <= arr_17_fu_1339_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            arr_11_fu_134 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            arr_11_fu_134 <= arr_18_fu_1349_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            arr_12_fu_138 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            arr_12_fu_138 <= arr_19_fu_1359_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            arr_13_fu_142 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            arr_13_fu_142 <= arr_20_fu_1369_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            arr_14_fu_146 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            arr_14_fu_146 <= arr_21_fu_1379_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_15_fu_150 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_15_fu_150 <= arr_22_fu_1275_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            arr_8_fu_122 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            arr_8_fu_122 <= arr_fu_1319_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            arr_9_fu_126 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            arr_9_fu_126 <= arr_16_fu_1329_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln36_fu_428_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_154 <= add_ln36_fu_716_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_154 <= 4'd8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln49_10_reg_1803 <= and_ln49_10_fu_1191_p2;
        and_ln49_11_reg_1813 <= and_ln49_11_fu_1234_p2;
        and_ln49_1_reg_1758 <= and_ln49_1_fu_960_p2;
        and_ln49_2_reg_1763 <= and_ln49_2_fu_973_p2;
        and_ln49_3_reg_1768 <= and_ln49_3_fu_1004_p2;
        and_ln49_4_reg_1773 <= and_ln49_4_fu_1017_p2;
        and_ln49_5_reg_1778 <= and_ln49_5_fu_1063_p2;
        and_ln49_6_reg_1783 <= and_ln49_6_fu_1076_p2;
        and_ln49_7_reg_1788 <= and_ln49_7_fu_1121_p2;
        and_ln49_8_reg_1793 <= and_ln49_8_fu_1134_p2;
        and_ln49_9_reg_1798 <= and_ln49_9_fu_1178_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        conv34_cast_reg_1616[63 : 0] <= conv34_cast_fu_376_p1[63 : 0];
        icmp_ln36_reg_1622 <= icmp_ln36_fu_428_p2;
        mul_ln49_11_reg_1808 <= mul_ln49_11_fu_360_p2;
        mul_ln49_reg_1753 <= mul_ln49_fu_316_p2;
        tmp_27_reg_1636_pp0_iter1_reg <= tmp_27_reg_1636;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_428_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln49_10_reg_1743 <= icmp_ln49_10_fu_700_p2;
        icmp_ln49_1_reg_1651 <= icmp_ln49_1_fu_498_p2;
        icmp_ln49_2_reg_1661 <= icmp_ln49_2_fu_514_p2;
        icmp_ln49_3_reg_1671 <= icmp_ln49_3_fu_540_p2;
        icmp_ln49_4_reg_1681 <= icmp_ln49_4_fu_556_p2;
        icmp_ln49_5_reg_1697 <= icmp_ln49_5_fu_602_p2;
        icmp_ln49_6_reg_1703 <= icmp_ln49_6_fu_616_p2;
        icmp_ln49_7_reg_1713 <= icmp_ln49_7_fu_632_p2;
        icmp_ln49_8_reg_1723 <= icmp_ln49_8_fu_658_p2;
        icmp_ln49_9_reg_1733 <= icmp_ln49_9_fu_674_p2;
        icmp_ln49_reg_1641 <= icmp_ln49_fu_482_p2;
        sub_ln34_1_reg_1676 <= sub_ln34_1_fu_550_p2;
        sub_ln34_2_reg_1686 <= sub_ln34_2_fu_566_p2;
        sub_ln34_3_reg_1728 <= sub_ln34_3_fu_668_p2;
        sub_ln34_4_reg_1738 <= sub_ln34_4_fu_684_p2;
        sub_ln34_5_reg_1748 <= sub_ln34_5_fu_710_p2;
        sub_ln34_6_reg_1646 <= sub_ln34_6_fu_492_p2;
        sub_ln34_7_reg_1656 <= sub_ln34_7_fu_508_p2;
        sub_ln34_8_reg_1708 <= sub_ln34_8_fu_626_p2;
        sub_ln34_9_reg_1718 <= sub_ln34_9_fu_642_p2;
        sub_ln34_reg_1666 <= sub_ln34_fu_524_p2;
        tmp_26_reg_1631 <= ap_sig_allocacmp_i_2[32'd3];
        tmp_27_reg_1636 <= ap_sig_allocacmp_i_2[32'd3];
        tmp_8_reg_1692 <= tmp_8_fu_578_p11;
        tmp_reg_1626 <= tmp_fu_434_p11;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1622 == 1'd1))) begin
        add143_out_ap_vld = 1'b1;
    end else begin
        add143_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1622 == 1'd1))) begin
        add_1129144_out_ap_vld = 1'b1;
    end else begin
        add_1129144_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1622 == 1'd1))) begin
        add_2145_out_ap_vld = 1'b1;
    end else begin
        add_2145_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1622 == 1'd1))) begin
        add_3146_out_ap_vld = 1'b1;
    end else begin
        add_3146_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1622 == 1'd1))) begin
        add_4147_out_ap_vld = 1'b1;
    end else begin
        add_4147_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1622 == 1'd1))) begin
        add_5148_out_ap_vld = 1'b1;
    end else begin
        add_5148_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1622 == 1'd1))) begin
        add_6149_out_ap_vld = 1'b1;
    end else begin
        add_6149_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1622 == 1'd1))) begin
        add_7150_out_ap_vld = 1'b1;
    end else begin
        add_7150_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_428_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 4'd8;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_154;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add143_out = arr_8_fu_122;

assign add_1129144_out = arr_9_fu_126;

assign add_2145_out = arr_10_fu_130;

assign add_3146_out = arr_11_fu_134;

assign add_4147_out = arr_12_fu_138;

assign add_5148_out = arr_13_fu_142;

assign add_6149_out = arr_14_fu_146;

assign add_7150_out = arr_15_fu_150;

assign add_ln36_fu_716_p2 = ($signed(ap_sig_allocacmp_i_2) + $signed(4'd14));

assign add_ln49_10_fu_1375_p2 = (and_ln49_11_reg_1813 + mul_ln49_11_reg_1808);

assign add_ln49_12_fu_1269_p2 = (mul_ln49_14_fu_372_p2 + mul_ln49_13_fu_368_p2);

assign add_ln49_2_fu_1335_p2 = (and_ln49_4_reg_1773 + and_ln49_3_reg_1768);

assign add_ln49_4_fu_1345_p2 = (and_ln49_6_reg_1783 + and_ln49_5_reg_1778);

assign add_ln49_6_fu_1355_p2 = (and_ln49_8_reg_1793 + and_ln49_7_reg_1788);

assign add_ln49_8_fu_1365_p2 = (and_ln49_10_reg_1803 + and_ln49_9_reg_1798);

assign add_ln49_fu_1325_p2 = (and_ln49_2_reg_1763 + and_ln49_1_reg_1758);

assign and_ln49_10_fu_1191_p2 = (select_ln49_12_fu_1184_p3 & mul_ln49_10_fu_356_p2);

assign and_ln49_11_fu_1234_p2 = (select_ln49_13_fu_1227_p3 & mul_ln49_12_fu_364_p2);

assign and_ln49_1_fu_960_p2 = (select_ln49_3_fu_953_p3 & mul_ln49_1_fu_320_p2);

assign and_ln49_2_fu_973_p2 = (select_ln49_4_fu_966_p3 & mul_ln49_2_fu_324_p2);

assign and_ln49_3_fu_1004_p2 = (select_ln49_5_fu_997_p3 & mul_ln49_3_fu_328_p2);

assign and_ln49_4_fu_1017_p2 = (select_ln49_6_fu_1010_p3 & mul_ln49_4_fu_332_p2);

assign and_ln49_5_fu_1063_p2 = (select_ln49_7_fu_1056_p3 & mul_ln49_5_fu_336_p2);

assign and_ln49_6_fu_1076_p2 = (select_ln49_8_fu_1069_p3 & mul_ln49_6_fu_340_p2);

assign and_ln49_7_fu_1121_p2 = (select_ln49_9_fu_1114_p3 & mul_ln49_7_fu_344_p2);

assign and_ln49_8_fu_1134_p2 = (select_ln49_10_fu_1127_p3 & mul_ln49_8_fu_348_p2);

assign and_ln49_9_fu_1178_p2 = (select_ln49_11_fu_1171_p3 & mul_ln49_9_fu_352_p2);

assign and_ln49_fu_1314_p2 = (select_ln49_2_fu_1307_p3 & mul_ln49_reg_1753);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign arr_16_fu_1329_p2 = (arr_9_fu_126 + add_ln49_fu_1325_p2);

assign arr_17_fu_1339_p2 = (arr_10_fu_130 + add_ln49_2_fu_1335_p2);

assign arr_18_fu_1349_p2 = (arr_11_fu_134 + add_ln49_4_fu_1345_p2);

assign arr_19_fu_1359_p2 = (arr_12_fu_138 + add_ln49_6_fu_1355_p2);

assign arr_20_fu_1369_p2 = (arr_13_fu_142 + add_ln49_8_fu_1365_p2);

assign arr_21_fu_1379_p2 = (arr_14_fu_146 + add_ln49_10_fu_1375_p2);

assign arr_22_fu_1275_p2 = (arr_15_fu_150 + add_ln49_12_fu_1269_p2);

assign arr_fu_1319_p2 = (and_ln49_fu_1314_p2 + arr_8_fu_122);

assign conv34_cast_fu_376_p1 = conv34;

assign empty_fu_572_p2 = ($signed(ap_sig_allocacmp_i_2) + $signed(4'd15));

assign icmp_ln36_fu_428_p2 = ((ap_sig_allocacmp_i_2 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_10_fu_700_p2 = (($signed(tmp_30_fu_690_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln49_1_fu_498_p2 = ((ap_sig_allocacmp_i_2 > 4'd5) ? 1'b1 : 1'b0);

assign icmp_ln49_2_fu_514_p2 = ((ap_sig_allocacmp_i_2 > 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln49_3_fu_540_p2 = ((tmp_28_fu_530_p4 != 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_4_fu_556_p2 = ((ap_sig_allocacmp_i_2 > 4'd2) ? 1'b1 : 1'b0);

assign icmp_ln49_5_fu_602_p2 = ((empty_fu_572_p2 == 4'd7) ? 1'b1 : 1'b0);

assign icmp_ln49_6_fu_616_p2 = (($signed(empty_fu_572_p2) > $signed(4'd5)) ? 1'b1 : 1'b0);

assign icmp_ln49_7_fu_632_p2 = (($signed(empty_fu_572_p2) > $signed(4'd4)) ? 1'b1 : 1'b0);

assign icmp_ln49_8_fu_658_p2 = ((tmp_29_fu_648_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln49_9_fu_674_p2 = (($signed(empty_fu_572_p2) > $signed(4'd2)) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_482_p2 = ((ap_sig_allocacmp_i_2 > 4'd6) ? 1'b1 : 1'b0);

assign mul_ln49_10_fu_356_p0 = mul_ln49_10_fu_356_p00;

assign mul_ln49_10_fu_356_p00 = shl_ln49_s_fu_1158_p3;

assign mul_ln49_10_fu_356_p1 = zext_ln49_8_fu_943_p1;

assign mul_ln49_11_fu_360_p0 = mul_ln49_11_fu_360_p00;

assign mul_ln49_11_fu_360_p00 = shl_ln49_5_fu_901_p3;

assign mul_ln49_11_fu_360_p1 = zext_ln49_fu_730_p1;

assign mul_ln49_12_fu_364_p0 = mul_ln49_12_fu_364_p00;

assign mul_ln49_12_fu_364_p00 = shl_ln49_10_fu_1214_p3;

assign mul_ln49_12_fu_364_p1 = zext_ln49_8_fu_943_p1;

assign mul_ln49_13_fu_368_p0 = mul_ln49_13_fu_368_p00;

assign mul_ln49_13_fu_368_p00 = shl_ln49_6_fu_930_p3;

assign mul_ln49_13_fu_368_p1 = zext_ln49_fu_730_p1;

assign mul_ln49_14_fu_372_p0 = mul_ln49_14_fu_372_p00;

assign mul_ln49_14_fu_372_p00 = shl_ln49_11_fu_1256_p3;

assign mul_ln49_14_fu_372_p1 = zext_ln49_8_fu_943_p1;

assign mul_ln49_1_fu_320_p0 = mul_ln49_1_fu_320_p00;

assign mul_ln49_1_fu_320_p00 = shl_ln_fu_746_p3;

assign mul_ln49_1_fu_320_p1 = zext_ln49_fu_730_p1;

assign mul_ln49_2_fu_324_p0 = zext_ln49_8_fu_943_p1;

assign mul_ln49_2_fu_324_p1 = conv34_cast_reg_1616;

assign mul_ln49_3_fu_328_p0 = mul_ln49_3_fu_328_p00;

assign mul_ln49_3_fu_328_p00 = shl_ln49_1_fu_779_p3;

assign mul_ln49_3_fu_328_p1 = zext_ln49_fu_730_p1;

assign mul_ln49_4_fu_332_p0 = mul_ln49_4_fu_332_p00;

assign mul_ln49_4_fu_332_p00 = shl_ln49_7_fu_984_p3;

assign mul_ln49_4_fu_332_p1 = zext_ln49_8_fu_943_p1;

assign mul_ln49_5_fu_336_p0 = mul_ln49_5_fu_336_p00;

assign mul_ln49_5_fu_336_p00 = shl_ln49_2_fu_811_p3;

assign mul_ln49_5_fu_336_p1 = zext_ln49_fu_730_p1;

assign mul_ln49_6_fu_340_p0 = mul_ln49_6_fu_340_p00;

assign mul_ln49_6_fu_340_p00 = shl_ln49_8_fu_1043_p3;

assign mul_ln49_6_fu_340_p1 = zext_ln49_8_fu_943_p1;

assign mul_ln49_7_fu_344_p0 = mul_ln49_7_fu_344_p00;

assign mul_ln49_7_fu_344_p00 = shl_ln49_3_fu_842_p3;

assign mul_ln49_7_fu_344_p1 = zext_ln49_fu_730_p1;

assign mul_ln49_8_fu_348_p0 = mul_ln49_8_fu_348_p00;

assign mul_ln49_8_fu_348_p00 = shl_ln49_9_fu_1101_p3;

assign mul_ln49_8_fu_348_p1 = zext_ln49_8_fu_943_p1;

assign mul_ln49_9_fu_352_p0 = mul_ln49_9_fu_352_p00;

assign mul_ln49_9_fu_352_p00 = shl_ln49_4_fu_872_p3;

assign mul_ln49_9_fu_352_p1 = zext_ln49_fu_730_p1;

assign mul_ln49_fu_316_p0 = zext_ln49_fu_730_p1;

assign mul_ln49_fu_316_p1 = conv34_cast_reg_1616;

assign select_ln34_1_fu_608_p3 = ((icmp_ln49_5_fu_602_p2[0:0] == 1'b1) ? 4'd7 : 4'd8);

assign select_ln34_fu_474_p3 = ((tmp_27_fu_466_p3[0:0] == 1'b1) ? 4'd7 : 4'd8);

assign select_ln49_10_fu_1127_p3 = ((icmp_ln49_8_reg_1723[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_11_fu_1171_p3 = ((icmp_ln49_4_reg_1681[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_12_fu_1184_p3 = ((icmp_ln49_9_reg_1733[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_13_fu_1227_p3 = ((icmp_ln49_10_reg_1743[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_1_fu_979_p3 = ((icmp_ln49_5_reg_1697[0:0] == 1'b1) ? arg2_r_7_cast : arg2_r_8_cast);

assign select_ln49_2_fu_1307_p3 = ((tmp_27_reg_1636_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_3_fu_953_p3 = ((icmp_ln49_reg_1641[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_4_fu_966_p3 = ((icmp_ln49_5_reg_1697[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_5_fu_997_p3 = ((icmp_ln49_1_reg_1651[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_6_fu_1010_p3 = ((icmp_ln49_6_reg_1703[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_7_fu_1056_p3 = ((icmp_ln49_2_reg_1661[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_8_fu_1069_p3 = ((icmp_ln49_7_reg_1713[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_9_fu_1114_p3 = ((icmp_ln49_3_reg_1671[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln49_fu_741_p3 = ((tmp_26_reg_1631[0:0] == 1'b1) ? arg2_r_7_cast : arg2_r_8_cast);

assign shl_ln49_10_fu_1214_p3 = {{tmp_10_fu_1197_p11}, {1'd0}};

assign shl_ln49_11_fu_1256_p3 = {{tmp_11_fu_1240_p11}, {1'd0}};

assign shl_ln49_1_fu_779_p3 = {{tmp_2_fu_759_p11}, {1'd0}};

assign shl_ln49_2_fu_811_p3 = {{tmp_3_fu_792_p11}, {1'd0}};

assign shl_ln49_3_fu_842_p3 = {{tmp_4_fu_824_p11}, {1'd0}};

assign shl_ln49_4_fu_872_p3 = {{tmp_5_fu_855_p11}, {1'd0}};

assign shl_ln49_5_fu_901_p3 = {{tmp_6_fu_885_p11}, {1'd0}};

assign shl_ln49_6_fu_930_p3 = {{tmp_7_fu_914_p11}, {1'd0}};

assign shl_ln49_7_fu_984_p3 = {{select_ln49_1_fu_979_p3}, {1'd0}};

assign shl_ln49_8_fu_1043_p3 = {{tmp_s_fu_1023_p11}, {1'd0}};

assign shl_ln49_9_fu_1101_p3 = {{tmp_1_fu_1082_p11}, {1'd0}};

assign shl_ln49_s_fu_1158_p3 = {{tmp_9_fu_1140_p11}, {1'd0}};

assign shl_ln_fu_746_p3 = {{select_ln49_fu_741_p3}, {1'd0}};

assign sub_ln34_1_fu_550_p2 = (sub_ln34_fu_524_p2 - zext_ln50_3_fu_546_p1);

assign sub_ln34_2_fu_566_p2 = (sub_ln34_1_fu_550_p2 - zext_ln50_4_fu_562_p1);

assign sub_ln34_3_fu_668_p2 = (sub_ln34_9_fu_642_p2 - zext_ln50_7_fu_664_p1);

assign sub_ln34_4_fu_684_p2 = (sub_ln34_3_fu_668_p2 - zext_ln50_8_fu_680_p1);

assign sub_ln34_5_fu_710_p2 = (sub_ln34_4_fu_684_p2 - zext_ln50_9_fu_706_p1);

assign sub_ln34_6_fu_492_p2 = (select_ln34_fu_474_p3 - zext_ln50_fu_488_p1);

assign sub_ln34_7_fu_508_p2 = (sub_ln34_6_fu_492_p2 - zext_ln50_1_fu_504_p1);

assign sub_ln34_8_fu_626_p2 = (select_ln34_1_fu_608_p3 - zext_ln50_5_fu_622_p1);

assign sub_ln34_9_fu_642_p2 = (sub_ln34_8_fu_626_p2 - zext_ln50_6_fu_638_p1);

assign sub_ln34_fu_524_p2 = (sub_ln34_7_fu_508_p2 - zext_ln50_2_fu_520_p1);

assign tmp_27_fu_466_p3 = ap_sig_allocacmp_i_2[32'd3];

assign tmp_28_fu_530_p4 = {{ap_sig_allocacmp_i_2[3:2]}};

assign tmp_29_fu_648_p4 = {{empty_fu_572_p2[3:2]}};

assign tmp_30_fu_690_p4 = {{empty_fu_572_p2[3:1]}};

assign zext_ln49_8_fu_943_p1 = tmp_8_reg_1692;

assign zext_ln49_fu_730_p1 = tmp_reg_1626;

assign zext_ln50_1_fu_504_p1 = icmp_ln49_1_fu_498_p2;

assign zext_ln50_2_fu_520_p1 = icmp_ln49_2_fu_514_p2;

assign zext_ln50_3_fu_546_p1 = icmp_ln49_3_fu_540_p2;

assign zext_ln50_4_fu_562_p1 = icmp_ln49_4_fu_556_p2;

assign zext_ln50_5_fu_622_p1 = icmp_ln49_6_fu_616_p2;

assign zext_ln50_6_fu_638_p1 = icmp_ln49_7_fu_632_p2;

assign zext_ln50_7_fu_664_p1 = icmp_ln49_8_fu_658_p2;

assign zext_ln50_8_fu_680_p1 = icmp_ln49_9_fu_674_p2;

assign zext_ln50_9_fu_706_p1 = icmp_ln49_10_fu_700_p2;

assign zext_ln50_fu_488_p1 = icmp_ln49_fu_482_p2;

always @ (posedge ap_clk) begin
    conv34_cast_reg_1616[127:64] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //test_test_Pipeline_VITIS_LOOP_36_1
