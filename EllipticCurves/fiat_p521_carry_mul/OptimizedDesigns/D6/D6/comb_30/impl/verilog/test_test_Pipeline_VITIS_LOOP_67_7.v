// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_67_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add_761_reload,
        add_660_reload,
        add_559_reload,
        add_458_reload,
        add_357_reload,
        add_256_reload,
        add_14155_reload,
        add54_reload,
        arg1_r_reload,
        arg1_r_1_reload,
        arg1_r_2_reload,
        arg1_r_3_reload,
        arg1_r_4_reload,
        arg1_r_5_reload,
        arg1_r_6_reload,
        arg1_r_7_reload,
        arg2_r_reload,
        arg2_r_1_reload,
        arg2_r_2_reload,
        arg2_r_3_reload,
        arg2_r_4_reload,
        arg2_r_5_reload,
        arg2_r_6_reload,
        arg2_r_7_reload,
        arg2_r_8_reload,
        add124_1_353_out,
        add124_1_353_out_ap_vld,
        add124_1_252_out,
        add124_1_252_out_ap_vld,
        add124_1_151_out,
        add124_1_151_out_ap_vld,
        add124_150_out,
        add124_150_out_ap_vld,
        add124_349_out,
        add124_349_out_ap_vld,
        add124_248_out,
        add124_248_out_ap_vld,
        add124_12747_out,
        add124_12747_out_ap_vld,
        add12446_out,
        add12446_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] add_761_reload;
input  [127:0] add_660_reload;
input  [127:0] add_559_reload;
input  [127:0] add_458_reload;
input  [127:0] add_357_reload;
input  [127:0] add_256_reload;
input  [127:0] add_14155_reload;
input  [127:0] add54_reload;
input  [63:0] arg1_r_reload;
input  [63:0] arg1_r_1_reload;
input  [63:0] arg1_r_2_reload;
input  [63:0] arg1_r_3_reload;
input  [63:0] arg1_r_4_reload;
input  [63:0] arg1_r_5_reload;
input  [63:0] arg1_r_6_reload;
input  [63:0] arg1_r_7_reload;
input  [63:0] arg2_r_reload;
input  [63:0] arg2_r_1_reload;
input  [63:0] arg2_r_2_reload;
input  [63:0] arg2_r_3_reload;
input  [63:0] arg2_r_4_reload;
input  [63:0] arg2_r_5_reload;
input  [63:0] arg2_r_6_reload;
input  [63:0] arg2_r_7_reload;
input  [63:0] arg2_r_8_reload;
output  [127:0] add124_1_353_out;
output   add124_1_353_out_ap_vld;
output  [127:0] add124_1_252_out;
output   add124_1_252_out_ap_vld;
output  [127:0] add124_1_151_out;
output   add124_1_151_out_ap_vld;
output  [127:0] add124_150_out;
output   add124_150_out_ap_vld;
output  [127:0] add124_349_out;
output   add124_349_out_ap_vld;
output  [127:0] add124_248_out;
output   add124_248_out_ap_vld;
output  [127:0] add124_12747_out;
output   add124_12747_out_ap_vld;
output  [127:0] add12446_out;
output   add12446_out_ap_vld;

reg ap_idle;
reg add124_1_353_out_ap_vld;
reg add124_1_252_out_ap_vld;
reg add124_1_151_out_ap_vld;
reg add124_150_out_ap_vld;
reg add124_349_out_ap_vld;
reg add124_248_out_ap_vld;
reg add124_12747_out_ap_vld;
reg add12446_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_fu_450_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_reg_1195;
wire   [2:0] xor_ln70_fu_462_p2;
reg   [2:0] xor_ln70_reg_1199;
wire   [63:0] tmp_s_fu_472_p10;
reg   [63:0] tmp_s_reg_1205;
wire   [0:0] icmp_ln80_fu_494_p2;
reg   [0:0] icmp_ln80_reg_1210;
reg   [0:0] icmp_ln80_reg_1210_pp0_iter1_reg;
wire   [3:0] add_ln77_fu_508_p2;
reg   [3:0] add_ln77_reg_1215;
wire   [0:0] icmp_ln80_1_fu_514_p2;
reg   [0:0] icmp_ln80_1_reg_1220;
reg   [0:0] icmp_ln80_1_reg_1220_pp0_iter1_reg;
wire   [3:0] sub_ln77_3_fu_524_p2;
reg   [3:0] sub_ln77_3_reg_1225;
wire   [0:0] icmp_ln80_2_fu_530_p2;
reg   [0:0] icmp_ln80_2_reg_1230;
reg   [0:0] icmp_ln80_2_reg_1230_pp0_iter1_reg;
wire   [3:0] sub_ln77_4_fu_540_p2;
reg   [3:0] sub_ln77_4_reg_1235;
wire   [0:0] icmp_ln80_3_fu_556_p2;
reg   [0:0] icmp_ln80_3_reg_1240;
reg   [0:0] icmp_ln80_3_reg_1240_pp0_iter1_reg;
wire   [3:0] sub_ln77_fu_566_p2;
reg   [3:0] sub_ln77_reg_1245;
wire   [0:0] icmp_ln80_4_fu_572_p2;
reg   [0:0] icmp_ln80_4_reg_1251;
reg   [0:0] icmp_ln80_4_reg_1251_pp0_iter1_reg;
wire   [0:0] icmp_ln80_5_fu_588_p2;
reg   [0:0] icmp_ln80_5_reg_1257;
reg   [0:0] icmp_ln80_5_reg_1257_pp0_iter1_reg;
wire   [0:0] icmp_ln80_6_fu_594_p2;
reg   [0:0] icmp_ln80_6_reg_1263;
reg   [0:0] icmp_ln80_6_reg_1263_pp0_iter1_reg;
wire   [127:0] mul_ln80_fu_370_p2;
reg   [127:0] mul_ln80_reg_1268;
wire   [127:0] mul_ln80_1_fu_374_p2;
reg   [127:0] mul_ln80_1_reg_1273;
wire   [127:0] mul_ln80_2_fu_378_p2;
reg   [127:0] mul_ln80_2_reg_1278;
wire   [127:0] mul_ln80_3_fu_382_p2;
reg   [127:0] mul_ln80_3_reg_1283;
wire   [127:0] mul_ln80_4_fu_386_p2;
reg   [127:0] mul_ln80_4_reg_1288;
wire   [127:0] mul_ln80_5_fu_390_p2;
reg   [127:0] mul_ln80_5_reg_1293;
wire   [127:0] mul_ln80_6_fu_394_p2;
reg   [127:0] mul_ln80_6_reg_1298;
wire   [127:0] mul_ln80_7_fu_398_p2;
reg   [127:0] mul_ln80_7_reg_1303;
reg   [127:0] add12446_fu_128;
wire   [127:0] add_ln80_fu_816_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [127:0] add124_12747_fu_132;
wire   [127:0] add_ln80_1_fu_833_p2;
reg   [127:0] add124_248_fu_136;
wire   [127:0] add_ln80_2_fu_851_p2;
reg   [127:0] add124_349_fu_140;
wire   [127:0] add_ln80_3_fu_869_p2;
reg   [127:0] add124_150_fu_144;
wire   [127:0] add_ln80_4_fu_887_p2;
reg   [127:0] add124_1_151_fu_148;
wire   [127:0] add_ln80_5_fu_905_p2;
reg   [127:0] add124_1_252_fu_152;
wire   [127:0] add_ln80_6_fu_923_p2;
reg   [127:0] add124_1_353_fu_156;
wire   [127:0] add_ln80_7_fu_941_p2;
reg   [3:0] i_fu_160;
wire   [3:0] add_ln67_fu_600_p2;
reg   [3:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] mul_ln80_fu_370_p0;
wire   [63:0] mul_ln80_fu_370_p1;
wire   [127:0] zext_ln80_fu_611_p1;
wire   [63:0] mul_ln80_1_fu_374_p0;
wire   [63:0] mul_ln80_1_fu_374_p1;
wire   [63:0] mul_ln80_2_fu_378_p0;
wire   [63:0] mul_ln80_2_fu_378_p1;
wire   [63:0] mul_ln80_3_fu_382_p0;
wire   [63:0] mul_ln80_3_fu_382_p1;
wire   [63:0] mul_ln80_4_fu_386_p0;
wire   [63:0] mul_ln80_4_fu_386_p1;
wire   [63:0] mul_ln80_5_fu_390_p0;
wire   [63:0] mul_ln80_5_fu_390_p1;
wire   [63:0] mul_ln80_6_fu_394_p0;
wire   [63:0] mul_ln80_6_fu_394_p1;
wire   [63:0] mul_ln80_7_fu_398_p0;
wire   [63:0] mul_ln80_7_fu_398_p1;
wire   [2:0] trunc_ln34_fu_458_p1;
wire   [3:0] select_ln77_fu_500_p3;
wire   [3:0] zext_ln80_9_fu_468_p1;
wire   [3:0] zext_ln81_fu_520_p1;
wire   [3:0] zext_ln81_1_fu_536_p1;
wire   [1:0] tmp_6_fu_546_p4;
wire   [3:0] zext_ln81_2_fu_562_p1;
wire   [2:0] tmp_9_fu_578_p4;
wire   [63:0] tmp_1_fu_622_p10;
wire   [63:0] tmp_2_fu_640_p10;
wire   [63:0] tmp_3_fu_659_p11;
wire   [63:0] tmp_4_fu_678_p11;
wire   [63:0] tmp_5_fu_697_p11;
wire   [63:0] tmp_7_fu_716_p11;
wire   [3:0] zext_ln81_3_fu_735_p1;
wire   [3:0] sub_ln77_1_fu_738_p2;
wire   [63:0] tmp_8_fu_743_p11;
wire   [3:0] zext_ln81_4_fu_763_p1;
wire   [3:0] tmp_10_fu_772_p10;
wire   [63:0] tmp_10_fu_772_p11;
wire   [127:0] select_ln80_fu_821_p3;
wire   [127:0] and_ln80_fu_828_p2;
wire   [127:0] select_ln80_1_fu_839_p3;
wire   [127:0] and_ln80_1_fu_846_p2;
wire   [127:0] select_ln80_2_fu_857_p3;
wire   [127:0] and_ln80_2_fu_864_p2;
wire   [127:0] select_ln80_3_fu_875_p3;
wire   [127:0] and_ln80_3_fu_882_p2;
wire   [127:0] select_ln80_4_fu_893_p3;
wire   [127:0] and_ln80_4_fu_900_p2;
wire   [127:0] select_ln80_5_fu_911_p3;
wire   [127:0] and_ln80_5_fu_918_p2;
wire   [127:0] select_ln80_6_fu_929_p3;
wire   [127:0] and_ln80_6_fu_936_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [127:0] mul_ln80_1_fu_374_p00;
wire   [127:0] mul_ln80_2_fu_378_p00;
wire   [127:0] mul_ln80_3_fu_382_p00;
wire   [127:0] mul_ln80_4_fu_386_p00;
wire   [127:0] mul_ln80_5_fu_390_p00;
wire   [127:0] mul_ln80_6_fu_394_p00;
wire   [127:0] mul_ln80_7_fu_398_p00;
wire   [127:0] mul_ln80_fu_370_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U79(
    .din0(mul_ln80_fu_370_p0),
    .din1(mul_ln80_fu_370_p1),
    .dout(mul_ln80_fu_370_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U80(
    .din0(mul_ln80_1_fu_374_p0),
    .din1(mul_ln80_1_fu_374_p1),
    .dout(mul_ln80_1_fu_374_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U81(
    .din0(mul_ln80_2_fu_378_p0),
    .din1(mul_ln80_2_fu_378_p1),
    .dout(mul_ln80_2_fu_378_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U82(
    .din0(mul_ln80_3_fu_382_p0),
    .din1(mul_ln80_3_fu_382_p1),
    .dout(mul_ln80_3_fu_382_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U83(
    .din0(mul_ln80_4_fu_386_p0),
    .din1(mul_ln80_4_fu_386_p1),
    .dout(mul_ln80_4_fu_386_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U84(
    .din0(mul_ln80_5_fu_390_p0),
    .din1(mul_ln80_5_fu_390_p1),
    .dout(mul_ln80_5_fu_390_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U85(
    .din0(mul_ln80_6_fu_394_p0),
    .din1(mul_ln80_6_fu_394_p1),
    .dout(mul_ln80_6_fu_394_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U86(
    .din0(mul_ln80_7_fu_398_p0),
    .din1(mul_ln80_7_fu_398_p1),
    .dout(mul_ln80_7_fu_398_p2)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U87(
    .din0(arg1_r_reload),
    .din1(arg1_r_1_reload),
    .din2(arg1_r_2_reload),
    .din3(arg1_r_3_reload),
    .din4(arg1_r_4_reload),
    .din5(arg1_r_5_reload),
    .din6(arg1_r_6_reload),
    .din7(arg1_r_7_reload),
    .din8(trunc_ln34_fu_458_p1),
    .dout(tmp_s_fu_472_p10)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U88(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(xor_ln70_reg_1199),
    .dout(tmp_1_fu_622_p10)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U89(
    .din0(64'd0),
    .din1(arg2_r_reload),
    .din2(arg2_r_1_reload),
    .din3(arg2_r_2_reload),
    .din4(arg2_r_3_reload),
    .din5(arg2_r_4_reload),
    .din6(arg2_r_5_reload),
    .din7(arg2_r_6_reload),
    .din8(xor_ln70_reg_1199),
    .dout(tmp_2_fu_640_p10)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U90(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(add_ln77_reg_1215),
    .dout(tmp_3_fu_659_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U91(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln77_3_reg_1225),
    .dout(tmp_4_fu_678_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U92(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln77_4_reg_1235),
    .dout(tmp_5_fu_697_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U93(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln77_reg_1245),
    .dout(tmp_7_fu_716_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U94(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln77_1_fu_738_p2),
    .dout(tmp_8_fu_743_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U95(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(tmp_10_fu_772_p10),
    .dout(tmp_10_fu_772_p11)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add12446_fu_128 <= add54_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add12446_fu_128 <= add_ln80_fu_816_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add124_12747_fu_132 <= add_14155_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add124_12747_fu_132 <= add_ln80_1_fu_833_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add124_150_fu_144 <= add_458_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add124_150_fu_144 <= add_ln80_4_fu_887_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add124_1_151_fu_148 <= add_559_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add124_1_151_fu_148 <= add_ln80_5_fu_905_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add124_1_252_fu_152 <= add_660_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add124_1_252_fu_152 <= add_ln80_6_fu_923_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add124_1_353_fu_156 <= add_761_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add124_1_353_fu_156 <= add_ln80_7_fu_941_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add124_248_fu_136 <= add_256_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add124_248_fu_136 <= add_ln80_2_fu_851_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            add124_349_fu_140 <= add_357_reload;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add124_349_fu_140 <= add_ln80_3_fu_869_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((tmp_fu_450_p3 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_160 <= add_ln67_fu_600_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_160 <= 4'd7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_450_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln77_reg_1215 <= add_ln77_fu_508_p2;
        icmp_ln80_1_reg_1220 <= icmp_ln80_1_fu_514_p2;
        icmp_ln80_2_reg_1230 <= icmp_ln80_2_fu_530_p2;
        icmp_ln80_3_reg_1240 <= icmp_ln80_3_fu_556_p2;
        icmp_ln80_4_reg_1251 <= icmp_ln80_4_fu_572_p2;
        icmp_ln80_5_reg_1257 <= icmp_ln80_5_fu_588_p2;
        icmp_ln80_6_reg_1263 <= icmp_ln80_6_fu_594_p2;
        icmp_ln80_reg_1210 <= icmp_ln80_fu_494_p2;
        sub_ln77_3_reg_1225 <= sub_ln77_3_fu_524_p2;
        sub_ln77_4_reg_1235 <= sub_ln77_4_fu_540_p2;
        sub_ln77_reg_1245 <= sub_ln77_fu_566_p2;
        tmp_s_reg_1205 <= tmp_s_fu_472_p10;
        xor_ln70_reg_1199 <= xor_ln70_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln80_1_reg_1220_pp0_iter1_reg <= icmp_ln80_1_reg_1220;
        icmp_ln80_2_reg_1230_pp0_iter1_reg <= icmp_ln80_2_reg_1230;
        icmp_ln80_3_reg_1240_pp0_iter1_reg <= icmp_ln80_3_reg_1240;
        icmp_ln80_4_reg_1251_pp0_iter1_reg <= icmp_ln80_4_reg_1251;
        icmp_ln80_5_reg_1257_pp0_iter1_reg <= icmp_ln80_5_reg_1257;
        icmp_ln80_6_reg_1263_pp0_iter1_reg <= icmp_ln80_6_reg_1263;
        icmp_ln80_reg_1210_pp0_iter1_reg <= icmp_ln80_reg_1210;
        mul_ln80_1_reg_1273 <= mul_ln80_1_fu_374_p2;
        mul_ln80_2_reg_1278 <= mul_ln80_2_fu_378_p2;
        mul_ln80_3_reg_1283 <= mul_ln80_3_fu_382_p2;
        mul_ln80_4_reg_1288 <= mul_ln80_4_fu_386_p2;
        mul_ln80_5_reg_1293 <= mul_ln80_5_fu_390_p2;
        mul_ln80_6_reg_1298 <= mul_ln80_6_fu_394_p2;
        mul_ln80_7_reg_1303 <= mul_ln80_7_fu_398_p2;
        mul_ln80_reg_1268 <= mul_ln80_fu_370_p2;
        tmp_reg_1195 <= ap_sig_allocacmp_i_1[32'd3];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_1195 == 1'd1))) begin
        add12446_out_ap_vld = 1'b1;
    end else begin
        add12446_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_1195 == 1'd1))) begin
        add124_12747_out_ap_vld = 1'b1;
    end else begin
        add124_12747_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_1195 == 1'd1))) begin
        add124_150_out_ap_vld = 1'b1;
    end else begin
        add124_150_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_1195 == 1'd1))) begin
        add124_1_151_out_ap_vld = 1'b1;
    end else begin
        add124_1_151_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_1195 == 1'd1))) begin
        add124_1_252_out_ap_vld = 1'b1;
    end else begin
        add124_1_252_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_1195 == 1'd1))) begin
        add124_1_353_out_ap_vld = 1'b1;
    end else begin
        add124_1_353_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_1195 == 1'd1))) begin
        add124_248_out_ap_vld = 1'b1;
    end else begin
        add124_248_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_1195 == 1'd1))) begin
        add124_349_out_ap_vld = 1'b1;
    end else begin
        add124_349_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_450_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 4'd7;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_160;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add12446_out = add12446_fu_128;

assign add124_12747_out = add124_12747_fu_132;

assign add124_150_out = add124_150_fu_144;

assign add124_1_151_out = add124_1_151_fu_148;

assign add124_1_252_out = add124_1_252_fu_152;

assign add124_1_353_out = add124_1_353_fu_156;

assign add124_248_out = add124_248_fu_136;

assign add124_349_out = add124_349_fu_140;

assign add_ln67_fu_600_p2 = ($signed(ap_sig_allocacmp_i_1) + $signed(4'd15));

assign add_ln77_fu_508_p2 = (select_ln77_fu_500_p3 + zext_ln80_9_fu_468_p1);

assign add_ln80_1_fu_833_p2 = (and_ln80_fu_828_p2 + add124_12747_fu_132);

assign add_ln80_2_fu_851_p2 = (and_ln80_1_fu_846_p2 + add124_248_fu_136);

assign add_ln80_3_fu_869_p2 = (and_ln80_2_fu_864_p2 + add124_349_fu_140);

assign add_ln80_4_fu_887_p2 = (and_ln80_3_fu_882_p2 + add124_150_fu_144);

assign add_ln80_5_fu_905_p2 = (and_ln80_4_fu_900_p2 + add124_1_151_fu_148);

assign add_ln80_6_fu_923_p2 = (and_ln80_5_fu_918_p2 + add124_1_252_fu_152);

assign add_ln80_7_fu_941_p2 = (and_ln80_6_fu_936_p2 + add124_1_353_fu_156);

assign add_ln80_fu_816_p2 = (mul_ln80_reg_1268 + add12446_fu_128);

assign and_ln80_1_fu_846_p2 = (select_ln80_1_fu_839_p3 & mul_ln80_2_reg_1278);

assign and_ln80_2_fu_864_p2 = (select_ln80_2_fu_857_p3 & mul_ln80_3_reg_1283);

assign and_ln80_3_fu_882_p2 = (select_ln80_3_fu_875_p3 & mul_ln80_4_reg_1288);

assign and_ln80_4_fu_900_p2 = (select_ln80_4_fu_893_p3 & mul_ln80_5_reg_1293);

assign and_ln80_5_fu_918_p2 = (select_ln80_5_fu_911_p3 & mul_ln80_6_reg_1298);

assign and_ln80_6_fu_936_p2 = (select_ln80_6_fu_929_p3 & mul_ln80_7_reg_1303);

assign and_ln80_fu_828_p2 = (select_ln80_fu_821_p3 & mul_ln80_1_reg_1273);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln80_1_fu_514_p2 = (($signed(ap_sig_allocacmp_i_1) < $signed(4'd6)) ? 1'b1 : 1'b0);

assign icmp_ln80_2_fu_530_p2 = (($signed(ap_sig_allocacmp_i_1) < $signed(4'd5)) ? 1'b1 : 1'b0);

assign icmp_ln80_3_fu_556_p2 = ((tmp_6_fu_546_p4 != 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln80_4_fu_572_p2 = (($signed(ap_sig_allocacmp_i_1) < $signed(4'd3)) ? 1'b1 : 1'b0);

assign icmp_ln80_5_fu_588_p2 = (($signed(tmp_9_fu_578_p4) < $signed(3'd1)) ? 1'b1 : 1'b0);

assign icmp_ln80_6_fu_594_p2 = (($signed(ap_sig_allocacmp_i_1) < $signed(4'd1)) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_494_p2 = ((ap_sig_allocacmp_i_1 != 4'd7) ? 1'b1 : 1'b0);

assign mul_ln80_1_fu_374_p0 = mul_ln80_1_fu_374_p00;

assign mul_ln80_1_fu_374_p00 = tmp_2_fu_640_p10;

assign mul_ln80_1_fu_374_p1 = zext_ln80_fu_611_p1;

assign mul_ln80_2_fu_378_p0 = mul_ln80_2_fu_378_p00;

assign mul_ln80_2_fu_378_p00 = tmp_3_fu_659_p11;

assign mul_ln80_2_fu_378_p1 = zext_ln80_fu_611_p1;

assign mul_ln80_3_fu_382_p0 = mul_ln80_3_fu_382_p00;

assign mul_ln80_3_fu_382_p00 = tmp_4_fu_678_p11;

assign mul_ln80_3_fu_382_p1 = zext_ln80_fu_611_p1;

assign mul_ln80_4_fu_386_p0 = mul_ln80_4_fu_386_p00;

assign mul_ln80_4_fu_386_p00 = tmp_5_fu_697_p11;

assign mul_ln80_4_fu_386_p1 = zext_ln80_fu_611_p1;

assign mul_ln80_5_fu_390_p0 = mul_ln80_5_fu_390_p00;

assign mul_ln80_5_fu_390_p00 = tmp_7_fu_716_p11;

assign mul_ln80_5_fu_390_p1 = zext_ln80_fu_611_p1;

assign mul_ln80_6_fu_394_p0 = mul_ln80_6_fu_394_p00;

assign mul_ln80_6_fu_394_p00 = tmp_8_fu_743_p11;

assign mul_ln80_6_fu_394_p1 = zext_ln80_fu_611_p1;

assign mul_ln80_7_fu_398_p0 = mul_ln80_7_fu_398_p00;

assign mul_ln80_7_fu_398_p00 = tmp_10_fu_772_p11;

assign mul_ln80_7_fu_398_p1 = zext_ln80_fu_611_p1;

assign mul_ln80_fu_370_p0 = mul_ln80_fu_370_p00;

assign mul_ln80_fu_370_p00 = tmp_1_fu_622_p10;

assign mul_ln80_fu_370_p1 = zext_ln80_fu_611_p1;

assign select_ln77_fu_500_p3 = ((icmp_ln80_fu_494_p2[0:0] == 1'b1) ? 4'd14 : 4'd15);

assign select_ln80_1_fu_839_p3 = ((icmp_ln80_1_reg_1220_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_2_fu_857_p3 = ((icmp_ln80_2_reg_1230_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_3_fu_875_p3 = ((icmp_ln80_3_reg_1240_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_4_fu_893_p3 = ((icmp_ln80_4_reg_1251_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_5_fu_911_p3 = ((icmp_ln80_5_reg_1257_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_6_fu_929_p3 = ((icmp_ln80_6_reg_1263_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln80_fu_821_p3 = ((icmp_ln80_reg_1210_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign sub_ln77_1_fu_738_p2 = (sub_ln77_reg_1245 - zext_ln81_3_fu_735_p1);

assign sub_ln77_3_fu_524_p2 = (add_ln77_fu_508_p2 - zext_ln81_fu_520_p1);

assign sub_ln77_4_fu_540_p2 = (sub_ln77_3_fu_524_p2 - zext_ln81_1_fu_536_p1);

assign sub_ln77_fu_566_p2 = (sub_ln77_4_fu_540_p2 - zext_ln81_2_fu_562_p1);

assign tmp_10_fu_772_p10 = (sub_ln77_1_fu_738_p2 - zext_ln81_4_fu_763_p1);

assign tmp_6_fu_546_p4 = {{ap_sig_allocacmp_i_1[3:2]}};

assign tmp_9_fu_578_p4 = {{ap_sig_allocacmp_i_1[3:1]}};

assign tmp_fu_450_p3 = ap_sig_allocacmp_i_1[32'd3];

assign trunc_ln34_fu_458_p1 = ap_sig_allocacmp_i_1[2:0];

assign xor_ln70_fu_462_p2 = (trunc_ln34_fu_458_p1 ^ 3'd7);

assign zext_ln80_9_fu_468_p1 = xor_ln70_fu_462_p2;

assign zext_ln80_fu_611_p1 = tmp_s_reg_1205;

assign zext_ln81_1_fu_536_p1 = icmp_ln80_2_fu_530_p2;

assign zext_ln81_2_fu_562_p1 = icmp_ln80_3_fu_556_p2;

assign zext_ln81_3_fu_735_p1 = icmp_ln80_4_reg_1251;

assign zext_ln81_4_fu_763_p1 = icmp_ln80_5_reg_1257;

assign zext_ln81_fu_520_p1 = icmp_ln80_1_fu_514_p2;

endmodule //test_test_Pipeline_VITIS_LOOP_67_7
