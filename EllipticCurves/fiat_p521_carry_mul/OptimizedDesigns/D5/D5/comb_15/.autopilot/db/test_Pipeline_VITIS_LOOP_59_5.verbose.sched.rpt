

================================================================
== Vitis HLS Report for 'test_Pipeline_VITIS_LOOP_59_5'
================================================================
* Date:           Thu May  9 21:56:51 2024

* Version:        2023.1.1 (Build 3869133 on Jun 15 2023)
* Project:        D5
* Solution:       comb_15 (Vivado IP Flow Target)
* Product family: zynquplus
* Target device:  xczu9eg-ffvb1156-2-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  6.536 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |       10|       10|  0.100 us|  0.100 us|   10|   10|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- VITIS_LOOP_59_5  |        8|        8|         2|          1|          1|     8|       yes|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 2


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 2
* Pipeline : 1
  Pipeline-0 : II = 1, D = 2, States = { 1 2 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 6.22>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%add11545 = alloca i32 1"   --->   Operation 5 'alloca' 'add11545' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%add115_12546 = alloca i32 1"   --->   Operation 6 'alloca' 'add115_12546' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%add115_247 = alloca i32 1"   --->   Operation 7 'alloca' 'add115_247' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%add115_348 = alloca i32 1"   --->   Operation 8 'alloca' 'add115_348' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%add115_149 = alloca i32 1"   --->   Operation 9 'alloca' 'add115_149' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%add115_1_150 = alloca i32 1"   --->   Operation 10 'alloca' 'add115_1_150' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%add115_1_251 = alloca i32 1"   --->   Operation 11 'alloca' 'add115_1_251' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%add115_1_352 = alloca i32 1"   --->   Operation 12 'alloca' 'add115_1_352' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%i = alloca i32 1"   --->   Operation 13 'alloca' 'i' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%arg2_r_8_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_8_reload"   --->   Operation 14 'read' 'arg2_r_8_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%arg2_r_7_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_7_reload"   --->   Operation 15 'read' 'arg2_r_7_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%arg2_r_6_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_6_reload"   --->   Operation 16 'read' 'arg2_r_6_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%arg2_r_5_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_5_reload"   --->   Operation 17 'read' 'arg2_r_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%arg2_r_4_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_4_reload"   --->   Operation 18 'read' 'arg2_r_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%arg2_r_3_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_3_reload"   --->   Operation 19 'read' 'arg2_r_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%arg2_r_2_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_2_reload"   --->   Operation 20 'read' 'arg2_r_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%arg2_r_1_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_1_reload"   --->   Operation 21 'read' 'arg2_r_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%arg2_r_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_reload"   --->   Operation 22 'read' 'arg2_r_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%arg1_r_7_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_7_reload"   --->   Operation 23 'read' 'arg1_r_7_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%arg1_r_6_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_6_reload"   --->   Operation 24 'read' 'arg1_r_6_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%arg1_r_5_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_5_reload"   --->   Operation 25 'read' 'arg1_r_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%arg1_r_4_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_4_reload"   --->   Operation 26 'read' 'arg1_r_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%arg1_r_3_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_3_reload"   --->   Operation 27 'read' 'arg1_r_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%arg1_r_2_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_2_reload"   --->   Operation 28 'read' 'arg1_r_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%arg1_r_1_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_1_reload"   --->   Operation 29 'read' 'arg1_r_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%arg1_r_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_reload"   --->   Operation 30 'read' 'arg1_r_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%add5554_reload_read = read i128 @_ssdm_op_Read.ap_auto.i128, i128 %add5554_reload"   --->   Operation 31 'read' 'add5554_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%add55_14055_reload_read = read i128 @_ssdm_op_Read.ap_auto.i128, i128 %add55_14055_reload"   --->   Operation 32 'read' 'add55_14055_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%add55_256_reload_read = read i128 @_ssdm_op_Read.ap_auto.i128, i128 %add55_256_reload"   --->   Operation 33 'read' 'add55_256_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%add55_357_reload_read = read i128 @_ssdm_op_Read.ap_auto.i128, i128 %add55_357_reload"   --->   Operation 34 'read' 'add55_357_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%add55_158_reload_read = read i128 @_ssdm_op_Read.ap_auto.i128, i128 %add55_158_reload"   --->   Operation 35 'read' 'add55_158_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%add55_1_159_reload_read = read i128 @_ssdm_op_Read.ap_auto.i128, i128 %add55_1_159_reload"   --->   Operation 36 'read' 'add55_1_159_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%add55_1_260_reload_read = read i128 @_ssdm_op_Read.ap_auto.i128, i128 %add55_1_260_reload"   --->   Operation 37 'read' 'add55_1_260_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%add55_1_361_reload_read = read i128 @_ssdm_op_Read.ap_auto.i128, i128 %add55_1_361_reload"   --->   Operation 38 'read' 'add55_1_361_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.42ns)   --->   "%store_ln0 = store i4 7, i4 %i"   --->   Operation 39 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 40 [1/1] (0.42ns)   --->   "%store_ln0 = store i128 %add55_1_361_reload_read, i128 %add115_1_352"   --->   Operation 40 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 41 [1/1] (0.42ns)   --->   "%store_ln0 = store i128 %add55_1_260_reload_read, i128 %add115_1_251"   --->   Operation 41 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 42 [1/1] (0.42ns)   --->   "%store_ln0 = store i128 %add55_1_159_reload_read, i128 %add115_1_150"   --->   Operation 42 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 43 [1/1] (0.42ns)   --->   "%store_ln0 = store i128 %add55_158_reload_read, i128 %add115_149"   --->   Operation 43 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 44 [1/1] (0.42ns)   --->   "%store_ln0 = store i128 %add55_357_reload_read, i128 %add115_348"   --->   Operation 44 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 45 [1/1] (0.42ns)   --->   "%store_ln0 = store i128 %add55_256_reload_read, i128 %add115_247"   --->   Operation 45 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 46 [1/1] (0.42ns)   --->   "%store_ln0 = store i128 %add55_14055_reload_read, i128 %add115_12546"   --->   Operation 46 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 47 [1/1] (0.42ns)   --->   "%store_ln0 = store i128 %add5554_reload_read, i128 %add11545"   --->   Operation 47 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 48 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.inc122.1"   --->   Operation 48 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 49 [1/1] (0.00ns)   --->   "%i_1 = load i4 %i" [d5.cpp:72]   --->   Operation 49 'load' 'i_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 50 [1/1] (0.00ns)   --->   "%tmp = bitselect i1 @_ssdm_op_BitSelect.i1.i4.i32, i4 %i_1, i32 3" [d5.cpp:59]   --->   Operation 50 'bitselect' 'tmp' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 51 [1/1] (0.00ns)   --->   "%br_ln59 = br i1 %tmp, void %for.inc122.1.split, void %for.end133.exitStub" [d5.cpp:59]   --->   Operation 51 'br' 'br_ln59' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 52 [1/1] (0.00ns)   --->   "%trunc_ln34 = trunc i4 %i_1" [d5.cpp:34]   --->   Operation 52 'trunc' 'trunc_ln34' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 53 [1/1] (0.12ns)   --->   "%xor_ln62 = xor i3 %trunc_ln34, i3 7" [d5.cpp:62]   --->   Operation 53 'xor' 'xor_ln62' <Predicate = (!tmp)> <Delay = 0.12> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.12> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 54 [1/1] (0.00ns) (grouped into LUT with out node add_ln69)   --->   "%zext_ln72_9 = zext i3 %xor_ln62" [d5.cpp:72]   --->   Operation 54 'zext' 'zext_ln72_9' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 55 [1/1] (0.72ns)   --->   "%tmp_9 = mux i64 @_ssdm_op_Mux.ap_auto.8i64.i3, i64 %arg1_r_reload_read, i64 %arg1_r_1_reload_read, i64 %arg1_r_2_reload_read, i64 %arg1_r_3_reload_read, i64 %arg1_r_4_reload_read, i64 %arg1_r_5_reload_read, i64 %arg1_r_6_reload_read, i64 %arg1_r_7_reload_read, i3 %trunc_ln34" [d5.cpp:72]   --->   Operation 55 'mux' 'tmp_9' <Predicate = (!tmp)> <Delay = 0.72> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.72> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 56 [1/1] (0.72ns)   --->   "%tmp_s = mux i64 @_ssdm_op_Mux.ap_auto.8i64.i3, i64 %arg2_r_reload_read, i64 %arg2_r_1_reload_read, i64 %arg2_r_2_reload_read, i64 %arg2_r_3_reload_read, i64 %arg2_r_4_reload_read, i64 %arg2_r_5_reload_read, i64 %arg2_r_6_reload_read, i64 %arg2_r_7_reload_read, i3 %xor_ln62" [d5.cpp:72]   --->   Operation 56 'mux' 'tmp_s' <Predicate = (!tmp)> <Delay = 0.72> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.72> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 57 [1/1] (0.72ns)   --->   "%tmp_2 = mux i64 @_ssdm_op_Mux.ap_auto.8i64.i3, i64 0, i64 %arg2_r_reload_read, i64 %arg2_r_1_reload_read, i64 %arg2_r_2_reload_read, i64 %arg2_r_3_reload_read, i64 %arg2_r_4_reload_read, i64 %arg2_r_5_reload_read, i64 %arg2_r_6_reload_read, i3 %xor_ln62" [d5.cpp:72]   --->   Operation 57 'mux' 'tmp_2' <Predicate = (!tmp)> <Delay = 0.72> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.72> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 58 [1/1] (0.79ns)   --->   "%icmp_ln72 = icmp_ne  i4 %i_1, i4 7" [d5.cpp:72]   --->   Operation 58 'icmp' 'icmp_ln72' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 59 [1/1] (0.00ns) (grouped into LUT with out node add_ln69)   --->   "%select_ln69 = select i1 %icmp_ln72, i4 14, i4 15" [d5.cpp:69]   --->   Operation 59 'select' 'select_ln69' <Predicate = (!tmp)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 60 [1/1] (0.67ns) (out node of the LUT)   --->   "%add_ln69 = add i4 %select_ln69, i4 %zext_ln72_9" [d5.cpp:69]   --->   Operation 60 'add' 'add_ln69' <Predicate = (!tmp)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 61 [1/1] (0.77ns)   --->   "%tmp_1 = mux i64 @_ssdm_op_Mux.ap_auto.9i64.i4, i64 %arg2_r_reload_read, i64 %arg2_r_1_reload_read, i64 %arg2_r_2_reload_read, i64 %arg2_r_3_reload_read, i64 %arg2_r_4_reload_read, i64 %arg2_r_5_reload_read, i64 %arg2_r_6_reload_read, i64 %arg2_r_7_reload_read, i64 %arg2_r_8_reload_read, i4 %add_ln69" [d5.cpp:72]   --->   Operation 61 'mux' 'tmp_1' <Predicate = (!tmp)> <Delay = 0.77> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 62 [1/1] (0.79ns)   --->   "%icmp_ln72_1 = icmp_slt  i4 %i_1, i4 6" [d5.cpp:72]   --->   Operation 62 'icmp' 'icmp_ln72_1' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 63 [1/1] (0.00ns)   --->   "%zext_ln73 = zext i1 %icmp_ln72_1" [d5.cpp:73]   --->   Operation 63 'zext' 'zext_ln73' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 64 [1/1] (0.79ns)   --->   "%sub_ln69_3 = sub i4 %add_ln69, i4 %zext_ln73" [d5.cpp:69]   --->   Operation 64 'sub' 'sub_ln69_3' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 65 [1/1] (0.77ns)   --->   "%tmp_3 = mux i64 @_ssdm_op_Mux.ap_auto.9i64.i4, i64 %arg2_r_reload_read, i64 %arg2_r_1_reload_read, i64 %arg2_r_2_reload_read, i64 %arg2_r_3_reload_read, i64 %arg2_r_4_reload_read, i64 %arg2_r_5_reload_read, i64 %arg2_r_6_reload_read, i64 %arg2_r_7_reload_read, i64 %arg2_r_8_reload_read, i4 %sub_ln69_3" [d5.cpp:72]   --->   Operation 65 'mux' 'tmp_3' <Predicate = (!tmp)> <Delay = 0.77> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 66 [1/1] (0.79ns)   --->   "%icmp_ln72_2 = icmp_slt  i4 %i_1, i4 5" [d5.cpp:72]   --->   Operation 66 'icmp' 'icmp_ln72_2' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 67 [1/1] (0.00ns)   --->   "%zext_ln73_1 = zext i1 %icmp_ln72_2" [d5.cpp:73]   --->   Operation 67 'zext' 'zext_ln73_1' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 68 [1/1] (0.79ns)   --->   "%sub_ln69_4 = sub i4 %sub_ln69_3, i4 %zext_ln73_1" [d5.cpp:69]   --->   Operation 68 'sub' 'sub_ln69_4' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 69 [1/1] (0.77ns)   --->   "%tmp_4 = mux i64 @_ssdm_op_Mux.ap_auto.9i64.i4, i64 %arg2_r_reload_read, i64 %arg2_r_1_reload_read, i64 %arg2_r_2_reload_read, i64 %arg2_r_3_reload_read, i64 %arg2_r_4_reload_read, i64 %arg2_r_5_reload_read, i64 %arg2_r_6_reload_read, i64 %arg2_r_7_reload_read, i64 %arg2_r_8_reload_read, i4 %sub_ln69_4" [d5.cpp:72]   --->   Operation 69 'mux' 'tmp_4' <Predicate = (!tmp)> <Delay = 0.77> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 70 [1/1] (0.00ns)   --->   "%tmp_5 = partselect i2 @_ssdm_op_PartSelect.i2.i4.i32.i32, i4 %i_1, i32 2, i32 3" [d5.cpp:72]   --->   Operation 70 'partselect' 'tmp_5' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 71 [1/1] (0.54ns)   --->   "%icmp_ln72_3 = icmp_ne  i2 %tmp_5, i2 1" [d5.cpp:72]   --->   Operation 71 'icmp' 'icmp_ln72_3' <Predicate = (!tmp)> <Delay = 0.54> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.54> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 72 [1/1] (0.00ns)   --->   "%zext_ln73_2 = zext i1 %icmp_ln72_3" [d5.cpp:73]   --->   Operation 72 'zext' 'zext_ln73_2' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 73 [1/1] (0.79ns)   --->   "%sub_ln69 = sub i4 %sub_ln69_4, i4 %zext_ln73_2" [d5.cpp:69]   --->   Operation 73 'sub' 'sub_ln69' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 74 [1/1] (0.77ns)   --->   "%tmp_6 = mux i64 @_ssdm_op_Mux.ap_auto.9i64.i4, i64 %arg2_r_reload_read, i64 %arg2_r_1_reload_read, i64 %arg2_r_2_reload_read, i64 %arg2_r_3_reload_read, i64 %arg2_r_4_reload_read, i64 %arg2_r_5_reload_read, i64 %arg2_r_6_reload_read, i64 %arg2_r_7_reload_read, i64 %arg2_r_8_reload_read, i4 %sub_ln69" [d5.cpp:72]   --->   Operation 74 'mux' 'tmp_6' <Predicate = (!tmp)> <Delay = 0.77> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 75 [1/1] (0.79ns)   --->   "%icmp_ln72_4 = icmp_slt  i4 %i_1, i4 3" [d5.cpp:72]   --->   Operation 75 'icmp' 'icmp_ln72_4' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 76 [1/1] (0.00ns)   --->   "%zext_ln73_3 = zext i1 %icmp_ln72_4" [d5.cpp:73]   --->   Operation 76 'zext' 'zext_ln73_3' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 77 [1/1] (0.79ns)   --->   "%sub_ln69_1 = sub i4 %sub_ln69, i4 %zext_ln73_3" [d5.cpp:69]   --->   Operation 77 'sub' 'sub_ln69_1' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 78 [1/1] (0.77ns)   --->   "%tmp_7 = mux i64 @_ssdm_op_Mux.ap_auto.9i64.i4, i64 %arg2_r_reload_read, i64 %arg2_r_1_reload_read, i64 %arg2_r_2_reload_read, i64 %arg2_r_3_reload_read, i64 %arg2_r_4_reload_read, i64 %arg2_r_5_reload_read, i64 %arg2_r_6_reload_read, i64 %arg2_r_7_reload_read, i64 %arg2_r_8_reload_read, i4 %sub_ln69_1" [d5.cpp:72]   --->   Operation 78 'mux' 'tmp_7' <Predicate = (!tmp)> <Delay = 0.77> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 79 [1/1] (0.00ns)   --->   "%tmp_8 = partselect i3 @_ssdm_op_PartSelect.i3.i4.i32.i32, i4 %i_1, i32 1, i32 3" [d5.cpp:72]   --->   Operation 79 'partselect' 'tmp_8' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 80 [1/1] (0.67ns)   --->   "%icmp_ln72_5 = icmp_slt  i3 %tmp_8, i3 1" [d5.cpp:72]   --->   Operation 80 'icmp' 'icmp_ln72_5' <Predicate = (!tmp)> <Delay = 0.67> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 81 [1/1] (0.00ns)   --->   "%zext_ln73_4 = zext i1 %icmp_ln72_5" [d5.cpp:73]   --->   Operation 81 'zext' 'zext_ln73_4' <Predicate = (!tmp)> <Delay = 0.00>
ST_1 : Operation 82 [1/1] (0.79ns)   --->   "%sub_ln69_2 = sub i4 %sub_ln69_1, i4 %zext_ln73_4" [d5.cpp:69]   --->   Operation 82 'sub' 'sub_ln69_2' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 83 [1/1] (0.77ns)   --->   "%tmp_10 = mux i64 @_ssdm_op_Mux.ap_auto.9i64.i4, i64 %arg2_r_reload_read, i64 %arg2_r_1_reload_read, i64 %arg2_r_2_reload_read, i64 %arg2_r_3_reload_read, i64 %arg2_r_4_reload_read, i64 %arg2_r_5_reload_read, i64 %arg2_r_6_reload_read, i64 %arg2_r_7_reload_read, i64 %arg2_r_8_reload_read, i4 %sub_ln69_2" [d5.cpp:72]   --->   Operation 83 'mux' 'tmp_10' <Predicate = (!tmp)> <Delay = 0.77> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 84 [1/1] (0.79ns)   --->   "%icmp_ln72_6 = icmp_slt  i4 %i_1, i4 1" [d5.cpp:72]   --->   Operation 84 'icmp' 'icmp_ln72_6' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 85 [1/1] (0.79ns)   --->   "%add_ln59 = add i4 %i_1, i4 15" [d5.cpp:59]   --->   Operation 85 'add' 'add_ln59' <Predicate = (!tmp)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 86 [1/1] (0.42ns)   --->   "%store_ln59 = store i4 %add_ln59, i4 %i" [d5.cpp:59]   --->   Operation 86 'store' 'store_ln59' <Predicate = (!tmp)> <Delay = 0.42>
ST_1 : Operation 146 [1/1] (0.00ns)   --->   "%add11545_load_1 = load i128 %add11545"   --->   Operation 146 'load' 'add11545_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_1 : Operation 147 [1/1] (0.00ns)   --->   "%add115_12546_load_1 = load i128 %add115_12546"   --->   Operation 147 'load' 'add115_12546_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_1 : Operation 148 [1/1] (0.00ns)   --->   "%add115_247_load_1 = load i128 %add115_247"   --->   Operation 148 'load' 'add115_247_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_1 : Operation 149 [1/1] (0.00ns)   --->   "%add115_348_load_1 = load i128 %add115_348"   --->   Operation 149 'load' 'add115_348_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_1 : Operation 150 [1/1] (0.00ns)   --->   "%add115_149_load_1 = load i128 %add115_149"   --->   Operation 150 'load' 'add115_149_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_1 : Operation 151 [1/1] (0.00ns)   --->   "%add115_1_150_load_1 = load i128 %add115_1_150"   --->   Operation 151 'load' 'add115_1_150_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_1 : Operation 152 [1/1] (0.00ns)   --->   "%add115_1_251_load_1 = load i128 %add115_1_251"   --->   Operation 152 'load' 'add115_1_251_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_1 : Operation 153 [1/1] (0.00ns)   --->   "%add115_1_352_load_1 = load i128 %add115_1_352"   --->   Operation 153 'load' 'add115_1_352_load_1' <Predicate = (tmp)> <Delay = 0.00>
ST_1 : Operation 154 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i128P0A, i128 %add115_1_352_out, i128 %add115_1_352_load_1"   --->   Operation 154 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_1 : Operation 155 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i128P0A, i128 %add115_1_251_out, i128 %add115_1_251_load_1"   --->   Operation 155 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_1 : Operation 156 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i128P0A, i128 %add115_1_150_out, i128 %add115_1_150_load_1"   --->   Operation 156 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_1 : Operation 157 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i128P0A, i128 %add115_149_out, i128 %add115_149_load_1"   --->   Operation 157 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_1 : Operation 158 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i128P0A, i128 %add115_348_out, i128 %add115_348_load_1"   --->   Operation 158 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_1 : Operation 159 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i128P0A, i128 %add115_247_out, i128 %add115_247_load_1"   --->   Operation 159 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_1 : Operation 160 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i128P0A, i128 %add115_12546_out, i128 %add115_12546_load_1"   --->   Operation 160 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_1 : Operation 161 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i128P0A, i128 %add11545_out, i128 %add11545_load_1"   --->   Operation 161 'write' 'write_ln0' <Predicate = (tmp)> <Delay = 0.00>
ST_1 : Operation 162 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 162 'ret' 'ret_ln0' <Predicate = (tmp)> <Delay = 0.00>

State 2 <SV = 1> <Delay = 6.53>
ST_2 : Operation 87 [1/1] (0.00ns)   --->   "%add11545_load = load i128 %add11545" [d5.cpp:72]   --->   Operation 87 'load' 'add11545_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 88 [1/1] (0.00ns)   --->   "%add115_12546_load = load i128 %add115_12546" [d5.cpp:72]   --->   Operation 88 'load' 'add115_12546_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 89 [1/1] (0.00ns)   --->   "%add115_247_load = load i128 %add115_247" [d5.cpp:72]   --->   Operation 89 'load' 'add115_247_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 90 [1/1] (0.00ns)   --->   "%add115_348_load = load i128 %add115_348" [d5.cpp:72]   --->   Operation 90 'load' 'add115_348_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 91 [1/1] (0.00ns)   --->   "%add115_149_load = load i128 %add115_149" [d5.cpp:72]   --->   Operation 91 'load' 'add115_149_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 92 [1/1] (0.00ns)   --->   "%add115_1_150_load = load i128 %add115_1_150" [d5.cpp:72]   --->   Operation 92 'load' 'add115_1_150_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 93 [1/1] (0.00ns)   --->   "%add115_1_251_load = load i128 %add115_1_251" [d5.cpp:72]   --->   Operation 93 'load' 'add115_1_251_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 94 [1/1] (0.00ns)   --->   "%add115_1_352_load = load i128 %add115_1_352" [d5.cpp:72]   --->   Operation 94 'load' 'add115_1_352_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 95 [1/1] (0.00ns)   --->   "%specpipeline_ln61 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty_2" [d5.cpp:61]   --->   Operation 95 'specpipeline' 'specpipeline_ln61' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 96 [1/1] (0.00ns)   --->   "%speclooptripcount_ln34 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 8, i64 8, i64 8" [d5.cpp:34]   --->   Operation 96 'speclooptripcount' 'speclooptripcount_ln34' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 97 [1/1] (0.00ns)   --->   "%specloopname_ln59 = specloopname void @_ssdm_op_SpecLoopName, void @empty_7" [d5.cpp:59]   --->   Operation 97 'specloopname' 'specloopname_ln59' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 98 [1/1] (0.00ns)   --->   "%zext_ln72 = zext i64 %tmp_9" [d5.cpp:72]   --->   Operation 98 'zext' 'zext_ln72' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 99 [1/1] (0.00ns)   --->   "%zext_ln72_1 = zext i64 %tmp_s" [d5.cpp:72]   --->   Operation 99 'zext' 'zext_ln72_1' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.73ns)   --->   Input mux for Operation 100 '%mul_ln72 = mul i128 %zext_ln72_1, i128 %zext_ln72'
ST_2 : Operation 100 [1/1] (3.79ns)   --->   "%mul_ln72 = mul i128 %zext_ln72_1, i128 %zext_ln72" [d5.cpp:72]   --->   Operation 100 'mul' 'mul_ln72' <Predicate = true> <Delay = 3.79> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 101 [1/1] (1.57ns)   --->   "%add_ln72 = add i128 %mul_ln72, i128 %add11545_load" [d5.cpp:72]   --->   Operation 101 'add' 'add_ln72' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 102 [1/1] (0.00ns)   --->   "%zext_ln72_2 = zext i64 %tmp_2" [d5.cpp:72]   --->   Operation 102 'zext' 'zext_ln72_2' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.73ns)   --->   Input mux for Operation 103 '%mul_ln72_1 = mul i128 %zext_ln72_2, i128 %zext_ln72'
ST_2 : Operation 103 [1/1] (3.79ns)   --->   "%mul_ln72_1 = mul i128 %zext_ln72_2, i128 %zext_ln72" [d5.cpp:72]   --->   Operation 103 'mul' 'mul_ln72_1' <Predicate = true> <Delay = 3.79> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 104 [1/1] (0.00ns) (grouped into LUT with out node add_ln72_1)   --->   "%select_ln72 = select i1 %icmp_ln72, i128 340282366920938463463374607431768211455, i128 0" [d5.cpp:72]   --->   Operation 104 'select' 'select_ln72' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 105 [1/1] (0.00ns) (grouped into LUT with out node add_ln72_1)   --->   "%and_ln72 = and i128 %mul_ln72_1, i128 %select_ln72" [d5.cpp:72]   --->   Operation 105 'and' 'and_ln72' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 106 [1/1] (1.57ns) (out node of the LUT)   --->   "%add_ln72_1 = add i128 %and_ln72, i128 %add115_12546_load" [d5.cpp:72]   --->   Operation 106 'add' 'add_ln72_1' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 107 [1/1] (0.00ns)   --->   "%zext_ln72_3 = zext i64 %tmp_1" [d5.cpp:72]   --->   Operation 107 'zext' 'zext_ln72_3' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.73ns)   --->   Input mux for Operation 108 '%mul_ln72_2 = mul i128 %zext_ln72_3, i128 %zext_ln72'
ST_2 : Operation 108 [1/1] (3.79ns)   --->   "%mul_ln72_2 = mul i128 %zext_ln72_3, i128 %zext_ln72" [d5.cpp:72]   --->   Operation 108 'mul' 'mul_ln72_2' <Predicate = true> <Delay = 3.79> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 109 [1/1] (0.00ns) (grouped into LUT with out node add_ln72_2)   --->   "%select_ln72_1 = select i1 %icmp_ln72_1, i128 340282366920938463463374607431768211455, i128 0" [d5.cpp:72]   --->   Operation 109 'select' 'select_ln72_1' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 110 [1/1] (0.00ns) (grouped into LUT with out node add_ln72_2)   --->   "%and_ln72_1 = and i128 %mul_ln72_2, i128 %select_ln72_1" [d5.cpp:72]   --->   Operation 110 'and' 'and_ln72_1' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 111 [1/1] (1.57ns) (out node of the LUT)   --->   "%add_ln72_2 = add i128 %and_ln72_1, i128 %add115_247_load" [d5.cpp:72]   --->   Operation 111 'add' 'add_ln72_2' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 112 [1/1] (0.00ns)   --->   "%zext_ln72_4 = zext i64 %tmp_3" [d5.cpp:72]   --->   Operation 112 'zext' 'zext_ln72_4' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.73ns)   --->   Input mux for Operation 113 '%mul_ln72_3 = mul i128 %zext_ln72_4, i128 %zext_ln72'
ST_2 : Operation 113 [1/1] (3.79ns)   --->   "%mul_ln72_3 = mul i128 %zext_ln72_4, i128 %zext_ln72" [d5.cpp:72]   --->   Operation 113 'mul' 'mul_ln72_3' <Predicate = true> <Delay = 3.79> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 114 [1/1] (0.00ns) (grouped into LUT with out node add_ln72_3)   --->   "%select_ln72_2 = select i1 %icmp_ln72_2, i128 340282366920938463463374607431768211455, i128 0" [d5.cpp:72]   --->   Operation 114 'select' 'select_ln72_2' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 115 [1/1] (0.00ns) (grouped into LUT with out node add_ln72_3)   --->   "%and_ln72_2 = and i128 %mul_ln72_3, i128 %select_ln72_2" [d5.cpp:72]   --->   Operation 115 'and' 'and_ln72_2' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 116 [1/1] (1.57ns) (out node of the LUT)   --->   "%add_ln72_3 = add i128 %and_ln72_2, i128 %add115_348_load" [d5.cpp:72]   --->   Operation 116 'add' 'add_ln72_3' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 117 [1/1] (0.00ns)   --->   "%zext_ln72_5 = zext i64 %tmp_4" [d5.cpp:72]   --->   Operation 117 'zext' 'zext_ln72_5' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.73ns)   --->   Input mux for Operation 118 '%mul_ln72_4 = mul i128 %zext_ln72_5, i128 %zext_ln72'
ST_2 : Operation 118 [1/1] (3.79ns)   --->   "%mul_ln72_4 = mul i128 %zext_ln72_5, i128 %zext_ln72" [d5.cpp:72]   --->   Operation 118 'mul' 'mul_ln72_4' <Predicate = true> <Delay = 3.79> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 119 [1/1] (0.00ns) (grouped into LUT with out node add_ln72_4)   --->   "%select_ln72_3 = select i1 %icmp_ln72_3, i128 340282366920938463463374607431768211455, i128 0" [d5.cpp:72]   --->   Operation 119 'select' 'select_ln72_3' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 120 [1/1] (0.00ns) (grouped into LUT with out node add_ln72_4)   --->   "%and_ln72_3 = and i128 %mul_ln72_4, i128 %select_ln72_3" [d5.cpp:72]   --->   Operation 120 'and' 'and_ln72_3' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 121 [1/1] (1.57ns) (out node of the LUT)   --->   "%add_ln72_4 = add i128 %and_ln72_3, i128 %add115_149_load" [d5.cpp:72]   --->   Operation 121 'add' 'add_ln72_4' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 122 [1/1] (0.00ns)   --->   "%zext_ln72_6 = zext i64 %tmp_6" [d5.cpp:72]   --->   Operation 122 'zext' 'zext_ln72_6' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.73ns)   --->   Input mux for Operation 123 '%mul_ln72_5 = mul i128 %zext_ln72_6, i128 %zext_ln72'
ST_2 : Operation 123 [1/1] (3.79ns)   --->   "%mul_ln72_5 = mul i128 %zext_ln72_6, i128 %zext_ln72" [d5.cpp:72]   --->   Operation 123 'mul' 'mul_ln72_5' <Predicate = true> <Delay = 3.79> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 124 [1/1] (0.00ns) (grouped into LUT with out node add_ln72_5)   --->   "%select_ln72_4 = select i1 %icmp_ln72_4, i128 340282366920938463463374607431768211455, i128 0" [d5.cpp:72]   --->   Operation 124 'select' 'select_ln72_4' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 125 [1/1] (0.00ns) (grouped into LUT with out node add_ln72_5)   --->   "%and_ln72_4 = and i128 %mul_ln72_5, i128 %select_ln72_4" [d5.cpp:72]   --->   Operation 125 'and' 'and_ln72_4' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 126 [1/1] (1.57ns) (out node of the LUT)   --->   "%add_ln72_5 = add i128 %and_ln72_4, i128 %add115_1_150_load" [d5.cpp:72]   --->   Operation 126 'add' 'add_ln72_5' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 127 [1/1] (0.00ns)   --->   "%zext_ln72_7 = zext i64 %tmp_7" [d5.cpp:72]   --->   Operation 127 'zext' 'zext_ln72_7' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.73ns)   --->   Input mux for Operation 128 '%mul_ln72_6 = mul i128 %zext_ln72_7, i128 %zext_ln72'
ST_2 : Operation 128 [1/1] (3.79ns)   --->   "%mul_ln72_6 = mul i128 %zext_ln72_7, i128 %zext_ln72" [d5.cpp:72]   --->   Operation 128 'mul' 'mul_ln72_6' <Predicate = true> <Delay = 3.79> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 129 [1/1] (0.00ns) (grouped into LUT with out node add_ln72_6)   --->   "%select_ln72_5 = select i1 %icmp_ln72_5, i128 340282366920938463463374607431768211455, i128 0" [d5.cpp:72]   --->   Operation 129 'select' 'select_ln72_5' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 130 [1/1] (0.00ns) (grouped into LUT with out node add_ln72_6)   --->   "%and_ln72_5 = and i128 %mul_ln72_6, i128 %select_ln72_5" [d5.cpp:72]   --->   Operation 130 'and' 'and_ln72_5' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 131 [1/1] (1.57ns) (out node of the LUT)   --->   "%add_ln72_6 = add i128 %and_ln72_5, i128 %add115_1_251_load" [d5.cpp:72]   --->   Operation 131 'add' 'add_ln72_6' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 132 [1/1] (0.00ns)   --->   "%zext_ln72_8 = zext i64 %tmp_10" [d5.cpp:72]   --->   Operation 132 'zext' 'zext_ln72_8' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (0.73ns)   --->   Input mux for Operation 133 '%mul_ln72_7 = mul i128 %zext_ln72_8, i128 %zext_ln72'
ST_2 : Operation 133 [1/1] (3.79ns)   --->   "%mul_ln72_7 = mul i128 %zext_ln72_8, i128 %zext_ln72" [d5.cpp:72]   --->   Operation 133 'mul' 'mul_ln72_7' <Predicate = true> <Delay = 3.79> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 134 [1/1] (0.00ns) (grouped into LUT with out node add_ln72_7)   --->   "%select_ln72_6 = select i1 %icmp_ln72_6, i128 340282366920938463463374607431768211455, i128 0" [d5.cpp:72]   --->   Operation 134 'select' 'select_ln72_6' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.17> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 135 [1/1] (0.00ns) (grouped into LUT with out node add_ln72_7)   --->   "%and_ln72_6 = and i128 %mul_ln72_7, i128 %select_ln72_6" [d5.cpp:72]   --->   Operation 135 'and' 'and_ln72_6' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.37> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 136 [1/1] (1.57ns) (out node of the LUT)   --->   "%add_ln72_7 = add i128 %and_ln72_6, i128 %add115_1_352_load" [d5.cpp:72]   --->   Operation 136 'add' 'add_ln72_7' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 137 [1/1] (0.42ns)   --->   "%store_ln59 = store i128 %add_ln72_7, i128 %add115_1_352" [d5.cpp:59]   --->   Operation 137 'store' 'store_ln59' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 138 [1/1] (0.42ns)   --->   "%store_ln59 = store i128 %add_ln72_6, i128 %add115_1_251" [d5.cpp:59]   --->   Operation 138 'store' 'store_ln59' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 139 [1/1] (0.42ns)   --->   "%store_ln59 = store i128 %add_ln72_5, i128 %add115_1_150" [d5.cpp:59]   --->   Operation 139 'store' 'store_ln59' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 140 [1/1] (0.42ns)   --->   "%store_ln59 = store i128 %add_ln72_4, i128 %add115_149" [d5.cpp:59]   --->   Operation 140 'store' 'store_ln59' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 141 [1/1] (0.42ns)   --->   "%store_ln59 = store i128 %add_ln72_3, i128 %add115_348" [d5.cpp:59]   --->   Operation 141 'store' 'store_ln59' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 142 [1/1] (0.42ns)   --->   "%store_ln59 = store i128 %add_ln72_2, i128 %add115_247" [d5.cpp:59]   --->   Operation 142 'store' 'store_ln59' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 143 [1/1] (0.42ns)   --->   "%store_ln59 = store i128 %add_ln72_1, i128 %add115_12546" [d5.cpp:59]   --->   Operation 143 'store' 'store_ln59' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 144 [1/1] (0.42ns)   --->   "%store_ln59 = store i128 %add_ln72, i128 %add11545" [d5.cpp:59]   --->   Operation 144 'store' 'store_ln59' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 145 [1/1] (0.00ns)   --->   "%br_ln59 = br void %for.inc122.1" [d5.cpp:59]   --->   Operation 145 'br' 'br_ln59' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 6.225ns
The critical path consists of the following:
	'alloca' operation ('i') [42]  (0.000 ns)
	'load' operation ('i', d5.cpp:72) on local variable 'i' [79]  (0.000 ns)
	'icmp' operation ('icmp_ln72', d5.cpp:72) [105]  (0.797 ns)
	'select' operation ('select_ln69', d5.cpp:69) [110]  (0.000 ns)
	'add' operation ('add_ln69', d5.cpp:69) [111]  (0.673 ns)
	'sub' operation ('sub_ln69_3', d5.cpp:69) [120]  (0.797 ns)
	'sub' operation ('sub_ln69_4', d5.cpp:69) [129]  (0.797 ns)
	'sub' operation ('sub_ln69', d5.cpp:69) [139]  (0.797 ns)
	'sub' operation ('sub_ln69_1', d5.cpp:69) [148]  (0.797 ns)
	'sub' operation ('sub_ln69_2', d5.cpp:69) [158]  (0.797 ns)
	'mux' operation ('tmp_10', d5.cpp:72) [159]  (0.770 ns)

 <State 2>: 6.536ns
The critical path consists of the following:
	multiplexor before operation 'mul' with delay (0.738 ns)
'mul' operation ('mul_ln72_7', d5.cpp:72) [162]  (3.792 ns)
	'and' operation ('and_ln72_6', d5.cpp:72) [164]  (0.000 ns)
	'add' operation ('add_ln72_7', d5.cpp:72) [165]  (1.579 ns)
	'store' operation ('store_ln59', d5.cpp:59) of variable 'add_ln72_7', d5.cpp:72 on local variable 'add115_1_352' [168]  (0.427 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
