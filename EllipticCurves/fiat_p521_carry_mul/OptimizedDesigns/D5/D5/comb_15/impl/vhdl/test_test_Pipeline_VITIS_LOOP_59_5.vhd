-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity test_test_Pipeline_VITIS_LOOP_59_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    add55_1_361_reload : IN STD_LOGIC_VECTOR (127 downto 0);
    add55_1_260_reload : IN STD_LOGIC_VECTOR (127 downto 0);
    add55_1_159_reload : IN STD_LOGIC_VECTOR (127 downto 0);
    add55_158_reload : IN STD_LOGIC_VECTOR (127 downto 0);
    add55_357_reload : IN STD_LOGIC_VECTOR (127 downto 0);
    add55_256_reload : IN STD_LOGIC_VECTOR (127 downto 0);
    add55_14055_reload : IN STD_LOGIC_VECTOR (127 downto 0);
    add5554_reload : IN STD_LOGIC_VECTOR (127 downto 0);
    arg1_r_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_1_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_2_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_3_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_4_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_5_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_6_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg1_r_7_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg2_r_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg2_r_1_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg2_r_2_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg2_r_3_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg2_r_4_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg2_r_5_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg2_r_6_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg2_r_7_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    arg2_r_8_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    add115_1_352_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    add115_1_352_out_ap_vld : OUT STD_LOGIC;
    add115_1_251_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    add115_1_251_out_ap_vld : OUT STD_LOGIC;
    add115_1_150_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    add115_1_150_out_ap_vld : OUT STD_LOGIC;
    add115_149_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    add115_149_out_ap_vld : OUT STD_LOGIC;
    add115_348_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    add115_348_out_ap_vld : OUT STD_LOGIC;
    add115_247_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    add115_247_out_ap_vld : OUT STD_LOGIC;
    add115_12546_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    add115_12546_out_ap_vld : OUT STD_LOGIC;
    add11545_out : OUT STD_LOGIC_VECTOR (127 downto 0);
    add11545_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of test_test_Pipeline_VITIS_LOOP_59_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_fu_450_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal tmp_9_fu_472_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_1171 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_s_fu_494_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_1176 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_516_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_1181 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln72_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_reg_1186 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_558_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_1191 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln72_1_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_1_reg_1196 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_598_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_1201 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln72_2_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_2_reg_1206 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_638_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_1211 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln72_3_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_3_reg_1216 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_688_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_1221 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln72_4_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_4_reg_1226 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_728_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_reg_1231 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln72_5_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_5_reg_1236 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_778_p11 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_reg_1241 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln72_6_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_6_reg_1246 : STD_LOGIC_VECTOR (0 downto 0);
    signal add11545_fu_128 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln72_fu_858_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal add115_12546_fu_132 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln72_1_fu_881_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add115_247_fu_136 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln72_2_fu_904_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add115_348_fu_140 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln72_3_fu_927_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add115_149_fu_144 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln72_4_fu_950_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add115_1_150_fu_148 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln72_5_fu_973_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add115_1_251_fu_152 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln72_6_fu_996_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add115_1_352_fu_156 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln72_7_fu_1019_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_fu_160 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln59_fu_808_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln72_fu_370_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln72_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_fu_843_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln72_1_fu_374_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln72_1_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln72_2_fu_378_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln72_2_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln72_3_fu_382_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln72_3_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln72_4_fu_386_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln72_4_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln72_5_fu_390_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln72_5_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln72_6_fu_394_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln72_6_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln72_7_fu_398_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln72_7_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln34_fu_458_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln62_fu_462_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln69_fu_544_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln72_9_fu_468_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln69_fu_552_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln73_fu_588_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln69_3_fu_592_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln73_1_fu_628_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln69_4_fu_632_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_662_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln73_2_fu_678_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln69_fu_682_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln73_3_fu_718_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln69_1_fu_722_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_752_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln73_4_fu_768_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_778_p10 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln72_fu_370_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln72_1_fu_374_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln72_fu_868_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln72_fu_875_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln72_2_fu_378_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln72_1_fu_891_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln72_1_fu_898_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln72_3_fu_382_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln72_2_fu_914_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln72_2_fu_921_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln72_4_fu_386_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln72_3_fu_937_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln72_3_fu_944_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln72_5_fu_390_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln72_4_fu_960_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln72_4_fu_967_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln72_6_fu_394_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln72_5_fu_983_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln72_5_fu_990_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln72_7_fu_398_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln72_6_fu_1006_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln72_6_fu_1013_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln72_1_fu_374_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln72_2_fu_378_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln72_3_fu_382_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln72_4_fu_386_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln72_5_fu_390_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln72_6_fu_394_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln72_7_fu_398_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln72_fu_370_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component test_mul_64ns_64ns_128_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component test_mux_8_3_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component test_mux_9_4_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        din9 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component test_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_64ns_64ns_128_1_1_U78 : component test_mul_64ns_64ns_128_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        din0 => mul_ln72_fu_370_p0,
        din1 => mul_ln72_fu_370_p1,
        dout => mul_ln72_fu_370_p2);

    mul_64ns_64ns_128_1_1_U79 : component test_mul_64ns_64ns_128_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        din0 => mul_ln72_1_fu_374_p0,
        din1 => mul_ln72_1_fu_374_p1,
        dout => mul_ln72_1_fu_374_p2);

    mul_64ns_64ns_128_1_1_U80 : component test_mul_64ns_64ns_128_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        din0 => mul_ln72_2_fu_378_p0,
        din1 => mul_ln72_2_fu_378_p1,
        dout => mul_ln72_2_fu_378_p2);

    mul_64ns_64ns_128_1_1_U81 : component test_mul_64ns_64ns_128_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        din0 => mul_ln72_3_fu_382_p0,
        din1 => mul_ln72_3_fu_382_p1,
        dout => mul_ln72_3_fu_382_p2);

    mul_64ns_64ns_128_1_1_U82 : component test_mul_64ns_64ns_128_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        din0 => mul_ln72_4_fu_386_p0,
        din1 => mul_ln72_4_fu_386_p1,
        dout => mul_ln72_4_fu_386_p2);

    mul_64ns_64ns_128_1_1_U83 : component test_mul_64ns_64ns_128_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        din0 => mul_ln72_5_fu_390_p0,
        din1 => mul_ln72_5_fu_390_p1,
        dout => mul_ln72_5_fu_390_p2);

    mul_64ns_64ns_128_1_1_U84 : component test_mul_64ns_64ns_128_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        din0 => mul_ln72_6_fu_394_p0,
        din1 => mul_ln72_6_fu_394_p1,
        dout => mul_ln72_6_fu_394_p2);

    mul_64ns_64ns_128_1_1_U85 : component test_mul_64ns_64ns_128_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        din0 => mul_ln72_7_fu_398_p0,
        din1 => mul_ln72_7_fu_398_p1,
        dout => mul_ln72_7_fu_398_p2);

    mux_8_3_64_1_1_U86 : component test_mux_8_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => arg1_r_reload,
        din1 => arg1_r_1_reload,
        din2 => arg1_r_2_reload,
        din3 => arg1_r_3_reload,
        din4 => arg1_r_4_reload,
        din5 => arg1_r_5_reload,
        din6 => arg1_r_6_reload,
        din7 => arg1_r_7_reload,
        din8 => trunc_ln34_fu_458_p1,
        dout => tmp_9_fu_472_p10);

    mux_8_3_64_1_1_U87 : component test_mux_8_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => arg2_r_7_reload,
        din8 => xor_ln62_fu_462_p2,
        dout => tmp_s_fu_494_p10);

    mux_8_3_64_1_1_U88 : component test_mux_8_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => ap_const_lv64_0,
        din1 => arg2_r_reload,
        din2 => arg2_r_1_reload,
        din3 => arg2_r_2_reload,
        din4 => arg2_r_3_reload,
        din5 => arg2_r_4_reload,
        din6 => arg2_r_5_reload,
        din7 => arg2_r_6_reload,
        din8 => xor_ln62_fu_462_p2,
        dout => tmp_2_fu_516_p10);

    mux_9_4_64_1_1_U89 : component test_mux_9_4_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => arg2_r_7_reload,
        din8 => arg2_r_8_reload,
        din9 => add_ln69_fu_552_p2,
        dout => tmp_1_fu_558_p11);

    mux_9_4_64_1_1_U90 : component test_mux_9_4_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => arg2_r_7_reload,
        din8 => arg2_r_8_reload,
        din9 => sub_ln69_3_fu_592_p2,
        dout => tmp_3_fu_598_p11);

    mux_9_4_64_1_1_U91 : component test_mux_9_4_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => arg2_r_7_reload,
        din8 => arg2_r_8_reload,
        din9 => sub_ln69_4_fu_632_p2,
        dout => tmp_4_fu_638_p11);

    mux_9_4_64_1_1_U92 : component test_mux_9_4_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => arg2_r_7_reload,
        din8 => arg2_r_8_reload,
        din9 => sub_ln69_fu_682_p2,
        dout => tmp_6_fu_688_p11);

    mux_9_4_64_1_1_U93 : component test_mux_9_4_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => arg2_r_7_reload,
        din8 => arg2_r_8_reload,
        din9 => sub_ln69_1_fu_722_p2,
        dout => tmp_7_fu_728_p11);

    mux_9_4_64_1_1_U94 : component test_mux_9_4_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => arg2_r_reload,
        din1 => arg2_r_1_reload,
        din2 => arg2_r_2_reload,
        din3 => arg2_r_3_reload,
        din4 => arg2_r_4_reload,
        din5 => arg2_r_5_reload,
        din6 => arg2_r_6_reload,
        din7 => arg2_r_7_reload,
        din8 => arg2_r_8_reload,
        din9 => tmp_10_fu_778_p10,
        dout => tmp_10_fu_778_p11);

    flow_control_loop_pipe_sequential_init_U : component test_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    add11545_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add11545_fu_128 <= add5554_reload;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    add11545_fu_128 <= add_ln72_fu_858_p2;
                end if;
            end if; 
        end if;
    end process;

    add115_12546_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add115_12546_fu_132 <= add55_14055_reload;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    add115_12546_fu_132 <= add_ln72_1_fu_881_p2;
                end if;
            end if; 
        end if;
    end process;

    add115_149_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add115_149_fu_144 <= add55_158_reload;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    add115_149_fu_144 <= add_ln72_4_fu_950_p2;
                end if;
            end if; 
        end if;
    end process;

    add115_1_150_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add115_1_150_fu_148 <= add55_1_159_reload;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    add115_1_150_fu_148 <= add_ln72_5_fu_973_p2;
                end if;
            end if; 
        end if;
    end process;

    add115_1_251_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add115_1_251_fu_152 <= add55_1_260_reload;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    add115_1_251_fu_152 <= add_ln72_6_fu_996_p2;
                end if;
            end if; 
        end if;
    end process;

    add115_1_352_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add115_1_352_fu_156 <= add55_1_361_reload;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    add115_1_352_fu_156 <= add_ln72_7_fu_1019_p2;
                end if;
            end if; 
        end if;
    end process;

    add115_247_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add115_247_fu_136 <= add55_256_reload;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    add115_247_fu_136 <= add_ln72_2_fu_904_p2;
                end if;
            end if; 
        end if;
    end process;

    add115_348_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    add115_348_fu_140 <= add55_357_reload;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    add115_348_fu_140 <= add_ln72_3_fu_927_p2;
                end if;
            end if; 
        end if;
    end process;

    i_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((tmp_fu_450_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_160 <= add_ln59_fu_808_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_160 <= ap_const_lv4_7;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_450_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln72_1_reg_1196 <= icmp_ln72_1_fu_582_p2;
                icmp_ln72_2_reg_1206 <= icmp_ln72_2_fu_622_p2;
                icmp_ln72_3_reg_1216 <= icmp_ln72_3_fu_672_p2;
                icmp_ln72_4_reg_1226 <= icmp_ln72_4_fu_712_p2;
                icmp_ln72_5_reg_1236 <= icmp_ln72_5_fu_762_p2;
                icmp_ln72_6_reg_1246 <= icmp_ln72_6_fu_802_p2;
                icmp_ln72_reg_1186 <= icmp_ln72_fu_538_p2;
                tmp_10_reg_1241 <= tmp_10_fu_778_p11;
                tmp_1_reg_1191 <= tmp_1_fu_558_p11;
                tmp_2_reg_1181 <= tmp_2_fu_516_p10;
                tmp_3_reg_1201 <= tmp_3_fu_598_p11;
                tmp_4_reg_1211 <= tmp_4_fu_638_p11;
                tmp_6_reg_1221 <= tmp_6_fu_688_p11;
                tmp_7_reg_1231 <= tmp_7_fu_728_p11;
                tmp_9_reg_1171 <= tmp_9_fu_472_p10;
                tmp_s_reg_1176 <= tmp_s_fu_494_p10;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add11545_out <= add11545_fu_128;

    add11545_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_450_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_450_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add11545_out_ap_vld <= ap_const_logic_1;
        else 
            add11545_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add115_12546_out <= add115_12546_fu_132;

    add115_12546_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_450_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_450_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add115_12546_out_ap_vld <= ap_const_logic_1;
        else 
            add115_12546_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add115_149_out <= add115_149_fu_144;

    add115_149_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_450_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_450_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add115_149_out_ap_vld <= ap_const_logic_1;
        else 
            add115_149_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add115_1_150_out <= add115_1_150_fu_148;

    add115_1_150_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_450_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_450_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add115_1_150_out_ap_vld <= ap_const_logic_1;
        else 
            add115_1_150_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add115_1_251_out <= add115_1_251_fu_152;

    add115_1_251_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_450_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_450_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add115_1_251_out_ap_vld <= ap_const_logic_1;
        else 
            add115_1_251_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add115_1_352_out <= add115_1_352_fu_156;

    add115_1_352_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_450_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_450_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add115_1_352_out_ap_vld <= ap_const_logic_1;
        else 
            add115_1_352_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add115_247_out <= add115_247_fu_136;

    add115_247_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_450_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_450_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add115_247_out_ap_vld <= ap_const_logic_1;
        else 
            add115_247_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add115_348_out <= add115_348_fu_140;

    add115_348_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_450_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_450_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add115_348_out_ap_vld <= ap_const_logic_1;
        else 
            add115_348_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln59_fu_808_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv4_F));
    add_ln69_fu_552_p2 <= std_logic_vector(unsigned(select_ln69_fu_544_p3) + unsigned(zext_ln72_9_fu_468_p1));
    add_ln72_1_fu_881_p2 <= std_logic_vector(unsigned(and_ln72_fu_875_p2) + unsigned(add115_12546_fu_132));
    add_ln72_2_fu_904_p2 <= std_logic_vector(unsigned(and_ln72_1_fu_898_p2) + unsigned(add115_247_fu_136));
    add_ln72_3_fu_927_p2 <= std_logic_vector(unsigned(and_ln72_2_fu_921_p2) + unsigned(add115_348_fu_140));
    add_ln72_4_fu_950_p2 <= std_logic_vector(unsigned(and_ln72_3_fu_944_p2) + unsigned(add115_149_fu_144));
    add_ln72_5_fu_973_p2 <= std_logic_vector(unsigned(and_ln72_4_fu_967_p2) + unsigned(add115_1_150_fu_148));
    add_ln72_6_fu_996_p2 <= std_logic_vector(unsigned(and_ln72_5_fu_990_p2) + unsigned(add115_1_251_fu_152));
    add_ln72_7_fu_1019_p2 <= std_logic_vector(unsigned(and_ln72_6_fu_1013_p2) + unsigned(add115_1_352_fu_156));
    add_ln72_fu_858_p2 <= std_logic_vector(unsigned(mul_ln72_fu_370_p2) + unsigned(add11545_fu_128));
    and_ln72_1_fu_898_p2 <= (select_ln72_1_fu_891_p3 and mul_ln72_2_fu_378_p2);
    and_ln72_2_fu_921_p2 <= (select_ln72_2_fu_914_p3 and mul_ln72_3_fu_382_p2);
    and_ln72_3_fu_944_p2 <= (select_ln72_3_fu_937_p3 and mul_ln72_4_fu_386_p2);
    and_ln72_4_fu_967_p2 <= (select_ln72_4_fu_960_p3 and mul_ln72_5_fu_390_p2);
    and_ln72_5_fu_990_p2 <= (select_ln72_5_fu_983_p3 and mul_ln72_6_fu_394_p2);
    and_ln72_6_fu_1013_p2 <= (select_ln72_6_fu_1006_p3 and mul_ln72_7_fu_398_p2);
    and_ln72_fu_875_p2 <= (select_ln72_fu_868_p3 and mul_ln72_1_fu_374_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, tmp_fu_450_p3)
    begin
        if (((tmp_fu_450_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_160)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv4_7;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_160;
        end if; 
    end process;

    icmp_ln72_1_fu_582_p2 <= "1" when (signed(ap_sig_allocacmp_i_1) < signed(ap_const_lv4_6)) else "0";
    icmp_ln72_2_fu_622_p2 <= "1" when (signed(ap_sig_allocacmp_i_1) < signed(ap_const_lv4_5)) else "0";
    icmp_ln72_3_fu_672_p2 <= "0" when (tmp_5_fu_662_p4 = ap_const_lv2_1) else "1";
    icmp_ln72_4_fu_712_p2 <= "1" when (signed(ap_sig_allocacmp_i_1) < signed(ap_const_lv4_3)) else "0";
    icmp_ln72_5_fu_762_p2 <= "1" when (signed(tmp_8_fu_752_p4) < signed(ap_const_lv3_1)) else "0";
    icmp_ln72_6_fu_802_p2 <= "1" when (signed(ap_sig_allocacmp_i_1) < signed(ap_const_lv4_1)) else "0";
    icmp_ln72_fu_538_p2 <= "0" when (ap_sig_allocacmp_i_1 = ap_const_lv4_7) else "1";
    mul_ln72_1_fu_374_p0 <= mul_ln72_1_fu_374_p00(64 - 1 downto 0);
    mul_ln72_1_fu_374_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_1181),128));
    mul_ln72_1_fu_374_p1 <= zext_ln72_fu_843_p1(64 - 1 downto 0);
    mul_ln72_2_fu_378_p0 <= mul_ln72_2_fu_378_p00(64 - 1 downto 0);
    mul_ln72_2_fu_378_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_1191),128));
    mul_ln72_2_fu_378_p1 <= zext_ln72_fu_843_p1(64 - 1 downto 0);
    mul_ln72_3_fu_382_p0 <= mul_ln72_3_fu_382_p00(64 - 1 downto 0);
    mul_ln72_3_fu_382_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_1201),128));
    mul_ln72_3_fu_382_p1 <= zext_ln72_fu_843_p1(64 - 1 downto 0);
    mul_ln72_4_fu_386_p0 <= mul_ln72_4_fu_386_p00(64 - 1 downto 0);
    mul_ln72_4_fu_386_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_1211),128));
    mul_ln72_4_fu_386_p1 <= zext_ln72_fu_843_p1(64 - 1 downto 0);
    mul_ln72_5_fu_390_p0 <= mul_ln72_5_fu_390_p00(64 - 1 downto 0);
    mul_ln72_5_fu_390_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_1221),128));
    mul_ln72_5_fu_390_p1 <= zext_ln72_fu_843_p1(64 - 1 downto 0);
    mul_ln72_6_fu_394_p0 <= mul_ln72_6_fu_394_p00(64 - 1 downto 0);
    mul_ln72_6_fu_394_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_1231),128));
    mul_ln72_6_fu_394_p1 <= zext_ln72_fu_843_p1(64 - 1 downto 0);
    mul_ln72_7_fu_398_p0 <= mul_ln72_7_fu_398_p00(64 - 1 downto 0);
    mul_ln72_7_fu_398_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_1241),128));
    mul_ln72_7_fu_398_p1 <= zext_ln72_fu_843_p1(64 - 1 downto 0);
    mul_ln72_fu_370_p0 <= mul_ln72_fu_370_p00(64 - 1 downto 0);
    mul_ln72_fu_370_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_1176),128));
    mul_ln72_fu_370_p1 <= zext_ln72_fu_843_p1(64 - 1 downto 0);
    select_ln69_fu_544_p3 <= 
        ap_const_lv4_E when (icmp_ln72_fu_538_p2(0) = '1') else 
        ap_const_lv4_F;
    select_ln72_1_fu_891_p3 <= 
        ap_const_lv128_lc_2 when (icmp_ln72_1_reg_1196(0) = '1') else 
        ap_const_lv128_lc_1;
    select_ln72_2_fu_914_p3 <= 
        ap_const_lv128_lc_2 when (icmp_ln72_2_reg_1206(0) = '1') else 
        ap_const_lv128_lc_1;
    select_ln72_3_fu_937_p3 <= 
        ap_const_lv128_lc_2 when (icmp_ln72_3_reg_1216(0) = '1') else 
        ap_const_lv128_lc_1;
    select_ln72_4_fu_960_p3 <= 
        ap_const_lv128_lc_2 when (icmp_ln72_4_reg_1226(0) = '1') else 
        ap_const_lv128_lc_1;
    select_ln72_5_fu_983_p3 <= 
        ap_const_lv128_lc_2 when (icmp_ln72_5_reg_1236(0) = '1') else 
        ap_const_lv128_lc_1;
    select_ln72_6_fu_1006_p3 <= 
        ap_const_lv128_lc_2 when (icmp_ln72_6_reg_1246(0) = '1') else 
        ap_const_lv128_lc_1;
    select_ln72_fu_868_p3 <= 
        ap_const_lv128_lc_2 when (icmp_ln72_reg_1186(0) = '1') else 
        ap_const_lv128_lc_1;
    sub_ln69_1_fu_722_p2 <= std_logic_vector(unsigned(sub_ln69_fu_682_p2) - unsigned(zext_ln73_3_fu_718_p1));
    sub_ln69_3_fu_592_p2 <= std_logic_vector(unsigned(add_ln69_fu_552_p2) - unsigned(zext_ln73_fu_588_p1));
    sub_ln69_4_fu_632_p2 <= std_logic_vector(unsigned(sub_ln69_3_fu_592_p2) - unsigned(zext_ln73_1_fu_628_p1));
    sub_ln69_fu_682_p2 <= std_logic_vector(unsigned(sub_ln69_4_fu_632_p2) - unsigned(zext_ln73_2_fu_678_p1));
    tmp_10_fu_778_p10 <= std_logic_vector(unsigned(sub_ln69_1_fu_722_p2) - unsigned(zext_ln73_4_fu_768_p1));
    tmp_5_fu_662_p4 <= ap_sig_allocacmp_i_1(3 downto 2);
    tmp_8_fu_752_p4 <= ap_sig_allocacmp_i_1(3 downto 1);
    tmp_fu_450_p3 <= ap_sig_allocacmp_i_1(3 downto 3);
    trunc_ln34_fu_458_p1 <= ap_sig_allocacmp_i_1(3 - 1 downto 0);
    xor_ln62_fu_462_p2 <= (trunc_ln34_fu_458_p1 xor ap_const_lv3_7);
    zext_ln72_9_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln62_fu_462_p2),4));
    zext_ln72_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_1171),128));
    zext_ln73_1_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln72_2_fu_622_p2),4));
    zext_ln73_2_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln72_3_fu_672_p2),4));
    zext_ln73_3_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln72_4_fu_712_p2),4));
    zext_ln73_4_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln72_5_fu_762_p2),4));
    zext_ln73_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln72_1_fu_582_p2),4));
end behav;
