// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_59_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add55_1_361_reload,
        add55_1_260_reload,
        add55_1_159_reload,
        add55_158_reload,
        add55_357_reload,
        add55_256_reload,
        add55_14055_reload,
        add5554_reload,
        arg1_r_reload,
        arg1_r_1_reload,
        arg1_r_2_reload,
        arg1_r_3_reload,
        arg1_r_4_reload,
        arg1_r_5_reload,
        arg1_r_6_reload,
        arg1_r_7_reload,
        arg2_r_reload,
        arg2_r_1_reload,
        arg2_r_2_reload,
        arg2_r_3_reload,
        arg2_r_4_reload,
        arg2_r_5_reload,
        arg2_r_6_reload,
        arg2_r_7_reload,
        arg2_r_8_reload,
        add115_1_352_out,
        add115_1_352_out_ap_vld,
        add115_1_251_out,
        add115_1_251_out_ap_vld,
        add115_1_150_out,
        add115_1_150_out_ap_vld,
        add115_149_out,
        add115_149_out_ap_vld,
        add115_348_out,
        add115_348_out_ap_vld,
        add115_247_out,
        add115_247_out_ap_vld,
        add115_12546_out,
        add115_12546_out_ap_vld,
        add11545_out,
        add11545_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] add55_1_361_reload;
input  [127:0] add55_1_260_reload;
input  [127:0] add55_1_159_reload;
input  [127:0] add55_158_reload;
input  [127:0] add55_357_reload;
input  [127:0] add55_256_reload;
input  [127:0] add55_14055_reload;
input  [127:0] add5554_reload;
input  [63:0] arg1_r_reload;
input  [63:0] arg1_r_1_reload;
input  [63:0] arg1_r_2_reload;
input  [63:0] arg1_r_3_reload;
input  [63:0] arg1_r_4_reload;
input  [63:0] arg1_r_5_reload;
input  [63:0] arg1_r_6_reload;
input  [63:0] arg1_r_7_reload;
input  [63:0] arg2_r_reload;
input  [63:0] arg2_r_1_reload;
input  [63:0] arg2_r_2_reload;
input  [63:0] arg2_r_3_reload;
input  [63:0] arg2_r_4_reload;
input  [63:0] arg2_r_5_reload;
input  [63:0] arg2_r_6_reload;
input  [63:0] arg2_r_7_reload;
input  [63:0] arg2_r_8_reload;
output  [127:0] add115_1_352_out;
output   add115_1_352_out_ap_vld;
output  [127:0] add115_1_251_out;
output   add115_1_251_out_ap_vld;
output  [127:0] add115_1_150_out;
output   add115_1_150_out_ap_vld;
output  [127:0] add115_149_out;
output   add115_149_out_ap_vld;
output  [127:0] add115_348_out;
output   add115_348_out_ap_vld;
output  [127:0] add115_247_out;
output   add115_247_out_ap_vld;
output  [127:0] add115_12546_out;
output   add115_12546_out_ap_vld;
output  [127:0] add11545_out;
output   add11545_out_ap_vld;

reg ap_idle;
reg add115_1_352_out_ap_vld;
reg add115_1_251_out_ap_vld;
reg add115_1_150_out_ap_vld;
reg add115_149_out_ap_vld;
reg add115_348_out_ap_vld;
reg add115_247_out_ap_vld;
reg add115_12546_out_ap_vld;
reg add11545_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_fu_450_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] tmp_9_fu_472_p10;
reg   [63:0] tmp_9_reg_1171;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] tmp_s_fu_494_p10;
reg   [63:0] tmp_s_reg_1176;
wire   [63:0] tmp_2_fu_516_p10;
reg   [63:0] tmp_2_reg_1181;
wire   [0:0] icmp_ln72_fu_538_p2;
reg   [0:0] icmp_ln72_reg_1186;
wire   [63:0] tmp_1_fu_558_p11;
reg   [63:0] tmp_1_reg_1191;
wire   [0:0] icmp_ln72_1_fu_582_p2;
reg   [0:0] icmp_ln72_1_reg_1196;
wire   [63:0] tmp_3_fu_598_p11;
reg   [63:0] tmp_3_reg_1201;
wire   [0:0] icmp_ln72_2_fu_622_p2;
reg   [0:0] icmp_ln72_2_reg_1206;
wire   [63:0] tmp_4_fu_638_p11;
reg   [63:0] tmp_4_reg_1211;
wire   [0:0] icmp_ln72_3_fu_672_p2;
reg   [0:0] icmp_ln72_3_reg_1216;
wire   [63:0] tmp_6_fu_688_p11;
reg   [63:0] tmp_6_reg_1221;
wire   [0:0] icmp_ln72_4_fu_712_p2;
reg   [0:0] icmp_ln72_4_reg_1226;
wire   [63:0] tmp_7_fu_728_p11;
reg   [63:0] tmp_7_reg_1231;
wire   [0:0] icmp_ln72_5_fu_762_p2;
reg   [0:0] icmp_ln72_5_reg_1236;
wire   [63:0] tmp_10_fu_778_p11;
reg   [63:0] tmp_10_reg_1241;
wire   [0:0] icmp_ln72_6_fu_802_p2;
reg   [0:0] icmp_ln72_6_reg_1246;
reg   [127:0] add11545_fu_128;
wire   [127:0] add_ln72_fu_858_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [127:0] add115_12546_fu_132;
wire   [127:0] add_ln72_1_fu_881_p2;
reg   [127:0] add115_247_fu_136;
wire   [127:0] add_ln72_2_fu_904_p2;
reg   [127:0] add115_348_fu_140;
wire   [127:0] add_ln72_3_fu_927_p2;
reg   [127:0] add115_149_fu_144;
wire   [127:0] add_ln72_4_fu_950_p2;
reg   [127:0] add115_1_150_fu_148;
wire   [127:0] add_ln72_5_fu_973_p2;
reg   [127:0] add115_1_251_fu_152;
wire   [127:0] add_ln72_6_fu_996_p2;
reg   [127:0] add115_1_352_fu_156;
wire   [127:0] add_ln72_7_fu_1019_p2;
reg   [3:0] i_fu_160;
wire   [3:0] add_ln59_fu_808_p2;
reg   [3:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] mul_ln72_fu_370_p0;
wire   [63:0] mul_ln72_fu_370_p1;
wire   [127:0] zext_ln72_fu_843_p1;
wire   [63:0] mul_ln72_1_fu_374_p0;
wire   [63:0] mul_ln72_1_fu_374_p1;
wire   [63:0] mul_ln72_2_fu_378_p0;
wire   [63:0] mul_ln72_2_fu_378_p1;
wire   [63:0] mul_ln72_3_fu_382_p0;
wire   [63:0] mul_ln72_3_fu_382_p1;
wire   [63:0] mul_ln72_4_fu_386_p0;
wire   [63:0] mul_ln72_4_fu_386_p1;
wire   [63:0] mul_ln72_5_fu_390_p0;
wire   [63:0] mul_ln72_5_fu_390_p1;
wire   [63:0] mul_ln72_6_fu_394_p0;
wire   [63:0] mul_ln72_6_fu_394_p1;
wire   [63:0] mul_ln72_7_fu_398_p0;
wire   [63:0] mul_ln72_7_fu_398_p1;
wire   [2:0] trunc_ln34_fu_458_p1;
wire   [2:0] xor_ln62_fu_462_p2;
wire   [3:0] select_ln69_fu_544_p3;
wire   [3:0] zext_ln72_9_fu_468_p1;
wire   [3:0] add_ln69_fu_552_p2;
wire   [3:0] zext_ln73_fu_588_p1;
wire   [3:0] sub_ln69_3_fu_592_p2;
wire   [3:0] zext_ln73_1_fu_628_p1;
wire   [3:0] sub_ln69_4_fu_632_p2;
wire   [1:0] tmp_5_fu_662_p4;
wire   [3:0] zext_ln73_2_fu_678_p1;
wire   [3:0] sub_ln69_fu_682_p2;
wire   [3:0] zext_ln73_3_fu_718_p1;
wire   [3:0] sub_ln69_1_fu_722_p2;
wire   [2:0] tmp_8_fu_752_p4;
wire   [3:0] zext_ln73_4_fu_768_p1;
wire   [3:0] tmp_10_fu_778_p10;
wire   [127:0] mul_ln72_fu_370_p2;
wire   [127:0] mul_ln72_1_fu_374_p2;
wire   [127:0] select_ln72_fu_868_p3;
wire   [127:0] and_ln72_fu_875_p2;
wire   [127:0] mul_ln72_2_fu_378_p2;
wire   [127:0] select_ln72_1_fu_891_p3;
wire   [127:0] and_ln72_1_fu_898_p2;
wire   [127:0] mul_ln72_3_fu_382_p2;
wire   [127:0] select_ln72_2_fu_914_p3;
wire   [127:0] and_ln72_2_fu_921_p2;
wire   [127:0] mul_ln72_4_fu_386_p2;
wire   [127:0] select_ln72_3_fu_937_p3;
wire   [127:0] and_ln72_3_fu_944_p2;
wire   [127:0] mul_ln72_5_fu_390_p2;
wire   [127:0] select_ln72_4_fu_960_p3;
wire   [127:0] and_ln72_4_fu_967_p2;
wire   [127:0] mul_ln72_6_fu_394_p2;
wire   [127:0] select_ln72_5_fu_983_p3;
wire   [127:0] and_ln72_5_fu_990_p2;
wire   [127:0] mul_ln72_7_fu_398_p2;
wire   [127:0] select_ln72_6_fu_1006_p3;
wire   [127:0] and_ln72_6_fu_1013_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [127:0] mul_ln72_1_fu_374_p00;
wire   [127:0] mul_ln72_2_fu_378_p00;
wire   [127:0] mul_ln72_3_fu_382_p00;
wire   [127:0] mul_ln72_4_fu_386_p00;
wire   [127:0] mul_ln72_5_fu_390_p00;
wire   [127:0] mul_ln72_6_fu_394_p00;
wire   [127:0] mul_ln72_7_fu_398_p00;
wire   [127:0] mul_ln72_fu_370_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U78(
    .din0(mul_ln72_fu_370_p0),
    .din1(mul_ln72_fu_370_p1),
    .dout(mul_ln72_fu_370_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U79(
    .din0(mul_ln72_1_fu_374_p0),
    .din1(mul_ln72_1_fu_374_p1),
    .dout(mul_ln72_1_fu_374_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U80(
    .din0(mul_ln72_2_fu_378_p0),
    .din1(mul_ln72_2_fu_378_p1),
    .dout(mul_ln72_2_fu_378_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U81(
    .din0(mul_ln72_3_fu_382_p0),
    .din1(mul_ln72_3_fu_382_p1),
    .dout(mul_ln72_3_fu_382_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U82(
    .din0(mul_ln72_4_fu_386_p0),
    .din1(mul_ln72_4_fu_386_p1),
    .dout(mul_ln72_4_fu_386_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U83(
    .din0(mul_ln72_5_fu_390_p0),
    .din1(mul_ln72_5_fu_390_p1),
    .dout(mul_ln72_5_fu_390_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U84(
    .din0(mul_ln72_6_fu_394_p0),
    .din1(mul_ln72_6_fu_394_p1),
    .dout(mul_ln72_6_fu_394_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U85(
    .din0(mul_ln72_7_fu_398_p0),
    .din1(mul_ln72_7_fu_398_p1),
    .dout(mul_ln72_7_fu_398_p2)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U86(
    .din0(arg1_r_reload),
    .din1(arg1_r_1_reload),
    .din2(arg1_r_2_reload),
    .din3(arg1_r_3_reload),
    .din4(arg1_r_4_reload),
    .din5(arg1_r_5_reload),
    .din6(arg1_r_6_reload),
    .din7(arg1_r_7_reload),
    .din8(trunc_ln34_fu_458_p1),
    .dout(tmp_9_fu_472_p10)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U87(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(xor_ln62_fu_462_p2),
    .dout(tmp_s_fu_494_p10)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U88(
    .din0(64'd0),
    .din1(arg2_r_reload),
    .din2(arg2_r_1_reload),
    .din3(arg2_r_2_reload),
    .din4(arg2_r_3_reload),
    .din5(arg2_r_4_reload),
    .din6(arg2_r_5_reload),
    .din7(arg2_r_6_reload),
    .din8(xor_ln62_fu_462_p2),
    .dout(tmp_2_fu_516_p10)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U89(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(add_ln69_fu_552_p2),
    .dout(tmp_1_fu_558_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U90(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln69_3_fu_592_p2),
    .dout(tmp_3_fu_598_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U91(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln69_4_fu_632_p2),
    .dout(tmp_4_fu_638_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U92(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln69_fu_682_p2),
    .dout(tmp_6_fu_688_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U93(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(sub_ln69_1_fu_722_p2),
    .dout(tmp_7_fu_728_p11)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U94(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(arg2_r_8_reload),
    .din9(tmp_10_fu_778_p10),
    .dout(tmp_10_fu_778_p11)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add11545_fu_128 <= add5554_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add11545_fu_128 <= add_ln72_fu_858_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add115_12546_fu_132 <= add55_14055_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add115_12546_fu_132 <= add_ln72_1_fu_881_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add115_149_fu_144 <= add55_158_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add115_149_fu_144 <= add_ln72_4_fu_950_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add115_1_150_fu_148 <= add55_1_159_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add115_1_150_fu_148 <= add_ln72_5_fu_973_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add115_1_251_fu_152 <= add55_1_260_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add115_1_251_fu_152 <= add_ln72_6_fu_996_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add115_1_352_fu_156 <= add55_1_361_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add115_1_352_fu_156 <= add_ln72_7_fu_1019_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add115_247_fu_136 <= add55_256_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add115_247_fu_136 <= add_ln72_2_fu_904_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add115_348_fu_140 <= add55_357_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add115_348_fu_140 <= add_ln72_3_fu_927_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((tmp_fu_450_p3 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_160 <= add_ln59_fu_808_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_160 <= 4'd7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_450_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln72_1_reg_1196 <= icmp_ln72_1_fu_582_p2;
        icmp_ln72_2_reg_1206 <= icmp_ln72_2_fu_622_p2;
        icmp_ln72_3_reg_1216 <= icmp_ln72_3_fu_672_p2;
        icmp_ln72_4_reg_1226 <= icmp_ln72_4_fu_712_p2;
        icmp_ln72_5_reg_1236 <= icmp_ln72_5_fu_762_p2;
        icmp_ln72_6_reg_1246 <= icmp_ln72_6_fu_802_p2;
        icmp_ln72_reg_1186 <= icmp_ln72_fu_538_p2;
        tmp_10_reg_1241 <= tmp_10_fu_778_p11;
        tmp_1_reg_1191 <= tmp_1_fu_558_p11;
        tmp_2_reg_1181 <= tmp_2_fu_516_p10;
        tmp_3_reg_1201 <= tmp_3_fu_598_p11;
        tmp_4_reg_1211 <= tmp_4_fu_638_p11;
        tmp_6_reg_1221 <= tmp_6_fu_688_p11;
        tmp_7_reg_1231 <= tmp_7_fu_728_p11;
        tmp_9_reg_1171 <= tmp_9_fu_472_p10;
        tmp_s_reg_1176 <= tmp_s_fu_494_p10;
    end
end

always @ (*) begin
    if (((tmp_fu_450_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add11545_out_ap_vld = 1'b1;
    end else begin
        add11545_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_450_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add115_12546_out_ap_vld = 1'b1;
    end else begin
        add115_12546_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_450_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add115_149_out_ap_vld = 1'b1;
    end else begin
        add115_149_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_450_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add115_1_150_out_ap_vld = 1'b1;
    end else begin
        add115_1_150_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_450_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add115_1_251_out_ap_vld = 1'b1;
    end else begin
        add115_1_251_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_450_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add115_1_352_out_ap_vld = 1'b1;
    end else begin
        add115_1_352_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_450_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add115_247_out_ap_vld = 1'b1;
    end else begin
        add115_247_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_450_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add115_348_out_ap_vld = 1'b1;
    end else begin
        add115_348_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_450_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 4'd7;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_160;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add11545_out = add11545_fu_128;

assign add115_12546_out = add115_12546_fu_132;

assign add115_149_out = add115_149_fu_144;

assign add115_1_150_out = add115_1_150_fu_148;

assign add115_1_251_out = add115_1_251_fu_152;

assign add115_1_352_out = add115_1_352_fu_156;

assign add115_247_out = add115_247_fu_136;

assign add115_348_out = add115_348_fu_140;

assign add_ln59_fu_808_p2 = ($signed(ap_sig_allocacmp_i_1) + $signed(4'd15));

assign add_ln69_fu_552_p2 = (select_ln69_fu_544_p3 + zext_ln72_9_fu_468_p1);

assign add_ln72_1_fu_881_p2 = (and_ln72_fu_875_p2 + add115_12546_fu_132);

assign add_ln72_2_fu_904_p2 = (and_ln72_1_fu_898_p2 + add115_247_fu_136);

assign add_ln72_3_fu_927_p2 = (and_ln72_2_fu_921_p2 + add115_348_fu_140);

assign add_ln72_4_fu_950_p2 = (and_ln72_3_fu_944_p2 + add115_149_fu_144);

assign add_ln72_5_fu_973_p2 = (and_ln72_4_fu_967_p2 + add115_1_150_fu_148);

assign add_ln72_6_fu_996_p2 = (and_ln72_5_fu_990_p2 + add115_1_251_fu_152);

assign add_ln72_7_fu_1019_p2 = (and_ln72_6_fu_1013_p2 + add115_1_352_fu_156);

assign add_ln72_fu_858_p2 = (mul_ln72_fu_370_p2 + add11545_fu_128);

assign and_ln72_1_fu_898_p2 = (select_ln72_1_fu_891_p3 & mul_ln72_2_fu_378_p2);

assign and_ln72_2_fu_921_p2 = (select_ln72_2_fu_914_p3 & mul_ln72_3_fu_382_p2);

assign and_ln72_3_fu_944_p2 = (select_ln72_3_fu_937_p3 & mul_ln72_4_fu_386_p2);

assign and_ln72_4_fu_967_p2 = (select_ln72_4_fu_960_p3 & mul_ln72_5_fu_390_p2);

assign and_ln72_5_fu_990_p2 = (select_ln72_5_fu_983_p3 & mul_ln72_6_fu_394_p2);

assign and_ln72_6_fu_1013_p2 = (select_ln72_6_fu_1006_p3 & mul_ln72_7_fu_398_p2);

assign and_ln72_fu_875_p2 = (select_ln72_fu_868_p3 & mul_ln72_1_fu_374_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln72_1_fu_582_p2 = (($signed(ap_sig_allocacmp_i_1) < $signed(4'd6)) ? 1'b1 : 1'b0);

assign icmp_ln72_2_fu_622_p2 = (($signed(ap_sig_allocacmp_i_1) < $signed(4'd5)) ? 1'b1 : 1'b0);

assign icmp_ln72_3_fu_672_p2 = ((tmp_5_fu_662_p4 != 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln72_4_fu_712_p2 = (($signed(ap_sig_allocacmp_i_1) < $signed(4'd3)) ? 1'b1 : 1'b0);

assign icmp_ln72_5_fu_762_p2 = (($signed(tmp_8_fu_752_p4) < $signed(3'd1)) ? 1'b1 : 1'b0);

assign icmp_ln72_6_fu_802_p2 = (($signed(ap_sig_allocacmp_i_1) < $signed(4'd1)) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_538_p2 = ((ap_sig_allocacmp_i_1 != 4'd7) ? 1'b1 : 1'b0);

assign mul_ln72_1_fu_374_p0 = mul_ln72_1_fu_374_p00;

assign mul_ln72_1_fu_374_p00 = tmp_2_reg_1181;

assign mul_ln72_1_fu_374_p1 = zext_ln72_fu_843_p1;

assign mul_ln72_2_fu_378_p0 = mul_ln72_2_fu_378_p00;

assign mul_ln72_2_fu_378_p00 = tmp_1_reg_1191;

assign mul_ln72_2_fu_378_p1 = zext_ln72_fu_843_p1;

assign mul_ln72_3_fu_382_p0 = mul_ln72_3_fu_382_p00;

assign mul_ln72_3_fu_382_p00 = tmp_3_reg_1201;

assign mul_ln72_3_fu_382_p1 = zext_ln72_fu_843_p1;

assign mul_ln72_4_fu_386_p0 = mul_ln72_4_fu_386_p00;

assign mul_ln72_4_fu_386_p00 = tmp_4_reg_1211;

assign mul_ln72_4_fu_386_p1 = zext_ln72_fu_843_p1;

assign mul_ln72_5_fu_390_p0 = mul_ln72_5_fu_390_p00;

assign mul_ln72_5_fu_390_p00 = tmp_6_reg_1221;

assign mul_ln72_5_fu_390_p1 = zext_ln72_fu_843_p1;

assign mul_ln72_6_fu_394_p0 = mul_ln72_6_fu_394_p00;

assign mul_ln72_6_fu_394_p00 = tmp_7_reg_1231;

assign mul_ln72_6_fu_394_p1 = zext_ln72_fu_843_p1;

assign mul_ln72_7_fu_398_p0 = mul_ln72_7_fu_398_p00;

assign mul_ln72_7_fu_398_p00 = tmp_10_reg_1241;

assign mul_ln72_7_fu_398_p1 = zext_ln72_fu_843_p1;

assign mul_ln72_fu_370_p0 = mul_ln72_fu_370_p00;

assign mul_ln72_fu_370_p00 = tmp_s_reg_1176;

assign mul_ln72_fu_370_p1 = zext_ln72_fu_843_p1;

assign select_ln69_fu_544_p3 = ((icmp_ln72_fu_538_p2[0:0] == 1'b1) ? 4'd14 : 4'd15);

assign select_ln72_1_fu_891_p3 = ((icmp_ln72_1_reg_1196[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln72_2_fu_914_p3 = ((icmp_ln72_2_reg_1206[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln72_3_fu_937_p3 = ((icmp_ln72_3_reg_1216[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln72_4_fu_960_p3 = ((icmp_ln72_4_reg_1226[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln72_5_fu_983_p3 = ((icmp_ln72_5_reg_1236[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln72_6_fu_1006_p3 = ((icmp_ln72_6_reg_1246[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln72_fu_868_p3 = ((icmp_ln72_reg_1186[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign sub_ln69_1_fu_722_p2 = (sub_ln69_fu_682_p2 - zext_ln73_3_fu_718_p1);

assign sub_ln69_3_fu_592_p2 = (add_ln69_fu_552_p2 - zext_ln73_fu_588_p1);

assign sub_ln69_4_fu_632_p2 = (sub_ln69_3_fu_592_p2 - zext_ln73_1_fu_628_p1);

assign sub_ln69_fu_682_p2 = (sub_ln69_4_fu_632_p2 - zext_ln73_2_fu_678_p1);

assign tmp_10_fu_778_p10 = (sub_ln69_1_fu_722_p2 - zext_ln73_4_fu_768_p1);

assign tmp_5_fu_662_p4 = {{ap_sig_allocacmp_i_1[3:2]}};

assign tmp_8_fu_752_p4 = {{ap_sig_allocacmp_i_1[3:1]}};

assign tmp_fu_450_p3 = ap_sig_allocacmp_i_1[32'd3];

assign trunc_ln34_fu_458_p1 = ap_sig_allocacmp_i_1[2:0];

assign xor_ln62_fu_462_p2 = (trunc_ln34_fu_458_p1 ^ 3'd7);

assign zext_ln72_9_fu_468_p1 = xor_ln62_fu_462_p2;

assign zext_ln72_fu_843_p1 = tmp_9_reg_1171;

assign zext_ln73_1_fu_628_p1 = icmp_ln72_2_fu_622_p2;

assign zext_ln73_2_fu_678_p1 = icmp_ln72_3_fu_672_p2;

assign zext_ln73_3_fu_718_p1 = icmp_ln72_4_fu_712_p2;

assign zext_ln73_4_fu_768_p1 = icmp_ln72_5_fu_762_p2;

assign zext_ln73_fu_588_p1 = icmp_ln72_1_fu_582_p2;

endmodule //test_test_Pipeline_VITIS_LOOP_59_5
