// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_36_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arg1_r_1_reload,
        arg1_r_2_reload,
        arg1_r_3_reload,
        arg1_r_4_reload,
        arg1_r_5_reload,
        arg1_r_6_reload,
        arg1_r_7_reload,
        arg1_r_8_reload,
        arg2_r_reload,
        arg2_r_1_reload,
        arg2_r_2_reload,
        arg2_r_3_reload,
        arg2_r_4_reload,
        arg2_r_5_reload,
        arg2_r_6_reload,
        arg2_r_7_reload,
        conv45,
        arg2_r_7_cast,
        arg2_r_8_cast,
        arg2_r_6_cast,
        arg2_r_5_cast,
        arg2_r_4_cast,
        arg2_r_3_cast,
        arg2_r_2_cast,
        arg2_r_1_cast,
        add55_746_out,
        add55_746_out_ap_vld,
        add55_645_out,
        add55_645_out_ap_vld,
        add55_544_out,
        add55_544_out_ap_vld,
        add55_443_out,
        add55_443_out_ap_vld,
        add55_342_out,
        add55_342_out_ap_vld,
        add55_241_out,
        add55_241_out_ap_vld,
        add55_140_out,
        add55_140_out_ap_vld,
        add5539_out,
        add5539_out_ap_vld,
        add3038_out,
        add3038_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] arg1_r_1_reload;
input  [63:0] arg1_r_2_reload;
input  [63:0] arg1_r_3_reload;
input  [63:0] arg1_r_4_reload;
input  [63:0] arg1_r_5_reload;
input  [63:0] arg1_r_6_reload;
input  [63:0] arg1_r_7_reload;
input  [63:0] arg1_r_8_reload;
input  [63:0] arg2_r_reload;
input  [63:0] arg2_r_1_reload;
input  [63:0] arg2_r_2_reload;
input  [63:0] arg2_r_3_reload;
input  [63:0] arg2_r_4_reload;
input  [63:0] arg2_r_5_reload;
input  [63:0] arg2_r_6_reload;
input  [63:0] arg2_r_7_reload;
input  [63:0] conv45;
input  [62:0] arg2_r_7_cast;
input  [62:0] arg2_r_8_cast;
input  [62:0] arg2_r_6_cast;
input  [62:0] arg2_r_5_cast;
input  [62:0] arg2_r_4_cast;
input  [62:0] arg2_r_3_cast;
input  [62:0] arg2_r_2_cast;
input  [62:0] arg2_r_1_cast;
output  [127:0] add55_746_out;
output   add55_746_out_ap_vld;
output  [127:0] add55_645_out;
output   add55_645_out_ap_vld;
output  [127:0] add55_544_out;
output   add55_544_out_ap_vld;
output  [127:0] add55_443_out;
output   add55_443_out_ap_vld;
output  [127:0] add55_342_out;
output   add55_342_out_ap_vld;
output  [127:0] add55_241_out;
output   add55_241_out_ap_vld;
output  [127:0] add55_140_out;
output   add55_140_out_ap_vld;
output  [127:0] add5539_out;
output   add5539_out_ap_vld;
output  [127:0] add3038_out;
output   add3038_out_ap_vld;

reg ap_idle;
reg add55_746_out_ap_vld;
reg add55_645_out_ap_vld;
reg add55_544_out_ap_vld;
reg add55_443_out_ap_vld;
reg add55_342_out_ap_vld;
reg add55_241_out_ap_vld;
reg add55_140_out_ap_vld;
reg add5539_out_ap_vld;
reg add3038_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln36_fu_484_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [127:0] conv45_cast_fu_427_p1;
reg   [127:0] conv45_cast_reg_1289;
wire   [63:0] tmp_fu_500_p11;
reg   [63:0] tmp_reg_1297;
wire   [63:0] tmp_1_fu_524_p10;
reg   [63:0] tmp_1_reg_1302;
reg   [0:0] tmp_9_reg_1307;
wire   [0:0] tmp_10_fu_554_p3;
reg   [0:0] tmp_10_reg_1312;
wire   [0:0] icmp_ln50_fu_562_p2;
reg   [0:0] icmp_ln50_reg_1317;
wire   [62:0] tmp_3_fu_586_p11;
reg   [62:0] tmp_3_reg_1322;
wire   [0:0] icmp_ln50_1_fu_610_p2;
reg   [0:0] icmp_ln50_1_reg_1327;
wire   [62:0] tmp_4_fu_626_p11;
reg   [62:0] tmp_4_reg_1332;
wire   [0:0] icmp_ln50_2_fu_650_p2;
reg   [0:0] icmp_ln50_2_reg_1337;
wire   [62:0] tmp_5_fu_666_p11;
reg   [62:0] tmp_5_reg_1342;
wire   [0:0] icmp_ln50_3_fu_700_p2;
reg   [0:0] icmp_ln50_3_reg_1347;
wire   [62:0] tmp_6_fu_716_p11;
reg   [62:0] tmp_6_reg_1352;
wire   [0:0] icmp_ln50_4_fu_740_p2;
reg   [0:0] icmp_ln50_4_reg_1357;
wire   [62:0] tmp_7_fu_756_p11;
reg   [62:0] tmp_7_reg_1362;
wire   [0:0] icmp_ln50_5_fu_790_p2;
reg   [0:0] icmp_ln50_5_reg_1367;
wire   [62:0] tmp_8_fu_806_p11;
reg   [62:0] tmp_8_reg_1372;
reg   [127:0] add3038_fu_138;
wire   [127:0] add_ln43_fu_884_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [127:0] arr_8_fu_142;
wire   [127:0] arr_fu_903_p2;
reg   [127:0] arr_9_fu_146;
wire   [127:0] arr_16_fu_940_p2;
reg   [127:0] arr_10_fu_150;
wire   [127:0] arr_17_fu_971_p2;
reg   [127:0] arr_11_fu_154;
wire   [127:0] arr_18_fu_1002_p2;
reg   [127:0] arr_12_fu_158;
wire   [127:0] arr_19_fu_1033_p2;
reg   [127:0] arr_13_fu_162;
wire   [127:0] arr_20_fu_1064_p2;
reg   [127:0] arr_14_fu_166;
wire   [127:0] arr_21_fu_1095_p2;
reg   [127:0] arr_15_fu_170;
wire   [127:0] arr_22_fu_1113_p2;
reg   [3:0] i_fu_174;
wire   [3:0] add_ln36_fu_830_p2;
reg   [3:0] ap_sig_allocacmp_i_2;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] mul_ln43_fu_391_p0;
wire   [63:0] mul_ln43_fu_391_p1;
wire   [127:0] zext_ln43_fu_868_p1;
wire   [63:0] mul_ln50_fu_395_p0;
wire   [63:0] mul_ln50_fu_395_p1;
wire   [63:0] mul_ln50_1_fu_399_p0;
wire   [63:0] mul_ln50_1_fu_399_p1;
wire   [63:0] mul_ln50_2_fu_403_p0;
wire   [63:0] mul_ln50_2_fu_403_p1;
wire   [63:0] mul_ln50_3_fu_407_p0;
wire   [63:0] mul_ln50_3_fu_407_p1;
wire   [63:0] mul_ln50_4_fu_411_p0;
wire   [63:0] mul_ln50_4_fu_411_p1;
wire   [63:0] mul_ln50_5_fu_415_p0;
wire   [63:0] mul_ln50_5_fu_415_p1;
wire   [63:0] mul_ln50_6_fu_419_p0;
wire   [63:0] mul_ln50_6_fu_419_p1;
wire   [63:0] mul_ln50_7_fu_423_p0;
wire   [63:0] mul_ln50_7_fu_423_p1;
wire   [2:0] trunc_ln34_fu_490_p1;
wire   [2:0] tmp_1_fu_524_p9;
wire   [3:0] select_ln51_fu_568_p3;
wire   [3:0] zext_ln51_fu_576_p1;
wire   [3:0] sub_ln34_3_fu_580_p2;
wire   [3:0] zext_ln51_1_fu_616_p1;
wire   [3:0] sub_ln34_4_fu_620_p2;
wire   [3:0] zext_ln51_2_fu_656_p1;
wire   [3:0] sub_ln34_5_fu_660_p2;
wire   [1:0] tmp_11_fu_690_p4;
wire   [3:0] zext_ln51_3_fu_706_p1;
wire   [3:0] sub_ln34_fu_710_p2;
wire   [3:0] zext_ln51_4_fu_746_p1;
wire   [3:0] sub_ln34_1_fu_750_p2;
wire   [2:0] tmp_12_fu_780_p4;
wire   [3:0] zext_ln51_5_fu_796_p1;
wire   [3:0] tmp_8_fu_806_p10;
wire   [127:0] mul_ln43_fu_391_p2;
wire   [127:0] mul_ln50_fu_395_p2;
wire   [127:0] select_ln50_1_fu_890_p3;
wire   [127:0] and_ln50_fu_897_p2;
wire   [62:0] select_ln50_fu_909_p3;
wire   [63:0] shl_ln_fu_914_p3;
wire   [127:0] mul_ln50_1_fu_399_p2;
wire   [127:0] select_ln50_2_fu_927_p3;
wire   [127:0] and_ln50_1_fu_934_p2;
wire   [63:0] shl_ln50_1_fu_946_p3;
wire   [127:0] mul_ln50_2_fu_403_p2;
wire   [127:0] select_ln50_3_fu_958_p3;
wire   [127:0] and_ln50_2_fu_965_p2;
wire   [63:0] shl_ln50_2_fu_977_p3;
wire   [127:0] mul_ln50_3_fu_407_p2;
wire   [127:0] select_ln50_4_fu_989_p3;
wire   [127:0] and_ln50_3_fu_996_p2;
wire   [63:0] shl_ln50_3_fu_1008_p3;
wire   [127:0] mul_ln50_4_fu_411_p2;
wire   [127:0] select_ln50_5_fu_1020_p3;
wire   [127:0] and_ln50_4_fu_1027_p2;
wire   [63:0] shl_ln50_4_fu_1039_p3;
wire   [127:0] mul_ln50_5_fu_415_p2;
wire   [127:0] select_ln50_6_fu_1051_p3;
wire   [127:0] and_ln50_5_fu_1058_p2;
wire   [63:0] shl_ln50_5_fu_1070_p3;
wire   [127:0] mul_ln50_6_fu_419_p2;
wire   [127:0] select_ln50_7_fu_1082_p3;
wire   [127:0] and_ln50_6_fu_1089_p2;
wire   [63:0] shl_ln50_6_fu_1101_p3;
wire   [127:0] mul_ln50_7_fu_423_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [127:0] mul_ln43_fu_391_p00;
wire   [127:0] mul_ln50_1_fu_399_p00;
wire   [127:0] mul_ln50_2_fu_403_p00;
wire   [127:0] mul_ln50_3_fu_407_p00;
wire   [127:0] mul_ln50_4_fu_411_p00;
wire   [127:0] mul_ln50_5_fu_415_p00;
wire   [127:0] mul_ln50_6_fu_419_p00;
wire   [127:0] mul_ln50_7_fu_423_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U23(
    .din0(mul_ln43_fu_391_p0),
    .din1(mul_ln43_fu_391_p1),
    .dout(mul_ln43_fu_391_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U24(
    .din0(mul_ln50_fu_395_p0),
    .din1(mul_ln50_fu_395_p1),
    .dout(mul_ln50_fu_395_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U25(
    .din0(mul_ln50_1_fu_399_p0),
    .din1(mul_ln50_1_fu_399_p1),
    .dout(mul_ln50_1_fu_399_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U26(
    .din0(mul_ln50_2_fu_403_p0),
    .din1(mul_ln50_2_fu_403_p1),
    .dout(mul_ln50_2_fu_403_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U27(
    .din0(mul_ln50_3_fu_407_p0),
    .din1(mul_ln50_3_fu_407_p1),
    .dout(mul_ln50_3_fu_407_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U28(
    .din0(mul_ln50_4_fu_411_p0),
    .din1(mul_ln50_4_fu_411_p1),
    .dout(mul_ln50_4_fu_411_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U29(
    .din0(mul_ln50_5_fu_415_p0),
    .din1(mul_ln50_5_fu_415_p1),
    .dout(mul_ln50_5_fu_415_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U30(
    .din0(mul_ln50_6_fu_419_p0),
    .din1(mul_ln50_6_fu_419_p1),
    .dout(mul_ln50_6_fu_419_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U31(
    .din0(mul_ln50_7_fu_423_p0),
    .din1(mul_ln50_7_fu_423_p1),
    .dout(mul_ln50_7_fu_423_p2)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U32(
    .din0(64'd0),
    .din1(arg1_r_1_reload),
    .din2(arg1_r_2_reload),
    .din3(arg1_r_3_reload),
    .din4(arg1_r_4_reload),
    .din5(arg1_r_5_reload),
    .din6(arg1_r_6_reload),
    .din7(arg1_r_7_reload),
    .din8(arg1_r_8_reload),
    .din9(ap_sig_allocacmp_i_2),
    .dout(tmp_fu_500_p11)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U33(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(tmp_1_fu_524_p9),
    .dout(tmp_1_fu_524_p10)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U34(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(63'd0),
    .din5(63'd0),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_3_fu_580_p2),
    .dout(tmp_3_fu_586_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U35(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(63'd0),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_4_fu_620_p2),
    .dout(tmp_4_fu_626_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U36(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_5_fu_660_p2),
    .dout(tmp_5_fu_666_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U37(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(arg2_r_3_cast),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_fu_710_p2),
    .dout(tmp_6_fu_716_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U38(
    .din0(63'd0),
    .din1(63'd0),
    .din2(arg2_r_2_cast),
    .din3(arg2_r_3_cast),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_1_fu_750_p2),
    .dout(tmp_7_fu_756_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U39(
    .din0(63'd0),
    .din1(arg2_r_1_cast),
    .din2(arg2_r_2_cast),
    .din3(arg2_r_3_cast),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(tmp_8_fu_806_p10),
    .dout(tmp_8_fu_806_p11)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add3038_fu_138 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add3038_fu_138 <= add_ln43_fu_884_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_10_fu_150 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_10_fu_150 <= arr_17_fu_971_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_11_fu_154 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_11_fu_154 <= arr_18_fu_1002_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_12_fu_158 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_12_fu_158 <= arr_19_fu_1033_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_13_fu_162 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_13_fu_162 <= arr_20_fu_1064_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_14_fu_166 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_14_fu_166 <= arr_21_fu_1095_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_15_fu_170 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_15_fu_170 <= arr_22_fu_1113_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_8_fu_142 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_8_fu_142 <= arr_fu_903_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_9_fu_146 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            arr_9_fu_146 <= arr_16_fu_940_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln36_fu_484_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_174 <= add_ln36_fu_830_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_174 <= 4'd8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv45_cast_reg_1289[63 : 0] <= conv45_cast_fu_427_p1[63 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_484_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln50_1_reg_1327 <= icmp_ln50_1_fu_610_p2;
        icmp_ln50_2_reg_1337 <= icmp_ln50_2_fu_650_p2;
        icmp_ln50_3_reg_1347 <= icmp_ln50_3_fu_700_p2;
        icmp_ln50_4_reg_1357 <= icmp_ln50_4_fu_740_p2;
        icmp_ln50_5_reg_1367 <= icmp_ln50_5_fu_790_p2;
        icmp_ln50_reg_1317 <= icmp_ln50_fu_562_p2;
        tmp_10_reg_1312 <= ap_sig_allocacmp_i_2[32'd3];
        tmp_1_reg_1302 <= tmp_1_fu_524_p10;
        tmp_3_reg_1322 <= tmp_3_fu_586_p11;
        tmp_4_reg_1332 <= tmp_4_fu_626_p11;
        tmp_5_reg_1342 <= tmp_5_fu_666_p11;
        tmp_6_reg_1352 <= tmp_6_fu_716_p11;
        tmp_7_reg_1362 <= tmp_7_fu_756_p11;
        tmp_8_reg_1372 <= tmp_8_fu_806_p11;
        tmp_9_reg_1307 <= ap_sig_allocacmp_i_2[32'd3];
        tmp_reg_1297 <= tmp_fu_500_p11;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_484_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add3038_out_ap_vld = 1'b1;
    end else begin
        add3038_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_484_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add5539_out_ap_vld = 1'b1;
    end else begin
        add5539_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_484_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add55_140_out_ap_vld = 1'b1;
    end else begin
        add55_140_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_484_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add55_241_out_ap_vld = 1'b1;
    end else begin
        add55_241_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_484_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add55_342_out_ap_vld = 1'b1;
    end else begin
        add55_342_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_484_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add55_443_out_ap_vld = 1'b1;
    end else begin
        add55_443_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_484_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add55_544_out_ap_vld = 1'b1;
    end else begin
        add55_544_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_484_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add55_645_out_ap_vld = 1'b1;
    end else begin
        add55_645_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_484_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add55_746_out_ap_vld = 1'b1;
    end else begin
        add55_746_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_484_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 4'd8;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_174;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add3038_out = add3038_fu_138;

assign add5539_out = arr_8_fu_142;

assign add55_140_out = arr_9_fu_146;

assign add55_241_out = arr_10_fu_150;

assign add55_342_out = arr_11_fu_154;

assign add55_443_out = arr_12_fu_158;

assign add55_544_out = arr_13_fu_162;

assign add55_645_out = arr_14_fu_166;

assign add55_746_out = arr_15_fu_170;

assign add_ln36_fu_830_p2 = ($signed(ap_sig_allocacmp_i_2) + $signed(4'd15));

assign add_ln43_fu_884_p2 = (mul_ln43_fu_391_p2 + add3038_fu_138);

assign and_ln50_1_fu_934_p2 = (select_ln50_2_fu_927_p3 & mul_ln50_1_fu_399_p2);

assign and_ln50_2_fu_965_p2 = (select_ln50_3_fu_958_p3 & mul_ln50_2_fu_403_p2);

assign and_ln50_3_fu_996_p2 = (select_ln50_4_fu_989_p3 & mul_ln50_3_fu_407_p2);

assign and_ln50_4_fu_1027_p2 = (select_ln50_5_fu_1020_p3 & mul_ln50_4_fu_411_p2);

assign and_ln50_5_fu_1058_p2 = (select_ln50_6_fu_1051_p3 & mul_ln50_5_fu_415_p2);

assign and_ln50_6_fu_1089_p2 = (select_ln50_7_fu_1082_p3 & mul_ln50_6_fu_419_p2);

assign and_ln50_fu_897_p2 = (select_ln50_1_fu_890_p3 & mul_ln50_fu_395_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign arr_16_fu_940_p2 = (and_ln50_1_fu_934_p2 + arr_9_fu_146);

assign arr_17_fu_971_p2 = (and_ln50_2_fu_965_p2 + arr_10_fu_150);

assign arr_18_fu_1002_p2 = (and_ln50_3_fu_996_p2 + arr_11_fu_154);

assign arr_19_fu_1033_p2 = (and_ln50_4_fu_1027_p2 + arr_12_fu_158);

assign arr_20_fu_1064_p2 = (and_ln50_5_fu_1058_p2 + arr_13_fu_162);

assign arr_21_fu_1095_p2 = (and_ln50_6_fu_1089_p2 + arr_14_fu_166);

assign arr_22_fu_1113_p2 = (mul_ln50_7_fu_423_p2 + arr_15_fu_170);

assign arr_fu_903_p2 = (and_ln50_fu_897_p2 + arr_8_fu_142);

assign conv45_cast_fu_427_p1 = conv45;

assign icmp_ln36_fu_484_p2 = ((ap_sig_allocacmp_i_2 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_1_fu_610_p2 = ((ap_sig_allocacmp_i_2 > 4'd5) ? 1'b1 : 1'b0);

assign icmp_ln50_2_fu_650_p2 = ((ap_sig_allocacmp_i_2 > 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln50_3_fu_700_p2 = ((tmp_11_fu_690_p4 != 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_4_fu_740_p2 = ((ap_sig_allocacmp_i_2 > 4'd2) ? 1'b1 : 1'b0);

assign icmp_ln50_5_fu_790_p2 = ((tmp_12_fu_780_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_562_p2 = ((ap_sig_allocacmp_i_2 > 4'd6) ? 1'b1 : 1'b0);

assign mul_ln43_fu_391_p0 = mul_ln43_fu_391_p00;

assign mul_ln43_fu_391_p00 = tmp_1_reg_1302;

assign mul_ln43_fu_391_p1 = zext_ln43_fu_868_p1;

assign mul_ln50_1_fu_399_p0 = mul_ln50_1_fu_399_p00;

assign mul_ln50_1_fu_399_p00 = shl_ln_fu_914_p3;

assign mul_ln50_1_fu_399_p1 = zext_ln43_fu_868_p1;

assign mul_ln50_2_fu_403_p0 = mul_ln50_2_fu_403_p00;

assign mul_ln50_2_fu_403_p00 = shl_ln50_1_fu_946_p3;

assign mul_ln50_2_fu_403_p1 = zext_ln43_fu_868_p1;

assign mul_ln50_3_fu_407_p0 = mul_ln50_3_fu_407_p00;

assign mul_ln50_3_fu_407_p00 = shl_ln50_2_fu_977_p3;

assign mul_ln50_3_fu_407_p1 = zext_ln43_fu_868_p1;

assign mul_ln50_4_fu_411_p0 = mul_ln50_4_fu_411_p00;

assign mul_ln50_4_fu_411_p00 = shl_ln50_3_fu_1008_p3;

assign mul_ln50_4_fu_411_p1 = zext_ln43_fu_868_p1;

assign mul_ln50_5_fu_415_p0 = mul_ln50_5_fu_415_p00;

assign mul_ln50_5_fu_415_p00 = shl_ln50_4_fu_1039_p3;

assign mul_ln50_5_fu_415_p1 = zext_ln43_fu_868_p1;

assign mul_ln50_6_fu_419_p0 = mul_ln50_6_fu_419_p00;

assign mul_ln50_6_fu_419_p00 = shl_ln50_5_fu_1070_p3;

assign mul_ln50_6_fu_419_p1 = zext_ln43_fu_868_p1;

assign mul_ln50_7_fu_423_p0 = mul_ln50_7_fu_423_p00;

assign mul_ln50_7_fu_423_p00 = shl_ln50_6_fu_1101_p3;

assign mul_ln50_7_fu_423_p1 = zext_ln43_fu_868_p1;

assign mul_ln50_fu_395_p0 = zext_ln43_fu_868_p1;

assign mul_ln50_fu_395_p1 = conv45_cast_reg_1289;

assign select_ln50_1_fu_890_p3 = ((tmp_10_reg_1312[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln50_2_fu_927_p3 = ((icmp_ln50_reg_1317[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln50_3_fu_958_p3 = ((icmp_ln50_1_reg_1327[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln50_4_fu_989_p3 = ((icmp_ln50_2_reg_1337[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln50_5_fu_1020_p3 = ((icmp_ln50_3_reg_1347[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln50_6_fu_1051_p3 = ((icmp_ln50_4_reg_1357[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln50_7_fu_1082_p3 = ((icmp_ln50_5_reg_1367[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln50_fu_909_p3 = ((tmp_9_reg_1307[0:0] == 1'b1) ? arg2_r_7_cast : arg2_r_8_cast);

assign select_ln51_fu_568_p3 = ((tmp_10_fu_554_p3[0:0] == 1'b1) ? 4'd7 : 4'd8);

assign shl_ln50_1_fu_946_p3 = {{tmp_3_reg_1322}, {1'd0}};

assign shl_ln50_2_fu_977_p3 = {{tmp_4_reg_1332}, {1'd0}};

assign shl_ln50_3_fu_1008_p3 = {{tmp_5_reg_1342}, {1'd0}};

assign shl_ln50_4_fu_1039_p3 = {{tmp_6_reg_1352}, {1'd0}};

assign shl_ln50_5_fu_1070_p3 = {{tmp_7_reg_1362}, {1'd0}};

assign shl_ln50_6_fu_1101_p3 = {{tmp_8_reg_1372}, {1'd0}};

assign shl_ln_fu_914_p3 = {{select_ln50_fu_909_p3}, {1'd0}};

assign sub_ln34_1_fu_750_p2 = (sub_ln34_fu_710_p2 - zext_ln51_4_fu_746_p1);

assign sub_ln34_3_fu_580_p2 = (select_ln51_fu_568_p3 - zext_ln51_fu_576_p1);

assign sub_ln34_4_fu_620_p2 = (sub_ln34_3_fu_580_p2 - zext_ln51_1_fu_616_p1);

assign sub_ln34_5_fu_660_p2 = (sub_ln34_4_fu_620_p2 - zext_ln51_2_fu_656_p1);

assign sub_ln34_fu_710_p2 = (sub_ln34_5_fu_660_p2 - zext_ln51_3_fu_706_p1);

assign tmp_10_fu_554_p3 = ap_sig_allocacmp_i_2[32'd3];

assign tmp_11_fu_690_p4 = {{ap_sig_allocacmp_i_2[3:2]}};

assign tmp_12_fu_780_p4 = {{ap_sig_allocacmp_i_2[3:1]}};

assign tmp_1_fu_524_p9 = (3'd0 - trunc_ln34_fu_490_p1);

assign tmp_8_fu_806_p10 = (sub_ln34_1_fu_750_p2 - zext_ln51_5_fu_796_p1);

assign trunc_ln34_fu_490_p1 = ap_sig_allocacmp_i_2[2:0];

assign zext_ln43_fu_868_p1 = tmp_reg_1297;

assign zext_ln51_1_fu_616_p1 = icmp_ln50_1_fu_610_p2;

assign zext_ln51_2_fu_656_p1 = icmp_ln50_2_fu_650_p2;

assign zext_ln51_3_fu_706_p1 = icmp_ln50_3_fu_700_p2;

assign zext_ln51_4_fu_746_p1 = icmp_ln50_4_fu_740_p2;

assign zext_ln51_5_fu_796_p1 = icmp_ln50_5_fu_790_p2;

assign zext_ln51_fu_576_p1 = icmp_ln50_fu_562_p2;

always @ (posedge ap_clk) begin
    conv45_cast_reg_1289[127:64] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //test_test_Pipeline_VITIS_LOOP_36_1
