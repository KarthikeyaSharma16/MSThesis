// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_36_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arg1_r_1_reload,
        arg1_r_2_reload,
        arg1_r_3_reload,
        arg1_r_4_reload,
        arg1_r_5_reload,
        arg1_r_6_reload,
        arg1_r_7_reload,
        arg1_r_8_reload,
        arg2_r_reload,
        arg2_r_1_reload,
        arg2_r_2_reload,
        arg2_r_3_reload,
        arg2_r_4_reload,
        arg2_r_5_reload,
        arg2_r_6_reload,
        arg2_r_7_reload,
        conv45,
        arg2_r_7_cast,
        arg2_r_8_cast,
        arg2_r_6_cast,
        arg2_r_5_cast,
        arg2_r_4_cast,
        arg2_r_3_cast,
        arg2_r_2_cast,
        arg2_r_1_cast,
        add55_7189_out,
        add55_7189_out_ap_vld,
        add55_6188_out,
        add55_6188_out_ap_vld,
        add55_5187_out,
        add55_5187_out_ap_vld,
        add55_4186_out,
        add55_4186_out_ap_vld,
        add55_3185_out,
        add55_3185_out_ap_vld,
        add55_2184_out,
        add55_2184_out_ap_vld,
        add55_1183_out,
        add55_1183_out_ap_vld,
        add55182_out,
        add55182_out_ap_vld,
        add30181_out,
        add30181_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] arg1_r_1_reload;
input  [63:0] arg1_r_2_reload;
input  [63:0] arg1_r_3_reload;
input  [63:0] arg1_r_4_reload;
input  [63:0] arg1_r_5_reload;
input  [63:0] arg1_r_6_reload;
input  [63:0] arg1_r_7_reload;
input  [63:0] arg1_r_8_reload;
input  [63:0] arg2_r_reload;
input  [63:0] arg2_r_1_reload;
input  [63:0] arg2_r_2_reload;
input  [63:0] arg2_r_3_reload;
input  [63:0] arg2_r_4_reload;
input  [63:0] arg2_r_5_reload;
input  [63:0] arg2_r_6_reload;
input  [63:0] arg2_r_7_reload;
input  [63:0] conv45;
input  [62:0] arg2_r_7_cast;
input  [62:0] arg2_r_8_cast;
input  [62:0] arg2_r_6_cast;
input  [62:0] arg2_r_5_cast;
input  [62:0] arg2_r_4_cast;
input  [62:0] arg2_r_3_cast;
input  [62:0] arg2_r_2_cast;
input  [62:0] arg2_r_1_cast;
output  [127:0] add55_7189_out;
output   add55_7189_out_ap_vld;
output  [127:0] add55_6188_out;
output   add55_6188_out_ap_vld;
output  [127:0] add55_5187_out;
output   add55_5187_out_ap_vld;
output  [127:0] add55_4186_out;
output   add55_4186_out_ap_vld;
output  [127:0] add55_3185_out;
output   add55_3185_out_ap_vld;
output  [127:0] add55_2184_out;
output   add55_2184_out_ap_vld;
output  [127:0] add55_1183_out;
output   add55_1183_out_ap_vld;
output  [127:0] add55182_out;
output   add55182_out_ap_vld;
output  [127:0] add30181_out;
output   add30181_out_ap_vld;

reg ap_idle;
reg add55_7189_out_ap_vld;
reg add55_6188_out_ap_vld;
reg add55_5187_out_ap_vld;
reg add55_4186_out_ap_vld;
reg add55_3185_out_ap_vld;
reg add55_2184_out_ap_vld;
reg add55_1183_out_ap_vld;
reg add55182_out_ap_vld;
reg add30181_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln36_fu_485_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln36_reg_1303;
wire   [127:0] zext_ln43_fu_525_p1;
reg   [127:0] zext_ln43_reg_1307;
wire   [127:0] mul_ln43_fu_391_p2;
reg   [127:0] mul_ln43_reg_1316;
wire   [127:0] mul_ln50_fu_395_p2;
reg   [127:0] mul_ln50_reg_1321;
wire   [0:0] tmp_9_fu_568_p3;
reg   [0:0] tmp_9_reg_1326;
wire   [0:0] icmp_ln50_fu_597_p2;
reg   [0:0] icmp_ln50_reg_1331;
wire   [127:0] mul_ln50_1_fu_399_p2;
reg   [127:0] mul_ln50_1_reg_1336;
wire   [0:0] icmp_ln50_1_fu_658_p2;
reg   [0:0] icmp_ln50_1_reg_1341;
wire   [127:0] mul_ln50_2_fu_403_p2;
reg   [127:0] mul_ln50_2_reg_1346;
wire   [3:0] sub_ln34_4_fu_668_p2;
reg   [3:0] sub_ln34_4_reg_1351;
wire   [0:0] icmp_ln50_2_fu_674_p2;
reg   [0:0] icmp_ln50_2_reg_1356;
reg   [0:0] icmp_ln50_2_reg_1356_pp0_iter1_reg;
wire   [3:0] sub_ln34_5_fu_684_p2;
reg   [3:0] sub_ln34_5_reg_1361;
wire   [0:0] icmp_ln50_3_fu_700_p2;
reg   [0:0] icmp_ln50_3_reg_1366;
reg   [0:0] icmp_ln50_3_reg_1366_pp0_iter1_reg;
wire   [3:0] sub_ln34_fu_710_p2;
reg   [3:0] sub_ln34_reg_1371;
wire   [0:0] icmp_ln50_4_fu_716_p2;
reg   [0:0] icmp_ln50_4_reg_1377;
reg   [0:0] icmp_ln50_4_reg_1377_pp0_iter1_reg;
wire   [0:0] icmp_ln50_5_fu_732_p2;
reg   [0:0] icmp_ln50_5_reg_1383;
reg   [0:0] icmp_ln50_5_reg_1383_pp0_iter1_reg;
wire   [127:0] mul_ln50_3_fu_407_p2;
reg   [127:0] mul_ln50_3_reg_1389;
wire   [127:0] mul_ln50_4_fu_411_p2;
reg   [127:0] mul_ln50_4_reg_1394;
wire   [127:0] mul_ln50_5_fu_415_p2;
reg   [127:0] mul_ln50_5_reg_1399;
wire   [127:0] mul_ln50_6_fu_419_p2;
reg   [127:0] mul_ln50_6_reg_1404;
wire   [127:0] mul_ln50_7_fu_423_p2;
reg   [127:0] mul_ln50_7_reg_1409;
reg   [127:0] add30181_fu_138;
wire   [127:0] add_ln43_fu_761_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [127:0] add55182_fu_142;
wire   [127:0] add_ln50_fu_778_p2;
reg   [127:0] add55_1183_fu_146;
wire   [127:0] add_ln50_1_fu_796_p2;
reg   [127:0] add55_2184_fu_150;
wire   [127:0] add_ln50_2_fu_814_p2;
reg   [127:0] add55_3185_fu_154;
wire   [127:0] add_ln50_3_fu_1036_p2;
reg   [127:0] add55_4186_fu_158;
wire   [127:0] add_ln50_4_fu_1054_p2;
reg   [127:0] add55_5187_fu_162;
wire   [127:0] add_ln50_5_fu_1072_p2;
reg   [127:0] add55_6188_fu_166;
wire   [127:0] add_ln50_6_fu_1090_p2;
reg   [127:0] add55_7189_fu_170;
wire   [127:0] add_ln50_7_fu_1096_p2;
reg   [3:0] i_fu_174;
wire   [3:0] add_ln36_fu_738_p2;
reg   [3:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] mul_ln43_fu_391_p0;
wire   [63:0] mul_ln43_fu_391_p1;
wire   [63:0] mul_ln50_fu_395_p0;
wire   [63:0] mul_ln50_fu_395_p1;
wire   [63:0] mul_ln50_1_fu_399_p0;
wire   [63:0] mul_ln50_1_fu_399_p1;
wire   [63:0] mul_ln50_2_fu_403_p0;
wire   [63:0] mul_ln50_2_fu_403_p1;
wire   [63:0] mul_ln50_3_fu_407_p0;
wire   [63:0] mul_ln50_3_fu_407_p1;
wire   [63:0] mul_ln50_4_fu_411_p0;
wire   [63:0] mul_ln50_4_fu_411_p1;
wire   [63:0] mul_ln50_5_fu_415_p0;
wire   [63:0] mul_ln50_5_fu_415_p1;
wire   [63:0] mul_ln50_6_fu_419_p0;
wire   [63:0] mul_ln50_6_fu_419_p1;
wire   [63:0] mul_ln50_7_fu_423_p0;
wire   [63:0] mul_ln50_7_fu_423_p1;
wire   [2:0] trunc_ln34_fu_491_p1;
wire   [63:0] tmp_fu_501_p11;
wire   [2:0] tmp_1_fu_533_p9;
wire   [63:0] tmp_1_fu_533_p10;
wire   [0:0] tmp_2_fu_560_p3;
wire   [62:0] select_ln50_fu_576_p3;
wire   [63:0] shl_ln_fu_584_p3;
wire   [3:0] select_ln51_fu_603_p3;
wire   [3:0] zext_ln51_fu_611_p1;
wire   [3:0] sub_ln34_3_fu_615_p2;
wire   [62:0] tmp_3_fu_621_p11;
wire   [63:0] shl_ln50_1_fu_645_p3;
wire   [3:0] zext_ln51_1_fu_664_p1;
wire   [3:0] zext_ln51_2_fu_680_p1;
wire   [1:0] tmp_10_fu_690_p4;
wire   [3:0] zext_ln51_3_fu_706_p1;
wire   [2:0] tmp_11_fu_722_p4;
wire   [127:0] select_ln50_1_fu_766_p3;
wire   [127:0] and_ln50_fu_773_p2;
wire   [127:0] select_ln50_2_fu_784_p3;
wire   [127:0] and_ln50_1_fu_791_p2;
wire   [127:0] select_ln50_3_fu_802_p3;
wire   [127:0] and_ln50_2_fu_809_p2;
wire   [62:0] tmp_4_fu_820_p11;
wire   [63:0] shl_ln50_2_fu_839_p3;
wire   [62:0] tmp_5_fu_852_p11;
wire   [63:0] shl_ln50_3_fu_870_p3;
wire   [62:0] tmp_6_fu_883_p11;
wire   [63:0] shl_ln50_4_fu_900_p3;
wire   [3:0] zext_ln51_4_fu_913_p1;
wire   [3:0] sub_ln34_1_fu_916_p2;
wire   [62:0] tmp_7_fu_921_p11;
wire   [63:0] shl_ln50_5_fu_938_p3;
wire   [3:0] zext_ln51_5_fu_951_p1;
wire   [3:0] tmp_8_fu_960_p10;
wire   [62:0] tmp_8_fu_960_p11;
wire   [63:0] shl_ln50_6_fu_976_p3;
wire   [127:0] select_ln50_4_fu_1024_p3;
wire   [127:0] and_ln50_3_fu_1031_p2;
wire   [127:0] select_ln50_5_fu_1042_p3;
wire   [127:0] and_ln50_4_fu_1049_p2;
wire   [127:0] select_ln50_6_fu_1060_p3;
wire   [127:0] and_ln50_5_fu_1067_p2;
wire   [127:0] select_ln50_7_fu_1078_p3;
wire   [127:0] and_ln50_6_fu_1085_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [127:0] mul_ln43_fu_391_p00;
wire   [127:0] mul_ln50_1_fu_399_p00;
wire   [127:0] mul_ln50_2_fu_403_p00;
wire   [127:0] mul_ln50_3_fu_407_p00;
wire   [127:0] mul_ln50_4_fu_411_p00;
wire   [127:0] mul_ln50_5_fu_415_p00;
wire   [127:0] mul_ln50_6_fu_419_p00;
wire   [127:0] mul_ln50_7_fu_423_p00;
wire   [127:0] mul_ln50_fu_395_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U23(
    .din0(mul_ln43_fu_391_p0),
    .din1(mul_ln43_fu_391_p1),
    .dout(mul_ln43_fu_391_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U24(
    .din0(mul_ln50_fu_395_p0),
    .din1(mul_ln50_fu_395_p1),
    .dout(mul_ln50_fu_395_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U25(
    .din0(mul_ln50_1_fu_399_p0),
    .din1(mul_ln50_1_fu_399_p1),
    .dout(mul_ln50_1_fu_399_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U26(
    .din0(mul_ln50_2_fu_403_p0),
    .din1(mul_ln50_2_fu_403_p1),
    .dout(mul_ln50_2_fu_403_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U27(
    .din0(mul_ln50_3_fu_407_p0),
    .din1(mul_ln50_3_fu_407_p1),
    .dout(mul_ln50_3_fu_407_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U28(
    .din0(mul_ln50_4_fu_411_p0),
    .din1(mul_ln50_4_fu_411_p1),
    .dout(mul_ln50_4_fu_411_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U29(
    .din0(mul_ln50_5_fu_415_p0),
    .din1(mul_ln50_5_fu_415_p1),
    .dout(mul_ln50_5_fu_415_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U30(
    .din0(mul_ln50_6_fu_419_p0),
    .din1(mul_ln50_6_fu_419_p1),
    .dout(mul_ln50_6_fu_419_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U31(
    .din0(mul_ln50_7_fu_423_p0),
    .din1(mul_ln50_7_fu_423_p1),
    .dout(mul_ln50_7_fu_423_p2)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U32(
    .din0(64'd0),
    .din1(arg1_r_1_reload),
    .din2(arg1_r_2_reload),
    .din3(arg1_r_3_reload),
    .din4(arg1_r_4_reload),
    .din5(arg1_r_5_reload),
    .din6(arg1_r_6_reload),
    .din7(arg1_r_7_reload),
    .din8(arg1_r_8_reload),
    .din9(ap_sig_allocacmp_i_1),
    .dout(tmp_fu_501_p11)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U33(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(arg2_r_7_reload),
    .din8(tmp_1_fu_533_p9),
    .dout(tmp_1_fu_533_p10)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U34(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(63'd0),
    .din5(63'd0),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_3_fu_615_p2),
    .dout(tmp_3_fu_621_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U35(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(63'd0),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_4_reg_1351),
    .dout(tmp_4_fu_820_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U36(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(63'd0),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_5_reg_1361),
    .dout(tmp_5_fu_852_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U37(
    .din0(63'd0),
    .din1(63'd0),
    .din2(63'd0),
    .din3(arg2_r_3_cast),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_reg_1371),
    .dout(tmp_6_fu_883_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U38(
    .din0(63'd0),
    .din1(63'd0),
    .din2(arg2_r_2_cast),
    .din3(arg2_r_3_cast),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(sub_ln34_1_fu_916_p2),
    .dout(tmp_7_fu_921_p11)
);

test_mux_9_4_63_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 63 ),
    .din2_WIDTH( 63 ),
    .din3_WIDTH( 63 ),
    .din4_WIDTH( 63 ),
    .din5_WIDTH( 63 ),
    .din6_WIDTH( 63 ),
    .din7_WIDTH( 63 ),
    .din8_WIDTH( 63 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 63 ))
mux_9_4_63_1_1_U39(
    .din0(63'd0),
    .din1(arg2_r_1_cast),
    .din2(arg2_r_2_cast),
    .din3(arg2_r_3_cast),
    .din4(arg2_r_4_cast),
    .din5(arg2_r_5_cast),
    .din6(arg2_r_6_cast),
    .din7(arg2_r_7_cast),
    .din8(arg2_r_8_cast),
    .din9(tmp_8_fu_960_p10),
    .dout(tmp_8_fu_960_p11)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add30181_fu_138 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add30181_fu_138 <= add_ln43_fu_761_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add55182_fu_142 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add55182_fu_142 <= add_ln50_fu_778_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add55_1183_fu_146 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add55_1183_fu_146 <= add_ln50_1_fu_796_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add55_2184_fu_150 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add55_2184_fu_150 <= add_ln50_2_fu_814_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            add55_3185_fu_154 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add55_3185_fu_154 <= add_ln50_3_fu_1036_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            add55_4186_fu_158 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add55_4186_fu_158 <= add_ln50_4_fu_1054_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            add55_5187_fu_162 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add55_5187_fu_162 <= add_ln50_5_fu_1072_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            add55_6188_fu_166 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add55_6188_fu_166 <= add_ln50_6_fu_1090_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            add55_7189_fu_170 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            add55_7189_fu_170 <= add_ln50_7_fu_1096_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln36_fu_485_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_174 <= add_ln36_fu_738_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_174 <= 4'd8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln36_reg_1303 <= icmp_ln36_fu_485_p2;
        icmp_ln50_2_reg_1356_pp0_iter1_reg <= icmp_ln50_2_reg_1356;
        icmp_ln50_3_reg_1366_pp0_iter1_reg <= icmp_ln50_3_reg_1366;
        icmp_ln50_4_reg_1377_pp0_iter1_reg <= icmp_ln50_4_reg_1377;
        icmp_ln50_5_reg_1383_pp0_iter1_reg <= icmp_ln50_5_reg_1383;
        mul_ln50_3_reg_1389 <= mul_ln50_3_fu_407_p2;
        mul_ln50_4_reg_1394 <= mul_ln50_4_fu_411_p2;
        mul_ln50_5_reg_1399 <= mul_ln50_5_fu_415_p2;
        mul_ln50_6_reg_1404 <= mul_ln50_6_fu_419_p2;
        mul_ln50_7_reg_1409 <= mul_ln50_7_fu_423_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_485_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln50_1_reg_1341 <= icmp_ln50_1_fu_658_p2;
        icmp_ln50_2_reg_1356 <= icmp_ln50_2_fu_674_p2;
        icmp_ln50_3_reg_1366 <= icmp_ln50_3_fu_700_p2;
        icmp_ln50_4_reg_1377 <= icmp_ln50_4_fu_716_p2;
        icmp_ln50_5_reg_1383 <= icmp_ln50_5_fu_732_p2;
        icmp_ln50_reg_1331 <= icmp_ln50_fu_597_p2;
        mul_ln43_reg_1316 <= mul_ln43_fu_391_p2;
        mul_ln50_1_reg_1336 <= mul_ln50_1_fu_399_p2;
        mul_ln50_2_reg_1346 <= mul_ln50_2_fu_403_p2;
        mul_ln50_reg_1321 <= mul_ln50_fu_395_p2;
        sub_ln34_4_reg_1351 <= sub_ln34_4_fu_668_p2;
        sub_ln34_5_reg_1361 <= sub_ln34_5_fu_684_p2;
        sub_ln34_reg_1371 <= sub_ln34_fu_710_p2;
        tmp_9_reg_1326 <= ap_sig_allocacmp_i_1[32'd3];
        zext_ln43_reg_1307[63 : 0] <= zext_ln43_fu_525_p1[63 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1303 == 1'd1))) begin
        add30181_out_ap_vld = 1'b1;
    end else begin
        add30181_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1303 == 1'd1))) begin
        add55182_out_ap_vld = 1'b1;
    end else begin
        add55182_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1303 == 1'd1))) begin
        add55_1183_out_ap_vld = 1'b1;
    end else begin
        add55_1183_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1303 == 1'd1))) begin
        add55_2184_out_ap_vld = 1'b1;
    end else begin
        add55_2184_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1303 == 1'd1))) begin
        add55_3185_out_ap_vld = 1'b1;
    end else begin
        add55_3185_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1303 == 1'd1))) begin
        add55_4186_out_ap_vld = 1'b1;
    end else begin
        add55_4186_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1303 == 1'd1))) begin
        add55_5187_out_ap_vld = 1'b1;
    end else begin
        add55_5187_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1303 == 1'd1))) begin
        add55_6188_out_ap_vld = 1'b1;
    end else begin
        add55_6188_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_1303 == 1'd1))) begin
        add55_7189_out_ap_vld = 1'b1;
    end else begin
        add55_7189_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_485_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 4'd8;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_174;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add30181_out = add30181_fu_138;

assign add55182_out = add55182_fu_142;

assign add55_1183_out = add55_1183_fu_146;

assign add55_2184_out = add55_2184_fu_150;

assign add55_3185_out = add55_3185_fu_154;

assign add55_4186_out = add55_4186_fu_158;

assign add55_5187_out = add55_5187_fu_162;

assign add55_6188_out = add55_6188_fu_166;

assign add55_7189_out = add55_7189_fu_170;

assign add_ln36_fu_738_p2 = ($signed(ap_sig_allocacmp_i_1) + $signed(4'd15));

assign add_ln43_fu_761_p2 = (mul_ln43_reg_1316 + add30181_fu_138);

assign add_ln50_1_fu_796_p2 = (and_ln50_1_fu_791_p2 + add55_1183_fu_146);

assign add_ln50_2_fu_814_p2 = (and_ln50_2_fu_809_p2 + add55_2184_fu_150);

assign add_ln50_3_fu_1036_p2 = (and_ln50_3_fu_1031_p2 + add55_3185_fu_154);

assign add_ln50_4_fu_1054_p2 = (and_ln50_4_fu_1049_p2 + add55_4186_fu_158);

assign add_ln50_5_fu_1072_p2 = (and_ln50_5_fu_1067_p2 + add55_5187_fu_162);

assign add_ln50_6_fu_1090_p2 = (and_ln50_6_fu_1085_p2 + add55_6188_fu_166);

assign add_ln50_7_fu_1096_p2 = (mul_ln50_7_reg_1409 + add55_7189_fu_170);

assign add_ln50_fu_778_p2 = (and_ln50_fu_773_p2 + add55182_fu_142);

assign and_ln50_1_fu_791_p2 = (select_ln50_2_fu_784_p3 & mul_ln50_1_reg_1336);

assign and_ln50_2_fu_809_p2 = (select_ln50_3_fu_802_p3 & mul_ln50_2_reg_1346);

assign and_ln50_3_fu_1031_p2 = (select_ln50_4_fu_1024_p3 & mul_ln50_3_reg_1389);

assign and_ln50_4_fu_1049_p2 = (select_ln50_5_fu_1042_p3 & mul_ln50_4_reg_1394);

assign and_ln50_5_fu_1067_p2 = (select_ln50_6_fu_1060_p3 & mul_ln50_5_reg_1399);

assign and_ln50_6_fu_1085_p2 = (select_ln50_7_fu_1078_p3 & mul_ln50_6_reg_1404);

assign and_ln50_fu_773_p2 = (select_ln50_1_fu_766_p3 & mul_ln50_reg_1321);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln36_fu_485_p2 = ((ap_sig_allocacmp_i_1 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_1_fu_658_p2 = ((ap_sig_allocacmp_i_1 > 4'd5) ? 1'b1 : 1'b0);

assign icmp_ln50_2_fu_674_p2 = ((ap_sig_allocacmp_i_1 > 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln50_3_fu_700_p2 = ((tmp_10_fu_690_p4 != 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_4_fu_716_p2 = ((ap_sig_allocacmp_i_1 > 4'd2) ? 1'b1 : 1'b0);

assign icmp_ln50_5_fu_732_p2 = ((tmp_11_fu_722_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_597_p2 = ((ap_sig_allocacmp_i_1 > 4'd6) ? 1'b1 : 1'b0);

assign mul_ln43_fu_391_p0 = mul_ln43_fu_391_p00;

assign mul_ln43_fu_391_p00 = tmp_1_fu_533_p10;

assign mul_ln43_fu_391_p1 = zext_ln43_fu_525_p1;

assign mul_ln50_1_fu_399_p0 = mul_ln50_1_fu_399_p00;

assign mul_ln50_1_fu_399_p00 = shl_ln_fu_584_p3;

assign mul_ln50_1_fu_399_p1 = zext_ln43_fu_525_p1;

assign mul_ln50_2_fu_403_p0 = mul_ln50_2_fu_403_p00;

assign mul_ln50_2_fu_403_p00 = shl_ln50_1_fu_645_p3;

assign mul_ln50_2_fu_403_p1 = zext_ln43_fu_525_p1;

assign mul_ln50_3_fu_407_p0 = mul_ln50_3_fu_407_p00;

assign mul_ln50_3_fu_407_p00 = shl_ln50_2_fu_839_p3;

assign mul_ln50_3_fu_407_p1 = zext_ln43_reg_1307;

assign mul_ln50_4_fu_411_p0 = mul_ln50_4_fu_411_p00;

assign mul_ln50_4_fu_411_p00 = shl_ln50_3_fu_870_p3;

assign mul_ln50_4_fu_411_p1 = zext_ln43_reg_1307;

assign mul_ln50_5_fu_415_p0 = mul_ln50_5_fu_415_p00;

assign mul_ln50_5_fu_415_p00 = shl_ln50_4_fu_900_p3;

assign mul_ln50_5_fu_415_p1 = zext_ln43_reg_1307;

assign mul_ln50_6_fu_419_p0 = mul_ln50_6_fu_419_p00;

assign mul_ln50_6_fu_419_p00 = shl_ln50_5_fu_938_p3;

assign mul_ln50_6_fu_419_p1 = zext_ln43_reg_1307;

assign mul_ln50_7_fu_423_p0 = mul_ln50_7_fu_423_p00;

assign mul_ln50_7_fu_423_p00 = shl_ln50_6_fu_976_p3;

assign mul_ln50_7_fu_423_p1 = zext_ln43_reg_1307;

assign mul_ln50_fu_395_p0 = zext_ln43_fu_525_p1;

assign mul_ln50_fu_395_p1 = mul_ln50_fu_395_p10;

assign mul_ln50_fu_395_p10 = conv45;

assign select_ln50_1_fu_766_p3 = ((tmp_9_reg_1326[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln50_2_fu_784_p3 = ((icmp_ln50_reg_1331[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln50_3_fu_802_p3 = ((icmp_ln50_1_reg_1341[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln50_4_fu_1024_p3 = ((icmp_ln50_2_reg_1356_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln50_5_fu_1042_p3 = ((icmp_ln50_3_reg_1366_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln50_6_fu_1060_p3 = ((icmp_ln50_4_reg_1377_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln50_7_fu_1078_p3 = ((icmp_ln50_5_reg_1383_pp0_iter1_reg[0:0] == 1'b1) ? 128'd340282366920938463463374607431768211455 : 128'd0);

assign select_ln50_fu_576_p3 = ((tmp_2_fu_560_p3[0:0] == 1'b1) ? arg2_r_7_cast : arg2_r_8_cast);

assign select_ln51_fu_603_p3 = ((tmp_9_fu_568_p3[0:0] == 1'b1) ? 4'd7 : 4'd8);

assign shl_ln50_1_fu_645_p3 = {{tmp_3_fu_621_p11}, {1'd0}};

assign shl_ln50_2_fu_839_p3 = {{tmp_4_fu_820_p11}, {1'd0}};

assign shl_ln50_3_fu_870_p3 = {{tmp_5_fu_852_p11}, {1'd0}};

assign shl_ln50_4_fu_900_p3 = {{tmp_6_fu_883_p11}, {1'd0}};

assign shl_ln50_5_fu_938_p3 = {{tmp_7_fu_921_p11}, {1'd0}};

assign shl_ln50_6_fu_976_p3 = {{tmp_8_fu_960_p11}, {1'd0}};

assign shl_ln_fu_584_p3 = {{select_ln50_fu_576_p3}, {1'd0}};

assign sub_ln34_1_fu_916_p2 = (sub_ln34_reg_1371 - zext_ln51_4_fu_913_p1);

assign sub_ln34_3_fu_615_p2 = (select_ln51_fu_603_p3 - zext_ln51_fu_611_p1);

assign sub_ln34_4_fu_668_p2 = (sub_ln34_3_fu_615_p2 - zext_ln51_1_fu_664_p1);

assign sub_ln34_5_fu_684_p2 = (sub_ln34_4_fu_668_p2 - zext_ln51_2_fu_680_p1);

assign sub_ln34_fu_710_p2 = (sub_ln34_5_fu_684_p2 - zext_ln51_3_fu_706_p1);

assign tmp_10_fu_690_p4 = {{ap_sig_allocacmp_i_1[3:2]}};

assign tmp_11_fu_722_p4 = {{ap_sig_allocacmp_i_1[3:1]}};

assign tmp_1_fu_533_p9 = (3'd0 - trunc_ln34_fu_491_p1);

assign tmp_2_fu_560_p3 = ap_sig_allocacmp_i_1[32'd3];

assign tmp_8_fu_960_p10 = (sub_ln34_1_fu_916_p2 - zext_ln51_5_fu_951_p1);

assign tmp_9_fu_568_p3 = ap_sig_allocacmp_i_1[32'd3];

assign trunc_ln34_fu_491_p1 = ap_sig_allocacmp_i_1[2:0];

assign zext_ln43_fu_525_p1 = tmp_fu_501_p11;

assign zext_ln51_1_fu_664_p1 = icmp_ln50_1_fu_658_p2;

assign zext_ln51_2_fu_680_p1 = icmp_ln50_2_fu_674_p2;

assign zext_ln51_3_fu_706_p1 = icmp_ln50_3_fu_700_p2;

assign zext_ln51_4_fu_913_p1 = icmp_ln50_4_reg_1377;

assign zext_ln51_5_fu_951_p1 = icmp_ln50_5_reg_1383;

assign zext_ln51_fu_611_p1 = icmp_ln50_fu_597_p2;

always @ (posedge ap_clk) begin
    zext_ln43_reg_1307[127:64] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //test_test_Pipeline_VITIS_LOOP_36_1
