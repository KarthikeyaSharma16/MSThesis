

================================================================
== Vitis HLS Report for 'test_Pipeline_VITIS_LOOP_60_5'
================================================================
* Date:           Thu May  9 21:45:36 2024

* Version:        2023.1.1 (Build 3869133 on Jun 15 2023)
* Project:        D2
* Solution:       comb_2 (Vivado IP Flow Target)
* Product family: zynquplus
* Target device:  xczu9eg-ffvb1156-2-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  5.952 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+-----------+-----------+-----+-----+---------+
    |  Latency (cycles) |   Latency (absolute)  |  Interval | Pipeline|
    |   min   |   max   |    min    |    max    | min | max |   Type  |
    +---------+---------+-----------+-----------+-----+-----+---------+
    |        5|        5|  50.000 ns|  50.000 ns|    5|    5|       no|
    +---------+---------+-----------+-----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- VITIS_LOOP_60_5  |        3|        3|         2|          1|          1|     3|       yes|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 2


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 2
* Pipeline : 1
  Pipeline-0 : II = 1, D = 2, States = { 1 2 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 5.87>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%add122_2409 = alloca i32 1"   --->   Operation 5 'alloca' 'add122_2409' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%i = alloca i32 1"   --->   Operation 6 'alloca' 'i' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%arg2_r_8_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_8_reload"   --->   Operation 7 'read' 'arg2_r_8_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%arg1_r_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_reload"   --->   Operation 8 'read' 'arg1_r_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%arg2_r_7_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_7_reload"   --->   Operation 9 'read' 'arg2_r_7_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%arg1_r_1_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_1_reload"   --->   Operation 10 'read' 'arg1_r_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%arg2_r_6_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_6_reload"   --->   Operation 11 'read' 'arg2_r_6_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%arg2_r_5_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_5_reload"   --->   Operation 12 'read' 'arg2_r_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%arg2_r_4_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_4_reload"   --->   Operation 13 'read' 'arg2_r_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%arg2_r_3_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_3_reload"   --->   Operation 14 'read' 'arg2_r_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%arg2_r_2_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_2_reload"   --->   Operation 15 'read' 'arg2_r_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%arg2_r_1_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_1_reload"   --->   Operation 16 'read' 'arg2_r_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%arg2_r_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg2_r_reload"   --->   Operation 17 'read' 'arg2_r_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%arg1_r_8_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_8_reload"   --->   Operation 18 'read' 'arg1_r_8_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%arg1_r_7_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_7_reload"   --->   Operation 19 'read' 'arg1_r_7_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%arg1_r_6_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_6_reload"   --->   Operation 20 'read' 'arg1_r_6_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%arg1_r_5_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_5_reload"   --->   Operation 21 'read' 'arg1_r_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%arg1_r_4_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_4_reload"   --->   Operation 22 'read' 'arg1_r_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%arg1_r_3_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_3_reload"   --->   Operation 23 'read' 'arg1_r_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%arg1_r_2_reload_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %arg1_r_2_reload"   --->   Operation 24 'read' 'arg1_r_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.42ns)   --->   "%store_ln0 = store i4 0, i4 %i"   --->   Operation 25 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 26 [1/1] (0.42ns)   --->   "%store_ln0 = store i128 0, i128 %add122_2409"   --->   Operation 26 'store' 'store_ln0' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.inc123"   --->   Operation 27 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%i_1 = load i4 %i" [d2.cpp:60]   --->   Operation 28 'load' 'i_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.79ns)   --->   "%icmp_ln60 = icmp_ult  i4 %i_1, i4 9" [d2.cpp:60]   --->   Operation 29 'icmp' 'icmp_ln60' <Predicate = true> <Delay = 0.79> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%br_ln60 = br i1 %icmp_ln60, void %for.end128.exitStub, void %for.inc123.split" [d2.cpp:60]   --->   Operation 30 'br' 'br_ln60' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%trunc_ln60 = trunc i4 %i_1" [d2.cpp:60]   --->   Operation 31 'trunc' 'trunc_ln60' <Predicate = (icmp_ln60)> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.79ns)   --->   "%sub_ln66 = sub i4 8, i4 %i_1" [d2.cpp:66]   --->   Operation 32 'sub' 'sub_ln66' <Predicate = (icmp_ln60)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 33 [1/1] (0.77ns)   --->   "%tmp = mux i64 @_ssdm_op_Mux.ap_auto.9i64.i4, i64 0, i64 0, i64 %arg1_r_2_reload_read, i64 %arg1_r_3_reload_read, i64 %arg1_r_4_reload_read, i64 %arg1_r_5_reload_read, i64 %arg1_r_6_reload_read, i64 %arg1_r_7_reload_read, i64 %arg1_r_8_reload_read, i4 %sub_ln66" [d2.cpp:66]   --->   Operation 33 'mux' 'tmp' <Predicate = (icmp_ln60)> <Delay = 0.77> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 34 [1/1] (0.67ns)   --->   "%tmp_1 = mux i64 @_ssdm_op_Mux.ap_auto.7i64.i3, i64 %arg2_r_reload_read, i64 %arg2_r_1_reload_read, i64 %arg2_r_2_reload_read, i64 %arg2_r_3_reload_read, i64 %arg2_r_4_reload_read, i64 %arg2_r_5_reload_read, i64 %arg2_r_6_reload_read, i3 %trunc_ln60" [d2.cpp:66]   --->   Operation 34 'mux' 'tmp_1' <Predicate = (icmp_ln60)> <Delay = 0.67> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 35 [1/1] (0.12ns)   --->   "%xor_ln66 = xor i3 %trunc_ln60, i3 7" [d2.cpp:66]   --->   Operation 35 'xor' 'xor_ln66' <Predicate = (icmp_ln60)> <Delay = 0.12> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.12> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 36 [1/1] (0.72ns)   --->   "%tmp_2 = mux i64 @_ssdm_op_Mux.ap_auto.8i64.i3, i64 0, i64 %arg1_r_1_reload_read, i64 %arg1_r_2_reload_read, i64 %arg1_r_3_reload_read, i64 %arg1_r_4_reload_read, i64 %arg1_r_5_reload_read, i64 %arg1_r_6_reload_read, i64 %arg1_r_7_reload_read, i3 %xor_ln66" [d2.cpp:66]   --->   Operation 36 'mux' 'tmp_2' <Predicate = (icmp_ln60)> <Delay = 0.72> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.72> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%zext_ln66_2 = zext i64 %tmp_2" [d2.cpp:66]   --->   Operation 37 'zext' 'zext_ln66_2' <Predicate = (icmp_ln60)> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.67ns)   --->   "%tmp_3 = mux i64 @_ssdm_op_Mux.ap_auto.7i64.i3, i64 %arg2_r_1_reload_read, i64 %arg2_r_2_reload_read, i64 %arg2_r_3_reload_read, i64 %arg2_r_4_reload_read, i64 %arg2_r_5_reload_read, i64 %arg2_r_6_reload_read, i64 %arg2_r_7_reload_read, i3 %trunc_ln60" [d2.cpp:66]   --->   Operation 38 'mux' 'tmp_3' <Predicate = (icmp_ln60)> <Delay = 0.67> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "%zext_ln66_3 = zext i64 %tmp_3" [d2.cpp:66]   --->   Operation 39 'zext' 'zext_ln66_3' <Predicate = (icmp_ln60)> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.67ns)   --->   "%sub_ln66_1 = sub i3 6, i3 %trunc_ln60" [d2.cpp:66]   --->   Operation 40 'sub' 'sub_ln66_1' <Predicate = (icmp_ln60)> <Delay = 0.67> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 41 [1/1] (0.67ns)   --->   "%tmp_4 = mux i64 @_ssdm_op_Mux.ap_auto.7i64.i3, i64 %arg1_r_reload_read, i64 %arg1_r_1_reload_read, i64 %arg1_r_2_reload_read, i64 %arg1_r_3_reload_read, i64 %arg1_r_4_reload_read, i64 %arg1_r_5_reload_read, i64 %arg1_r_6_reload_read, i3 %sub_ln66_1" [d2.cpp:66]   --->   Operation 41 'mux' 'tmp_4' <Predicate = (icmp_ln60)> <Delay = 0.67> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 42 [1/1] (0.00ns)   --->   "%zext_ln66_4 = zext i64 %tmp_4" [d2.cpp:66]   --->   Operation 42 'zext' 'zext_ln66_4' <Predicate = (icmp_ln60)> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (0.67ns)   --->   "%tmp_5 = mux i64 @_ssdm_op_Mux.ap_auto.7i64.i3, i64 %arg2_r_2_reload_read, i64 %arg2_r_3_reload_read, i64 %arg2_r_4_reload_read, i64 %arg2_r_5_reload_read, i64 %arg2_r_6_reload_read, i64 %arg2_r_7_reload_read, i64 %arg2_r_8_reload_read, i3 %trunc_ln60" [d2.cpp:66]   --->   Operation 43 'mux' 'tmp_5' <Predicate = (icmp_ln60)> <Delay = 0.67> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.67> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 44 [1/1] (0.00ns)   --->   "%zext_ln66_5 = zext i64 %tmp_5" [d2.cpp:66]   --->   Operation 44 'zext' 'zext_ln66_5' <Predicate = (icmp_ln60)> <Delay = 0.00>
ST_1 : [1/1] (1.25ns)   --->   Input mux for Operation 45 '%mul_ln66 = mul i128 %zext_ln66_5, i128 %zext_ln66_4'
ST_1 : Operation 45 [1/1] (3.27ns)   --->   "%mul_ln66 = mul i128 %zext_ln66_5, i128 %zext_ln66_4" [d2.cpp:66]   --->   Operation 45 'mul' 'mul_ln66' <Predicate = (icmp_ln60)> <Delay = 3.27> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_1 : [1/1] (1.25ns)   --->   Input mux for Operation 46 '%mul_ln66_2 = mul i128 %zext_ln66_3, i128 %zext_ln66_2'
ST_1 : Operation 46 [1/1] (3.27ns)   --->   "%mul_ln66_2 = mul i128 %zext_ln66_3, i128 %zext_ln66_2" [d2.cpp:66]   --->   Operation 46 'mul' 'mul_ln66_2' <Predicate = (icmp_ln60)> <Delay = 3.27> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 47 [1/1] (0.79ns)   --->   "%add_ln60 = add i4 %i_1, i4 3" [d2.cpp:60]   --->   Operation 47 'add' 'add_ln60' <Predicate = (icmp_ln60)> <Delay = 0.79> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.79> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 48 [1/1] (0.42ns)   --->   "%store_ln60 = store i4 %add_ln60, i4 %i" [d2.cpp:60]   --->   Operation 48 'store' 'store_ln60' <Predicate = (icmp_ln60)> <Delay = 0.42>
ST_1 : Operation 61 [1/1] (0.00ns)   --->   "%add122_2409_load_1 = load i128 %add122_2409"   --->   Operation 61 'load' 'add122_2409_load_1' <Predicate = (!icmp_ln60)> <Delay = 0.00>
ST_1 : Operation 62 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i128P0A, i128 %add122_2409_out, i128 %add122_2409_load_1"   --->   Operation 62 'write' 'write_ln0' <Predicate = (!icmp_ln60)> <Delay = 0.00>
ST_1 : Operation 63 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 63 'ret' 'ret_ln0' <Predicate = (!icmp_ln60)> <Delay = 0.00>

State 2 <SV = 1> <Delay = 5.95>
ST_2 : Operation 49 [1/1] (0.00ns)   --->   "%add122_2409_load = load i128 %add122_2409" [d2.cpp:66]   --->   Operation 49 'load' 'add122_2409_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 50 [1/1] (0.00ns)   --->   "%specpipeline_ln62 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty_14" [d2.cpp:62]   --->   Operation 50 'specpipeline' 'specpipeline_ln62' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 51 [1/1] (0.00ns)   --->   "%speclooptripcount_ln60 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 3, i64 3, i64 3" [d2.cpp:60]   --->   Operation 51 'speclooptripcount' 'speclooptripcount_ln60' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 52 [1/1] (0.00ns)   --->   "%specloopname_ln60 = specloopname void @_ssdm_op_SpecLoopName, void @empty_11" [d2.cpp:60]   --->   Operation 52 'specloopname' 'specloopname_ln60' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 53 [1/1] (0.00ns)   --->   "%zext_ln66 = zext i64 %tmp" [d2.cpp:66]   --->   Operation 53 'zext' 'zext_ln66' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 54 [1/1] (0.00ns)   --->   "%zext_ln66_1 = zext i64 %tmp_1" [d2.cpp:66]   --->   Operation 54 'zext' 'zext_ln66_1' <Predicate = true> <Delay = 0.00>
ST_2 : [1/1] (1.25ns)   --->   Input mux for Operation 55 '%mul_ln66_1 = mul i128 %zext_ln66_1, i128 %zext_ln66'
ST_2 : Operation 55 [1/1] (3.27ns)   --->   "%mul_ln66_1 = mul i128 %zext_ln66_1, i128 %zext_ln66" [d2.cpp:66]   --->   Operation 55 'mul' 'mul_ln66_1' <Predicate = true> <Delay = 3.27> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 4.53> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 56 [1/1] (1.57ns)   --->   "%add_ln66 = add i128 %mul_ln66_2, i128 %mul_ln66" [d2.cpp:66]   --->   Operation 56 'add' 'add_ln66' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 57 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln66_1 = add i128 %add_ln66, i128 %mul_ln66_1" [d2.cpp:66]   --->   Operation 57 'add' 'add_ln66_1' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.49> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 58 [1/1] (0.99ns) (root node of TernaryAdder)   --->   "%add_ln66_2 = add i128 %add122_2409_load, i128 %add_ln66_1" [d2.cpp:66]   --->   Operation 58 'add' 'add_ln66_2' <Predicate = true> <Delay = 0.99> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.49> <IPBlock> <Opcode : '<invalid operator> ' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 59 [1/1] (0.42ns)   --->   "%store_ln60 = store i128 %add_ln66_2, i128 %add122_2409" [d2.cpp:60]   --->   Operation 59 'store' 'store_ln60' <Predicate = true> <Delay = 0.42>
ST_2 : Operation 60 [1/1] (0.00ns)   --->   "%br_ln60 = br void %for.inc123" [d2.cpp:60]   --->   Operation 60 'br' 'br_ln60' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 5.875ns
The critical path consists of the following:
	'alloca' operation ('i') [21]  (0.000 ns)
	'load' operation ('i', d2.cpp:60) on local variable 'i' [44]  (0.000 ns)
	'sub' operation ('sub_ln66_1', d2.cpp:66) [63]  (0.673 ns)
	'mux' operation ('tmp_4', d2.cpp:66) [64]  (0.672 ns)
	multiplexor before operation 'mul' with delay (1.253 ns)
'mul' operation ('mul_ln66', d2.cpp:66) [68]  (3.277 ns)

 <State 2>: 5.952ns
The critical path consists of the following:
	multiplexor before operation 'mul' with delay (1.253 ns)
'mul' operation ('mul_ln66_1', d2.cpp:66) [69]  (3.277 ns)
	'add' operation ('add_ln66_1', d2.cpp:66) [72]  (0.000 ns)
	'add' operation ('add_ln66_2', d2.cpp:66) [73]  (0.995 ns)
	'store' operation ('store_ln60', d2.cpp:60) of variable 'add_ln66_2', d2.cpp:66 on local variable 'add122_2409' [76]  (0.427 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
