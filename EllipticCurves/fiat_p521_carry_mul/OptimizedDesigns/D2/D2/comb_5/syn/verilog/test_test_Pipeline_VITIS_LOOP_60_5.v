// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module test_test_Pipeline_VITIS_LOOP_60_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arg1_r_2_reload,
        arg1_r_3_reload,
        arg1_r_4_reload,
        arg1_r_5_reload,
        arg1_r_6_reload,
        arg1_r_7_reload,
        arg1_r_8_reload,
        arg2_r_reload,
        arg2_r_1_reload,
        arg2_r_2_reload,
        arg2_r_3_reload,
        arg2_r_4_reload,
        arg2_r_5_reload,
        arg2_r_6_reload,
        arg1_r_1_reload,
        arg2_r_7_reload,
        arg1_r_reload,
        arg2_r_8_reload,
        add122_2243_out,
        add122_2243_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] arg1_r_2_reload;
input  [63:0] arg1_r_3_reload;
input  [63:0] arg1_r_4_reload;
input  [63:0] arg1_r_5_reload;
input  [63:0] arg1_r_6_reload;
input  [63:0] arg1_r_7_reload;
input  [63:0] arg1_r_8_reload;
input  [63:0] arg2_r_reload;
input  [63:0] arg2_r_1_reload;
input  [63:0] arg2_r_2_reload;
input  [63:0] arg2_r_3_reload;
input  [63:0] arg2_r_4_reload;
input  [63:0] arg2_r_5_reload;
input  [63:0] arg2_r_6_reload;
input  [63:0] arg1_r_1_reload;
input  [63:0] arg2_r_7_reload;
input  [63:0] arg1_r_reload;
input  [63:0] arg2_r_8_reload;
output  [127:0] add122_2243_out;
output   add122_2243_out_ap_vld;

reg ap_idle;
reg add122_2243_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln60_fu_228_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] tmp_fu_244_p11;
reg   [63:0] tmp_reg_467;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] tmp_1_fu_268_p9;
reg   [63:0] tmp_1_reg_472;
wire   [127:0] mul_ln66_fu_203_p2;
reg   [127:0] mul_ln66_reg_477;
wire   [127:0] mul_ln66_2_fu_207_p2;
reg   [127:0] mul_ln66_2_reg_482;
reg   [127:0] add122_2243_fu_80;
wire   [127:0] add_ln66_2_fu_434_p2;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [3:0] i_fu_84;
wire   [3:0] add_ln60_fu_402_p2;
reg   [3:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] mul_ln66_fu_203_p0;
wire   [63:0] mul_ln66_fu_203_p1;
wire   [63:0] mul_ln66_2_fu_207_p0;
wire   [63:0] mul_ln66_2_fu_207_p1;
wire   [63:0] mul_ln66_1_fu_211_p0;
wire   [63:0] mul_ln66_1_fu_211_p1;
wire   [3:0] tmp_fu_244_p10;
wire   [2:0] trunc_ln60_fu_234_p1;
wire   [2:0] tmp_2_fu_294_p9;
wire   [63:0] tmp_2_fu_294_p10;
wire   [63:0] tmp_3_fu_321_p9;
wire   [2:0] tmp_4_fu_352_p8;
wire   [63:0] tmp_4_fu_352_p9;
wire   [63:0] tmp_5_fu_377_p9;
wire   [127:0] add_ln66_fu_424_p2;
wire   [127:0] mul_ln66_1_fu_211_p2;
wire   [127:0] add_ln66_1_fu_428_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [127:0] mul_ln66_1_fu_211_p00;
wire   [127:0] mul_ln66_1_fu_211_p10;
wire   [127:0] mul_ln66_2_fu_207_p00;
wire   [127:0] mul_ln66_2_fu_207_p10;
wire   [127:0] mul_ln66_fu_203_p00;
wire   [127:0] mul_ln66_fu_203_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U39(
    .din0(mul_ln66_fu_203_p0),
    .din1(mul_ln66_fu_203_p1),
    .dout(mul_ln66_fu_203_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U40(
    .din0(mul_ln66_2_fu_207_p0),
    .din1(mul_ln66_2_fu_207_p1),
    .dout(mul_ln66_2_fu_207_p2)
);

test_mul_64ns_64ns_128_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 128 ))
mul_64ns_64ns_128_1_1_U41(
    .din0(mul_ln66_1_fu_211_p0),
    .din1(mul_ln66_1_fu_211_p1),
    .dout(mul_ln66_1_fu_211_p2)
);

test_mux_9_4_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 64 ))
mux_9_4_64_1_1_U42(
    .din0(64'd0),
    .din1(64'd0),
    .din2(arg1_r_2_reload),
    .din3(arg1_r_3_reload),
    .din4(arg1_r_4_reload),
    .din5(arg1_r_5_reload),
    .din6(arg1_r_6_reload),
    .din7(arg1_r_7_reload),
    .din8(arg1_r_8_reload),
    .din9(tmp_fu_244_p10),
    .dout(tmp_fu_244_p11)
);

test_mux_7_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_7_3_64_1_1_U43(
    .din0(arg2_r_reload),
    .din1(arg2_r_1_reload),
    .din2(arg2_r_2_reload),
    .din3(arg2_r_3_reload),
    .din4(arg2_r_4_reload),
    .din5(arg2_r_5_reload),
    .din6(arg2_r_6_reload),
    .din7(trunc_ln60_fu_234_p1),
    .dout(tmp_1_fu_268_p9)
);

test_mux_8_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_8_3_64_1_1_U44(
    .din0(64'd0),
    .din1(arg1_r_1_reload),
    .din2(arg1_r_2_reload),
    .din3(arg1_r_3_reload),
    .din4(arg1_r_4_reload),
    .din5(arg1_r_5_reload),
    .din6(arg1_r_6_reload),
    .din7(arg1_r_7_reload),
    .din8(tmp_2_fu_294_p9),
    .dout(tmp_2_fu_294_p10)
);

test_mux_7_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_7_3_64_1_1_U45(
    .din0(arg2_r_1_reload),
    .din1(arg2_r_2_reload),
    .din2(arg2_r_3_reload),
    .din3(arg2_r_4_reload),
    .din4(arg2_r_5_reload),
    .din5(arg2_r_6_reload),
    .din6(arg2_r_7_reload),
    .din7(trunc_ln60_fu_234_p1),
    .dout(tmp_3_fu_321_p9)
);

test_mux_7_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_7_3_64_1_1_U46(
    .din0(arg1_r_reload),
    .din1(arg1_r_1_reload),
    .din2(arg1_r_2_reload),
    .din3(arg1_r_3_reload),
    .din4(arg1_r_4_reload),
    .din5(arg1_r_5_reload),
    .din6(arg1_r_6_reload),
    .din7(tmp_4_fu_352_p8),
    .dout(tmp_4_fu_352_p9)
);

test_mux_7_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
mux_7_3_64_1_1_U47(
    .din0(arg2_r_2_reload),
    .din1(arg2_r_3_reload),
    .din2(arg2_r_4_reload),
    .din3(arg2_r_5_reload),
    .din4(arg2_r_6_reload),
    .din5(arg2_r_7_reload),
    .din6(arg2_r_8_reload),
    .din7(trunc_ln60_fu_234_p1),
    .dout(tmp_5_fu_377_p9)
);

test_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            add122_2243_fu_80 <= 128'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            add122_2243_fu_80 <= add_ln66_2_fu_434_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln60_fu_228_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_84 <= add_ln60_fu_402_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_84 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_228_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln66_2_reg_482 <= mul_ln66_2_fu_207_p2;
        mul_ln66_reg_477 <= mul_ln66_fu_203_p2;
        tmp_1_reg_472 <= tmp_1_fu_268_p9;
        tmp_reg_467 <= tmp_fu_244_p11;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_228_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add122_2243_out_ap_vld = 1'b1;
    end else begin
        add122_2243_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_228_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_84;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add122_2243_out = add122_2243_fu_80;

assign add_ln60_fu_402_p2 = (ap_sig_allocacmp_i_1 + 4'd3);

assign add_ln66_1_fu_428_p2 = (add_ln66_fu_424_p2 + mul_ln66_1_fu_211_p2);

assign add_ln66_2_fu_434_p2 = (add122_2243_fu_80 + add_ln66_1_fu_428_p2);

assign add_ln66_fu_424_p2 = (mul_ln66_2_reg_482 + mul_ln66_reg_477);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln60_fu_228_p2 = ((ap_sig_allocacmp_i_1 < 4'd9) ? 1'b1 : 1'b0);

assign mul_ln66_1_fu_211_p0 = mul_ln66_1_fu_211_p00;

assign mul_ln66_1_fu_211_p00 = tmp_1_reg_472;

assign mul_ln66_1_fu_211_p1 = mul_ln66_1_fu_211_p10;

assign mul_ln66_1_fu_211_p10 = tmp_reg_467;

assign mul_ln66_2_fu_207_p0 = mul_ln66_2_fu_207_p00;

assign mul_ln66_2_fu_207_p00 = tmp_3_fu_321_p9;

assign mul_ln66_2_fu_207_p1 = mul_ln66_2_fu_207_p10;

assign mul_ln66_2_fu_207_p10 = tmp_2_fu_294_p10;

assign mul_ln66_fu_203_p0 = mul_ln66_fu_203_p00;

assign mul_ln66_fu_203_p00 = tmp_5_fu_377_p9;

assign mul_ln66_fu_203_p1 = mul_ln66_fu_203_p10;

assign mul_ln66_fu_203_p10 = tmp_4_fu_352_p9;

assign tmp_2_fu_294_p9 = (trunc_ln60_fu_234_p1 ^ 3'd7);

assign tmp_4_fu_352_p8 = ($signed(3'd6) - $signed(trunc_ln60_fu_234_p1));

assign tmp_fu_244_p10 = ($signed(4'd8) - $signed(ap_sig_allocacmp_i_1));

assign trunc_ln60_fu_234_p1 = ap_sig_allocacmp_i_1[2:0];

endmodule //test_test_Pipeline_VITIS_LOOP_60_5
